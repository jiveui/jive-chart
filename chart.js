(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime_app_Application();
	app.create(ApplicationMain.config);
	openfl_Lib.application = app;
	var stage = new openfl_display_Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl_Lib.current);
	app.addModule(stage);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/Lato-Bold.eot");
	types.push("BINARY");
	urls.push("assets/Lato-Bold.svg");
	types.push("TEXT");
	urls.push("Lato Bold");
	types.push("FONT");
	urls.push("assets/Lato-Bold.woff");
	types.push("BINARY");
	urls.push("assets/Lato-BoldItalic.eot");
	types.push("BINARY");
	urls.push("assets/Lato-BoldItalic.svg");
	types.push("TEXT");
	urls.push("Lato Bold Italic");
	types.push("FONT");
	urls.push("assets/Lato-BoldItalic.woff");
	types.push("BINARY");
	urls.push("assets/Lato-Italic.eot");
	types.push("BINARY");
	urls.push("assets/Lato-Italic.svg");
	types.push("TEXT");
	urls.push("Lato Italic");
	types.push("FONT");
	urls.push("assets/Lato-Italic.woff");
	types.push("BINARY");
	urls.push("assets/Lato-Light.eot");
	types.push("BINARY");
	urls.push("assets/Lato-Light.svg");
	types.push("TEXT");
	urls.push("Lato Light");
	types.push("FONT");
	urls.push("assets/Lato-Light.woff");
	types.push("BINARY");
	urls.push("assets/Lato-Regular.eot");
	types.push("BINARY");
	urls.push("assets/Lato-Regular.svg");
	types.push("TEXT");
	urls.push("Lato Regular");
	types.push("FONT");
	urls.push("assets/Lato-Regular.woff");
	types.push("BINARY");
	urls.push("gold.json");
	types.push("TEXT");
	urls.push("oil.json");
	types.push("TEXT");
	urls.push("ru_population.json");
	types.push("TEXT");
	urls.push("usd_bitcoin.json");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 4, background : 16777215, borderless : false, company : "", depthBuffer : false, file : "chart", fps : 60, fullscreen : false, hardware : true, height : 0, orientation : "", packageName : "jive-chart", resizable : true, stencilBuffer : true, title : "Jive Chart Demo", version : "0.0.1", vsync : false, width : 0};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	org_aswing_AsWingManager.initAsStandard(openfl_Lib.current);
	var WINDOW = new MainView();
	WINDOW.setBackgroundDecorator(new org_aswing_SolidBackground(org_aswing_UIManager.getColor("window")));
	WINDOW.setBorder(new org_aswing_border_EmptyBorder(null,org_aswing_Insets.createIdentic(10)));
	WINDOW.setSizeWH(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	WINDOW.show();
	WINDOW.set_dataContext(new MainViewModel());
	openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE,function(e) {
		WINDOW.setSizeWH(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	});
};
var DocumentClass = function() { };
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = ["DateTools"];
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "C":
		return StringTools.lpad(Std.string(Std["int"](d.getFullYear() / 100)),"0",2);
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "e":
		return Std.string(d.getDate());
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H"?"0":" ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0?12:hour),e == "I"?"0":" ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) return "PM"; else return "AM";
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "s":
		return Std.string(Std["int"](d.getTime() / 1000));
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "t":
		return "\t";
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "u":
		var t = d.getDay();
		if(t == 0) return "7"; else if(t == null) return "null"; else return "" + t;
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	case "Y":
		return Std.string(d.getFullYear());
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r = new StringBuf();
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) break;
		r.addSub(f,p,np - p);
		r.add(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	r.addSub(f,p,f.length - p);
	return r.b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var lime_AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "assets/Lato-Bold.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Bold.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Lato-Bold.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$lato_$bold_$ttf);
	this.type.set(id,"FONT");
	id = "assets/Lato-Bold.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-BoldItalic.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-BoldItalic.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Lato-BoldItalic.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$lato_$bolditalic_$ttf);
	this.type.set(id,"FONT");
	id = "assets/Lato-BoldItalic.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Italic.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Italic.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Lato-Italic.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$lato_$italic_$ttf);
	this.type.set(id,"FONT");
	id = "assets/Lato-Italic.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Light.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Light.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Lato-Light.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$lato_$light_$ttf);
	this.type.set(id,"FONT");
	id = "assets/Lato-Light.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Regular.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/Lato-Regular.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Lato-Regular.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$lato_$regular_$ttf);
	this.type.set(id,"FONT");
	id = "assets/Lato-Regular.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "gold.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "oil.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "ru_population.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "usd_bitcoin.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	createThreadPool: function() {
		var _g = this;
		this.threadPool = new lime_system_ThreadPool(0,2);
		this.threadPool.doWork.add(function(id,data) {
			data.result = data.getMethod(id);
			_g.threadPool.sendComplete(data.handler,data);
		});
		this.threadPool.onComplete.add(function(id1,data1) {
			data1.handler(data1.result);
		});
	}
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
			loader.onComplete.add(function(_) {
				handler(loader.data);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				handler(lime_graphics_Image.fromImageElement(image));
			};
			image.src = this.path.get(id);
		} else handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.onComplete.add(function(_) {
				handler(loader.data);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else handler(this.getText(id));
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$assets_$lato_$bold_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Lato Bold";
};
$hxClasses["__ASSET__assets_lato_bold_ttf"] = _$_$ASSET_$_$assets_$lato_$bold_$ttf;
_$_$ASSET_$_$assets_$lato_$bold_$ttf.__name__ = ["__ASSET__assets_lato_bold_ttf"];
_$_$ASSET_$_$assets_$lato_$bold_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$lato_$bold_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$lato_$bold_$ttf
});
var _$_$ASSET_$_$assets_$lato_$bolditalic_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Lato Bold Italic";
};
$hxClasses["__ASSET__assets_lato_bolditalic_ttf"] = _$_$ASSET_$_$assets_$lato_$bolditalic_$ttf;
_$_$ASSET_$_$assets_$lato_$bolditalic_$ttf.__name__ = ["__ASSET__assets_lato_bolditalic_ttf"];
_$_$ASSET_$_$assets_$lato_$bolditalic_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$lato_$bolditalic_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$lato_$bolditalic_$ttf
});
var _$_$ASSET_$_$assets_$lato_$italic_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Lato Italic";
};
$hxClasses["__ASSET__assets_lato_italic_ttf"] = _$_$ASSET_$_$assets_$lato_$italic_$ttf;
_$_$ASSET_$_$assets_$lato_$italic_$ttf.__name__ = ["__ASSET__assets_lato_italic_ttf"];
_$_$ASSET_$_$assets_$lato_$italic_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$lato_$italic_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$lato_$italic_$ttf
});
var _$_$ASSET_$_$assets_$lato_$light_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Lato Light";
};
$hxClasses["__ASSET__assets_lato_light_ttf"] = _$_$ASSET_$_$assets_$lato_$light_$ttf;
_$_$ASSET_$_$assets_$lato_$light_$ttf.__name__ = ["__ASSET__assets_lato_light_ttf"];
_$_$ASSET_$_$assets_$lato_$light_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$lato_$light_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$lato_$light_$ttf
});
var _$_$ASSET_$_$assets_$lato_$regular_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Lato Regular";
};
$hxClasses["__ASSET__assets_lato_regular_ttf"] = _$_$ASSET_$_$assets_$lato_$regular_$ttf;
_$_$ASSET_$_$assets_$lato_$regular_$ttf.__name__ = ["__ASSET__assets_lato_regular_ttf"];
_$_$ASSET_$_$assets_$lato_$regular_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$lato_$regular_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$lato_$regular_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.map = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(f(x));
	}
	return l;
};
Lambda.exists = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) return true;
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) return false;
		this.__dispatching.set(type,true);
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl_geom_Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		var sr = this.get_scrollRect();
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
			this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = (this.get_x() - sr.x) * b00 + (this.get_y() - sr.y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - sr.x) * b01 + (this.get_y() - sr.y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			this.__worldTransform.tx = this.get_x();
			this.__worldTransform.ty = this.get_y();
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = this.get_x() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl_geom_Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl_geom_Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl_geom_Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__transform == null) this.__transform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__class__: openfl_display_InteractiveObject
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			var m = this.__worldTransform.clone();
			var clip = this.get_scrollRect().transform(m);
			clip.y = renderSession.renderer.height - clip.y - clip.height;
			renderSession.spriteBatch.start(clip);
		}
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this);
			renderSession.spriteBatch.start();
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask();
			renderSession.spriteBatch.start();
		}
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var org_aswing_AWSprite = function() {
	this.clipMasked = false;
	openfl_display_Sprite.call(this);
	this.usingBitmap = false;
	this.clipMaskRect = new org_aswing_geom_IntRectangle();
	this.setClipMasked(this.clipMasked);
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__awSpriteMouseDownListener));
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__awStageRemovedFrom));
};
$hxClasses["org.aswing.AWSprite"] = org_aswing_AWSprite;
org_aswing_AWSprite.__name__ = ["org","aswing","AWSprite"];
org_aswing_AWSprite.__super__ = openfl_display_Sprite;
org_aswing_AWSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	d_addChild: function(child) {
		return this.addChild(child);
	}
	,d_addChildAt: function(child,index) {
		return this.addChildAt(child,index);
	}
	,d_removeChild: function(child) {
		return this.removeChild(child);
	}
	,isChild: function(child) {
		return this.contains(child);
	}
	,d_removeChildAt: function(index) {
		return this.removeChildAt(index);
	}
	,d_getChildAt: function(index) {
		return this.getChildAt(index);
	}
	,d_getChildByName: function(name) {
		return this.getChildByName(name);
	}
	,d_getChildIndex: function(child) {
		return this.getChildIndex(child);
	}
	,containsChild: function(child) {
		return this.contains(child);
	}
	,d_setChildIndex: function(child,index) {
		this.setChildIndex(child,index);
	}
	,d_swapChildren: function(child1,child2) {
		this.swapChildren(child1,child2);
	}
	,d_swapChildrenAt: function(index1,index2) {
		this.swapChildrenAt(index1,index2);
	}
	,get_d_numChildren: function() {
		return this.get_numChildren();
	}
	,getHighestIndexUnderForeground: function() {
		if(this.foregroundChild == null) return this.get_numChildren(); else return this.get_numChildren() - 1;
	}
	,getLowestIndexAboveBackground: function() {
		if(this.backgroundChild == null) return 0; else return 1;
	}
	,bringToTop: function(child) {
		var index = this.get_numChildren() - 1;
		if(this.foregroundChild != null) {
			if(this.foregroundChild != child) index = this.get_numChildren() - 2;
		}
		this.setChildIndex(child,index);
	}
	,bringToBottom: function(child) {
		var index = 0;
		if(this.backgroundChild != null) {
			if(this.backgroundChild != child) index = 1;
		}
		this.setChildIndex(child,index);
	}
	,setChildIndex: function(child,index) {
		if(child == null || !this.contains(child)) {
			haxe_Log.trace("setChildIndex : object DisplayObject " + child.toString() + " not found.",{ fileName : "AWSprite.hx", lineNumber : 231, className : "org.aswing.AWSprite", methodName : "setChildIndex"});
			return;
		}
		openfl_display_Sprite.prototype.setChildIndex.call(this,child,index);
	}
	,setBackgroundChild: function(child) {
		if(child != this.backgroundChild) {
			if(this.backgroundChild != null) this.removeChild(this.backgroundChild);
			this.backgroundChild = child;
			if(child != null) this.addChildAt(child,0);
		}
	}
	,getBackgroundChild: function() {
		return this.backgroundChild;
	}
	,setForegroundChild: function(child) {
		if(child != this.foregroundChild) {
			if(this.foregroundChild != null) this.removeChild(this.foregroundChild);
			this.foregroundChild = child;
			if(child != null) this.addChild(child);
		}
	}
	,getForegroundChild: function() {
		return this.foregroundChild;
	}
	,setClipMasked: function(m) {
		if(m != this.clipMasked) {
			this.clipMasked = m;
			this.setUsingBitmap(this.cacheAsBitmap && this.clipMasked);
			if(this.clipMasked) {
				this.checkCreateMaskShape();
				if(this.maskShape.parent != this) {
				}
				this.setClipMaskRect(this.clipMaskRect);
			} else {
				if(this.maskShape != null && this.maskShape.parent == this) {
				}
				this.set_scrollRect(null);
			}
		}
	}
	,setClipMaskRect: function(b) {
		if(this.maskShape != null) {
		}
		this.set_scrollRect(new openfl_geom_Rectangle(b.x,b.y,b.width,b.height));
		this.clipMaskRect.setRect(b);
	}
	,setUsingBitmap: function(b) {
		if(this.usingBitmap != b) {
			this.usingBitmap = b;
			this.usingBitmapChanged();
		}
	}
	,usingBitmapChanged: function() {
		this.cacheAsBitmap = this.usingBitmap;
	}
	,checkCreateMaskShape: function() {
		if(this.maskShape == null) this.maskShape = new openfl_display_Shape();
	}
	,isClipMasked: function() {
		return this.clipMasked;
	}
	,__awSpriteMouseDownListener: function(e) {
		this.pressedTarget = org_aswing_AsWingUtils["as"](e.target,openfl_display_DisplayObject);
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener),false,0,false);
	}
	,__awStageRemovedFrom: function(e) {
		this.pressedTarget = null;
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener));
	}
	,__awStageMouseUpListener: function(e) {
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener));
		var isOutSide = false;
		var target = org_aswing_AsWingUtils["as"](e.target,openfl_display_DisplayObject);
		if(!(this == target || org_aswing_AsWingUtils.isAncestorDisplayObject(this,target))) isOutSide = true;
		this.dispatchEvent(new org_aswing_event_ReleaseEvent("release",this.pressedTarget,isOutSide,e));
		if(isOutSide) this.dispatchEvent(new org_aswing_event_ReleaseEvent("releaseOutSide",this.pressedTarget,isOutSide,e));
		this.pressedTarget = null;
	}
	,toString: function() {
		var p = this;
		var str = p.get_name();
		while(p.parent != null) {
			var name;
			if(p.parent == p.stage) name = "Stage"; else name = p.parent.get_name();
			p = p.parent;
			str = name + "." + str;
		}
		return str;
	}
	,__class__: org_aswing_AWSprite
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_d_numChildren:"get_d_numChildren"})
});
var bindx_IBindable = function() { };
$hxClasses["bindx.IBindable"] = bindx_IBindable;
bindx_IBindable.__name__ = ["bindx","IBindable"];
bindx_IBindable.prototype = {
	__class__: bindx_IBindable
};
Math.__name__ = ["Math"];
var org_aswing_ASColor = function(rgb,alpha) {
	if(alpha == null) alpha = 1;
	if(rgb == null) rgb = 0;
	this._rgb = rgb;
	this._alpha = Math.min(1,Math.max(0,alpha));
	this.hlsCounted = false;
};
$hxClasses["org.aswing.ASColor"] = org_aswing_ASColor;
org_aswing_ASColor.__name__ = ["org","aswing","ASColor"];
org_aswing_ASColor.getASColor = function(r,g,b,a) {
	if(a == null) a = 1;
	return new org_aswing_ASColor(org_aswing_ASColor.getRGBWith(r,g,b),a);
};
org_aswing_ASColor.getWithARGB = function(argb) {
	var rgb = argb & 16777215;
	var alpha = (argb >>> 24) / 255;
	return new org_aswing_ASColor(rgb,alpha);
};
org_aswing_ASColor.getASColorWithHLS = function(h,l,s,a) {
	if(a == null) a = 1;
	var c = new org_aswing_ASColor(0,a);
	c.hlsCounted = true;
	c.hue = Math.max(0,Math.min(1,h));
	c.luminance = Math.max(0,Math.min(1,l));
	c.saturation = Math.max(0,Math.min(1,s));
	var H = c.hue;
	var L = c.luminance;
	var S = c.saturation;
	var p1;
	var p2;
	var r;
	var g;
	var b;
	p1 = p2 = 0;
	H = H * 360;
	if(L < 0.5) p2 = L * (1 + S); else p2 = L + S - L * S;
	p1 = 2 * L - p2;
	if(S == 0) {
		r = L;
		g = L;
		b = L;
	} else {
		r = org_aswing_ASColor.hlsValue(p1,p2,H + 120);
		g = org_aswing_ASColor.hlsValue(p1,p2,H);
		b = org_aswing_ASColor.hlsValue(p1,p2,H - 120);
	}
	r *= 255;
	g *= 255;
	b *= 255;
	var color_n = ((r | 0) << 16) + ((g | 0) << 8) + b;
	var color_rgb = Std["int"](Math.max(0,Math.min(16777215,Math.round(color_n))));
	c._rgb = color_rgb;
	return c;
};
org_aswing_ASColor.hlsValue = function(p1,p2,h) {
	if(h > 360) h = h - 360;
	if(h < 0) h = h + 360;
	if(h < 60) return p1 + (p2 - p1) * h / 60;
	if(h < 180) return p2;
	if(h < 240) return p1 + (p2 - p1) * (240 - h) / 60;
	return p1;
};
org_aswing_ASColor.getRGBWith = function(rr,gg,bb) {
	var r = rr;
	var g = gg;
	var b = bb;
	if(r > 255) r = 255;
	if(g > 255) g = 255;
	if(b > 255) b = 255;
	var color_n = (r << 16) + (g << 8) + b;
	return color_n;
};
org_aswing_ASColor.getColorBetween = function(begin,end,distance) {
	if(null == begin && null == end) return null;
	if(null == begin) return end;
	if(null == end) return begin;
	return org_aswing_ASColor.getASColor(Math.floor((end.getRed() - begin.getRed()) * distance + begin.getRed()),Math.floor((end.getGreen() - begin.getGreen()) * distance + begin.getGreen()),Math.floor((end.getBlue() - begin.getBlue()) * distance + begin.getBlue()));
};
org_aswing_ASColor.prototype = {
	get_rgb: function() {
		return this._rgb;
	}
	,set_rgb: function(v) {
		this._rgb = v;
		this.hlsCounted = false;
		return v;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(v) {
		this._alpha = v;
		return v;
	}
	,getAlpha: function() {
		return this._alpha;
	}
	,getRGB: function() {
		return this._rgb;
	}
	,getARGB: function() {
		var a = this._alpha * 255 | 0;
		return this._rgb | a << 24;
	}
	,getRed: function() {
		return (this._rgb & 16711680) >> 16;
	}
	,getGreen: function() {
		return (this._rgb & 65280) >> 8;
	}
	,getBlue: function() {
		return this._rgb & 255;
	}
	,getHue: function() {
		this.countHLS();
		return this.hue;
	}
	,getLuminance: function() {
		this.countHLS();
		return this.luminance;
	}
	,getSaturation: function() {
		this.countHLS();
		return this.saturation;
	}
	,countHLS: function() {
		if(this.hlsCounted) return;
		this.hlsCounted = true;
		var rr = this.getRed() / 255.0;
		var gg = this.getGreen() / 255.0;
		var bb = this.getBlue() / 255.0;
		var rnorm;
		var gnorm;
		var bnorm;
		var minval;
		var maxval;
		var msum;
		var mdiff;
		var r;
		var g;
		var b;
		r = g = b = 0;
		if(rr > 0) r = rr;
		if(r > 1) r = 1;
		if(gg > 0) g = gg;
		if(g > 1) g = 1;
		if(bb > 0) b = bb;
		if(b > 1) b = 1;
		minval = r;
		if(g < minval) minval = g;
		if(b < minval) minval = b;
		maxval = r;
		if(g > maxval) maxval = g;
		if(b > maxval) maxval = b;
		rnorm = gnorm = bnorm = 0;
		mdiff = maxval - minval;
		msum = maxval + minval;
		this.luminance = 0.5 * msum;
		if(maxval != minval) {
			rnorm = (maxval - r) / mdiff;
			gnorm = (maxval - g) / mdiff;
			bnorm = (maxval - b) / mdiff;
		} else {
			this.saturation = this.hue = 0;
			return;
		}
		if(this.luminance < 0.5) this.saturation = mdiff / msum; else this.saturation = mdiff / (2.0 - msum);
		if(r == maxval) this.hue = 60.0 * (6.0 + bnorm - gnorm); else if(g == maxval) this.hue = 60.0 * (2.0 + rnorm - bnorm); else this.hue = 60.0 * (4.0 + gnorm - rnorm);
		if(this.hue > 360) this.hue = this.hue - 360;
		this.hue /= 360;
	}
	,changeAlpha: function(newAlpha) {
		return new org_aswing_ASColor(this.getRGB(),newAlpha);
	}
	,changeHue: function(newHue) {
		return org_aswing_ASColor.getASColorWithHLS(newHue,this.getLuminance(),this.getSaturation(),this.getAlpha());
	}
	,changeLuminance: function(newLuminance) {
		return org_aswing_ASColor.getASColorWithHLS(this.getHue(),newLuminance,this.getSaturation(),this.getAlpha());
	}
	,changeSaturation: function(newSaturation) {
		return org_aswing_ASColor.getASColorWithHLS(this.getHue(),this.getLuminance(),newSaturation,this.getAlpha());
	}
	,scaleHLS: function(hScale,lScale,sScale) {
		var h = this.getHue() * hScale;
		var l = this.getLuminance() * lScale;
		var s = this.getSaturation() * sScale;
		return org_aswing_ASColor.getASColorWithHLS(h,l,s,this._alpha);
	}
	,offsetHLS: function(hOffset,lOffset,sOffset) {
		var h = this.getHue() + hOffset;
		if(h > 1) h -= 1;
		if(h < 0) h += 1;
		var l = this.getLuminance() + lOffset;
		var s = this.getSaturation() + sOffset;
		return org_aswing_ASColor.getASColorWithHLS(h,l,s,this._alpha);
	}
	,darker: function(factor) {
		if(factor == null) factor = 0.7;
		var r = this.getRed();
		var g = this.getGreen();
		var b = this.getBlue();
		return org_aswing_ASColor.getASColor(r * factor | 0,g * factor | 0,b * factor | 0,this._alpha);
	}
	,brighter: function(factor) {
		if(factor == null) factor = 0.7;
		var r = this.getRed();
		var g = this.getGreen();
		var b = this.getBlue();
		var i = Math.floor(1.0 / (1.0 - factor));
		if(r == 0 && g == 0 && b == 0) return org_aswing_ASColor.getASColor(i | 0,i | 0,i | 0,this._alpha);
		if(r > 0 && r < i) r = i;
		if(g > 0 && g < i) g = i;
		if(b > 0 && b < i) b = i;
		return org_aswing_ASColor.getASColor(r / factor | 0,g / factor | 0,b / factor | 0,this._alpha);
	}
	,toString: function() {
		return "ASColor(rgb:" + StringTools.hex(this._rgb) + ", alpha:" + this._alpha + ")";
	}
	,equals: function(o) {
		var c;
		c = js_Boot.__instanceof(o,org_aswing_ASColor)?o:null;
		if(c != null) return c._alpha == this._alpha && c._rgb == this._rgb; else return false;
	}
	,clone: function() {
		return new org_aswing_ASColor(this.getRGB(),this.getAlpha());
	}
	,__class__: org_aswing_ASColor
	,__properties__: {set_alpha:"set_alpha",get_alpha:"get_alpha",set_rgb:"set_rgb",get_rgb:"get_rgb"}
};
var org_aswing_graphics_IBrush = function() { };
$hxClasses["org.aswing.graphics.IBrush"] = org_aswing_graphics_IBrush;
org_aswing_graphics_IBrush.__name__ = ["org","aswing","graphics","IBrush"];
org_aswing_graphics_IBrush.prototype = {
	__class__: org_aswing_graphics_IBrush
};
var org_aswing_graphics_SolidBrush = function(color) {
	this.color = color;
};
$hxClasses["org.aswing.graphics.SolidBrush"] = org_aswing_graphics_SolidBrush;
org_aswing_graphics_SolidBrush.__name__ = ["org","aswing","graphics","SolidBrush"];
org_aswing_graphics_SolidBrush.__interfaces__ = [org_aswing_graphics_IBrush];
org_aswing_graphics_SolidBrush.prototype = {
	getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,beginFill: function(target) {
		target.beginFill(this.color.getRGB(),this.color.getAlpha());
	}
	,endFill: function(target) {
		target.endFill();
	}
	,__class__: org_aswing_graphics_SolidBrush
};
var org_aswing_Component = function() {
	this.transitFocusFactor = 0.0;
	this.__fieldBindings__ = new bindx_FieldsBindSignal();
	this.__methodBindings__ = new bindx_MethodsBindSignal();
	this._bounds = new org_aswing_geom_IntRectangle();
	org_aswing_Component.AWML_INDEX++;
	this.awmlIndex = org_aswing_Component.AWML_INDEX;
	this.drawTransparentTrigger = true;
	org_aswing_AWSprite.call(this);
	this.setName("Component");
	this._ui = null;
	this.clientProperty = null;
	this._alignmentX = 0;
	this._alignmentY = 0;
	this._opaque = false;
	this._opaqueSet = false;
	this.valid = false;
	this._enabled = true;
	this._focusable = false;
	this._focusableSet = false;
	this.cachePreferSizes = true;
	this.fontValidated = false;
	this.readyToPaint = false;
	this._toolTipText = null;
	this._uiElement = false;
	this._border = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
	this._backgroundDecorator = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
	this._foregroundDecorator = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
	this._font = org_aswing_plaf_DefaultEmptyDecoraterResource.get_DEFAULT_FONT();
	this._background = org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_BACKGROUND_COLOR;
	this._foreground = org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_FOREGROUND_COLOR;
	this._mideground = org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_MIDEGROUND_COLOR;
	this._styleTune = org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_STYLE_TUNE;
	this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.__focusIn));
	this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.__focusOut));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDown));
	this.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__mouseClick));
	this.addEventListener(openfl_events_Event.ADDED,$bind(this,this.__componentAdded));
};
$hxClasses["org.aswing.Component"] = org_aswing_Component;
org_aswing_Component.__name__ = ["org","aswing","Component"];
org_aswing_Component.__interfaces__ = [bindx_IBindable];
org_aswing_Component.__super__ = org_aswing_AWSprite;
org_aswing_Component.prototype = $extend(org_aswing_AWSprite.prototype,{
	set_ui: function(v) {
		this.setUI(v);
		return v;
	}
	,get_ui: function() {
		return this.getUI();
	}
	,set_clipBounds: function(v) {
		this.setClipBounds(v);
		return v;
	}
	,get_clipBounds: function() {
		return this.getClipBounds();
	}
	,set_alignmentX: function(v) {
		this.setAlignmentX(v);
		return v;
	}
	,get_alignmentX: function() {
		return this.getAlignmentX();
	}
	,set_alignmentY: function(v) {
		this.setAlignmentY(v);
		return v;
	}
	,get_alignmentY: function() {
		return this.getAlignmentY();
	}
	,set_minimumSize: function(v) {
		this.setMinimumSize(v);
		return v;
	}
	,get_minimumSize: function() {
		return this.getMinimumSize();
	}
	,set_maximumSize: function(v) {
		this.setMaximumSize(v);
		return v;
	}
	,get_maximumSize: function() {
		return this.getMaximumSize();
	}
	,set_preferredSize: function(v) {
		this.setPreferredSize(v);
		return v;
	}
	,get_preferredSize: function() {
		return this.getPreferredSize();
	}
	,get_currentSize: function() {
		return this.getSize();
	}
	,set_currentSize: function(v) {
		this.setSize(v);
		return v;
	}
	,get_bounds: function() {
		return this.getComBounds();
	}
	,set_bounds: function(v) {
		this.setComBounds(v);
		return v;
	}
	,get_location: function() {
		return this.getLocation();
	}
	,set_location: function(v) {
		this.setLocation(v);
		return v;
	}
	,get_uiElement: function() {
		return this.isUIElement();
	}
	,set_uiElement: function(v) {
		this.setUIElement(v);
		return v;
	}
	,get_background: function() {
		return this.getBackground();
	}
	,set_background: function(v) {
		this.setBackground(v);
		return v;
	}
	,get_foreground: function() {
		return this.getForeground();
	}
	,set_foreground: function(v) {
		this.setForeground(v);
		return v;
	}
	,get_mideground: function() {
		return this.getMideground();
	}
	,set_mideground: function(v) {
		this.setMideground(v);
		return v;
	}
	,get_styleTune: function() {
		return this.getStyleTune();
	}
	,set_styleTune: function(v) {
		this.setStyleTune(v);
		return v;
	}
	,get_styleProxy: function() {
		return this.getStyleProxy();
	}
	,set_styleProxy: function(v) {
		this.setStyleProxy(v);
		return v;
	}
	,get_backgroundDecorator: function() {
		return this.getBackgroundDecorator();
	}
	,set_backgroundDecorator: function(v) {
		this.setBackgroundDecorator(v);
		return v;
	}
	,get_foregroundDecorator: function() {
		return this.getForegroundDecorator();
	}
	,set_foregroundDecorator: function(v) {
		this.setForegroundDecorator(v);
		return v;
	}
	,get_font: function() {
		return this.getFont();
	}
	,set_font: function(v) {
		this.setFont(v);
		return v;
	}
	,get_opaque: function() {
		return this.isOpaque();
	}
	,set_opaque: function(v) {
		this.setOpaque(v);
		return v;
	}
	,get_opaqueSet: function() {
		return this.isOpaqueSet();
	}
	,set_opaqueSet: function(v) {
		this.setOpaqueSet(v);
		return v;
	}
	,get_border: function() {
		return this.getBorder();
	}
	,set_border: function(v) {
		this.setBorder(v);
		return v;
	}
	,get_visibility: function() {
		return this.get_visible();
	}
	,set_visibility: function(v) {
		var __oldValue__ = this.get_visibility();
		if(v == __oldValue__) return __oldValue__;
		this.setVisible(v);
		this.__fieldBindings__.dispatch("visibility",__oldValue__,this.get_visibility());
		return v;
	}
	,get_enabled: function() {
		return this.isEnabled();
	}
	,set_enabled: function(v) {
		this.setEnabled(v);
		return v;
	}
	,get_focusable: function() {
		return this.isFocusable();
	}
	,set_focusable: function(v) {
		this.setFocusable(v);
		return v;
	}
	,get_focusableSet: function() {
		return this.isFocusableSet();
	}
	,set_focusableSet: function(v) {
		this.setFocusableSet(v);
		return v;
	}
	,get_toolTipText: function() {
		return this.getToolTipText();
	}
	,set_toolTipText: function(v) {
		this.setToolTipText(v);
		return v;
	}
	,get_dragEnabled: function() {
		return this.isDragEnabled();
	}
	,set_dragEnabled: function(v) {
		this.setDragEnabled(v);
		return v;
	}
	,get_dropTrigger: function() {
		return this.isDropTrigger();
	}
	,set_dropTrigger: function(v) {
		this.setDropTrigger(v);
		return v;
	}
	,get_resizerMargin: function() {
		return this.getResizerMargin();
	}
	,set_resizerMargin: function(v) {
		this.setResizerMargin(v);
		return v;
	}
	,__componentAdded: function(e) {
		if(this.isUIElement()) {
			var dis = org_aswing_AsWingUtils["as"](e.target,openfl_display_DisplayObject);
			if(dis != null) {
				if(dis != this) {
					if(org_aswing_AsWingUtils.getOwnerComponent(dis.parent) == this) this.makeAllTobeUIElement(org_aswing_AsWingUtils["as"](e.target,openfl_display_DisplayObject));
				}
			}
		}
	}
	,makeAllTobeUIElement: function(dis) {
		if(dis == null) return;
		if(js_Boot.__instanceof(dis,org_aswing_Component)) {
			var c;
			c = js_Boot.__instanceof(dis,org_aswing_Component)?dis:null;
			c._uiElement = true;
		}
		if(js_Boot.__instanceof(dis,openfl_display_DisplayObjectContainer)) {
			var con;
			con = js_Boot.__instanceof(dis,openfl_display_DisplayObjectContainer)?dis:null;
			var _g1 = 0;
			var _g = con.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				this.makeAllTobeUIElement(con.getChildAt(i));
			}
		}
	}
	,setAwmlID: function(id) {
		this.awmlID = id;
	}
	,getAwmlID: function() {
		return this.awmlID;
	}
	,setAwmlNamespace: function(theNamespace) {
		this.awmlNamespace = theNamespace;
	}
	,getAwmlNamespace: function() {
		return this.awmlNamespace;
	}
	,setAwmlIndex: function(index) {
		this.awmlIndex = index;
	}
	,getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,getUIClassID: function() {
		return "ComponentUI";
	}
	,setName: function(name) {
		this.set_name(name);
	}
	,getName: function() {
		return this.get_name();
	}
	,updateUI: function() {
	}
	,isUIElement: function() {
		return this._uiElement;
	}
	,setUIElement: function(b) {
		if(this._uiElement != b) {
			this._uiElement = b;
			if(b) this.makeAllTobeUIElement(this);
		}
	}
	,getDefaultBasicUIClass: function() {
		return null;
	}
	,setUI: function(newUI) {
		if(this._ui != null) this._ui.uninstallUI(this);
		this._ui = newUI;
		if(this._ui != null) this._ui.installUI(this);
		this.revalidate();
		this.repaint();
	}
	,getUI: function() {
		return this._ui;
	}
	,setBorder: function(b) {
		if(b != this._border) {
			if(this._border != null && this._border.getDisplay(this) != null) this.removeChild(this._border.getDisplay(this));
			this._border = b;
			if(this._border != null && this._border.getDisplay(this) != null) this.addChildAt(this._border.getDisplay(this),this.getLowestIndexAboveBackground());
			this.repaint();
			this.revalidate();
		}
	}
	,getBorder: function() {
		return this._border;
	}
	,getInsets: function() {
		if(this._border == null) return new org_aswing_Insets(); else return this._border.getBorderInsets(this,this.getSize().getBounds());
	}
	,setResizerMargin: function(m) {
		if(this._resizerMargin != m) {
			this._resizerMargin = m;
			this.revalidate();
			this.repaint();
		}
	}
	,getResizerMargin: function() {
		var m = this._resizerMargin;
		if(m == null) return new org_aswing_plaf_InsetsUIResource(); else if(js_Boot.__instanceof(m,org_aswing_plaf_UIResource)) return new org_aswing_plaf_InsetsUIResource(m.top,m.left,m.bottom,m.right); else return new org_aswing_Insets(m.top,m.left,m.bottom,m.right);
	}
	,setBackgroundDecorator: function(bg) {
		if(bg != this._backgroundDecorator) {
			var old = this._backgroundDecorator;
			this._backgroundDecorator = bg;
			if(bg != null) this.setBackgroundChild(bg.getDisplay(this)); else this.setBackgroundChild(null);
			this.dispatchEvent(new org_aswing_event_PropertyChangeEvent("backgroundDecorator",old,bg));
		}
	}
	,getBackgroundDecorator: function() {
		return this._backgroundDecorator;
	}
	,setForegroundDecorator: function(fg) {
		if(fg != this._foregroundDecorator) {
			var old = this._backgroundDecorator;
			this._foregroundDecorator = fg;
			if(fg != null) this.setForegroundChild(fg.getDisplay(this)); else this.setForegroundChild(null);
			this.dispatchEvent(new org_aswing_event_PropertyChangeEvent("foregroundDecorator",old,fg));
		}
	}
	,getForegroundDecorator: function() {
		return this._foregroundDecorator;
	}
	,set_d_visible: function(value) {
		this.set_visible(value);
		return value;
	}
	,get_d_visible: function() {
		return this.get_visible();
	}
	,setVisible: function(v) {
		if(v != this.get_d_visible()) {
			this.set_d_visible(v);
			if(v) this.dispatchEvent(new org_aswing_event_AWEvent("shown",false,false)); else this.dispatchEvent(new org_aswing_event_AWEvent("hidden",false,false));
			if(v) this.repaint();
			this.revalidate();
			this.__fieldBindings__.dispatch("visibility",null,null);
		}
	}
	,isVisible: function() {
		return this.get_visible();
	}
	,isOnStage: function() {
		return this.stage != null;
	}
	,isShowing: function() {
		if(this.isOnStage() && this.isVisible()) {
			if(this.parent == this.stage) return true; else if(this.getParent() != null) return this.getParent().isShowing(); else return org_aswing_AsWingUtils.isDisplayObjectShowing(this.parent);
		}
		return false;
	}
	,setFont: function(newFont) {
		if(this._font != newFont) {
			this._font = newFont;
			this.setFontValidated(false);
			this.repaint();
			this.revalidate();
		}
	}
	,isFontValidated: function() {
		return this.fontValidated;
	}
	,setFontValidated: function(b) {
		this.fontValidated = b;
	}
	,getFont: function() {
		if(this._font != null && this._font != org_aswing_plaf_DefaultEmptyDecoraterResource.get_NULL_FONT()) return this._font; else if(this.getStyleProxy() != null) return this.getStyleProxy().getFont(); else return org_aswing_plaf_DefaultEmptyDecoraterResource.get_NULL_FONT();
	}
	,setBackground: function(c) {
		if(this._background != c) {
			this._background = c;
			this.repaint();
		}
	}
	,getBackground: function() {
		if(this._background != null && this._background != org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR) return this._background; else if(this.getStyleProxy() != null) return this.getStyleProxy().getBackground(); else return org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setForeground: function(c) {
		if(this._foreground != c) {
			this._foreground = c;
			this.repaint();
		}
	}
	,getForeground: function() {
		if(this._foreground != null && this._foreground != org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR) return this._foreground; else if(this.getStyleProxy() != null) return this.getStyleProxy().getForeground(); else return org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setMideground: function(c) {
		if(this._mideground != c) {
			this._mideground = c;
			this.repaint();
		}
	}
	,getMideground: function() {
		if(this._mideground != null && this._mideground != org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR) return this._mideground; else if(this.getStyleProxy() != null) return this.getStyleProxy().getMideground(); else return org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setStyleTune: function(c) {
		if(this._styleTune != c) {
			this._styleTune = c;
			this.repaint();
		}
	}
	,getStyleTune: function() {
		if(this._styleTune != null && this._styleTune != org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_STYLE_TUNE) return this._styleTune; else if(this.getStyleProxy() != null) return this.getStyleProxy().getStyleTune(); else return org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_STYLE_TUNE;
	}
	,setStyleProxy: function(proxy) {
		this._styleProxy = proxy;
	}
	,getStyleProxy: function() {
		if(this._styleProxy != null) return this._styleProxy; else if(this.getParent() != null) return this.getParent(); else if(js_Boot.__instanceof(this.parent,org_aswing_Component)) return org_aswing_AsWingUtils["as"](this.parent,org_aswing_Component); else return null;
	}
	,setOpaque: function(b) {
		this.set_opaqueSet(true);
		if(this._opaque != b) {
			this._opaque = b;
			this.repaint();
		}
	}
	,isOpaque: function() {
		return this._opaque;
	}
	,isOpaqueSet: function() {
		return this._opaqueSet;
	}
	,setOpaqueSet: function(b) {
		this._opaqueSet = b;
	}
	,setAlpha: function(alpha) {
		this.set_alpha(alpha);
	}
	,getAlpha: function() {
		return this.get_alpha();
	}
	,getMousePosition: function() {
		return new org_aswing_geom_IntPoint(Std["int"](this.get_mouseX()),Std["int"](this.get_mouseY()));
	}
	,getPaintBounds: function() {
		return this.getInsets().getInsideBounds(this.getPaintBoundsInRoot());
	}
	,setComBounds: function(b) {
		this.setLocationXY(b.x,b.y);
		this.setSizeWH(b.width,b.height);
	}
	,setComBoundsXYWH: function(x,y,w,h) {
		this.setLocationXY(x,y);
		this.setSizeWH(w,h);
	}
	,getComBounds: function(rv) {
		if(rv != null) {
			rv.setRect(this._bounds);
			return rv;
		} else return new org_aswing_geom_IntRectangle(this._bounds.x,this._bounds.y,this._bounds.width,this._bounds.height);
	}
	,setLocation: function(newPos) {
		var oldPos = this._bounds.getLocation();
		if(!newPos.equals(oldPos)) {
			this._bounds.setLocation(newPos);
			this.locate();
			this.dispatchEvent(new org_aswing_event_MovedEvent(oldPos,newPos));
		}
	}
	,setLocationXY: function(x,y) {
		this.setLocation(new org_aswing_geom_IntPoint(x,y));
	}
	,setGlobalLocation: function(gp) {
		var newPos = this.parent.globalToLocal(new openfl_geom_Point(gp.x,gp.y));
		this.setLocationXY(newPos.x | 0,newPos.y | 0);
	}
	,setGlobalLocationXY: function(x,y) {
		this.setGlobalLocation(new org_aswing_geom_IntPoint(x,y));
	}
	,getLocation: function(rv) {
		if(rv != null) {
			rv.setLocationXY(this._bounds.x,this._bounds.y);
			return rv;
		} else return new org_aswing_geom_IntPoint(this._bounds.x,this._bounds.y);
	}
	,getGlobalLocation: function(rv) {
		var gp = this.localToGlobal(new openfl_geom_Point(0,0));
		if(rv != null) {
			rv.setLocationXY(gp.x | 0,gp.y | 0);
			return rv;
		} else return new org_aswing_geom_IntPoint(gp.x | 0,gp.y | 0);
	}
	,globalToComponent: function(p) {
		var np = new openfl_geom_Point(p.x,p.y);
		np = this.globalToLocal(np);
		return new org_aswing_geom_IntPoint(np.x | 0,np.y | 0);
	}
	,componentToGlobal: function(p) {
		var np = new openfl_geom_Point(p.x,p.y);
		np = this.localToGlobal(np);
		return new org_aswing_geom_IntPoint(np.x | 0,np.y | 0);
	}
	,setBounds: function(b) {
		this.setComBounds(b);
	}
	,setSize: function(newSize) {
		newSize.width = Std["int"](Math.max(0,newSize.width));
		newSize.height = Std["int"](Math.max(0,newSize.height));
		var oldSize = new org_aswing_geom_IntDimension(this._bounds.width,this._bounds.height);
		if(!newSize.equals(oldSize)) {
			this._bounds.setSize(newSize);
			this.size();
			this.dispatchEvent(new org_aswing_event_ResizedEvent(oldSize,newSize));
		}
	}
	,setSizeWH: function(w,h) {
		this.setSize(new org_aswing_geom_IntDimension(w,h));
	}
	,getSize: function(rv) {
		if(rv != null) {
			rv.setSizeWH(this._bounds.width,this._bounds.height);
			return rv;
		} else return new org_aswing_geom_IntDimension(this._bounds.width,this._bounds.height);
	}
	,pack: function() {
		this.setSize(this.getPreferredSize());
	}
	,setWidth: function(width) {
		this.setSizeWH(width,this.getHeight());
	}
	,setHeight: function(height) {
		this.setSizeWH(this.getWidth(),height);
	}
	,getWidth: function() {
		return this._bounds.width;
	}
	,getHeight: function() {
		return this._bounds.height;
	}
	,setX: function(x) {
		this.setLocationXY(x,this.getY());
	}
	,setY: function(y) {
		this.setLocationXY(this.getX(),y);
	}
	,getX: function() {
		return this._bounds.x;
	}
	,getY: function() {
		return this._bounds.y;
	}
	,setEnabled: function(b) {
		if(this._enabled != b) {
			this._enabled = b;
			this.mouseEnabled = b;
			this.repaint();
		}
	}
	,isEnabled: function() {
		return this._enabled;
	}
	,setClipBounds: function(b) {
		if(b == null && this._clipBounds == null) return;
		var changed = false;
		if(b == null && this._clipBounds != null) {
			this._clipBounds = null;
			changed = true;
		} else if(!b.equals(this._clipBounds)) {
			this._clipBounds = b.clone();
			changed = true;
		}
		if(changed) this.layoutClipAndTrigger(null);
	}
	,getClipBounds: function() {
		if(this._clipBounds == null) return null;
		return this._clipBounds.clone();
	}
	,setClipSize: function(size) {
		var bounds = new org_aswing_geom_IntRectangle();
		if(this._clipBounds != null) bounds.setLocation(this._clipBounds.getLocation());
		bounds.setSize(size);
		this.setClipBounds(bounds);
	}
	,isFocusable: function() {
		return this._focusable;
	}
	,setFocusable: function(b) {
		this._focusable = b;
		this.setFocusableSet(true);
	}
	,isFocusableSet: function() {
		return this._focusableSet;
	}
	,setFocusableSet: function(b) {
		this._focusableSet = b;
	}
	,setDragEnabled: function(b) {
		this._dragEnabled = b;
	}
	,isDragEnabled: function() {
		return this._dragEnabled;
	}
	,setDropTrigger: function(b) {
		this._dropTrigger = b;
	}
	,isDropTrigger: function() {
		return this._dropTrigger;
	}
	,addDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator == null) this.dragAcceptableInitiator = new haxe_ds_IntMap();
		this.dragAcceptableInitiator.set(com.getAwmlIndex(),true);
	}
	,removeDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator != null) this.dragAcceptableInitiator.remove(com.getAwmlIndex());
	}
	,setDragAcceptableInitiatorAppraiser: function(func) {
		this.dragAcceptableInitiatorAppraiser = func;
	}
	,isDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator != null) return this.dragAcceptableInitiator.get(com.getAwmlIndex()) == true; else if(this.dragAcceptableInitiatorAppraiser != null) return this.dragAcceptableInitiatorAppraiser(com); else return false;
	}
	,setToolTipText: function(t) {
		this._toolTipText = t;
		if(t == null) org_aswing_JSharedToolTip.getSharedInstance().unregisterComponent(this); else org_aswing_JSharedToolTip.getSharedInstance().registerComponent(this);
	}
	,getToolTipText: function() {
		return this._toolTipText;
	}
	,locate: function() {
		var _x = this.getX();
		var _y = this.getY();
		this.set_d_x(_x);
		this.set_d_y(_y);
	}
	,set_d_x: function(value) {
		org_aswing_AWSprite.prototype.set_x.call(this,value);
		return value;
	}
	,set_d_y: function(value) {
		org_aswing_AWSprite.prototype.set_y.call(this,value);
		return value;
	}
	,get_d_x: function() {
		return org_aswing_AWSprite.prototype.get_x.call(this);
	}
	,get_d_y: function() {
		return org_aswing_AWSprite.prototype.get_y.call(this);
	}
	,set_x: function(value) {
		this.setX(value | 0);
		return value;
	}
	,get_x: function() {
		return this.getX();
	}
	,set_y: function(value) {
		this.setY(value | 0);
		return value;
	}
	,get_y: function() {
		return this.getY();
	}
	,set_width: function(value) {
		this.setWidth(value | 0);
		return value;
	}
	,get_width: function() {
		return this.getWidth();
	}
	,set_height: function(value) {
		this.setHeight(value | 0);
		return value;
	}
	,get_height: function() {
		return this.getHeight();
	}
	,setAlignmentX: function(ax) {
		if(this._alignmentX != ax) {
			this._alignmentX = ax;
			this.repaint();
		}
	}
	,setAlignmentY: function(ay) {
		if(this._alignmentY != ay) {
			this._alignmentY = ay;
			this.repaint();
		}
	}
	,getAlignmentX: function() {
		return this._alignmentX;
	}
	,getAlignmentY: function() {
		return this._alignmentY;
	}
	,getClientProperty: function(key,defaultValue) {
		if(this.clientProperty == null) return defaultValue;
		if(this.clientProperty.exists(key)) return this.clientProperty.get(key); else return defaultValue;
	}
	,putClientProperty: function(key,value) {
		if(this.clientProperty == null) this.clientProperty = new haxe_ds_StringMap();
		this.clientProperty.set(key,value);
	}
	,countMinimumSize: function() {
		if(this._ui != null) return this._ui.getMinimumSize(this); else return this.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(0,0));
	}
	,countMaximumSize: function() {
		if(this._ui != null) return this._ui.getMaximumSize(this); else return org_aswing_geom_IntDimension.createBigDimension();
	}
	,countPreferredSize: function() {
		if(this._ui != null) return this._ui.getPreferredSize(this); else return this.getSize();
	}
	,setCachePreferSizes: function(b) {
		this.cachePreferSizes = b;
		if(!b) {
			this.cachedMaximumSize = null;
			this.cachedMinimumSize = null;
			this.cachedPreferredSize = null;
		}
	}
	,isCachePreferSizes: function() {
		return this.cachePreferSizes;
	}
	,getMinimumSize: function() {
		if(this.isDirectReturnSize(this._minimumSize)) return this._minimumSize.clone(); else if(this.isCachePreferSizes() && this.cachedMinimumSize != null) return this.cachedMinimumSize.clone(); else {
			var tempSize = this.mixSetSize(this.countMinimumSize(),this._minimumSize);
			if(this.isCachePreferSizes()) {
				this.cachedMinimumSize = tempSize;
				return this.cachedMinimumSize.clone();
			} else return tempSize;
		}
	}
	,getMaximumSize: function() {
		if(this.isDirectReturnSize(this._maximumSize)) return this._maximumSize.clone(); else if(this.isCachePreferSizes() && this.cachedMaximumSize != null) return this.cachedMaximumSize.clone(); else {
			var tempSize = this.mixSetSize(this.countMaximumSize(),this._maximumSize);
			if(this.isCachePreferSizes()) {
				this.cachedMaximumSize = tempSize;
				return this.cachedMaximumSize.clone();
			} else return tempSize;
		}
	}
	,getPreferredSize: function() {
		if(this.isDirectReturnSize(this._preferredSize)) return this._preferredSize.clone(); else if(this.isCachePreferSizes() && this.cachedPreferredSize != null) return this.cachedPreferredSize.clone(); else {
			var tempSize = this.mixSetSize(this.countPreferredSize(),this._preferredSize);
			if(this.isCachePreferSizes()) {
				this.cachedPreferredSize = tempSize;
				return this.cachedPreferredSize.clone();
			} else return tempSize;
		}
	}
	,isDirectReturnSize: function(s) {
		return s != null && (s.width != -1 && s.height != -1);
	}
	,mixSetSize: function(counted,setted) {
		if(setted != null) {
			if(setted.width != -1) counted.width = setted.width; else if(setted.height != -1) counted.height = setted.height;
		}
		return counted;
	}
	,setMinimumSize: function(minimumSize) {
		if(minimumSize == null) this._minimumSize = null; else this._minimumSize = minimumSize.clone();
	}
	,setMaximumSize: function(maximumSize) {
		if(maximumSize == null) this._maximumSize = null; else this._maximumSize = maximumSize.clone();
	}
	,setPreferredSize: function(preferredSize) {
		if(preferredSize == null) this._preferredSize = null; else this._preferredSize = preferredSize.clone();
	}
	,getPreferredWidth: function() {
		return this.getPreferredSize().width;
	}
	,setPreferredWidth: function(preferredWidth) {
		if(this._preferredSize == null) this._preferredSize = new org_aswing_geom_IntDimension(-1,-1);
		this._preferredSize.width = preferredWidth;
	}
	,getPreferredHeight: function() {
		return this.getPreferredSize().height;
	}
	,setPreferredHeight: function(preferredHeight) {
		if(this._preferredSize == null) this._preferredSize = new org_aswing_geom_IntDimension(-1,-1);
		this._preferredSize.height = preferredHeight;
	}
	,getMaximumWidth: function() {
		return this.getMaximumSize().width;
	}
	,setMaximumWidth: function(maximumWidth) {
		if(this._maximumSize == null) this._maximumSize = new org_aswing_geom_IntDimension(-1,-1);
		this._maximumSize.width = maximumWidth;
	}
	,getMaximumHeight: function() {
		return this.getMaximumSize().height;
	}
	,setMaximumHeight: function(maximumHeight) {
		if(this._maximumSize == null) this._maximumSize = new org_aswing_geom_IntDimension(-1,-1);
		this._maximumSize.height = maximumHeight;
	}
	,getMinimumWidth: function() {
		return this.getMinimumSize().width;
	}
	,setMinimumWidth: function(minimumWidth) {
		if(this._minimumSize == null) this._minimumSize = new org_aswing_geom_IntDimension(-1,-1);
		this._minimumSize.width = minimumWidth;
	}
	,getMinimumHeight: function() {
		return this.getMinimumSize().height;
	}
	,setMinimumHeight: function(minimumHeight) {
		if(this._minimumSize == null) this._minimumSize = new org_aswing_geom_IntDimension(-1,-1);
		this._minimumSize.height = minimumHeight;
	}
	,hitTestMouse: function() {
		if(this.isOnStage()) return this.hitTestPoint(this.stage.get_mouseX(),this.stage.get_mouseY(),false); else return false;
	}
	,revalidate: function() {
		this.invalidate();
		org_aswing_RepaintManager.getInstance().addInvalidComponent(this);
	}
	,revalidateIfNecessary: function() {
		org_aswing_RepaintManager.getInstance().addInvalidComponent(this);
	}
	,repaint: function() {
		if(this.isVisible() && this.isReadyToPaint()) org_aswing_RepaintManager.getInstance().addRepaintComponent(this);
	}
	,repaintAndRevalidate: function() {
		this.repaint();
		this.revalidate();
	}
	,size: function() {
		this.readyToPaint = true;
		this.repaint();
		this.invalidate();
	}
	,invalidate: function() {
		this.invalidateTree();
		this.invalidatePreferSizeCaches();
	}
	,invalidateTree: function() {
		this.valid = false;
		var par = this.getParent();
		if(par != null && par.isValid()) par.invalidateTree();
	}
	,invalidatePreferSizeCaches: function() {
		this.clearPreferSizeCaches();
		var par = this.getParent();
		if(par != null) par.invalidatePreferSizeCaches();
	}
	,clearPreferSizeCaches: function() {
		this.cachedMaximumSize = null;
		this.cachedMinimumSize = null;
		this.cachedPreferredSize = null;
	}
	,validate: function() {
		if(!this.valid) this.valid = true;
	}
	,paintImmediately: function() {
		if(this.isVisible() && this.isReadyToPaint()) {
			var paintBounds = this.getPaintBoundsInRoot();
			this.layoutClipAndTrigger(null);
			this.paint(this.getInsets().getInsideBounds(paintBounds));
		}
	}
	,isReadyToPaint: function() {
		return this.readyToPaint;
	}
	,paint: function(b) {
		this.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.get_graphics());
		if(this.isEnabled() && this.drawTransparentTrigger) g.fillRectangle(org_aswing_Component.bg_trigger_brush,b.x,b.y,b.width,b.height);
		if(this._backgroundDecorator != null) this._backgroundDecorator.updateDecorator(this,g,b.clone());
		if(this._ui != null) this._ui.paint(this,g,b.clone());
		this.paintFocusRect();
		if(this._border != null) this._border.updateBorder(this,g,this.getInsets().getOutsideBounds(b.clone()));
		if(this._foregroundDecorator != null) this._foregroundDecorator.updateDecorator(this,g,b.clone());
		this.dispatchEvent(new org_aswing_event_AWEvent("paint",false,false));
	}
	,paintFocusRect: function(force) {
		if(force == null) force = false;
		var fm = org_aswing_FocusManager.getManager(this.stage);
		if(this._ui != null && fm != null) {
			if(force || fm.isTraversing() && this.isFocusOwner()) {
				var fr = fm.moveFocusRectUpperTo(this);
				fr.get_graphics().clear();
				this._ui.paintFocus(this,new org_aswing_graphics_Graphics2D(fr.get_graphics()),new org_aswing_geom_IntRectangle(0,0,Std["int"](this.getWidth()),Std["int"](this.getHeight())));
			}
		}
	}
	,layoutClipAndTrigger: function(paintBounds) {
		if(paintBounds == null) {
			var b = new org_aswing_geom_IntRectangle(0,0,Std["int"](this.getWidth()),Std["int"](this.getHeight()));
			var r = this.getPaintBoundsInRoot();
			var x1 = Std["int"](Math.max(b.x,r.x));
			var x2 = Std["int"](Math.min(b.x + b.width,r.x + r.width));
			var y1 = Std["int"](Math.max(b.y,r.y));
			var y2 = Std["int"](Math.min(b.y + b.height,r.y + r.height));
			paintBounds = new org_aswing_geom_IntRectangle(x1,y1,x2 - x1,y2 - y1);
		} else paintBounds = paintBounds.clone();
		if(this._clipBounds != null) {
			paintBounds.x = Std["int"](Math.max(paintBounds.x,this._clipBounds.x));
			paintBounds.y = Std["int"](Math.max(paintBounds.y,this._clipBounds.y));
			paintBounds.width = Std["int"](Math.min(paintBounds.width,this._clipBounds.width));
			paintBounds.height = Std["int"](Math.min(paintBounds.height,this._clipBounds.height));
		}
		this.setClipMaskRect(paintBounds);
	}
	,getPaintBoundsInRoot: function() {
		var minSize = this.getMinimumSize();
		var maxSize = this.getMaximumSize();
		var size = this.getSize();
		var paintBounds = new org_aswing_geom_IntRectangle(0,0,size.width,size.height);
		if(size.width > maxSize.width) {
			paintBounds.width = maxSize.width;
			paintBounds.x = Std["int"]((size.width - paintBounds.width) * this.getAlignmentX());
		}
		if(size.height > maxSize.height) {
			paintBounds.height = maxSize.height;
			paintBounds.y = Std["int"]((size.height - paintBounds.height) * this.getAlignmentY());
		}
		if(paintBounds.width < minSize.width) paintBounds.width = minSize.width;
		if(paintBounds.height < minSize.height) paintBounds.height = minSize.height;
		return paintBounds;
	}
	,isValid: function() {
		return this.valid;
	}
	,isValidateRoot: function() {
		if(this.stage != null && this.getParent() == null) return true;
		return false;
	}
	,getParent: function() {
		return this.container;
	}
	,reAppendToParent: function(constraints) {
		if(this.container != null) {
			var index = this.container.getIndex(this);
			var con = this.container;
			con.remove(this);
			con.insert(index,this,constraints);
		}
	}
	,parentReAppendChildren: function() {
		if(this.container != null) this.container.reAppendChildren();
	}
	,getRootPaneAncestor: function() {
		var pa = this.parent;
		while(pa != null) {
			if(js_Boot.__instanceof(pa,org_aswing_JRootPane)) return js_Boot.__instanceof(pa,org_aswing_JRootPane)?pa:null;
			pa = pa.parent;
		}
		return null;
	}
	,getKeyboardManager: function() {
		var rootPane = this.getRootPaneAncestor();
		if(rootPane != null) return rootPane.getKeyboardManager();
		return null;
	}
	,removeFromContainer: function() {
		if(this.getParent() != null) this.getParent().remove(this);
		if(this.parent != null) this.parent.removeChild(this);
	}
	,setConstraints: function(constraints) {
		this.constraints = constraints;
	}
	,getConstraints: function() {
		return this.constraints;
	}
	,transferFocus: function() {
		return this.transferFocusWithDirection(1);
	}
	,transferFocusBackward: function() {
		return this.transferFocusWithDirection(-1);
	}
	,transferFocusWithDirection: function(dir) {
		var pa = this.getParent();
		if(pa == null) pa = js_Boot.__instanceof(this,org_aswing_Container)?this:null;
		if(pa != null) {
			var nextFocus = null;
			if(dir > 0) nextFocus = pa.getFocusTraversalPolicy().getComponentAfter(this); else nextFocus = pa.getFocusTraversalPolicy().getComponentBefore(this);
			if(nextFocus != null) return nextFocus.requestFocus();
		}
		return false;
	}
	,isFocusOwner: function() {
		var fm = org_aswing_FocusManager.getManager(this.stage);
		return fm != null && fm.getFocusOwner() == this;
	}
	,requestFocus: function() {
		if((this.isFocusable() || this.getFocusTransmit() != null) && this.isEnabled() && this.isShowing()) {
			this.makeFocus();
			return true;
		}
		return false;
	}
	,makeFocus: function() {
		if(this.getFocusTransmit() != null) this.getFocusTransmit().requestFocus(); else {
			var ifo = this.getInternalFocusObject();
			if(ifo != this.stage.get_focus()) this.stage.set_focus(ifo);
		}
	}
	,getInternalFocusObject: function() {
		var ifo = null;
		if(this._ui != null) ifo = this._ui.getInternalFocusObject(this);
		if(ifo != null) return ifo; else return this;
	}
	,getFocusManager: function() {
		return org_aswing_FocusManager.getManager(this.stage);
	}
	,fireFocusKeyDownEvent: function(e) {
		this.dispatchEvent(new org_aswing_event_FocusKeyEvent("focusKeyDown",e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
	}
	,fireFocusKeyUpEvent: function(e) {
		this.dispatchEvent(new org_aswing_event_FocusKeyEvent("focusKeyUp",e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
	}
	,fireDragRecognizedEvent: function(touchedChild) {
		this.dispatchEvent(new org_aswing_event_DragAndDropEvent("dragRecognized",this,null,new org_aswing_geom_IntPoint(Std["int"](this.stage.get_mouseX()),Std["int"](this.stage.get_mouseY()))));
	}
	,fireDragEnterEvent: function(dragInitiator,sourceData,mousePos,relatedTarget) {
		this.dispatchEvent(new org_aswing_event_DragAndDropEvent("dragEnter",dragInitiator,sourceData,mousePos,this,relatedTarget));
	}
	,fireDragOverringEvent: function(dragInitiator,sourceData,mousePos) {
		this.dispatchEvent(new org_aswing_event_DragAndDropEvent("dragOverring",dragInitiator,sourceData,mousePos,this));
	}
	,fireDragExitEvent: function(dragInitiator,sourceData,mousePos,relatedTarget) {
		this.dispatchEvent(new org_aswing_event_DragAndDropEvent("dragExit",dragInitiator,sourceData,mousePos,this,relatedTarget));
	}
	,fireDragDropEvent: function(dragInitiator,sourceData,mousePos) {
		this.dispatchEvent(new org_aswing_event_DragAndDropEvent("dragDrop",dragInitiator,sourceData,mousePos,this));
	}
	,__mouseClick: function(e) {
		var time = openfl_Lib.getTimer();
		var mousePoint = this.getMousePosition();
		if(mousePoint.equals(this._lastClickPoint) && time - this.lastClickTime < org_aswing_Component.MAX_CLICK_INTERVAL) this.clickCount++; else this.clickCount = 1;
		this.lastClickTime = time;
		this.dispatchEvent(new org_aswing_event_ClickCountEvent("clickCount",this.clickCount));
		this._lastClickPoint = mousePoint;
	}
	,__mouseDown: function(e) {
		this.checkRequestFocusWhenMouseDown(e);
		if(this.isDragEnabled()) {
			this.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove));
			this.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__rollOut));
			this.addEventListener("touchRollOut",$bind(this,this.__rollOut));
			this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__mouseUp),false,0,false);
			this.pressingPoint = this.getMousePosition();
		}
	}
	,getFocusTransmit: function() {
		return null;
	}
	,checkRequestFocusWhenMouseDown: function(e) {
		if(!((this.isFocusable() || this.getFocusTransmit() != null) && this.isEnabled())) return;
		var fm = org_aswing_FocusManager.getManager(this.stage);
		if(fm == null) return;
		var focusOwner = fm.getFocusOwner();
		var target = org_aswing_AsWingUtils["as"](e.target,openfl_display_DisplayObject);
		if(focusOwner == null) {
			var focusObj = null;
			if(focusObj == null) this.requestFocus(); else if(!this.contains(focusObj)) this.requestFocus();
		} else if(focusOwner == this) {
		} else if(!org_aswing_AsWingUtils.isAncestor(this,focusOwner)) this.requestFocus(); else if(focusOwner.contains(target)) {
		} else {
			var tarCom = org_aswing_AsWingUtils.getOwnerComponent(target);
			if(tarCom == this) this.requestFocus(); else if(!org_aswing_AsWingUtils.isAncestorComponent(this,tarCom)) this.requestFocus();
		}
	}
	,__mouseUp: function(e) {
		this.stopListernDragRec();
	}
	,__mouseMove: function(e) {
		var mp = this.getMousePosition();
		if(mp.distanceSq(this.pressingPoint) > 1) {
			this.fireDragRecognizedEvent(null);
			this.stopListernDragRec();
		}
	}
	,__rollOut: function(e) {
		this.stopListernDragRec();
	}
	,stopListernDragRec: function() {
	}
	,__focusIn: function(e) {
		if(e.target == this.getInternalFocusObject() && this.isFocusable()) {
			var fm = org_aswing_FocusManager.getManager(this.stage);
			if(fm == null) return;
			var focusOwner = fm.getFocusOwner();
			if(this != focusOwner) {
				fm.setFocusOwner(this);
				if(null != focusOwner) focusOwner.paintFocusRect();
				this.paintFocusRect();
				this.dispatchEvent(new org_aswing_event_AWEvent("focusGained"));
			}
		}
	}
	,__focusOut: function(e) {
		if(e.relatedObject == null) return;
		if(e.target == this.getInternalFocusObject() && this.isFocusable()) {
			var fm = org_aswing_FocusManager.getManager(this.stage);
			if(fm == null) return;
			var focusOwner = fm.getFocusOwner();
			if(this == focusOwner) {
				fm.setFocusOwner(null);
				this.paintFocusRect();
				this.dispatchEvent(new org_aswing_event_AWEvent("focusLost"));
			}
		}
	}
	,doFocusTransition: function() {
		var _g = this;
		var targetFactor;
		if(this.isFocusOwner()) targetFactor = 1.0; else targetFactor = 0.0;
		if(this.transitFocusFactor != targetFactor) {
			motion_Actuate.stop(this,"transitFocusFactor");
			motion_Actuate.tween(this,0.25,{ transitFocusFactor : targetFactor}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
				_g.repaint();
			}).onComplete(function() {
				_g.transitFocusFactor = targetFactor;
			});
		}
	}
	,__class__: org_aswing_Component
	,__properties__: $extend(org_aswing_AWSprite.prototype.__properties__,{set_d_visible:"set_d_visible",get_d_visible:"get_d_visible",set_d_x:"set_d_x",get_d_x:"get_d_x",set_d_y:"set_d_y",get_d_y:"get_d_y",set_resizerMargin:"set_resizerMargin",get_resizerMargin:"get_resizerMargin",set_dropTrigger:"set_dropTrigger",get_dropTrigger:"get_dropTrigger",set_dragEnabled:"set_dragEnabled",get_dragEnabled:"get_dragEnabled",set_toolTipText:"set_toolTipText",get_toolTipText:"get_toolTipText",set_focusableSet:"set_focusableSet",get_focusableSet:"get_focusableSet",set_focusable:"set_focusable",get_focusable:"get_focusable",set_enabled:"set_enabled",get_enabled:"get_enabled",set_visibility:"set_visibility",get_visibility:"get_visibility",set_border:"set_border",get_border:"get_border",set_opaqueSet:"set_opaqueSet",get_opaqueSet:"get_opaqueSet",set_opaque:"set_opaque",get_opaque:"get_opaque",set_font:"set_font",get_font:"get_font",set_foregroundDecorator:"set_foregroundDecorator",get_foregroundDecorator:"get_foregroundDecorator",set_backgroundDecorator:"set_backgroundDecorator",get_backgroundDecorator:"get_backgroundDecorator",set_styleProxy:"set_styleProxy",get_styleProxy:"get_styleProxy",set_styleTune:"set_styleTune",get_styleTune:"get_styleTune",set_mideground:"set_mideground",get_mideground:"get_mideground",set_foreground:"set_foreground",get_foreground:"get_foreground",set_background:"set_background",get_background:"get_background",set_uiElement:"set_uiElement",get_uiElement:"get_uiElement",set_location:"set_location",get_location:"get_location",set_bounds:"set_bounds",get_bounds:"get_bounds",set_currentSize:"set_currentSize",get_currentSize:"get_currentSize",set_preferredSize:"set_preferredSize",get_preferredSize:"get_preferredSize",set_maximumSize:"set_maximumSize",get_maximumSize:"get_maximumSize",set_minimumSize:"set_minimumSize",get_minimumSize:"get_minimumSize",set_alignmentY:"set_alignmentY",get_alignmentY:"get_alignmentY",set_alignmentX:"set_alignmentX",get_alignmentX:"get_alignmentX",set_clipBounds:"set_clipBounds",get_clipBounds:"get_clipBounds",set_ui:"set_ui",get_ui:"get_ui"})
});
var org_aswing_Container = function() {
	org_aswing_Component.call(this);
	this.setName("Container");
	this.focusTraversalPolicy = null;
	this.children = [];
	this._layout = new org_aswing_EmptyLayout();
};
$hxClasses["org.aswing.Container"] = org_aswing_Container;
org_aswing_Container.__name__ = ["org","aswing","Container"];
org_aswing_Container.__super__ = org_aswing_Component;
org_aswing_Container.prototype = $extend(org_aswing_Component.prototype,{
	get_layout: function() {
		return this.getLayout();
	}
	,set_layout: function(l) {
		this.setLayout(l);
		return l;
	}
	,setLayout: function(layout) {
		this._layout = layout;
		this.revalidate();
	}
	,getLayout: function() {
		return this._layout;
	}
	,setFocusTraversalPolicy: function(ftp) {
		this.focusTraversalPolicy = ftp;
	}
	,getFocusTraversalPolicy: function() {
		if(this.focusTraversalPolicy == null) {
			var ftp = null;
			if(this.getParent() != null) ftp = this.getParent().getFocusTraversalPolicy();
			if(ftp == null) {
				var fm = org_aswing_FocusManager.getManager(this.stage);
				if(fm != null) ftp = fm.getDefaultFocusTraversalPolicy();
				if(ftp == null) ftp = new org_aswing_ContainerOrderFocusTraversalPolicy();
			}
			return ftp;
		} else return this.focusTraversalPolicy;
	}
	,invalidate: function() {
		this._layout.invalidateLayout(this);
		org_aswing_Component.prototype.invalidate.call(this);
	}
	,validate: function() {
		if(!this.valid) {
			this.doLayout();
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.children[i].validate();
			}
			this.valid = true;
		}
	}
	,doLayout: function() {
		if(this.isVisible()) this._layout.layoutContainer(this);
	}
	,reAppendChildren: function() {
		var chs = this.children.slice();
		this.removeAll();
		var _g1 = 0;
		var _g = chs.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.append(chs[i]);
		}
		this.revalidate();
	}
	,append: function(com,constraints) {
		this.insertImp(-1,com,constraints);
	}
	,appendAll: function(coms) {
		var _g1 = 0;
		var _g = coms.length;
		while(_g1 < _g) {
			var i = _g1++;
			var com = org_aswing_AsWingUtils["as"](coms[i],org_aswing_Component);
			if(com != null) this.append(com);
		}
	}
	,insert: function(i,com,constraints) {
		this.insertImp(i,com,constraints);
	}
	,insertAll: function(index,coms) {
		var _g = 0;
		while(_g < coms.length) {
			var i = coms[_g];
			++_g;
			var com;
			com = js_Boot.__instanceof(i,org_aswing_Component)?i:null;
			if(com != null) {
				this.insert(index,com);
				index++;
			}
		}
	}
	,insertImp: function(i,com,constraints) {
		if(i > this.getComponentCount()) throw new js__$Boot_HaxeError(new org_aswing_error_Error("illegal component position when insert comp to container"));
		if(js_Boot.__instanceof(com,org_aswing_Container)) {
			var cn = this;
			while(cn != null) {
				if(cn == com) throw new js__$Boot_HaxeError(new org_aswing_error_Error("adding container's parent to itself"));
				cn = cn.getParent();
			}
		}
		if(com.getParent() != null) com.removeFromContainer();
		com.container = this;
		if(i < 0) {
			this.children.push(com);
			this.addChild(com);
		} else {
			this.addChildAt(com,this.getChildIndexWithComponentIndex(i));
			this.children.splice(i,0,com);
		}
		this._layout.addLayoutComponent(com,constraints == null?com.constraints:constraints);
		if(this.valid) this.revalidate(); else this.invalidatePreferSizeCaches();
		this.dispatchEvent(new org_aswing_event_ContainerEvent("comAdded",this,com));
	}
	,removeChild: function(child) {
		this.checkChildRemoval(child);
		return org_aswing_Component.prototype.removeChild.call(this,child);
	}
	,removeChildAt: function(index) {
		this.checkChildRemoval(this.getChildAt(index));
		return org_aswing_Component.prototype.removeChildAt.call(this,index);
	}
	,checkChildRemoval: function(child) {
		if(js_Boot.__instanceof(child,org_aswing_Component)) {
			var c;
			c = js_Boot.__instanceof(child,org_aswing_Component)?child:null;
			if(c.getParent() != null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("You should call remove method to remove a component child!"));
		}
	}
	,remove: function(com) {
		var i = this.getIndex(com);
		if(i >= 0) return this.removeAt(i);
		return null;
	}
	,removeAt: function(i) {
		return this.removeAtImp(i);
	}
	,removeAtImp: function(i) {
		if(i < 0) return null;
		var com = this.children[i];
		if(com != null) {
			this.children.splice(i,1);
			org_aswing_Component.prototype.removeChild.call(this,com);
			com.container = null;
			this._layout.removeLayoutComponent(com);
			this.dispatchEvent(new org_aswing_event_ContainerEvent("comRemoved",this,com));
			if(this.valid) this.revalidate(); else this.invalidatePreferSizeCaches();
		}
		return com;
	}
	,removeAll: function() {
		while(this.children.length > 0) this.removeAt(this.children.length - 1);
	}
	,getComponents: function() {
		return this.children;
	}
	,getComponent: function(index) {
		if(index < 0 || index >= this.children.length) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Index out of container children bounds!!!"));
		return this.children[index];
	}
	,getIndex: function(com) {
		var n = this.children.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(com == this.children[i]) return i;
		}
		return -1;
	}
	,getComponentCount: function() {
		return this.children.length;
	}
	,isAncestorOf: function(c) {
		var p = c.getParent();
		if(c == null || p == null) return false;
		while(p != null) {
			if(p == this) return true;
			p = p.getParent();
		}
		return false;
	}
	,getChildIndexWithComponentIndex: function(index) {
		var count = this.getComponentCount();
		if(index < 0 || index > count) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Out of index counting bounds, it should be >=0 and <= component count!"));
		if(index == count) return this.getHighestIndexUnderForeground(); else return this.getChildIndex(this.getComponent(index));
	}
	,getComponentIndexWithChildIndex: function(index) {
		var count = this.get_numChildren();
		if(index < 0 || index > count) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Out of index counting bounds, it should be >=0 and <= numChildren!"));
		if(index == count) return this.getComponentCount(); else {
			var aboveCount = 0;
			var _g = index;
			while(_g < count) {
				var i = _g++;
				if(Std["is"](this.getChildAt(i),org_aswing_Component)) aboveCount++;
			}
			return this.getComponentCount() - aboveCount;
		}
		return 0;
	}
	,countMinimumSize: function() {
		var size = null;
		if(this._ui != null) size = this._ui.getMinimumSize(this);
		if(size == null) size = this._layout.minimumLayoutSize(this);
		if(size == null) size = org_aswing_Component.prototype.countMinimumSize.call(this);
		return size;
	}
	,countMaximumSize: function() {
		var size = null;
		if(this._ui != null) size = this._ui.getMaximumSize(this);
		if(size == null) size = this._layout.maximumLayoutSize(this);
		if(size == null) size = org_aswing_Component.prototype.countMaximumSize.call(this);
		return size;
	}
	,countPreferredSize: function() {
		var size = null;
		if(this._ui != null) size = this._ui.getPreferredSize(this);
		if(size == null) size = this._layout.preferredLayoutSize(this);
		if(size == null) size = org_aswing_Component.prototype.countPreferredSize.call(this);
		return size;
	}
	,__class__: org_aswing_Container
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_layout:"set_layout",get_layout:"get_layout"})
});
var org_aswing_JRootPane = function() {
	org_aswing_Container.call(this);
	this.setName("JRootPane");
	this.mnemonicJustActed = false;
	this._layout = new org_aswing_BorderLayout();
	this.mnemonics = new haxe_ds_IntMap();
	this.keyManager = new org_aswing_KeyboardManager();
	this.keyManager.init(this);
	this.triggerProxy = this;
	this.setMnemonicTriggerProxy(null);
};
$hxClasses["org.aswing.JRootPane"] = org_aswing_JRootPane;
org_aswing_JRootPane.__name__ = ["org","aswing","JRootPane"];
org_aswing_JRootPane.__super__ = org_aswing_Container;
org_aswing_JRootPane.prototype = $extend(org_aswing_Container.prototype,{
	get_defaultButton: function() {
		return this.getDefaultButton();
	}
	,set_defaultButton: function(v) {
		this.setDefaultButton(v);
		return v;
	}
	,setDefaultButton: function(button) {
		if(this._defaultButton != button) {
			if(this._defaultButton != null) this._defaultButton.repaint();
			this._defaultButton = button;
			this._defaultButton.repaint();
		}
	}
	,getDefaultButton: function() {
		return this._defaultButton;
	}
	,setMenuBar: function(menuBar) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,getKeyMap: function() {
		return this.keyManager.getKeyMap();
	}
	,getKeyboardManager: function() {
		return this.keyManager;
	}
	,setKeyMapActived: function(b) {
		this.keyManager.setEnabled(b);
	}
	,setMnemonicTriggerProxy: function(trigger) {
		if(trigger != this.triggerProxy) {
			if(this.triggerProxy != null) {
			}
			this.triggerProxy = trigger;
			if(trigger == null) trigger = this;
		}
	}
	,registerMnemonic: function(button) {
		if(button.getMnemonic() >= 0) this.mnemonics.set(button.getMnemonic(),button);
	}
	,unregisterMnemonic: function(button) {
		if(this.mnemonics.get(button.getMnemonic()) == button) this.mnemonics.remove(button.getMnemonic());
	}
	,__keyDown: function(e) {
		this.mnemonicJustActed = false;
		var code = e.keyCode | 0;
		if(code == org_aswing_AWKeyboard.ENTER) {
			var dfBtn = this.getDefaultButton();
			if(dfBtn != null) {
				if(dfBtn.isShowing() && dfBtn.isEnabled()) {
					dfBtn.doClick();
					this.mnemonicJustActed = true;
					return;
				}
			}
		}
		if(this.stage == null) return;
		var mnBtn = this.mnemonics.h[code | 0];
		if(mnBtn != null) {
			if(mnBtn.isShowing() && mnBtn.isEnabled()) {
				mnBtn.doClick();
				var fm = org_aswing_FocusManager.getManager(org_aswing_AsWingManager.getStage());
				if(fm != null) {
					fm.setTraversing(true);
					mnBtn.paintFocusRect();
				}
				this.mnemonicJustActed = true;
			}
		}
	}
	,__removedFromStage: function(e) {
		this.mnemonics = null;
	}
	,__class__: org_aswing_JRootPane
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_defaultButton:"set_defaultButton",get_defaultButton:"get_defaultButton"})
});
var org_aswing_JPopup = function(owner,modal) {
	if(modal == null) modal = false;
	org_aswing_JRootPane.call(this);
	if(owner == null) owner = org_aswing_AsWingManager.getRoot(false);
	if(js_Boot.__instanceof(owner,org_aswing_JPopup) || js_Boot.__instanceof(owner,openfl_display_DisplayObjectContainer)) this._owner = owner; else if(owner != null) throw new js__$Boot_HaxeError(new org_aswing_error_Error(Std.string(this) + " JPopup's owner is not a DisplayObjectContainer or JPopup, owner is : " + Std.string(owner)));
	this._modal = modal;
	this.setName("JPopup");
	this.ground_mc = new openfl_display_Sprite();
	this.ground_mc.set_name("ground_mc");
	this.ground_mc.set_visible(false);
	this.lastLAF = org_aswing_UIManager.getLookAndFeel();
	this.modalMC = new openfl_display_Sprite();
	this.initModalMC();
	this.set_d_visible(false);
	this.ground_mc.addChild(this.modalMC);
	this.ground_mc.addChild(this);
	this.ownedEquipedPopups = [];
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__popupOpennedAddToList));
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__popupOfffromDisplayList));
};
$hxClasses["org.aswing.JPopup"] = org_aswing_JPopup;
org_aswing_JPopup.__name__ = ["org","aswing","JPopup"];
org_aswing_JPopup.getPopups = function(st) {
	if(st == null) st = org_aswing_AsWingManager.getStage();
	var fm = org_aswing_FocusManager.getManager(st);
	return fm.getPopupsVector().toArray();
};
org_aswing_JPopup.getOwnedPopupsWithOwner = function(owner) {
	var fm = org_aswing_FocusManager.getManager(org_aswing_AsWingManager.getStage());
	if(fm != null) {
		var ws = [];
		var pv = fm.getPopupsVector();
		var n = pv.size();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var w = org_aswing_AsWingUtils["as"](pv.get(i),org_aswing_JPopup);
			if(w.getOwner() == owner) ws.push(w);
		}
		return ws;
	} else return [];
};
org_aswing_JPopup.__super__ = org_aswing_JRootPane;
org_aswing_JPopup.prototype = $extend(org_aswing_JRootPane.prototype,{
	get_owner: function() {
		return this.getOwner();
	}
	,set_owner: function(v) {
		this.changeOwner(v);
		return v;
	}
	,get_modal: function() {
		return this.isModal();
	}
	,set_modal: function(v) {
		this.setModal(v);
		return v;
	}
	,__popupOpennedAddToList: function(e) {
		var fm = org_aswing_FocusManager.getManager(org_aswing_AsWingManager.getStage());
		if(!fm.getPopupsVector().contains(this)) fm.getPopupsVector().append(this);
		org_aswing_AsWingManager.getStage().addEventListener(openfl_events_Event.RESIZE,$bind(this,this.__resetModelMCWhenStageResized),false,0,false);
	}
	,__popupOfffromDisplayList: function(e) {
		var fm = org_aswing_FocusManager.getManager(org_aswing_AsWingManager.getStage());
		if(fm != null) {
			fm.getPopupsVector().remove(this);
			fm.uninit();
		}
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_Event.RESIZE,$bind(this,this.__resetModelMCWhenStageResized));
	}
	,isValidateRoot: function() {
		return true;
	}
	,setEnabled: function(b) {
		org_aswing_JRootPane.prototype.setEnabled.call(this,b);
		this.ground_mc.mouseEnabled = this.isEnabled();
	}
	,getOwner: function() {
		return this._owner;
	}
	,getPopupOwner: function() {
		return org_aswing_AsWingUtils["as"](this._owner,org_aswing_JPopup);
	}
	,getDisplayOwner: function() {
		return org_aswing_AsWingUtils["as"](this._owner,openfl_display_DisplayObjectContainer);
	}
	,changeOwner: function(owner) {
		if(owner == null) owner = org_aswing_AsWingManager.getRoot(false);
		if(this._owner != owner) {
			this._owner = owner;
			if(this.isAddedToList()) {
				if(owner == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("This popup is alreay on display list, can't be owned to null, please dispose it first.")); else this.equipPopupContents();
			}
		}
	}
	,setModal: function(m) {
		if(this._modal != m) {
			this._modal = m;
			this.modalMC.set_visible(this._modal);
			this.resetModalMC();
		}
	}
	,isModal: function() {
		return this._modal;
	}
	,show: function() {
		this.setVisible(true);
	}
	,getGroundContainer: function() {
		return this.ground_mc;
	}
	,setVisible: function(v) {
		if(v != this.get_visible() || v && !this.isAddedToList()) {
			org_aswing_JRootPane.prototype.setVisible.call(this,v);
			if(v) {
				if(!this.isAddedToList()) this.equipPopupContents();
				this.resetModalMC();
				this.dispatchEvent(new org_aswing_event_PopupEvent("popupOpened"));
			} else this.dispatchEvent(new org_aswing_event_PopupEvent("popupClosed"));
		}
		this.ground_mc.set_visible(this.shouldGroundVisible());
		if(v) this.toFront();
	}
	,pack: function() {
		org_aswing_JRootPane.prototype.pack.call(this);
		this.revalidateIfNecessary();
	}
	,isAddedToList: function() {
		return this.ground_mc.parent != null;
	}
	,hide: function() {
		this.setVisible(false);
	}
	,dispose: function() {
		if(this.isAddedToList()) {
			var st = org_aswing_AsWingManager.getStage();
			this.set_d_visible(false);
			this.disposeProcess(st);
			if(this.ground_mc.parent != null) this.ground_mc.parent.removeChild(this.ground_mc);
			if(this.getPopupOwner() != null) this.getPopupOwner().removeOwnedEquipedPopup(this);
			this.dispatchEvent(new org_aswing_event_PopupEvent("popupClosed"));
		}
	}
	,disposeProcess: function(st) {
		this.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__popupOfffromDisplayList));
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__popupOpennedAddToList));
	}
	,shouldGroundVisible: function() {
		var pOwner = this.getPopupOwner();
		if(pOwner != null) return pOwner.shouldOwnedPopupGroundVisible(this);
		return this.isVisible();
	}
	,shouldOwnedPopupGroundVisible: function(popup) {
		return popup.isVisible();
	}
	,toBack: function() {
		if(this.isAddedToList() && this.isVisible()) {
			var po = this.getPopupOwner();
			if(po == null) {
				if(!org_aswing_util_DepthManager.isBottom(this.ground_mc)) org_aswing_util_DepthManager.bringToBottom(this.ground_mc);
			} else if(po.parent != null) {
				var destIndex = po.parent.getChildIndex(po) + 1;
				if(this.ground_mc != null && this.ground_mc.parent != null && this.ground_mc.parent.getChildIndex(this.ground_mc) != destIndex) this.ground_mc.parent.setChildIndex(this.ground_mc,destIndex);
			}
		}
	}
	,toFront: function() {
		if(this.isAddedToList() && this.isVisible()) {
			if(!org_aswing_util_DepthManager.isTop(this.ground_mc)) org_aswing_util_DepthManager.bringToTop(this.ground_mc);
		}
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(org_aswing_AsWingManager.getStage() != null) {
			org_aswing_JRootPane.prototype.startDrag.call(this,lockCenter,bounds);
			org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving));
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving),false,0,false);
			this.lastDragPos = this.getLocation();
		}
	}
	,stopDrag: function() {
		org_aswing_JRootPane.prototype.stopDrag.call(this);
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving));
	}
	,__dragMoving: function(e) {
		this._bounds.x = Std["int"](this.get_d_x());
		this._bounds.y = Std["int"](this.get_d_y());
		var newPos = this.getLocation();
		if(!newPos.equals(this.lastDragPos)) this.dispatchEvent(new org_aswing_event_MovedEvent(this.lastDragPos,newPos));
		this.lastDragPos = newPos;
	}
	,getOwnedPopups: function() {
		return org_aswing_JPopup.getOwnedPopupsWithOwner(this);
	}
	,getOwnedEquipedPopups: function() {
		return this.ownedEquipedPopups;
	}
	,getPopupAncestorMC: function() {
		var ow = this;
		while(ow.getPopupOwner() != null) ow = ow.getPopupOwner();
		return ow.getDisplayOwner();
	}
	,getModalMC: function() {
		return this.modalMC;
	}
	,resetModalMC: function() {
		if(!this.isModal()) {
			this.modalMC.set_width(0);
			this.modalMC.set_height(0);
			this.modalMC.set_visible(false);
			return;
		}
		this.modalMC.set_visible(true);
		var globalBounds = org_aswing_AsWingUtils.getVisibleMaximizedBounds(this.ground_mc);
		this.modalMC.set_width(globalBounds.width + 200);
		this.modalMC.set_height(globalBounds.height + 200);
		this.modalMC.set_x(globalBounds.x - 100);
		this.modalMC.set_y(globalBounds.y - 100);
	}
	,initModalMC: function() {
		this.modalMC.set_visible(this._modal);
		this.modalMC.get_graphics().clear();
		var modalColor = new org_aswing_ASColor(0,0.5);
		var g = new org_aswing_graphics_Graphics2D(this.modalMC.get_graphics());
		g.fillRectangle(new org_aswing_graphics_SolidBrush(modalColor),0,0,1,1);
	}
	,addOwnedEquipedPopup: function(pop) {
		this.ownedEquipedPopups.push(pop);
	}
	,removeOwnedEquipedPopup: function(pop) {
		HxOverrides.remove(this.ownedEquipedPopups,pop);
	}
	,__resetModelMCWhenStageResized: function(e) {
		if(this.isVisible()) this.resetModalMC();
	}
	,equipPopupContents: function() {
		if(js_Boot.__instanceof(this._owner,org_aswing_JPopup)) {
			var jwo = org_aswing_AsWingUtils["as"](this._owner,org_aswing_JPopup);
			jwo.ground_mc.addChild(this.ground_mc);
			jwo.addOwnedEquipedPopup(this);
		} else if(js_Boot.__instanceof(this._owner,openfl_display_DisplayObjectContainer)) {
			var ownerMC = org_aswing_AsWingUtils["as"](this._owner,openfl_display_DisplayObjectContainer);
			ownerMC.addChild(this.ground_mc);
		} else throw new js__$Boot_HaxeError(new org_aswing_error_Error(Std.string(this) + " JPopup's owner is not a mc or JPopup, owner is : " + Std.string(this._owner)));
		if(this.lastLAF != org_aswing_UIManager.getLookAndFeel()) {
			org_aswing_AsWingUtils.updateChildrenUI(this);
			this.lastLAF = org_aswing_UIManager.getLookAndFeel();
		}
	}
	,__class__: org_aswing_JPopup
	,__properties__: $extend(org_aswing_JRootPane.prototype.__properties__,{set_modal:"set_modal",get_modal:"get_modal",set_owner:"set_owner",get_owner:"get_owner"})
});
var LoadingView = function() {
	org_aswing_JPopup.call(this);
	this.append(this.get_jPanel__0());
};
$hxClasses["LoadingView"] = LoadingView;
LoadingView.__name__ = ["LoadingView"];
LoadingView.__super__ = org_aswing_JPopup;
LoadingView.prototype = $extend(org_aswing_JPopup.prototype,{
	destroyHml: function() {
	}
	,get_aSColor__0: function() {
		var res = new org_aswing_ASColor();
		res.set_alpha(0.5);
		res.set_rgb(13421772);
		return res;
	}
	,get_centerLayout__0: function() {
		var res = new org_aswing_CenterLayout();
		return res;
	}
	,get_intDimension__0: function() {
		var res = new org_aswing_geom_IntDimension();
		res.width = 100;
		res.height = 20;
		return res;
	}
	,get_jProgressBar__0: function() {
		var res = new org_aswing_JProgressBar();
		res.set_indeterminate(true);
		res.set_preferredSize(this.get_intDimension__0());
		return res;
	}
	,get_jPanel__0: function() {
		var res = new org_aswing_JPanel();
		res.set_opaque(true);
		res.set_background(this.get_aSColor__0());
		res.set_layout(this.get_centerLayout__0());
		res.append(this.get_jProgressBar__0());
		return res;
	}
	,__class__: LoadingView
});
var org_aswing_JWindow = function(owner,modal) {
	if(modal == null) modal = false;
	org_aswing_JPopup.call(this,owner,modal);
	this.setName("JWindow");
	this._actived = false;
	this.focusObject = new openfl_display_Sprite();
	this.focusObject.set_name("hidden_focus_obj");
	this.focusObject.set_visible(false);
	this._activable = true;
	this.addChild(this.focusObject);
	this._layout = new org_aswing_WindowLayout();
	this.setFocusTraversalPolicy(new org_aswing_WindowOrderFocusTraversalPolicy());
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__activeWhenPress),true);
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__activeWhenPressWindowSelf));
};
$hxClasses["org.aswing.JWindow"] = org_aswing_JWindow;
org_aswing_JWindow.__name__ = ["org","aswing","JWindow"];
org_aswing_JWindow.getWindows = function(st) {
	if(st == null) st = org_aswing_AsWingManager.getStage();
	var fm = org_aswing_FocusManager.getManager(st);
	var vec = fm.getPopupsVector();
	var arr = [];
	var _g1 = 0;
	var _g = vec.size();
	while(_g1 < _g) {
		var i = _g1++;
		var win = vec.get(i);
		if(js_Boot.__instanceof(win,org_aswing_JWindow)) arr.push(win);
	}
	return arr;
};
org_aswing_JWindow.getOwnedWindowsWithOwner = function(owner) {
	var fm = org_aswing_FocusManager.getManager(owner.stage);
	if(fm != null) {
		var ws = [];
		var vec = fm.getPopupsVector();
		var n = vec.size();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var w = vec.get(i);
			if(js_Boot.__instanceof(w,org_aswing_JWindow) && w.getOwner() == owner) ws.push(w);
		}
		return ws;
	} else return [];
};
org_aswing_JWindow.__super__ = org_aswing_JPopup;
org_aswing_JWindow.prototype = $extend(org_aswing_JPopup.prototype,{
	get_content: function() {
		return this.getContentPane();
	}
	,set_content: function(v) {
		this.setContentPane(v);
		return v;
	}
	,get_activable: function() {
		return this.isActivable();
	}
	,set_activable: function(v) {
		this.setActivable(v);
		return v;
	}
	,get_actived: function() {
		return this.isActive();
	}
	,set_actived: function(v) {
		this.setActive(v);
		return v;
	}
	,setLayout: function(layout) {
		if(js_Boot.__instanceof(layout,org_aswing_WindowLayout)) {
			var oldLayout = org_aswing_AsWingUtils["as"](this._layout,org_aswing_WindowLayout);
			org_aswing_JPopup.prototype.setLayout.call(this,layout);
			if(oldLayout != null) {
				if(oldLayout.getTitleBar() != null) layout.addLayoutComponent(oldLayout.getTitleBar(),"Title");
				if(oldLayout.getContentPane() != null) layout.addLayoutComponent(oldLayout.getContentPane(),"Content");
			}
		} else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Can not set a non-WindowLayout Layout to JWindow"));
	}
	,paintImmediately: function() {
		if(this.isVisible()) {
			var minimizSize = this.getMinimumSize();
			var needSize = new org_aswing_geom_IntDimension(Std["int"](Math.max(this.getWidth(),minimizSize.width)),Std["int"](Math.max(this.getHeight(),minimizSize.height)));
			this.setSize(needSize);
			org_aswing_JPopup.prototype.paintImmediately.call(this);
			this.revalidateIfNecessary();
		} else org_aswing_JPopup.prototype.paintImmediately.call(this);
	}
	,getContentPane: function() {
		if(this.contentPane == null) {
			var p = new org_aswing_Container();
			p.setLayout(new org_aswing_BorderLayout());
			this.setContentPaneImp(p);
		}
		return this.contentPane;
	}
	,setContentPane: function(cp) {
		if(cp != this.contentPane) {
			if(cp == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error(Std.string(this) + " Can not set null to be JWindow's contentPane!")); else this.setContentPaneImp(cp);
		}
	}
	,setContentPaneImp: function(cp) {
		if(this.contentPane != null) this.contentPane.removeFromContainer();
		this.contentPane = cp;
		this.append(this.contentPane,"Content");
	}
	,getWindowOwner: function() {
		return org_aswing_AsWingUtils["as"](this._owner,org_aswing_JWindow);
	}
	,getOwnedWindows: function() {
		return org_aswing_JWindow.getOwnedWindowsWithOwner(this);
	}
	,setVisible: function(v) {
		org_aswing_JPopup.prototype.setVisible.call(this,v);
		if(v && this.isActivable()) this.setActive(true); else this.lostActiveAction(this.stage);
	}
	,setActivable: function(b) {
		this._activable = b;
	}
	,isActivable: function() {
		return this._activable;
	}
	,disposeProcess: function(st) {
		this.lostActiveAction(st);
	}
	,isActive: function() {
		return this._actived;
	}
	,setActive: function(b) {
		if(this._actived != b) {
			if(b) this.active(); else this.deactive(this.stage);
		}
	}
	,focusAtThisWindow: function() {
		var defaultFocus = this.focusWhenDeactive;
		if(defaultFocus == null || !(org_aswing_AsWingUtils.isAncestor(this,defaultFocus) && defaultFocus.isShowing() && defaultFocus.isFocusable() && defaultFocus.isEnabled())) defaultFocus = this.getFocusTraversalPolicy().getDefaultComponent(this);
		if(defaultFocus == null) defaultFocus = this;
		this.focusWhenDeactive = null;
		defaultFocus.requestFocus();
	}
	,lostActiveAction: function(st) {
		if(this.isActive()) {
			this.deactive(st);
			if(this.getLootActiveFrom() != null && this.getLootActiveFrom().isShowing()) this.getLootActiveFrom().active();
		}
		this.setLootActiveFrom(null);
	}
	,getLootActiveFrom: function() {
		return this.lootActiveFrom;
	}
	,setLootActiveFrom: function(activeOwner) {
		if(this.lootActiveFrom != null) this.lootActiveFrom.removeEventListener("popupClosed",$bind(this,this.__lootActiveFromHide));
		var oldLookActiveFrom = this.lootActiveFrom;
		this.lootActiveFrom = activeOwner;
		if(this.lootActiveFrom != null) this.lootActiveFrom.addEventListener("popupClosed",$bind(this,this.__lootActiveFromHide),false,0,false);
		if(activeOwner != null && activeOwner.getLootActiveFrom() == this) activeOwner.setLootActiveFrom(oldLookActiveFrom);
	}
	,__lootActiveFromHide: function(e) {
		if(this.lootActiveFrom != null) this.setLootActiveFrom(this.lootActiveFrom.lootActiveFrom);
	}
	,active: function(programmatic) {
		if(programmatic == null) programmatic = true;
		var fm = org_aswing_FocusManager.getManager(this.stage);
		if(fm == null) return;
		this._actived = true;
		var vec = fm.getPopupsVector();
		var _g1 = 0;
		var _g = vec.size();
		while(_g1 < _g) {
			var i = _g1++;
			var w = org_aswing_AsWingUtils["as"](vec.get(i),org_aswing_JWindow);
			if(w != null && w != this) {
				if(w.isActive()) {
					w.deactive(w.stage,programmatic);
					if(w.isShowing()) this.setLootActiveFrom(w);
				}
			}
		}
		fm.setActiveWindow(this);
		this.focusAtThisWindow();
		this.dispatchEvent(new org_aswing_event_WindowEvent("windowActived",programmatic));
	}
	,deactive: function(st,programmatic) {
		if(programmatic == null) programmatic = true;
		this._actived = false;
		var fm = org_aswing_FocusManager.getManager(st);
		if(fm == null) return;
		this.focusWhenDeactive = fm.getFocusOwner();
		if(!org_aswing_AsWingUtils.isAncestor(this,this.focusWhenDeactive)) this.focusWhenDeactive = null;
		fm.setActiveWindow(null);
		this.dispatchEvent(new org_aswing_event_WindowEvent("windowDeactived",programmatic));
	}
	,getInternalFocusObject: function() {
		return this.focusObject;
	}
	,__activeWhenPress: function(e) {
		if(this.getWindowOwner() != null) this.getWindowOwner().toFront();
		this.toFront();
		if(this.isActivable() && !this.isActive()) this.active(false);
	}
	,__activeWhenPressWindowSelf: function(e) {
		if(e.target == this) this.__activeWhenPress(e);
	}
	,__class__: org_aswing_JWindow
	,__properties__: $extend(org_aswing_JPopup.prototype.__properties__,{set_actived:"set_actived",get_actived:"get_actived",set_activable:"set_activable",get_activable:"get_activable",set_content:"set_content",get_content:"get_content"})
});
var jive_DataContextControllable = function() { };
$hxClasses["jive.DataContextControllable"] = jive_DataContextControllable;
jive_DataContextControllable.__name__ = ["jive","DataContextControllable"];
jive_DataContextControllable.prototype = {
	__class__: jive_DataContextControllable
	,__properties__: {set_dataContext:"set_dataContext"}
};
var MainView = function() {
	this.chart2_initialized = false;
	this.chart1_initialized = false;
	org_aswing_JWindow.call(this);
	this.set_content(this.get_jPanel__1());
};
$hxClasses["MainView"] = MainView;
MainView.__name__ = ["MainView"];
MainView.__interfaces__ = [jive_DataContextControllable];
MainView.__super__ = org_aswing_JWindow;
MainView.prototype = $extend(org_aswing_JWindow.prototype,{
	destroyHml: function() {
	}
	,get_borderLayout__0: function() {
		var res = new org_aswing_BorderLayout();
		res.hgap = 50;
		res.vgap = 50;
		return res;
	}
	,get_aSColor__0: function() {
		var res = new org_aswing_ASColor();
		res.set_rgb(14803425);
		return res;
	}
	,get_aSColor__1: function() {
		var res = new org_aswing_ASColor();
		res.set_rgb(3426654);
		return res;
	}
	,get_intDimension__0: function() {
		var res = new org_aswing_geom_IntDimension();
		res.width = 210;
		res.height = -1;
		return res;
	}
	,get_string__0: function() {
		var res = "Gold";
		return res;
	}
	,get_string__1: function() {
		var res = "Russia:Population, total";
		return res;
	}
	,get_string__2: function() {
		var res = "USD/BITCOIN";
		return res;
	}
	,get_string__3: function() {
		var res = "Europe Brent Crude Oil";
		return res;
	}
	,get_vectorListModel__0: function() {
		var res = new org_aswing_VectorListModel();
		res.append(this.get_string__0());
		res.append(this.get_string__1());
		res.append(this.get_string__2());
		res.append(this.get_string__3());
		return res;
	}
	,get_jList__0: function() {
		var _g = this;
		var res = new org_aswing_JList();
		if(null != this.dataContext) res.set_selectedIndex(this.dataContext.menuSelectedIndex);
		var programmaticalyChange = false;
		var sourcePropertyListener = function(_,_1) {
			if(!programmaticalyChange) {
				programmaticalyChange = true;
				res.set_selectedIndex(_g.dataContext.menuSelectedIndex);
				programmaticalyChange = false;
			}
		};
		var bindSourceListener = function() {
			_g.dataContext.__fieldBindings__.add("menuSelectedIndex",sourcePropertyListener);
			sourcePropertyListener(0,_g.dataContext.menuSelectedIndex);
		};
		if(null != this.dataContext) bindSourceListener();
		this.__fieldBindings__.add("dataContext",function(old,_4) {
			if(null != old) old.__fieldBindings__.remove("menuSelectedIndex",sourcePropertyListener);
			if(null != _g.dataContext) {
				res.set_selectedIndex(_g.dataContext.menuSelectedIndex);
				bindSourceListener();
			}
		});
		if(null != _g.dataContext) {
			res.set_selectedIndex(_g.dataContext.menuSelectedIndex);
			bindSourceListener();
		}
		var propertyListener = function(_2,_3) {
			if(!programmaticalyChange && null != _g.dataContext) {
				programmaticalyChange = true;
				_g.dataContext.set_menuSelectedIndex(res.get_selectedIndex());
				programmaticalyChange = false;
			}
		};
		res.__fieldBindings__.add("selectedIndex",propertyListener);
		propertyListener(0,res.get_selectedIndex());
		this.__fieldBindings__.add("dataContext",function(old1,_5) {
			if(null != _g.dataContext) _g.dataContext.set_menuSelectedIndex(res.get_selectedIndex());
		});
		if(null != _g.dataContext) _g.dataContext.set_menuSelectedIndex(res.get_selectedIndex());
		res.constraints = "West";
		res.set_background(this.get_aSColor__0());
		res.set_selectionBackground(this.get_aSColor__1());
		res.set_preferredSize(this.get_intDimension__0());
		res.set_model(this.get_vectorListModel__0());
		return res;
	}
	,get_borderLayout__1: function() {
		var res = new org_aswing_BorderLayout();
		return res;
	}
	,set_chart1: function(value) {
		this.chart1_initialized = true;
		return this.chart1 = value;
	}
	,get_aSColor__2: function() {
		var res = new org_aswing_ASColor();
		res.set_rgb(0);
		return res;
	}
	,get_chartUI__0: function() {
		var res = new jive_chart_ChartUI();
		return res;
	}
	,get_chart1: function() {
		var _g = this;
		if(this.chart1_initialized) return this.chart1;
		this.chart1_initialized = true;
		this.set_chart1(new jive_chart_Chart());
		var res = this.chart1;
		if(null != this.dataContext) res.set_data(this.dataContext.selectedChartData);
		var programmaticalyChange = false;
		var sourcePropertyListener = function(_,_1) {
			if(!programmaticalyChange) {
				programmaticalyChange = true;
				res.set_data(_g.dataContext.selectedChartData);
				programmaticalyChange = false;
			}
		};
		var bindSourceListener = function() {
			_g.dataContext.__fieldBindings__.add("selectedChartData",sourcePropertyListener);
			sourcePropertyListener(null,_g.dataContext.selectedChartData);
		};
		if(null != this.dataContext) bindSourceListener();
		this.__fieldBindings__.add("dataContext",function(old,_4) {
			if(null != old) old.__fieldBindings__.remove("selectedChartData",sourcePropertyListener);
			if(null != _g.dataContext) {
				res.set_data(_g.dataContext.selectedChartData);
				bindSourceListener();
			}
		});
		if(null != _g.dataContext) {
			res.set_data(_g.dataContext.selectedChartData);
			bindSourceListener();
		}
		if(null != this.dataContext) res.set_title(this.dataContext.chartTitle);
		var programmaticalyChange1 = false;
		var sourcePropertyListener1 = function(_2,_3) {
			if(!programmaticalyChange1) {
				programmaticalyChange1 = true;
				res.set_title(_g.dataContext.chartTitle);
				programmaticalyChange1 = false;
			}
		};
		var bindSourceListener1 = function() {
			_g.dataContext.__fieldBindings__.add("chartTitle",sourcePropertyListener1);
			sourcePropertyListener1(null,_g.dataContext.chartTitle);
		};
		if(null != this.dataContext) bindSourceListener1();
		this.__fieldBindings__.add("dataContext",function(old1,_5) {
			if(null != old1) old1.__fieldBindings__.remove("chartTitle",sourcePropertyListener1);
			if(null != _g.dataContext) {
				res.set_title(_g.dataContext.chartTitle);
				bindSourceListener1();
			}
		});
		if(null != _g.dataContext) {
			res.set_title(_g.dataContext.chartTitle);
			bindSourceListener1();
		}
		res.constraints = "Center";
		res.set_foreground(this.get_aSColor__2());
		res.set_ui(this.get_chartUI__0());
		return res;
	}
	,set_chart2: function(value) {
		this.chart2_initialized = true;
		return this.chart2 = value;
	}
	,get_intDimension__1: function() {
		var res = new org_aswing_geom_IntDimension();
		res.width = -1;
		res.height = 120;
		return res;
	}
	,get_chartPeriodSelectorUI__0: function() {
		var res = new jive_chart_ChartPeriodSelectorUI();
		return res;
	}
	,get_chart2: function() {
		var _g = this;
		if(this.chart2_initialized) return this.chart2;
		this.chart2_initialized = true;
		this.set_chart2(new jive_chart_ChartPeriodSelector());
		var res = this.chart2;
		if(null != this.dataContext) res.set_selectedData(this.dataContext.selectedChartData);
		var programmaticalyChange = false;
		var sourcePropertyListener = function(_,_1) {
			if(!programmaticalyChange) {
				programmaticalyChange = true;
				res.set_selectedData(_g.dataContext.selectedChartData);
				programmaticalyChange = false;
			}
		};
		var bindSourceListener = function() {
			_g.dataContext.__fieldBindings__.add("selectedChartData",sourcePropertyListener);
			sourcePropertyListener(null,_g.dataContext.selectedChartData);
		};
		if(null != this.dataContext) bindSourceListener();
		this.__fieldBindings__.add("dataContext",function(old,_6) {
			if(null != old) old.__fieldBindings__.remove("selectedChartData",sourcePropertyListener);
			if(null != _g.dataContext) {
				res.set_selectedData(_g.dataContext.selectedChartData);
				bindSourceListener();
			}
		});
		if(null != _g.dataContext) {
			res.set_selectedData(_g.dataContext.selectedChartData);
			bindSourceListener();
		}
		var propertyListener = function(_2,_3) {
			if(!programmaticalyChange && null != _g.dataContext) {
				programmaticalyChange = true;
				_g.dataContext.set_selectedChartData(res.selectedData);
				programmaticalyChange = false;
			}
		};
		res.__fieldBindings__.add("selectedData",propertyListener);
		propertyListener(null,res.selectedData);
		this.__fieldBindings__.add("dataContext",function(old1,_7) {
			if(null != _g.dataContext) _g.dataContext.set_selectedChartData(res.selectedData);
		});
		if(null != _g.dataContext) _g.dataContext.set_selectedChartData(res.selectedData);
		if(null != this.dataContext) res.set_data(this.dataContext.chartData);
		var programmaticalyChange1 = false;
		var sourcePropertyListener1 = function(_4,_5) {
			if(!programmaticalyChange1) {
				programmaticalyChange1 = true;
				res.set_data(_g.dataContext.chartData);
				programmaticalyChange1 = false;
			}
		};
		var bindSourceListener1 = function() {
			_g.dataContext.__fieldBindings__.add("chartData",sourcePropertyListener1);
			sourcePropertyListener1(null,_g.dataContext.chartData);
		};
		if(null != this.dataContext) bindSourceListener1();
		this.__fieldBindings__.add("dataContext",function(old2,_8) {
			if(null != old2) old2.__fieldBindings__.remove("chartData",sourcePropertyListener1);
			if(null != _g.dataContext) {
				res.set_data(_g.dataContext.chartData);
				bindSourceListener1();
			}
		});
		if(null != _g.dataContext) {
			res.set_data(_g.dataContext.chartData);
			bindSourceListener1();
		}
		res.constraints = "South";
		res.set_preferredSize(this.get_intDimension__1());
		res.set_ui(this.get_chartPeriodSelectorUI__0());
		return res;
	}
	,get_jPanel__0: function() {
		var res = new org_aswing_JPanel();
		res.set_layout(this.get_borderLayout__1());
		res.append(this.get_chart1());
		res.append(this.get_chart2());
		return res;
	}
	,get_jPanel__1: function() {
		var res = new org_aswing_JPanel();
		res.set_layout(this.get_borderLayout__0());
		res.append(this.get_jList__0());
		res.append(this.get_jPanel__0());
		return res;
	}
	,set_dataContext: function(__value__) {
		var __oldValue__ = this.dataContext;
		if(__oldValue__ == __value__) return __value__; else {
			this.dataContext = __value__;
			this.__fieldBindings__.dispatch("dataContext",__oldValue__,this.dataContext);
			return this.dataContext;
		}
	}
	,__class__: MainView
	,__properties__: $extend(org_aswing_JWindow.prototype.__properties__,{set_dataContext:"set_dataContext",set_chart2:"set_chart2",get_chart2:"get_chart2",set_chart1:"set_chart1",get_chart1:"get_chart1"})
});
var MainViewModel = function() {
	this.selectedChartData = [];
	this.chartData = [];
	this.cache = [openfl_Assets.getText("gold.json"),openfl_Assets.getText("ru_population.json"),openfl_Assets.getText("usd_bitcoin.json"),openfl_Assets.getText("oil.json")];
	this.urls = ["http://www.quandl.com/api/v1/datasets/OFDP/GOLD_1.json?trim_start=1971-02-05","http://www.quandl.com/api/v1/datasets/WORLDBANK/RUS_SP_POP_TOTL.json?trim_start=1971-01-01","http://www.quandl.com/api/v1/datasets/BAVERAGE/USD.json","http://www.quandl.com/api/v1/datasets/DOE/RBRTE.json"];
	this.__fieldBindings__ = new bindx_FieldsBindSignal();
	this.__methodBindings__ = new bindx_MethodsBindSignal();
	this.loadUrl(0);
};
$hxClasses["MainViewModel"] = MainViewModel;
MainViewModel.__name__ = ["MainViewModel"];
MainViewModel.__interfaces__ = [bindx_IBindable];
MainViewModel.prototype = {
	set_menuSelectedIndex: function(v) {
		var __oldValue__ = this.menuSelectedIndex;
		if(v == __oldValue__) return __oldValue__;
		this.menuSelectedIndex = v;
		this.loadUrl(v);
		this.__fieldBindings__.dispatch("menuSelectedIndex",__oldValue__,this.menuSelectedIndex);
		return v;
	}
	,get_loadPopup: function() {
		var _g = this;
		if(null == this._loadPopup) {
			this._loadPopup = new LoadingView();
			this._loadPopup.setSizeWH(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
			openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE,function(e) {
				_g._loadPopup.setSizeWH(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
			});
		}
		return this._loadPopup;
	}
	,processData: function(data) {
		var result = JSON.parse(data);
		var points = [];
		var _g = 0;
		var _g1;
		_g1 = js_Boot.__cast(result.data , Array);
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			points.push(new jive_chart_Point(HxOverrides.strDate(v[0]),v[1]));
		}
		this.set_chartData(points);
		this.set_chartTitle(result.name);
		this.get_loadPopup().hide();
	}
	,loadUrl: function(index) {
		var _g = this;
		this.get_loadPopup().show();
		var http = new haxe_Http(this.urls[index]);
		http.onData = $bind(this,this.processData);
		http.onError = function(msg) {
			_g.processData(_g.cache[index]);
		};
		http.request();
	}
	,set_chartData: function(__value__) {
		var __oldValue__ = this.chartData;
		if(__oldValue__ == __value__) return __value__; else {
			this.chartData = __value__;
			this.__fieldBindings__.dispatch("chartData",__oldValue__,this.chartData);
			return this.chartData;
		}
	}
	,set_selectedChartData: function(__value__) {
		var __oldValue__ = this.selectedChartData;
		if(__oldValue__ == __value__) return __value__; else {
			this.selectedChartData = __value__;
			this.__fieldBindings__.dispatch("selectedChartData",__oldValue__,this.selectedChartData);
			return this.selectedChartData;
		}
	}
	,set_chartTitle: function(__value__) {
		var __oldValue__ = this.chartTitle;
		if(__oldValue__ == __value__) return __value__; else {
			this.chartTitle = __value__;
			this.__fieldBindings__.dispatch("chartTitle",__oldValue__,this.chartTitle);
			return this.chartTitle;
		}
	}
	,__class__: MainViewModel
	,__properties__: {get_loadPopup:"get_loadPopup",set_chartTitle:"set_chartTitle",set_selectedChartData:"set_selectedChartData",set_chartData:"set_chartData",set_menuSelectedIndex:"set_menuSelectedIndex"}
};
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		return 16777215;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var bindx_Bind = function() { };
$hxClasses["bindx.Bind"] = bindx_Bind;
bindx_Bind.__name__ = ["bindx","Bind"];
bindx_Bind.bindxGlobal = function(bindable,listener) {
	bindable.__fieldBindings__.addGlobal(listener);
};
bindx_Bind.unbindxGlobal = function(bindable,listener) {
	bindable.__fieldBindings__.removeGlobal(listener);
};
var bindx_BindSignal = function() {
	this.clear();
};
$hxClasses["bindx.BindSignal"] = bindx_BindSignal;
bindx_BindSignal.__name__ = ["bindx","BindSignal"];
bindx_BindSignal.prototype = {
	clear: function() {
		this.listeners = new haxe_ds_StringMap();
		this.needCopy = new haxe_ds_StringMap();
		this.globalListeners = [];
		this.needCopyGlobal = 0;
	}
	,destroy: function() {
		this.listeners = null;
		this.needCopy = null;
		this.globalListeners = null;
	}
	,addGlobal: function(listener) {
		if(this.needCopyGlobal > 0) {
			this.globalListeners = this.globalListeners.slice();
			this.needCopyGlobal--;
		}
		HxOverrides.remove(this.globalListeners,listener);
		this.globalListeners.push(listener);
	}
	,removeGlobal: function(listener) {
		if(this.needCopyGlobal > 0) {
			this.globalListeners = this.globalListeners.slice();
			this.needCopyGlobal--;
		}
		return HxOverrides.remove(this.globalListeners,listener);
	}
	,add: function(type,listener) {
		var ls;
		if(!this.listeners.exists(type)) {
			{
				this.needCopy.set(type,0);
				0;
			}
			var v = ls = [];
			this.listeners.set(type,v);
			v;
		} else if(this.needCopy.get(type) > 0) {
			var v1 = this.needCopy.get(type) - 1;
			this.needCopy.set(type,v1);
			v1;
			var v2;
			var _this = this.listeners.get(type);
			v2 = ls = _this.slice();
			this.listeners.set(type,v2);
			v2;
		} else ls = this.listeners.get(type);
		HxOverrides.remove(ls,listener);
		ls.push(listener);
	}
	,remove: function(type,listener) {
		if(!this.listeners.exists(type)) return false;
		var ls;
		if(this.needCopy.get(type) > 0) {
			var v = this.needCopy.get(type) - 1;
			this.needCopy.set(type,v);
			v;
			var v1;
			var _this = this.listeners.get(type);
			v1 = ls = _this.slice();
			this.listeners.set(type,v1);
			v1;
		} else ls = this.listeners.get(type);
		var res = HxOverrides.remove(ls,listener);
		if(res && ls.length == 0) {
			this.listeners.remove(type);
			{
				this.needCopy.set(type,0);
				0;
			}
		}
		return res;
	}
	,__class__: bindx_BindSignal
};
var bindx_FieldsBindSignal = function() {
	bindx_BindSignal.call(this);
};
$hxClasses["bindx.FieldsBindSignal"] = bindx_FieldsBindSignal;
bindx_FieldsBindSignal.__name__ = ["bindx","FieldsBindSignal"];
bindx_FieldsBindSignal.__super__ = bindx_BindSignal;
bindx_FieldsBindSignal.prototype = $extend(bindx_BindSignal.prototype,{
	dispatch: function(type,oldValue,newValue) {
		if(this.globalListeners.length > 0) {
			this.needCopyGlobal++;
			var _g = 0;
			var _g1 = this.globalListeners;
			while(_g < _g1.length) {
				var g = _g1[_g];
				++_g;
				g(type,oldValue,newValue);
			}
			if(this.needCopyGlobal > 0) this.needCopyGlobal--;
		}
		if(!this.listeners.exists(type)) return;
		var ls = this.listeners.get(type);
		var v = this.needCopy.get(type) + 1;
		this.needCopy.set(type,v);
		v;
		var _g2 = 0;
		while(_g2 < ls.length) {
			var l = ls[_g2];
			++_g2;
			l(oldValue,newValue);
		}
		if(this.needCopy.get(type) > 0) {
			var v1 = this.needCopy.get(type) - 1;
			this.needCopy.set(type,v1);
			v1;
		}
	}
	,__class__: bindx_FieldsBindSignal
});
var bindx_MethodsBindSignal = function() {
	bindx_BindSignal.call(this);
};
$hxClasses["bindx.MethodsBindSignal"] = bindx_MethodsBindSignal;
bindx_MethodsBindSignal.__name__ = ["bindx","MethodsBindSignal"];
bindx_MethodsBindSignal.__super__ = bindx_BindSignal;
bindx_MethodsBindSignal.prototype = $extend(bindx_BindSignal.prototype,{
	dispatch: function(type) {
		if(this.globalListeners.length > 0) {
			this.needCopyGlobal++;
			var _g = 0;
			var _g1 = this.globalListeners;
			while(_g < _g1.length) {
				var g = _g1[_g];
				++_g;
				g(type);
			}
			if(this.needCopyGlobal > 0) this.needCopyGlobal--;
		}
		if(!this.listeners.exists(type)) return;
		var ls = this.listeners.get(type);
		var v = this.needCopy.get(type) + 1;
		this.needCopy.set(type,v);
		v;
		var _g2 = 0;
		while(_g2 < ls.length) {
			var l = ls[_g2];
			++_g2;
			l();
		}
		if(this.needCopy.get(type) > 0) {
			var v1 = this.needCopy.get(type) - 1;
			this.needCopy.set(type,v1);
			v1;
		}
	}
	,__class__: bindx_MethodsBindSignal
});
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
};
$hxClasses["haxe.Http"] = haxe_Http;
haxe_Http.__name__ = ["haxe","Http"];
haxe_Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) return;
			var s;
			try {
				s = r.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s != null) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) if(r.responseText != null) s = 200; else s = 404;
			}
			if(s == undefined) s = null;
			if(s != null) me.onStatus(s);
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else switch(s) {
			case 12029:
				me.req = null;
				me.onError("Failed to connect to host");
				break;
			case 12007:
				me.req = null;
				me.onError("Unknown host");
				break;
			default:
				me.req = null;
				me.responseData = r.responseText;
				me.onError("Http Error #" + r.status);
			}
		};
		if(this.async) r.onreadystatechange = onreadystatechange;
		var uri = this.postData;
		if(uri != null) post = true; else {
			var _g_head = this.params.h;
			var _g_val = null;
			while(_g_head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(uri == null) uri = ""; else uri += "&";
				uri += encodeURIComponent(p.param) + "=" + encodeURIComponent(p.value);
			}
		}
		try {
			if(post) r.open("POST",this.url,this.async); else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question?"?":"&") + uri,this.async);
				uri = null;
			} else r.open("GET",this.url,this.async);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		var _g_head1 = this.headers.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var h1;
			h1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) onreadystatechange(null);
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.charCodeAt = function(s,index) {
	return HxOverrides.cca(s,index);
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s_b += "null"; else s_b += "" + i;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i]));
			if(it.hasNext()) s_b += ", ";
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var jive_Command = function() { };
$hxClasses["jive.Command"] = jive_Command;
jive_Command.__name__ = ["jive","Command"];
jive_Command.prototype = {
	__class__: jive_Command
};
var jive_Navigation = function() {
	this.routes = new haxe_ds_StringMap();
};
$hxClasses["jive.Navigation"] = jive_Navigation;
jive_Navigation.__name__ = ["jive","Navigation"];
jive_Navigation.__properties__ = {get_instance:"get_instance"}
jive_Navigation.instance = null;
jive_Navigation._instance = null;
jive_Navigation.get_instance = function() {
	if(null == jive_Navigation._instance) jive_Navigation._instance = new jive_Navigation();
	return jive_Navigation._instance;
};
jive_Navigation.prototype = {
	addRoute: function(path,handler) {
		if(null != handler) this.routes.set(path,handler);
	}
	,navigate: function(path,after,runHandler) {
		if(runHandler == null) runHandler = true;
		if(null != this.activePath) {
			var _g = 0;
			var _g1 = this.activePath;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.repaint();
			}
		}
		this.activePath = path;
		var pathString = this.getPathStringByMenuElements(path);
		if(this.routes.exists(pathString) && runHandler) (this.routes.get(pathString))(after);
		if(null != path) {
			var _g2 = 0;
			while(_g2 < path.length) {
				var a1 = path[_g2];
				++_g2;
				a1.repaint();
			}
		}
	}
	,getPathStringByMenuElements: function(path) {
		var res = "";
		if(null != path) {
			var _g = 0;
			while(_g < path.length) {
				var me = path[_g];
				++_g;
				var mi;
				mi = js_Boot.__instanceof(me,org_aswing_JMenuItem)?me:null;
				if(null == mi) continue;
				res += "/" + mi.subpath;
			}
		}
		return res;
	}
	,isMenuElementActive: function(me) {
		return null != this.activePath && Lambda.exists(this.activePath,function(e) {
			return e == me;
		});
	}
	,__class__: jive_Navigation
};
var jive_chart_Chart = function(title) {
	if(title == null) title = "";
	this.minPointDistantion = 15;
	this.markSize = 3;
	this.selectorSize = 4;
	this.selectorBubbleCornerRadius = 10;
	this.selectorBubbleTailSize = 25;
	this.selectorBubblePadding = 4;
	this.axisMarginBetweenLabelsAndAxis = 10;
	this.axisMarginBetweenLabels = 50;
	this.tickSize = 5;
	org_aswing_Container.call(this);
	this.set_data([]);
	this.axisPen = new org_aswing_graphics_Pen(org_aswing_ASColor.BLACK,1.5,true);
	this.graphPen = new org_aswing_graphics_Pen(org_aswing_ASColor.RED,2.5,true);
	this.gridPen = new org_aswing_graphics_Pen(org_aswing_ASColor.GRAY,0.3,true);
	this.selectorPen = new org_aswing_graphics_Pen(org_aswing_ASColor.RED,1,true);
	this.selectorBrush = new org_aswing_graphics_SolidBrush(org_aswing_ASColor.RED);
	this.markPen = new org_aswing_graphics_Pen(org_aswing_ASColor.RED,0.7,true);
	this.markBrush = new org_aswing_graphics_SolidBrush(org_aswing_ASColor.WHITE);
	this.selectorBubbleBorder = new org_aswing_graphics_Pen(org_aswing_ASColor.DARK_GRAY,0.7);
	this.selectorBubbleBackground = new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(15066597,0.8));
	this.labelsLayer = new org_aswing_Container();
	this.interactionLayer = new org_aswing_Container();
	this.axisLabelColor = org_aswing_ASColor.GRAY;
	this.areaUnderLineBrush = new org_aswing_graphics_SolidBrush(org_aswing_ASColor.RED.changeAlpha(0.3));
	this.titleFont = new org_aswing_ASFont("Tahoma",20);
	this.append(this.labelsLayer);
	this.append(this.interactionLayer);
	this.doLayout();
};
$hxClasses["jive.chart.Chart"] = jive_chart_Chart;
jive_chart_Chart.__name__ = ["jive","chart","Chart"];
jive_chart_Chart.__super__ = org_aswing_Container;
jive_chart_Chart.prototype = $extend(org_aswing_Container.prototype,{
	get_title: function() {
		return this._title;
	}
	,set_title: function(v) {
		this._title = v;
		this.repaint();
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(v) {
		this._data = Lambda.array(Lambda.map(v,function(p) {
			return p.clone();
		}));
		this._data.sort(function(a,b) {
			if(a.get_x() < b.get_x()) return -1; else return 1;
		});
		this.repaint();
		return this._data;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return jive_chart_ChartUI;
	}
	,getUIClassID: function() {
		return "ChartUI";
	}
	,__class__: jive_chart_Chart
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_data:"set_data",get_data:"get_data",set_title:"set_title",get_title:"get_title"})
});
var jive_chart_ChartHelper = function() { };
$hxClasses["jive.chart.ChartHelper"] = jive_chart_ChartHelper;
jive_chart_ChartHelper.__name__ = ["jive","chart","ChartHelper"];
jive_chart_ChartHelper.calculateDisplayCoordinates = function(points,bounds,stats) {
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		p.displayX = bounds.x + (p.get_x() - stats.minX) * stats.scaleX;
		p.displayY = bounds.height + bounds.y - (p.get_y() - stats.minY) * stats.scaleY;
	}
};
jive_chart_ChartHelper.getPointsNeededToDraw = function(points,bounds,minDistantion) {
	var result = [];
	if(null == points || points.length <= 0) return result;
	var intervalLength = Std["int"](Math.max(1,Math.floor(points.length / Math.floor(bounds.width / minDistantion))));
	var left = 0;
	var right = Std["int"](Math.min(intervalLength,points.length));
	while(left < points.length) {
		var s = jive_chart_ChartHelper.calcPointsStatistics(points.slice(left,right));
		result.push(new jive_chart_DisplayPoint(s.minX,s.maxX,s.minY,s.maxY,s.average));
		left += intervalLength;
		right += intervalLength;
		right = Std["int"](Math.min(right,points.length));
	}
	return result;
};
jive_chart_ChartHelper.drawPolyline = function(g,points,pen) {
	g.beginDraw(pen);
	var first = true;
	var _g = 0;
	while(_g < points.length) {
		var point = points[_g];
		++_g;
		if(first) {
			g.moveTo(point.displayX,point.displayY);
			first = false;
		} else g.lineTo(point.displayX,point.displayY);
	}
	g.moveTo(points[0].displayX,points[0].displayY);
	g.endDraw();
};
jive_chart_ChartHelper.drawPolycurve = function(g,points,pen) {
	g.beginDraw(pen);
	var controlPoints = jive_chart_ChartHelper.calculateControlPoints(points);
	var first = true;
	var controlPointIndex = 0;
	var _g = 0;
	while(_g < points.length) {
		var point = points[_g];
		++_g;
		if(first) {
			g.moveTo(point.displayX,point.displayY);
			first = false;
		} else {
			var cp = controlPoints[controlPointIndex];
			g.cubicCurveTo(cp.p1.x,cp.p1.y,cp.p2.x,cp.p2.y,point.displayX,point.displayY);
			controlPointIndex += 1;
		}
	}
	g.moveTo(points[0].displayX,points[0].displayY);
	g.endDraw();
};
jive_chart_ChartHelper.calculateControlPointsOneDimension = function(K) {
	var p1 = [];
	var p2 = [];
	var n = K.length - 1;
	var a = [];
	var b = [];
	var c = [];
	var r = [];
	a[0] = 0;
	b[0] = 2;
	c[0] = 1;
	r[0] = K[0] + 2 * K[1];
	var _g1 = 1;
	var _g = n - 1;
	while(_g1 < _g) {
		var i1 = _g1++;
		a[i1] = 1;
		b[i1] = 4;
		c[i1] = 1;
		r[i1] = 4 * K[i1] + 2 * K[i1 + 1];
	}
	a[n - 1] = 2;
	b[n - 1] = 7;
	c[n - 1] = 0;
	r[n - 1] = 8 * K[n - 1] + K[n];
	var _g2 = 1;
	while(_g2 < n) {
		var i2 = _g2++;
		var m = a[i2] / b[i2 - 1];
		b[i2] = b[i2] - m * c[i2 - 1];
		r[i2] = r[i2] - m * r[i2 - 1];
	}
	p1[n - 1] = r[n - 1] / b[n - 1];
	var i = n - 2;
	while(i >= 0) {
		p1[i] = (r[i] - c[i] * p1[i + 1]) / b[i];
		i -= 1;
	}
	var _g11 = 0;
	var _g3 = n - 1;
	while(_g11 < _g3) {
		var i3 = _g11++;
		p2[i3] = 2 * K[i3 + 1] - p1[i3 + 1];
	}
	p2[n - 1] = 0.5 * (K[n] + p1[n - 1]);
	return { p1 : p1, p2 : p2};
};
jive_chart_ChartHelper.calculateControlPoints = function(points) {
	var controlPointsX = jive_chart_ChartHelper.calculateControlPointsOneDimension(Lambda.array(points.map(function(p) {
		return p.displayX;
	})));
	var controlPointsY = jive_chart_ChartHelper.calculateControlPointsOneDimension(Lambda.array(points.map(function(p1) {
		return p1.displayY;
	})));
	var result = [];
	var _g1 = 0;
	var _g = controlPointsX.p1.length;
	while(_g1 < _g) {
		var i = _g1++;
		result.push({ p1 : new openfl_geom_Point(controlPointsX.p1[i],controlPointsY.p1[i]), p2 : new openfl_geom_Point(controlPointsX.p2[i],controlPointsY.p2[i])});
	}
	haxe_Log.trace(result.length,{ fileName : "ChartHelper.hx", lineNumber : 184, className : "jive.chart.ChartHelper", methodName : "calculateControlPoints"});
	return result;
};
jive_chart_ChartHelper.fillSpaceUnderPolyline = function(g,points,brush,bounds) {
	g.beginFill(brush);
	var first = true;
	var _g = 0;
	while(_g < points.length) {
		var point = points[_g];
		++_g;
		if(first) {
			g.moveTo(point.displayX,point.displayY);
			first = false;
		} else g.lineTo(point.displayX,point.displayY);
	}
	g.lineTo(points[points.length - 1].displayX,bounds.y + bounds.height);
	g.lineTo(points[0].displayX,bounds.y + bounds.height);
	g.lineTo(points[0].displayX,points[0].displayY);
	g.endFill();
};
jive_chart_ChartHelper.calcStatistics = function(points,bounds,chart) {
	var r = { minX : 0, minY : 0, maxX : 0, maxY : 0, scaleX : 0, scaleY : 0, xLabelDimension : null, yLabelDimension : null, xLabelsNumber : 0, yLabelsNumber : 0, labelsNumber : 0};
	if(null == points || points.length <= 0) return r;
	r.minX = points[0].get_x();
	r.maxX = points[0].get_x();
	r.minY = points[0].get_y();
	r.maxY = points[0].get_y();
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(r.minX > p.get_x()) r.minX = p.get_x();
		if(r.maxX < p.get_x()) r.maxX = p.get_x();
		if(r.minY > p.get_y()) r.minY = p.get_y();
		if(r.maxY < p.get_y()) r.maxY = p.get_y();
	}
	r.scaleX = bounds.width / (r.maxX - r.minX);
	r.scaleY = bounds.height / (r.maxY - r.minY);
	r.xLabelDimension = jive_chart_ChartHelper.calcMaxLabelsDimesionForX(points,r,chart);
	r.yLabelDimension = jive_chart_ChartHelper.calcMaxLabelsDimesionForY(points,r,chart);
	r.xLabelsNumber = (bounds.width / r.xLabelDimension.width | 0) + 1;
	r.yLabelsNumber = (bounds.height / r.yLabelDimension.height | 0) + 1;
	r.labelsNumber = r.xLabelsNumber + r.yLabelsNumber;
	return r;
};
jive_chart_ChartHelper.calcMaxLabelsDimesionForX = function(points,stats,chart) {
	if(null == points || points.length <= 0) return new org_aswing_geom_IntDimension(0,0);
	return jive_chart_ChartHelper.calcMaxLabelDimensionForValue(points[0].xValue,stats.minX,stats.maxX,new org_aswing_Insets(chart.axisMarginBetweenLabelsAndAxis,chart.axisMarginBetweenLabels / 2 | 0,0,chart.axisMarginBetweenLabels / 2 | 0));
};
jive_chart_ChartHelper.calcMaxLabelsDimesionForY = function(points,stats,chart) {
	if(null == points || points.length <= 0) return new org_aswing_geom_IntDimension(0,0);
	return jive_chart_ChartHelper.calcMaxLabelDimensionForValue(points[0].yValue,stats.minY,stats.maxY,new org_aswing_Insets(chart.axisMarginBetweenLabels / 2 | 0,0,chart.axisMarginBetweenLabels / 2 | 0,chart.axisMarginBetweenLabelsAndAxis));
};
jive_chart_ChartHelper.calcMaxLabelDimensionForValue = function(value,min,max,insets) {
	var label = new org_aswing_JLabel(value.getCaptionByFloatValue(min < 0?min:max));
	label.set_border(new org_aswing_border_EmptyBorder(null,insets));
	return label.get_preferredSize();
};
jive_chart_ChartHelper.calcPointsStatistics = function(points) {
	if(null == points || points.length <= 0) return null;
	var minX = points[0];
	var maxX = points[0];
	var minY = points[0];
	var maxY = points[0];
	var average = points[0];
	var sumX = 0;
	var sumY = 0;
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(minY.get_y() > p.get_y()) minY = p;
		if(maxY.get_y() < p.get_y()) maxY = p;
		if(minX.get_x() > p.get_x()) minX = p;
		if(maxX.get_x() < p.get_x()) maxX = p;
		sumX += p.get_x();
		sumY += p.get_y();
	}
	return { minX : minX, maxX : maxX, minY : minY, maxY : maxY, average : new jive_chart_Point(minX.xValue.getChartValueByFloatValue(sumX / points.length),minX.yValue.getChartValueByFloatValue(sumY / points.length))};
};
var jive_chart_ChartPeriodSelector = function() {
	this.thumbCornerSize = 5;
	this.thumbSize = new org_aswing_geom_IntDimension(15,30);
	jive_chart_Chart.call(this,"");
	this.graphPen = new org_aswing_graphics_Pen(org_aswing_ASColor.RED,1,true);
	this.thumbBrush = new org_aswing_graphics_SolidBrush(org_aswing_ASColor.LIGHT_GRAY);
	this.unselectedAreaBrush = new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(13421772,0.6));
	this.leftThumb = new openfl_display_Sprite();
	this.leftThumb.useHandCursor = true;
	this.leftThumb.buttonMode = true;
	this.rightThumb = new openfl_display_Sprite();
	this.rightThumb.useHandCursor = true;
	this.rightThumb.buttonMode = true;
	this.addChild(this.leftThumb);
	this.addChild(this.rightThumb);
};
$hxClasses["jive.chart.ChartPeriodSelector"] = jive_chart_ChartPeriodSelector;
jive_chart_ChartPeriodSelector.__name__ = ["jive","chart","ChartPeriodSelector"];
jive_chart_ChartPeriodSelector.__super__ = jive_chart_Chart;
jive_chart_ChartPeriodSelector.prototype = $extend(jive_chart_Chart.prototype,{
	get_leftIndex: function() {
		return this._leftIndex;
	}
	,set_leftIndex: function(v) {
		this._leftIndex = v;
		this.updateSelectedData();
		return v;
	}
	,get_rightIndex: function() {
		return this._rightIndex;
	}
	,set_rightIndex: function(v) {
		this._rightIndex = v;
		this.updateSelectedData();
		return v;
	}
	,set_data: function(v) {
		jive_chart_Chart.prototype.set_data.call(this,v);
		this.set_leftIndex(0);
		this.set_rightIndex(v.length - 1);
		return this._data;
	}
	,getDefaultBasicUIClass: function() {
		return jive_chart_ChartPeriodSelectorUI;
	}
	,getUIClassID: function() {
		return "ChartPeriodSelectorUI";
	}
	,updateSelectedData: function() {
		this.set_selectedData(this.get_data().slice(this.get_leftIndex(),this.get_rightIndex() + 1));
	}
	,set_selectedData: function(__value__) {
		var __oldValue__ = this.selectedData;
		if(__oldValue__ == __value__) return __value__; else {
			this.selectedData = __value__;
			this.__fieldBindings__.dispatch("selectedData",__oldValue__,this.selectedData);
			return this.selectedData;
		}
	}
	,__class__: jive_chart_ChartPeriodSelector
	,__properties__: $extend(jive_chart_Chart.prototype.__properties__,{set_selectedData:"set_selectedData",set_rightIndex:"set_rightIndex",get_rightIndex:"get_rightIndex",set_leftIndex:"set_leftIndex",get_leftIndex:"get_leftIndex"})
});
var org_aswing_plaf_ComponentUI = function() { };
$hxClasses["org.aswing.plaf.ComponentUI"] = org_aswing_plaf_ComponentUI;
org_aswing_plaf_ComponentUI.__name__ = ["org","aswing","plaf","ComponentUI"];
org_aswing_plaf_ComponentUI.prototype = {
	__class__: org_aswing_plaf_ComponentUI
};
var org_aswing_plaf_BaseComponentUI = function() {
};
$hxClasses["org.aswing.plaf.BaseComponentUI"] = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_BaseComponentUI.__name__ = ["org","aswing","plaf","BaseComponentUI"];
org_aswing_plaf_BaseComponentUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_BaseComponentUI.prototype = {
	installUI: function(c) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,uninstallUI: function(c) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,refreshStyleProperties: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,putDefault: function(key,value) {
		if(this.defaults == null) this.defaults = new org_aswing_UIDefaults();
		this.defaults.set(key,value);
	}
	,getDefault: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.get(key); else return org_aswing_UIManager.get(key);
	}
	,paint: function(c,g,b) {
		this.paintBackGround(c,g,b);
	}
	,paintFocus: function(c,g,b) {
		if(g != null) {
			g.drawRectangle(new org_aswing_graphics_Pen(this.getDefaultFocusColorInner(),1),b.x + 0.5,b.y + 0.5,b.width - 1,b.height - 1);
			g.drawRectangle(new org_aswing_graphics_Pen(this.getDefaultFocusColorOutter(),1),b.x + 1.5,b.y + 1.5,b.width - 3,b.height - 3);
		}
	}
	,getDefaultFocusColorInner: function() {
		return this.getColor("focusInner");
	}
	,getDefaultFocusColorOutter: function() {
		return this.getColor("focusOutter");
	}
	,paintBackGround: function(c,g,b) {
		if(c.isOpaque()) {
			if(null != c.get_styleTune()) g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height,c.get_styleTune().round); else g.fillRectangle(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
		}
	}
	,getInternalFocusObject: function(c) {
		return c;
	}
	,getMaximumSize: function(c) {
		return null;
	}
	,getMinimumSize: function(c) {
		return null;
	}
	,getPreferredSize: function(c) {
		return null;
	}
	,containsDefaultsKey: function(key) {
		return this.defaults != null && this.defaults.exists(key);
	}
	,containsKey: function(key) {
		return this.containsDefaultsKey(key) || org_aswing_UIManager.containsKey(key);
	}
	,getBoolean: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getBoolean(key);
		return org_aswing_UIManager.getBoolean(key);
	}
	,getNumber: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getNumber(key);
		return org_aswing_UIManager.getNumber(key);
	}
	,getInt: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInt(key);
		return org_aswing_UIManager.getInt(key);
	}
	,getUint: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getUint(key);
		return org_aswing_UIManager.getUint(key);
	}
	,getString: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getString(key);
		return org_aswing_UIManager.getString(key);
	}
	,getBorder: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getBorder(key);
		return org_aswing_UIManager.getBorder(key);
	}
	,getIcon: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getIcon(key);
		return org_aswing_UIManager.getIcon(key);
	}
	,getGroundDecorator: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getGroundDecorator(key);
		return org_aswing_UIManager.getGroundDecorator(key);
	}
	,getColor: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getColor(key);
		return org_aswing_UIManager.getColor(key);
	}
	,getFont: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getFont(key);
		return org_aswing_UIManager.getFont(key);
	}
	,getInsets: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInsets(key);
		return org_aswing_UIManager.getInsets(key);
	}
	,getStyleTune: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getStyleTune(key);
		return org_aswing_UIManager.getStyleTune(key);
	}
	,getInstance: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInstance(key);
		return org_aswing_UIManager.getInstance(key);
	}
	,getClass: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getConstructor(key);
		return org_aswing_UIManager.getClass(key);
	}
	,__class__: org_aswing_plaf_BaseComponentUI
};
var jive_chart_ChartUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.labels = [];
};
$hxClasses["jive.chart.ChartUI"] = jive_chart_ChartUI;
jive_chart_ChartUI.__name__ = ["jive","chart","ChartUI"];
jive_chart_ChartUI.__super__ = org_aswing_plaf_BaseComponentUI;
jive_chart_ChartUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Chart.";
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		if(null == this.chart || null == this.chart.get_data() || this.chart.get_data().length <= 0 || null == this.titleLabel) return;
		this.titleLabel.set_text(this.chart.get_title());
		this.titleLabel.set_font(this.chart.titleFont);
		this.titleLabel.pack();
		this.calcStatisticsAndGraphBounds(b);
		jive_chart_ChartHelper.calculateDisplayCoordinates(this.pointsToDraw,this.graphBounds,this.stats);
		this.createLabels(this.stats.labelsNumber);
		this.drawAxises(g);
		this.drawGraph(g);
		this.clearBubble();
	}
	,calcStatisticsAndGraphBounds: function(b) {
		this.stats = jive_chart_ChartHelper.calcStatistics(this.chart.get_data(),b,this.chart);
		var verticalMarginForTopMostLabel = (this.stats.yLabelDimension.height / 2 | 0) + 1;
		var horizontalMarginForRightMostLabel = (this.stats.xLabelDimension.width / 2 | 0) + 1;
		this.graphBounds = b.clone();
		this.graphBounds.move(this.stats.yLabelDimension.width + this.chart.tickSize,verticalMarginForTopMostLabel + Std["int"](this.titleLabel.get_preferredSize().height));
		this.graphBounds.resize(-this.stats.yLabelDimension.width - this.chart.tickSize - horizontalMarginForRightMostLabel,-this.stats.xLabelDimension.height - this.chart.tickSize - verticalMarginForTopMostLabel - Std["int"](this.titleLabel.get_preferredSize().height));
		this.pointsToDraw = jive_chart_ChartHelper.getPointsNeededToDraw(this.chart.get_data(),this.graphBounds,this.chart.minPointDistantion);
		this.stats = jive_chart_ChartHelper.calcStatistics(Lambda.array(Lambda.map(this.pointsToDraw,function(p) {
			return js_Boot.__cast(p , jive_chart_Point);
		})),this.graphBounds,this.chart);
	}
	,installUI: function(c) {
		this.chart = js_Boot.__instanceof(c,jive_chart_Chart)?c:null;
		this.chart.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		this.titleLabel = new org_aswing_JLabel();
		this.titleLabel.set_location(new org_aswing_geom_IntPoint(0,0));
		this.chart.append(this.titleLabel);
	}
	,uninstallUI: function(c) {
		this.chart.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
	}
	,drawAxises: function(g) {
		g.drawLine(this.chart.axisPen,this.graphBounds.x,this.graphBounds.y,this.graphBounds.x,this.graphBounds.y + this.graphBounds.height);
		g.drawLine(this.chart.axisPen,this.graphBounds.x,this.graphBounds.y + this.graphBounds.height,this.graphBounds.x + this.graphBounds.width,this.graphBounds.y + this.graphBounds.height);
		this.chart.labelsLayer.removeAll();
		this.drawGridVerticalLinesAndCaptions(g);
		this.drawGridHorizontalLinesAndCaptions(g);
		this.drawGridBorderLines(g);
	}
	,drawGridVerticalLinesAndCaptions: function(g) {
		var captionWidthWithMargin = this.stats.xLabelDimension.width;
		var ticksAmount = (this.graphBounds.width / captionWidthWithMargin | 0) + 1;
		var y = this.graphBounds.leftBottom().y;
		var x0 = this.graphBounds.x;
		var _g = 0;
		while(_g < ticksAmount) {
			var i = _g++;
			var x = x0 + i * captionWidthWithMargin;
			var t = this.labels[i];
			this.updateLabelForInterpolatedValue(t,this.chart.get_data()[0].xValue,i,this.graphBounds.width / captionWidthWithMargin,this.stats.minX,this.stats.maxX);
			var insets = t.getInsets();
			t.set_location(new org_aswing_geom_IntPoint(Std["int"](x - t.get_preferredSize().width / 2) + insets.left,(y + this.chart.tickSize | 0) + insets.top));
			this.chart.labelsLayer.append(t);
			g.drawLine(this.chart.axisPen,x,y,x,y + this.chart.tickSize);
			g.drawLine(this.chart.gridPen,x,y,x,this.graphBounds.y);
		}
	}
	,createLabels: function(n) {
		if(n > this.labels.length) {
			var _g1 = 0;
			var _g = n - this.labels.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.labels.push(new org_aswing_JLabel());
			}
		} else {
			var _g11 = 0;
			var _g2 = this.labels.length - n;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.chart.labelsLayer.remove(this.labels.pop());
			}
		}
	}
	,updateLabelForInterpolatedValue: function(label,valueTranslator,index,amount,min,max) {
		label.set_text(valueTranslator.getCaptionByFloatValue(this.interpolateValue(index,amount,min,max)));
		label.set_foreground(this.chart.axisLabelColor);
		label.pack();
	}
	,drawGridHorizontalLinesAndCaptions: function(g) {
		var captionHeightWithMargin = this.stats.yLabelDimension.height;
		var ticksAmount = (this.graphBounds.height / captionHeightWithMargin | 0) + 1;
		var x = this.graphBounds.x;
		var y0 = this.graphBounds.height + this.graphBounds.y;
		var _g = 0;
		while(_g < ticksAmount) {
			var i = _g++;
			var y = y0 - i * captionHeightWithMargin;
			var t = this.labels[i + this.stats.xLabelsNumber];
			this.updateLabelForInterpolatedValue(t,this.chart.get_data()[0].yValue,i,this.graphBounds.height / captionHeightWithMargin,this.stats.minY,this.stats.maxY);
			var insets = t.getInsets();
			t.set_location(new org_aswing_geom_IntPoint(insets.left,Std["int"](y - t.get_preferredSize().height / 2) + insets.top));
			this.chart.labelsLayer.append(t);
			g.drawLine(this.chart.axisPen,x,y,x - this.chart.tickSize,y);
			g.drawLine(this.chart.gridPen,x,y,this.graphBounds.x + this.graphBounds.width,y);
		}
	}
	,drawGridBorderLines: function(g) {
		g.drawLine(this.chart.gridPen,this.graphBounds.x,this.graphBounds.y,this.graphBounds.x + this.graphBounds.width,this.graphBounds.y);
		g.drawLine(this.chart.gridPen,this.graphBounds.x + this.graphBounds.width,this.graphBounds.y + this.graphBounds.height,this.graphBounds.x + this.graphBounds.width,this.graphBounds.y);
	}
	,interpolateValue: function(index,length,min,max) {
		return index * ((max - min) / length) + min;
	}
	,onMouseMove: function(e) {
		var index = this.calculateNearesPointIndex(e.localX);
		this.drawBubble(index);
	}
	,clearBubble: function() {
		this.chart.interactionLayer.removeAll();
		this.chart.interactionLayer.get_graphics().clear();
	}
	,drawBubble: function(index) {
		var p = this.pointsToDraw[index];
		var g = new org_aswing_graphics_Graphics2D(this.chart.interactionLayer.get_graphics());
		g.clear();
		var text = "";
		if(p.minX == p.maxX) text += this.pointsToDraw[index].minX.get_xCaption(); else text += this.pointsToDraw[index].minX.get_xCaption() + " - " + this.pointsToDraw[index].maxX.get_xCaption();
		text += "\n";
		if(p.minY == p.maxY) text += this.pointsToDraw[index].minY.get_yCaption(); else text += this.pointsToDraw[index].minY.get_yCaption() + " - " + this.pointsToDraw[index].maxY.get_yCaption();
		var label = new org_aswing_JLabel(text);
		label.set_border(new org_aswing_border_EmptyBorder(null,org_aswing_Insets.createIdentic(this.chart.selectorBubblePadding)));
		var pX = this.pointsToDraw[index].displayX;
		var pY = this.pointsToDraw[index].displayY;
		var cornerRadius = this.chart.selectorBubbleCornerRadius;
		var tailSize = this.chart.selectorBubbleTailSize;
		var contentDimension = label.get_preferredSize();
		var incline = tailSize * 0.5;
		var dx = 1.0;
		if(pX < this.graphBounds.x + this.graphBounds.width / 2) dx = 1.0; else dx = -1.0;
		var dy = 1.0;
		if(pY > this.graphBounds.y + this.graphBounds.height / 2) dy = 1.0; else dy = -1.0;
		var corner1 = new org_aswing_geom_IntPoint(pX + dx * (tailSize / 2) | 0,pY - dy * (tailSize + incline) | 0);
		var corner2 = new org_aswing_geom_IntPoint(pX + dx * tailSize / 2 | 0,pY - dy * (tailSize + contentDimension.height + incline) | 0);
		var corner3 = new org_aswing_geom_IntPoint(pX + dx * (tailSize / 2 + contentDimension.width) | 0,pY - dy * (tailSize + contentDimension.height + incline) | 0);
		var corner4 = new org_aswing_geom_IntPoint(pX + dx * (tailSize / 2 + contentDimension.width) | 0,pY - dy * (tailSize + incline) | 0);
		g.beginDraw(this.chart.selectorBubbleBorder);
		g.beginFill(this.chart.selectorBubbleBackground);
		g.moveTo(pX,pY);
		g.lineTo(pX + dx * (tailSize / 2 + cornerRadius * 2),pY - dy * (tailSize + incline));
		g.lineTo(pX + dx * (tailSize / 2 + cornerRadius),pY - dy * (tailSize + incline));
		g.curveTo(corner1.x,corner1.y,corner1.x,pY - dy * (tailSize + cornerRadius + incline));
		g.lineTo(pX + dx * tailSize / 2,pY - dy * (tailSize + contentDimension.height - cornerRadius + incline));
		g.curveTo(corner2.x,corner2.y,pX + dx * (tailSize / 2 + cornerRadius),pY - dy * (tailSize + contentDimension.height + incline));
		g.lineTo(pX + dx * (tailSize / 2 + contentDimension.width - cornerRadius),pY - dy * (tailSize + contentDimension.height + incline));
		g.curveTo(corner3.x,corner3.y,pX + dx * (tailSize / 2 + contentDimension.width),pY - dy * (tailSize + contentDimension.height - cornerRadius + incline));
		g.lineTo(pX + dx * (tailSize / 2 + contentDimension.width),pY - dy * (tailSize + cornerRadius + incline));
		g.curveTo(corner4.x,corner4.y,pX + dx * (tailSize / 2 + contentDimension.width - cornerRadius),pY - dy * (tailSize + incline));
		g.lineTo(pX + dx * (tailSize * 1.25 + cornerRadius * 2),pY - dy * (tailSize + incline));
		g.lineTo(pX,pY);
		g.endDraw();
		g.endFill();
		g.fillCircle(this.chart.selectorBrush,pX,pY,this.chart.selectorSize);
		label.set_foreground(this.chart.axisLabelColor);
		label.pack();
		if(dy > 0) {
			if(dx > 0) label.set_location(corner2); else label.set_location(corner3);
		} else if(dx > 0) label.set_location(corner1); else label.set_location(corner4);
		this.chart.interactionLayer.removeAll();
		this.chart.interactionLayer.append(label);
	}
	,calculateNearesPointIndex: function(x) {
		var i = 0;
		var result = 0;
		var _g = 0;
		var _g1 = this.pointsToDraw;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			if(Math.abs(x - this.pointsToDraw[result].displayX) > Math.abs(x - this.pointsToDraw[i].displayX)) result = i;
			i++;
		}
		return result;
	}
	,drawGraph: function(g) {
		g.fillRectangle(new org_aswing_graphics_SolidBrush(org_aswing_ASColor.WHITE.changeAlpha(0.0)),this.graphBounds.x,this.graphBounds.y,this.graphBounds.width,this.graphBounds.height);
		jive_chart_ChartHelper.drawPolyline(g,this.pointsToDraw,this.chart.graphPen);
		var _g = 0;
		var _g1 = this.pointsToDraw;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			g.fillCircle(this.chart.markBrush,point.displayX,point.displayY,this.chart.markSize);
			g.drawCircle(this.chart.markPen,point.displayX,point.displayY,this.chart.markSize);
		}
	}
	,__class__: jive_chart_ChartUI
});
var jive_chart_ChartPeriodSelectorUI = function() {
	jive_chart_ChartUI.call(this);
};
$hxClasses["jive.chart.ChartPeriodSelectorUI"] = jive_chart_ChartPeriodSelectorUI;
jive_chart_ChartPeriodSelectorUI.__name__ = ["jive","chart","ChartPeriodSelectorUI"];
jive_chart_ChartPeriodSelectorUI.__super__ = jive_chart_ChartUI;
jive_chart_ChartPeriodSelectorUI.prototype = $extend(jive_chart_ChartUI.prototype,{
	getPropertyPrefix: function() {
		return "ChartPeriosSelector.";
	}
	,installUI: function(c) {
		this.selectorComponent = js_Boot.__instanceof(c,jive_chart_ChartPeriodSelector)?c:null;
		this.chart = this.selectorComponent;
		if(null == this.selectorComponent) return;
		this.selectorComponent.leftThumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDownL));
		this.selectorComponent.rightThumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDownR));
		this.drawThumb(new org_aswing_graphics_Graphics2D(this.selectorComponent.leftThumb.get_graphics()));
		this.drawThumb(new org_aswing_graphics_Graphics2D(this.selectorComponent.rightThumb.get_graphics()));
		this.titleLabel = new org_aswing_JLabel();
		this.titleLabel.set_location(new org_aswing_geom_IntPoint(0,0));
		this.chart.append(this.titleLabel);
	}
	,paint: function(c,g,b) {
		jive_chart_ChartUI.prototype.paint.call(this,c,g,b);
		if(null == this.chart || null == this.chart.get_data() || this.chart.get_data().length <= 0 || null == this.titleLabel) return;
		this.selectorComponent.leftThumb.set_x(this.graphBounds.x - this.selectorComponent.leftThumb.get_width() / 2);
		this.selectorComponent.leftThumb.set_y(this.graphBounds.y + (this.graphBounds.height - this.selectorComponent.leftThumb.get_height()) / 2);
		this.selectorComponent.rightThumb.set_x(this.graphBounds.x + this.graphBounds.width - this.selectorComponent.rightThumb.get_width() / 2);
		this.selectorComponent.rightThumb.set_y(this.graphBounds.y + (this.graphBounds.height - this.selectorComponent.rightThumb.get_height()) / 2);
	}
	,drawThumb: function(g) {
		g.fillRoundRect(this.selectorComponent.thumbBrush,0,0,this.selectorComponent.thumbSize.width,this.selectorComponent.thumbSize.height,10);
	}
	,uninstallUI: function(c) {
	}
	,drawAxises: function(g) {
		this.chart.labelsLayer.removeAll();
		g.drawLine(this.chart.axisPen,this.graphBounds.x,this.graphBounds.y + this.graphBounds.height,this.graphBounds.x,this.graphBounds.y);
		g.drawLine(this.chart.axisPen,this.graphBounds.x,this.graphBounds.y + this.graphBounds.height,this.graphBounds.x + this.graphBounds.width,this.graphBounds.y + this.graphBounds.height);
		this.drawGridVerticalLinesAndCaptions(g);
		this.drawGridBorderLines(g);
	}
	,onMouseDownL: function(e) {
		this.chart.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMoveL));
		openfl_Lib.current.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUpL));
	}
	,onMouseUpL: function(e) {
		this.chart.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMoveL));
		openfl_Lib.current.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUpL));
	}
	,onMouseMoveL: function(e) {
		var x = this.chart.globalToComponent(new org_aswing_geom_IntPoint(e.stageX | 0,0)).x;
		if(x < this.graphBounds.x - this.selectorComponent.leftThumb.get_width() / 2) x = this.graphBounds.x - this.selectorComponent.leftThumb.get_width() / 2;
		if(x >= this.selectorComponent.rightThumb.get_x() - this.selectorComponent.leftThumb.get_width()) x = this.selectorComponent.rightThumb.get_x() - this.selectorComponent.leftThumb.get_width() - 1;
		this.selectorComponent.leftThumb.set_x(x);
		this.updateUnselectedArea();
		this.selectorComponent.set_leftIndex(this.getFullIndexByX(Std["int"](this.selectorComponent.leftThumb.get_x() + this.selectorComponent.leftThumb.get_width() / 2)));
	}
	,onMouseDownR: function(e) {
		this.chart.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMoveR));
		openfl_Lib.current.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUpR));
	}
	,onMouseUpR: function(e) {
		this.chart.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMoveR));
		openfl_Lib.current.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUpR));
	}
	,onMouseMoveR: function(e) {
		var x = this.chart.globalToComponent(new org_aswing_geom_IntPoint(e.stageX | 0,0)).x;
		if(x > this.graphBounds.x + this.graphBounds.width - this.selectorComponent.rightThumb.get_width() / 2) x = this.graphBounds.x + this.graphBounds.width - this.selectorComponent.rightThumb.get_width() / 2;
		if(x <= this.selectorComponent.leftThumb.get_x() + this.selectorComponent.leftThumb.get_width()) x = this.selectorComponent.leftThumb.get_x() + this.selectorComponent.rightThumb.get_width() + 1;
		this.selectorComponent.rightThumb.set_x(x);
		this.updateUnselectedArea();
		this.selectorComponent.set_rightIndex(this.getFullIndexByX(Std["int"](this.selectorComponent.rightThumb.get_x() + this.selectorComponent.rightThumb.get_width() / 2)));
	}
	,drawGraph: function(g) {
		g.fillRectangle(new org_aswing_graphics_SolidBrush(org_aswing_ASColor.WHITE.changeAlpha(0.0)),this.graphBounds.x,this.graphBounds.y,this.graphBounds.width,this.graphBounds.height);
		jive_chart_ChartHelper.fillSpaceUnderPolyline(g,this.pointsToDraw,this.chart.areaUnderLineBrush,this.graphBounds);
		jive_chart_ChartHelper.drawPolyline(g,this.pointsToDraw,this.chart.graphPen);
	}
	,updateUnselectedArea: function() {
		var g = new org_aswing_graphics_Graphics2D(this.chart.interactionLayer.get_graphics());
		g.clear();
		g.fillRectangle(this.selectorComponent.unselectedAreaBrush,this.graphBounds.x,this.graphBounds.y,Std["int"](this.selectorComponent.leftThumb.get_x() - this.graphBounds.x + this.selectorComponent.leftThumb.get_width() / 2),this.graphBounds.height);
		g.fillRectangle(this.selectorComponent.unselectedAreaBrush,Std["int"](this.selectorComponent.rightThumb.get_x() + this.selectorComponent.leftThumb.get_width() / 2),this.graphBounds.y,Std["int"](this.graphBounds.width - (this.selectorComponent.rightThumb.get_x() + this.selectorComponent.leftThumb.get_width() / 2 - this.graphBounds.x)),this.graphBounds.height);
	}
	,getFullIndexByX: function(x) {
		var index = Std["int"]((x - this.graphBounds.x) / this.graphBounds.width * (this.chart.get_data().length - 1));
		if(index < 0) index = 0;
		if(index >= this.chart.get_data().length) index = this.chart.get_data().length - 1;
		return index;
	}
	,__class__: jive_chart_ChartPeriodSelectorUI
});
var jive_chart_ChartValue = function() { };
$hxClasses["jive.chart.ChartValue"] = jive_chart_ChartValue;
jive_chart_ChartValue.__name__ = ["jive","chart","ChartValue"];
jive_chart_ChartValue.prototype = {
	__class__: jive_chart_ChartValue
	,__properties__: {get_caption:"get_caption",get_floatValue:"get_floatValue"}
};
var jive_chart_DateValue = function(v) {
	this.value = v;
};
$hxClasses["jive.chart.DateValue"] = jive_chart_DateValue;
jive_chart_DateValue.__name__ = ["jive","chart","DateValue"];
jive_chart_DateValue.__interfaces__ = [jive_chart_ChartValue];
jive_chart_DateValue.prototype = {
	get_floatValue: function() {
		return this.value.getTime();
	}
	,get_caption: function() {
		return DateTools.format(this.value,"%d.%m.%Y");
	}
	,getCaptionByFloatValue: function(v) {
		return DateTools.format((function($this) {
			var $r;
			var d = new Date();
			d.setTime(v);
			$r = d;
			return $r;
		}(this)),"%m.%Y");
	}
	,getChartValueByFloatValue: function(v) {
		return new jive_chart_DateValue((function($this) {
			var $r;
			var d = new Date();
			d.setTime(v);
			$r = d;
			return $r;
		}(this)));
	}
	,__class__: jive_chart_DateValue
	,__properties__: {get_caption:"get_caption",get_floatValue:"get_floatValue"}
};
var jive_chart_Point = function(x,y) {
	if(((x | 0) === x)) this.xValue = new jive_chart_IntValue(x); else if(typeof(x) == "number") this.xValue = new jive_chart_FloatValue(x); else if(js_Boot.__instanceof(x,Date)) this.xValue = new jive_chart_DateValue(x); else this.xValue = x;
	if(((y | 0) === y)) this.yValue = new jive_chart_IntValue(y); else if(typeof(y) == "number") this.yValue = new jive_chart_FloatValue(y); else if(js_Boot.__instanceof(y,Date)) this.yValue = new jive_chart_DateValue(y); else this.yValue = y;
};
$hxClasses["jive.chart.Point"] = jive_chart_Point;
jive_chart_Point.__name__ = ["jive","chart","Point"];
jive_chart_Point.prototype = {
	get_x: function() {
		return this.xValue.get_floatValue();
	}
	,get_y: function() {
		return this.yValue.get_floatValue();
	}
	,get_xCaption: function() {
		return this.xValue.get_caption();
	}
	,get_yCaption: function() {
		return this.yValue.get_caption();
	}
	,clone: function() {
		return new jive_chart_Point(this.xValue,this.yValue);
	}
	,__class__: jive_chart_Point
	,__properties__: {get_yCaption:"get_yCaption",get_xCaption:"get_xCaption",get_y:"get_y",get_x:"get_x"}
};
var jive_chart_DisplayPoint = function(minX,maxX,minY,maxY,average) {
	jive_chart_Point.call(this,average.xValue,average.yValue);
	this.minX = minX;
	this.maxX = maxX;
	this.minY = minY;
	this.maxY = maxY;
};
$hxClasses["jive.chart.DisplayPoint"] = jive_chart_DisplayPoint;
jive_chart_DisplayPoint.__name__ = ["jive","chart","DisplayPoint"];
jive_chart_DisplayPoint.__super__ = jive_chart_Point;
jive_chart_DisplayPoint.prototype = $extend(jive_chart_Point.prototype,{
	__class__: jive_chart_DisplayPoint
});
var jive_chart_FloatValue = function(v) {
	this.value = v;
};
$hxClasses["jive.chart.FloatValue"] = jive_chart_FloatValue;
jive_chart_FloatValue.__name__ = ["jive","chart","FloatValue"];
jive_chart_FloatValue.__interfaces__ = [jive_chart_ChartValue];
jive_chart_FloatValue.floatToStringPrecision = function(n,prec) {
	n = Math.round(n * Math.pow(10,prec));
	var str = "" + n;
	var len = str.length;
	if(len <= prec) {
		while(len < prec) {
			str = "0" + str;
			len++;
		}
		return "0." + str;
	} else return HxOverrides.substr(str,0,str.length - prec) + "." + HxOverrides.substr(str,str.length - prec,null);
};
jive_chart_FloatValue.prototype = {
	get_floatValue: function() {
		return this.value;
	}
	,get_caption: function() {
		return jive_chart_FloatValue.floatToStringPrecision(this.value,2);
	}
	,getCaptionByFloatValue: function(v) {
		return jive_chart_FloatValue.floatToStringPrecision(v,2);
	}
	,getChartValueByFloatValue: function(v) {
		return new jive_chart_FloatValue(v);
	}
	,__class__: jive_chart_FloatValue
	,__properties__: {get_caption:"get_caption",get_floatValue:"get_floatValue"}
};
var jive_chart_IntValue = function(v) {
	this.value = v;
};
$hxClasses["jive.chart.IntValue"] = jive_chart_IntValue;
jive_chart_IntValue.__name__ = ["jive","chart","IntValue"];
jive_chart_IntValue.__interfaces__ = [jive_chart_ChartValue];
jive_chart_IntValue.prototype = {
	get_floatValue: function() {
		return this.value;
	}
	,get_caption: function() {
		return Std.string(this.value);
	}
	,getCaptionByFloatValue: function(v) {
		return Std.string(v | 0);
	}
	,getChartValueByFloatValue: function(v) {
		return new jive_chart_IntValue(v | 0);
	}
	,__class__: jive_chart_IntValue
	,__properties__: {get_caption:"get_caption",get_floatValue:"get_floatValue"}
};
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl_events_Event
};
var jive_events_GestureEvent = function(type,bubbles,cancelable,phase,localX,localY,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,null != type?type:jive_events_GestureEvent.GESTURE_TWO_FINGER_TAP,bubbles,cancelable);
	this.localX = localX;
	this.localY = localY;
};
$hxClasses["jive.events.GestureEvent"] = jive_events_GestureEvent;
jive_events_GestureEvent.__name__ = ["jive","events","GestureEvent"];
jive_events_GestureEvent.__super__ = openfl_events_Event;
jive_events_GestureEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: jive_events_GestureEvent
});
var jive_events_GestureManager = function(c,magneticBorderSize) {
	if(magneticBorderSize == null) magneticBorderSize = 0;
	var _g = this;
	this.component = c;
	this.magneticBorderSize = magneticBorderSize;
	this.goalActuatorState = { x : 0, y : 0};
	this.curActuatorState = { x : 0, y : 0};
	this.clearTouches();
	if(openfl_ui_Multitouch.get_supportsTouchEvents()) {
		openfl_ui_Multitouch.set_inputMode(openfl_ui_MultitouchInputMode.TOUCH_POINT);
		this.component.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		this.component.addEventListener("touchMove",$bind(this,this.onTouchMove));
		this.component.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
		this.component.addEventListener(openfl_events_Event.ADDED_TO_STAGE,function(e) {
			_g.component.stage.addEventListener("touchMove",$bind(_g,_g.onTouchMove));
			_g.component.stage.addEventListener("touchEnd",$bind(_g,_g.onTouchEnd));
		});
	}
};
$hxClasses["jive.events.GestureManager"] = jive_events_GestureManager;
jive_events_GestureManager.__name__ = ["jive","events","GestureManager"];
jive_events_GestureManager.prototype = {
	onTouchBegin: function(e) {
		if(null != this.actuator) {
			motion_Actuate.stop(this.actuator);
			this.actuator = null;
		}
		this.removeOldTouches();
		var value = new openfl_geom_Point(e.stageX,e.stageY);
		this.touchBeginCoords.h[e.touchPointID] = value;
		var value1 = new openfl_geom_Point(e.stageX,e.stageY);
		this.touchCoords.h[e.touchPointID] = value1;
		var value2 = new openfl_geom_Point(e.stageX,e.stageY);
		this.touchPrevCoords.h[e.touchPointID] = value2;
		var value3 = haxe_Timer.stamp();
		this.touchBeginTimes.h[e.touchPointID] = value3;
		var value4 = haxe_Timer.stamp();
		this.touchTimes.h[e.touchPointID] = value4;
		var value5 = [];
		this.touchMoves.h[e.touchPointID] = value5;
	}
	,onTouchMove: function(e) {
		if(!this.touchBeginCoords.h.hasOwnProperty(e.touchPointID)) return;
		var value = this.touchCoords.h[e.touchPointID];
		this.touchPrevCoords.h[e.touchPointID] = value;
		this.touchMoves.h[e.touchPointID].push(new openfl_geom_Point(Std["int"](e.stageX - this.touchPrevCoords.h[e.touchPointID].x),Std["int"](e.stageY - this.touchPrevCoords.h[e.touchPointID].y)));
		var value1 = new openfl_geom_Point(e.stageX,e.stageY);
		this.touchCoords.h[e.touchPointID] = value1;
		var count = Lambda.count(this.touchBeginCoords,function(c) {
			return true;
		});
		var a = [];
		var $it0 = this.touchBeginCoords.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			a.push(k);
		}
		if(count == 2) {
			var scaleX = 1 + (Math.abs(this.touchCoords.h[a[0]].x - this.touchCoords.h[a[1]].x) - Math.abs(this.touchPrevCoords.h[a[0]].x - this.touchPrevCoords.h[a[1]].x)) / this.component.getWidth();
			var scaleY = 1 + (Math.abs(this.touchCoords.h[a[0]].y - this.touchCoords.h[a[1]].y) - Math.abs(this.touchPrevCoords.h[a[0]].y - this.touchPrevCoords.h[a[1]].y)) / this.component.getHeight();
			var offsetX = (this.touchCoords.h[a[0]].x + this.touchCoords.h[a[1]].x - (this.touchPrevCoords.h[a[0]].x + this.touchPrevCoords.h[a[1]].x)) / 2;
			var offsetY = (this.touchCoords.h[a[0]].y + this.touchCoords.h[a[1]].y - (this.touchPrevCoords.h[a[0]].y + this.touchPrevCoords.h[a[1]].y)) / 2;
			var localCoords = this.component.globalToComponent(new org_aswing_geom_IntPoint(Std["int"]((this.touchPrevCoords.h[a[0]].x + this.touchPrevCoords.h[a[1]].x) / 2),Std["int"]((this.touchPrevCoords.h[a[0]].y + this.touchPrevCoords.h[a[1]].y) / 2)));
			this.component.dispatchEvent(new jive_events_TransformGestureEvent(jive_events_TransformGestureEvent.GESTURE_ZOOM,true,false,null,localCoords.x,localCoords.y,scaleX,scaleY,0,offsetX,offsetY));
		} else if(count == 1) {
			var offsetX1 = this.touchCoords.h[a[0]].x - this.touchPrevCoords.h[a[0]].x;
			var offsetY1 = this.touchCoords.h[a[0]].y - this.touchPrevCoords.h[a[0]].y;
			var localCoords1 = this.component.globalToComponent(new org_aswing_geom_IntPoint(Std["int"](this.touchPrevCoords.h[a[0]].x),Std["int"](this.touchPrevCoords.h[a[0]].y)));
			this.component.dispatchEvent(new jive_events_TransformGestureEvent(jive_events_TransformGestureEvent.GESTURE_PAN,true,false,null,localCoords1.x,localCoords1.y,1,1,0,offsetX1,offsetY1));
		}
		var value2 = haxe_Timer.stamp();
		this.touchTimes.h[e.touchPointID] = value2;
	}
	,onTouchEnd: function(e) {
		var _g = this;
		if(!this.touchBeginCoords.h.hasOwnProperty(e.touchPointID)) return;
		var count = Lambda.count(this.touchBeginCoords,function(c) {
			return true;
		});
		if(count == 1) {
			var offsetY = 0.0;
			var offsetX = 0.0;
			var moves = this.touchMoves.h[e.touchPointID];
			var _g1 = 0;
			var _g2 = Std["int"](Math.min(10,moves.length));
			while(_g1 < _g2) {
				var i = _g1++;
				var p = moves.pop();
				offsetY += p.y;
				offsetX += p.x;
			}
			var localCoords = this.component.globalToComponent(new org_aswing_geom_IntPoint(Std["int"](this.touchPrevCoords.h[e.touchPointID].x),Std["int"](this.touchPrevCoords.h[e.touchPointID].y)));
			if(this.magneticBorderSize > 0) {
				var temp = 0.0;
				if(Math.abs(offsetY % this.magneticBorderSize) > this.magneticBorderSize / 2) offsetY = Math.abs(offsetY / this.magneticBorderSize | 0) * offsetY + (offsetY > 0?1:-1) * (this.magneticBorderSize - Math.abs(offsetY % this.magneticBorderSize)); else offsetY = Math.abs(offsetY / this.magneticBorderSize | 0) * offsetY + -1 * (offsetY % this.magneticBorderSize);
				offsetY += (this.goalActuatorState.y - this.curActuatorState.y) % this.magneticBorderSize;
			}
			var prev_x = 0;
			var prev_y = 0;
			var cur = { x : 0, y : 0};
			var actuationTime;
			if(Math.abs(offsetY) > this.magneticBorderSize) actuationTime = 1.5; else actuationTime = 0.05;
			this.goalActuatorState = { x : offsetX, y : offsetY};
			this.actuator = motion_Actuate.tween(cur,actuationTime,this.goalActuatorState).ease(motion_easing_Quart.get_easeOut()).onUpdate(function() {
				_g.component.dispatchEvent(new jive_events_TransformGestureEvent(jive_events_TransformGestureEvent.GESTURE_PAN,true,false,null,localCoords.x,localCoords.y,1,1,0,Math.floor(cur.x - prev_x),Math.floor(cur.y - prev_y)));
				prev_x = Math.floor(cur.x);
				prev_y = Math.floor(cur.y);
				_g.curActuatorState = { x : prev_x, y : prev_y};
			}).onComplete(function() {
				_g.component.dispatchEvent(new jive_events_TransformGestureEvent(jive_events_TransformGestureEvent.GESTURE_PAN,true,false,"COMPLETED",localCoords.x,localCoords.y,1,1,0,0,0));
			});
		}
		this.clearTouches();
	}
	,clearTouches: function() {
		this.touchBeginCoords = new haxe_ds_IntMap();
		this.touchPrevCoords = new haxe_ds_IntMap();
		this.touchCoords = new haxe_ds_IntMap();
		this.touchBeginTimes = new haxe_ds_IntMap();
		this.touchTimes = new haxe_ds_IntMap();
		this.touchMoves = new haxe_ds_IntMap();
	}
	,removeOldTouches: function() {
		var idsToRemove = [];
		var now = haxe_Timer.stamp();
		var $it0 = this.touchTimes.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			if(now - this.touchTimes.h[k] > 0.15) idsToRemove.push(k);
		}
		var _g = 0;
		while(_g < idsToRemove.length) {
			var id = idsToRemove[_g];
			++_g;
			this.touchBeginCoords.remove(id);
			this.touchPrevCoords.remove(id);
			this.touchCoords.remove(id);
			this.touchTimes.remove(id);
			this.touchBeginTimes.remove(id);
			this.touchMoves.remove(id);
		}
	}
	,__class__: jive_events_GestureManager
};
var jive_events_TransformGestureEvent = function(type,bubbles,cancelable,phase,localX,localY,scaleX,scaleY,rotation,offsetX,offsetY,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	if(rotation == null) rotation = 0;
	if(scaleY == null) scaleY = 1;
	if(scaleX == null) scaleX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	this.scaleX = scaleX;
	this.scaleY = scaleY;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.phase = phase;
	jive_events_GestureEvent.call(this,type,bubbles,cancelable,phase,localX,localY);
};
$hxClasses["jive.events.TransformGestureEvent"] = jive_events_TransformGestureEvent;
jive_events_TransformGestureEvent.__name__ = ["jive","events","TransformGestureEvent"];
jive_events_TransformGestureEvent.__super__ = jive_events_GestureEvent;
jive_events_TransformGestureEvent.prototype = $extend(jive_events_GestureEvent.prototype,{
	__class__: jive_events_TransformGestureEvent
});
var org_aswing_plaf_AdjusterUI = function() { };
$hxClasses["org.aswing.plaf.AdjusterUI"] = org_aswing_plaf_AdjusterUI;
org_aswing_plaf_AdjusterUI.__name__ = ["org","aswing","plaf","AdjusterUI"];
org_aswing_plaf_AdjusterUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_AdjusterUI.prototype = {
	__class__: org_aswing_plaf_AdjusterUI
};
var jive_plaf_flat_FlatAdjusterUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.inputText = new org_aswing_JTextField("",3);
	this.inputText.setFocusable(false);
};
$hxClasses["jive.plaf.flat.FlatAdjusterUI"] = jive_plaf_flat_FlatAdjusterUI;
jive_plaf_flat_FlatAdjusterUI.__name__ = ["jive","plaf","flat","FlatAdjusterUI"];
jive_plaf_flat_FlatAdjusterUI.__interfaces__ = [org_aswing_plaf_AdjusterUI];
jive_plaf_flat_FlatAdjusterUI.__super__ = org_aswing_plaf_BaseComponentUI;
jive_plaf_flat_FlatAdjusterUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getInputText: function() {
		return this.inputText;
	}
	,getPopupSlider: function() {
		return null;
	}
	,installUI: function(c) {
		this.adjuster = c;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.adjuster = c;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.adjuster,pp);
		org_aswing_LookAndFeel.installColorsAndFont(this.adjuster,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.adjuster,pp);
		this.cornerRadius = this.getNumber(pp + "cornerRadius");
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.adjuster);
	}
	,installComponents: function() {
		this.initInputText();
		this.plusButton = this.createPlusButton();
		this.minusButton = this.createMinusButton();
		this.adjuster.addChild(this.inputText);
		this.adjuster.addChild(this.plusButton);
		this.adjuster.addChild(this.minusButton);
		this.inputText.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.plusButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onPlusButtonPressed));
		this.minusButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMinusButtonPressed));
	}
	,uninstallComponents: function() {
		this.inputText.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.plusButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onPlusButtonPressed));
		this.minusButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMinusButtonPressed));
		this.adjuster.removeChild(this.inputText);
		this.adjuster.removeChild(this.plusButton);
		this.adjuster.removeChild(this.minusButton);
	}
	,installListeners: function() {
		this.adjuster.addStateListener($bind(this,this.__onValueChanged));
		this.adjuster.addEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.addEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.addEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,uninstallListeners: function() {
		this.adjuster.removeStateListener($bind(this,this.__onValueChanged));
		this.adjuster.removeEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.removeEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		var text = this.getShouldFilledText();
		if(text != this.inputText.getText()) this.inputText.setText(text);
		this.layoutAdjuster();
		this.getInputText().setEditable(this.adjuster.isEditable());
		this.getInputText().setEnabled(this.adjuster.isEnabled());
		this.plusButton.setEnabled(this.adjuster.isEnabled());
		this.minusButton.setEnabled(this.adjuster.isEnabled());
		g.drawLine(new org_aswing_graphics_Pen(c.get_background().offsetHLS(0,-0.2,-0.2)),this.plusButton.get_x() - 1,b.y - 1,this.plusButton.get_x() - 1,b.y + b.height + 1);
		g.drawLine(new org_aswing_graphics_Pen(c.get_background().offsetHLS(0,-0.2,-0.2)),this.plusButton.get_x(),b.y + (b.height / 2 | 0),b.x + b.width,b.y + (b.height / 2 | 0));
	}
	,getInternalFocusObject: function(c) {
		return this.inputText.getTextField();
	}
	,initInputText: function() {
		this.inputText.setColumns(this.adjuster.getColumns());
		this.inputText.setForeground(null);
		this.inputText.setFont(this.adjuster.getFont());
		this.inputText.setBorder(new org_aswing_border_EmptyBorder(null,new org_aswing_Insets(0,10,0,10)));
		this.inputText.setBackgroundDecorator(null);
	}
	,createButton: function() {
		var btn = new org_aswing_JButton(null);
		btn.setMargin(new org_aswing_Insets(2,5,2,5));
		btn.setForeground(null);
		btn.setBackground(null);
		btn.setFont(null);
		btn.setFocusable(false);
		return btn;
	}
	,createPlusButton: function() {
		var btn = this.createButton();
		btn.setIcon(new jive_plaf_flat_icon_PlusIcon(6,this.adjuster.get_mideground()));
		btn.setBackgroundDecorator(new jive_plaf_flat_adjuster_PlusButtonBackground(this.adjuster.get_background(),this.adjuster.get_background().offsetHLS(0,0.1,0),this.adjuster.get_background().offsetHLS(0,-0.1,0),this.cornerRadius));
		return btn;
	}
	,createMinusButton: function() {
		var btn = this.createButton();
		btn.setIcon(new jive_plaf_flat_icon_MinusIcon(6,this.adjuster.get_mideground()));
		btn.setBackgroundDecorator(new jive_plaf_flat_adjuster_MinusButtonBackground(this.adjuster.get_background(),this.adjuster.get_background().offsetHLS(0,0.1,0),this.adjuster.get_background().offsetHLS(0,-0.1,0),this.cornerRadius));
		return btn;
	}
	,fillInputTextWithCurrentValue: function() {
		this.inputText.setText(this.getShouldFilledText());
	}
	,getShouldFilledText: function() {
		var value = this.adjuster.getValue();
		var text = (this.adjuster.getValueTranslator())(value);
		return text;
	}
	,getTextButtonGap: function() {
		return 1;
	}
	,layoutAdjuster: function() {
		var td = this.adjuster.getSize();
		var insets = this.adjuster.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var gap = this.getTextButtonGap();
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.plusButton.getPreferredSize();
		this.plusButton.setSizeWH(buttonSize.width,(height / 2 | 0) + 1);
		this.plusButton.setLocationXY(right - buttonSize.width,top - 1);
		this.minusButton.setSizeWH(buttonSize.width,height / 2 | 0);
		this.minusButton.setLocationXY(right - buttonSize.width,top + (height / 2 | 0) + 1);
		this.inputText.setLocationXY(left,top - 1);
		this.inputText.setSizeWH(td.width - insets.left - insets.right - buttonSize.width - gap,height + 2);
	}
	,getPreferredSize: function(c) {
		var insets = this.adjuster.getInsets();
		var textSize = this.inputText.getPreferredSize();
		var btnSize = this.plusButton.getPreferredSize();
		var size = new org_aswing_geom_IntDimension(textSize.width + this.getTextButtonGap() + btnSize.width,textSize.height);
		return insets.getOutsideSize(size);
	}
	,getMinimumSize: function(c) {
		return this.adjuster.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(0,0));
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__onValueChanged: function(e) {
		this.fillInputTextWithCurrentValue();
	}
	,__onInputTextMouseWheel: function(e) {
		this.adjuster.setValue(this.adjuster.getValue() + e.delta * this.getUnitIncrement());
	}
	,__onPlusButtonPressed: function(e) {
		this.adjuster.setValue(this.adjuster.getValue() + this.getUnitIncrement());
		this.fillInputTextWithCurrentValue();
		this.fireActionEvent();
	}
	,__onMinusButtonPressed: function(e) {
		this.adjuster.setValue(this.adjuster.getValue() - this.getUnitIncrement());
		this.fillInputTextWithCurrentValue();
		this.fireActionEvent();
	}
	,__inputTextAction: function(fireActOnlyIfChanged) {
		if(fireActOnlyIfChanged == null) fireActOnlyIfChanged = false;
		var text = this.inputText.getText();
		var value = (this.adjuster.getValueParser())(text);
		this.adjuster.setValue(value);
		this.fillInputTextWithCurrentValue();
		if(!fireActOnlyIfChanged) this.fireActionEvent(); else if(value != this.startEditingValue) this.fireActionEvent();
	}
	,fireActionEvent: function() {
		this.startEditingValue = this.adjuster.getValue();
		this.adjuster.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,__onFocusGained: function(e) {
		this.startEditingValue = this.adjuster.getValue();
	}
	,__onFocusLost: function(e) {
		this.__inputTextAction(true);
	}
	,__onInputTextKeyDown: function(e) {
		var code = e.keyCode;
		var unit = this.getUnitIncrement();
		var block = unit * 10;
		var delta = 0;
		if(code == 13) {
			this.__inputTextAction(false);
			return;
		}
		if(code == 38) delta = unit; else if(code == 40) delta = -unit; else if(code == 33) delta = block; else if(code == 34) delta = -block; else if(code == 36) {
			this.adjuster.setValue(this.adjuster.getMinimum());
			return;
		} else if(code == 35) {
			this.adjuster.setValue(this.adjuster.getMaximum() - this.adjuster.getExtent());
			return;
		}
		this.adjuster.setValue(this.adjuster.getValue() + delta);
	}
	,setUnitIncrement: function(increment) {
		this.unitIncrement = increment;
	}
	,getUnitIncrement: function() {
		if(null == this.unitIncrement) return Std["int"]((this.adjuster.getMaximum() - this.adjuster.getMinimum()) / 20); else return this.unitIncrement;
	}
	,__class__: jive_plaf_flat_FlatAdjusterUI
});
var org_aswing_geom_IntRectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = 0;
	this.y = 0;
	this.width = 0;
	this.height = 0;
	this.setRectXYWH(x,y,width,height);
};
$hxClasses["org.aswing.geom.IntRectangle"] = org_aswing_geom_IntRectangle;
org_aswing_geom_IntRectangle.__name__ = ["org","aswing","geom","IntRectangle"];
org_aswing_geom_IntRectangle.creatWithRectangle = function(r) {
	return new org_aswing_geom_IntRectangle(r.x | 0,r.y | 0,r.width | 0,r.height | 0);
};
org_aswing_geom_IntRectangle.prototype = {
	toRectangle: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,setWithRectangle: function(r) {
		this.x = r.x | 0;
		this.y = r.y | 0;
		this.width = r.width | 0;
		this.height = r.height | 0;
	}
	,setRect: function(rect) {
		this.setRectXYWH(rect.x,rect.y,rect.width,rect.height);
	}
	,setRectXYWH: function(x,y,width,height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,setLocation: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,setSize: function(size) {
		this.width = size.width;
		this.height = size.height;
	}
	,getSize: function() {
		return new org_aswing_geom_IntDimension(this.width,this.height);
	}
	,getLocation: function() {
		return new org_aswing_geom_IntPoint(this.x,this.y);
	}
	,union: function(r) {
		var x1 = Std["int"](Math.min(this.x,r.x));
		var x2 = Std["int"](Math.max(this.x + this.width,r.x + r.width));
		var y1 = Std["int"](Math.min(this.y,r.y));
		var y2 = Std["int"](Math.max(this.y + this.height,r.y + r.height));
		return new org_aswing_geom_IntRectangle(x1,y1,x2 - x1,y2 - y1);
	}
	,grow: function(h,v) {
		this.x -= h;
		this.y -= v;
		this.width += h * 2;
		this.height += v * 2;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,resize: function(dwidth,dheight) {
		if(dheight == null) dheight = 0;
		if(dwidth == null) dwidth = 0;
		this.width += dwidth;
		this.height += dheight;
	}
	,leftTop: function() {
		return new org_aswing_geom_IntPoint(this.x,this.y);
	}
	,rightTop: function() {
		return new org_aswing_geom_IntPoint(this.x + this.width,this.y);
	}
	,leftBottom: function() {
		return new org_aswing_geom_IntPoint(this.x,this.y + this.height);
	}
	,rightBottom: function() {
		return new org_aswing_geom_IntPoint(this.x + this.width,this.y + this.height);
	}
	,containsPoint: function(p) {
		if(p.x < this.x || p.y < this.y || p.x > this.x + this.width || p.y > this.y + this.height) return false; else return true;
	}
	,equals: function(o) {
		var r;
		r = js_Boot.__instanceof(o,org_aswing_geom_IntRectangle)?o:null;
		if(r == null) return false;
		return this.x == r.x && this.y == r.y && this.width == r.width && this.height == r.height;
	}
	,clone: function() {
		return new org_aswing_geom_IntRectangle(this.x,this.y,this.width,this.height);
	}
	,toString: function() {
		return "IntRectangle[x:" + this.x + ",y:" + this.y + ", width:" + this.width + ",height:" + this.height + "]";
	}
	,__class__: org_aswing_geom_IntRectangle
};
var org_aswing_plaf_basic_BasicButtonUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicButtonUI"] = org_aswing_plaf_basic_BasicButtonUI;
org_aswing_plaf_basic_BasicButtonUI.__name__ = ["org","aswing","plaf","basic","BasicButtonUI"];
org_aswing_plaf_basic_BasicButtonUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicButtonUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Button.";
	}
	,installUI: function(c) {
		this.button = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		this.installDefaults(this.button);
		this.installComponents(this.button);
		this.installListeners(this.button);
	}
	,uninstallUI: function(c) {
		this.button = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		this.uninstallDefaults(this.button);
		this.uninstallComponents(this.button);
		this.uninstallListeners(this.button);
	}
	,installDefaults: function(b) {
		var pp = this.getPropertyPrefix();
		if(!b.isShiftOffsetSet()) {
			b.setShiftOffset(this.getInt(pp + "textShiftOffset"));
			b.setShiftOffsetSet(false);
		}
		if(Std["is"](b.getMargin(),org_aswing_plaf_UIResource)) b.setMargin(this.getInsets(pp + "margin"));
		org_aswing_LookAndFeel.installColorsAndFont(b,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(b,pp);
		org_aswing_LookAndFeel.installBasicProperties(b,pp);
		this.button.mouseChildren = false;
		if(Std["is"](b.getTextFilters(),org_aswing_plaf_UIResource)) b.setTextFilters(this.getInstance(pp + "textFilters"));
	}
	,refreshStyleProperties: function() {
		this.installDefaults(this.button);
		this.button.repaint();
		this.button.revalidate();
	}
	,uninstallDefaults: function(b) {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(b);
	}
	,installComponents: function(b) {
		this.textField = org_aswing_AsWingUtils.createLabel(b,"label");
		b.setFontValidated(false);
	}
	,uninstallComponents: function(b) {
		b.removeChild(this.textField);
	}
	,installListeners: function(b) {
		b.addStateListener($bind(this,this.__stateListener));
		b.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		b.addEventListener("focusKeyUp",$bind(this,this.__onKeyUp));
	}
	,uninstallListeners: function(b) {
		b.removeStateListener($bind(this,this.__stateListener));
		b.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		b.removeEventListener("focusKeyUp",$bind(this,this.__onKeyUp));
	}
	,getTextShiftOffset: function() {
		return this.button.getShiftOffset();
	}
	,__stateListener: function(e) {
		this.button.repaint();
	}
	,__onKeyDown: function(e) {
		if(!(this.button.isShowing() && this.button.isEnabled())) return;
		var model = this.button.getModel();
		if((e.keyCode | 0) == org_aswing_AWKeyboard.SPACE && !(model.isRollOver() && model.isPressed())) {
			this.setTraversingTrue();
			model.setRollOver(true);
			model.setArmed(true);
			model.setPressed(true);
		}
	}
	,__onKeyUp: function(e) {
		if(!(this.button.isShowing() && this.button.isEnabled())) return;
		if((e.keyCode | 0) == org_aswing_AWKeyboard.SPACE) {
			var model = this.button.getModel();
			this.setTraversingTrue();
			model.setPressed(false);
			model.setArmed(false);
			model.setRollOver(false);
		}
	}
	,setTraversingTrue: function() {
		var fm = org_aswing_FocusManager.getManager(this.button.stage);
		if(fm != null) fm.setTraversing(true);
	}
	,paint: function(c,g,r) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,r);
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		var insets = b.getMargin();
		if(insets != null) r = insets.getInsideBounds(r);
		org_aswing_plaf_basic_BasicButtonUI.viewRect.setRect(r);
		org_aswing_plaf_basic_BasicButtonUI.textRect.x = org_aswing_plaf_basic_BasicButtonUI.textRect.y = org_aswing_plaf_basic_BasicButtonUI.textRect.width = org_aswing_plaf_basic_BasicButtonUI.textRect.height = 0;
		org_aswing_plaf_basic_BasicButtonUI.iconRect.x = org_aswing_plaf_basic_BasicButtonUI.iconRect.y = org_aswing_plaf_basic_BasicButtonUI.iconRect.width = org_aswing_plaf_basic_BasicButtonUI.iconRect.height = 0;
		var text = org_aswing_AsWingUtils.layoutCompoundLabel(c,c.getFont(),b.getDisplayText(),this.getIconToLayout(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),org_aswing_plaf_basic_BasicButtonUI.viewRect,org_aswing_plaf_basic_BasicButtonUI.iconRect,org_aswing_plaf_basic_BasicButtonUI.textRect,b.getDisplayText() == null?0:b.getIconTextGap());
		this.paintIcon(b,g,org_aswing_plaf_basic_BasicButtonUI.iconRect);
		if(text != null && text != "") {
			this.textField.set_visible(true);
			if(b.getModel().isArmed() || b.getModel().isSelected()) {
				org_aswing_plaf_basic_BasicButtonUI.textRect.x += this.getTextShiftOffset();
				org_aswing_plaf_basic_BasicButtonUI.textRect.y += this.getTextShiftOffset();
			}
			this.paintText(b,org_aswing_plaf_basic_BasicButtonUI.textRect,text);
		} else {
			this.textField.set_text("");
			this.textField.set_visible(false);
		}
	}
	,getIconToLayout: function() {
		return this.button.getIcon();
	}
	,paintBackGround: function(c,g,b) {
	}
	,paintText: function(b,textRect,text) {
		b.bringToTop(this.textField);
		var font = b.getFont();
		if(this.textField.get_text() != text) this.textField.set_text(text);
		if(!b.isFontValidated()) {
			org_aswing_AsWingUtils.applyTextFont(this.textField,font);
			b.setFontValidated(true);
		}
		org_aswing_AsWingUtils.applyTextColor(this.textField,this.getTextPaintColor(b));
		this.textField.set_x(textRect.x);
		this.textField.set_y(textRect.y);
		if(b.getMnemonicIndex() >= 0) this.textField.setTextFormat(new openfl_text_TextFormat(null,null,null,null,null,true),b.getMnemonicIndex());
		this.textField.set_filters(b.getTextFilters());
	}
	,getTextPaintColor: function(b) {
		if(b.isEnabled()) return b.getForeground(); else return org_aswing_plaf_basic_BasicGraphicsUtils.getDisabledColor(b);
	}
	,paintIcon: function(b,g,iconRect) {
		var model = b.getModel();
		var icon = b.getIcon();
		var tmpIcon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon == null) return;
		if(!model.isEnabled()) {
			if(model.isSelected()) tmpIcon = b.getDisabledSelectedIcon(); else tmpIcon = b.getDisabledIcon();
		} else if(model.isPressed() && model.isArmed()) tmpIcon = b.getPressedIcon(); else if(b.isRollOverEnabled() && model.isRollOver()) {
			if(model.isSelected()) tmpIcon = b.getRollOverSelectedIcon(); else tmpIcon = b.getRollOverIcon();
		} else if(model.isSelected()) tmpIcon = b.getSelectedIcon();
		if(tmpIcon != null) icon = tmpIcon;
		this.setIconVisible(icon,true);
		if(model.isPressed() && model.isArmed()) icon.updateIcon(b,g,iconRect.x + this.getTextShiftOffset(),iconRect.y + this.getTextShiftOffset()); else icon.updateIcon(b,g,iconRect.x,iconRect.y);
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.button) != null) icon.getDisplay(this.button).set_visible(visible);
	}
	,getIcons: function() {
		var arr = [];
		if(this.button.getIcon() != null) arr.push(this.button.getIcon());
		if(this.button.getDisabledIcon() != null) arr.push(this.button.getDisabledIcon());
		if(this.button.getSelectedIcon() != null) arr.push(this.button.getSelectedIcon());
		if(this.button.getDisabledSelectedIcon() != null) arr.push(this.button.getDisabledSelectedIcon());
		if(this.button.getRollOverIcon() != null) arr.push(this.button.getRollOverIcon());
		if(this.button.getRollOverSelectedIcon() != null) arr.push(this.button.getRollOverSelectedIcon());
		if(this.button.getPressedIcon() != null) arr.push(this.button.getPressedIcon());
		return arr;
	}
	,getButtonPreferredSize: function(b,icon,text) {
		org_aswing_plaf_basic_BasicButtonUI.viewRect.setRectXYWH(0,0,100000,100000);
		org_aswing_plaf_basic_BasicButtonUI.textRect.x = org_aswing_plaf_basic_BasicButtonUI.textRect.y = org_aswing_plaf_basic_BasicButtonUI.textRect.width = org_aswing_plaf_basic_BasicButtonUI.textRect.height = 0;
		org_aswing_plaf_basic_BasicButtonUI.iconRect.x = org_aswing_plaf_basic_BasicButtonUI.iconRect.y = org_aswing_plaf_basic_BasicButtonUI.iconRect.width = org_aswing_plaf_basic_BasicButtonUI.iconRect.height = 0;
		org_aswing_AsWingUtils.layoutCompoundLabel(b,b.getFont(),text,icon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),org_aswing_plaf_basic_BasicButtonUI.viewRect,org_aswing_plaf_basic_BasicButtonUI.iconRect,org_aswing_plaf_basic_BasicButtonUI.textRect,b.getDisplayText() == null?0:b.getIconTextGap());
		var size;
		if(icon == null) size = org_aswing_plaf_basic_BasicButtonUI.textRect.getSize(); else if(b.getDisplayText() == null || b.getDisplayText() == "") size = org_aswing_plaf_basic_BasicButtonUI.iconRect.getSize(); else {
			var r = org_aswing_plaf_basic_BasicButtonUI.iconRect.union(org_aswing_plaf_basic_BasicButtonUI.textRect);
			size = r.getSize();
		}
		size = b.getInsets().getOutsideSize(size);
		if(b.getMargin() != null) size = b.getMargin().getOutsideSize(size);
		return size;
	}
	,getButtonMinimumSize: function(b,icon,text) {
		var size = b.getInsets().getOutsideSize();
		if(b.getMargin() != null) size = b.getMargin().getOutsideSize(size);
		return size;
	}
	,getPreferredSize: function(c) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		return this.getButtonPreferredSize(b,this.getIconToLayout(),b.getDisplayText());
	}
	,getMinimumSize: function(c) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		return this.getButtonMinimumSize(b,this.getIconToLayout(),b.getDisplayText());
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__class__: org_aswing_plaf_basic_BasicButtonUI
});
var jive_plaf_flat_FlatButtonUI = function() {
	org_aswing_plaf_basic_BasicButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatButtonUI"] = jive_plaf_flat_FlatButtonUI;
jive_plaf_flat_FlatButtonUI.__name__ = ["jive","plaf","flat","FlatButtonUI"];
jive_plaf_flat_FlatButtonUI.__super__ = org_aswing_plaf_basic_BasicButtonUI;
jive_plaf_flat_FlatButtonUI.prototype = $extend(org_aswing_plaf_basic_BasicButtonUI.prototype,{
	installDefaults: function(b) {
		org_aswing_plaf_basic_BasicButtonUI.prototype.installDefaults.call(this,b);
		if(!b.iconTextGapSet) b.set_iconTextGap(this.getInt(this.getPropertyPrefix() + "textGap"));
	}
	,__class__: jive_plaf_flat_FlatButtonUI
});
var jive_plaf_flat_FlatToggleButtonUI = function() {
	jive_plaf_flat_FlatButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatToggleButtonUI"] = jive_plaf_flat_FlatToggleButtonUI;
jive_plaf_flat_FlatToggleButtonUI.__name__ = ["jive","plaf","flat","FlatToggleButtonUI"];
jive_plaf_flat_FlatToggleButtonUI.__super__ = jive_plaf_flat_FlatButtonUI;
jive_plaf_flat_FlatToggleButtonUI.prototype = $extend(jive_plaf_flat_FlatButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "ToggleButton.";
	}
	,paintIcon: function(b,g,iconRect) {
		var model = b.getModel();
		var icon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(!model.isEnabled()) {
			if(model.isSelected()) icon = b.getDisabledSelectedIcon(); else icon = b.getDisabledIcon();
		} else if(model.isPressed() && model.isArmed()) {
			icon = b.getPressedIcon();
			if(icon == null) icon = b.getSelectedIcon();
		} else if(model.isSelected()) {
			if(b.isRollOverEnabled() && model.isRollOver()) {
				icon = b.getRollOverSelectedIcon();
				if(icon == null) icon = b.getSelectedIcon();
			} else icon = b.getSelectedIcon();
		} else if(b.isRollOverEnabled() && model.isRollOver()) icon = b.getRollOverIcon();
		if(icon == null) icon = b.getIcon();
		if(icon == null) icon = this.getIconToLayout();
		if(icon != null) {
			this.setIconVisible(icon,true);
			icon.updateIcon(b,g,iconRect.x,iconRect.y);
		}
	}
	,__class__: jive_plaf_flat_FlatToggleButtonUI
});
var jive_plaf_flat_FlatRadioButtonUI = function() {
	jive_plaf_flat_FlatToggleButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatRadioButtonUI"] = jive_plaf_flat_FlatRadioButtonUI;
jive_plaf_flat_FlatRadioButtonUI.__name__ = ["jive","plaf","flat","FlatRadioButtonUI"];
jive_plaf_flat_FlatRadioButtonUI.__super__ = jive_plaf_flat_FlatToggleButtonUI;
jive_plaf_flat_FlatRadioButtonUI.prototype = $extend(jive_plaf_flat_FlatToggleButtonUI.prototype,{
	installDefaults: function(b) {
		jive_plaf_flat_FlatToggleButtonUI.prototype.installDefaults.call(this,b);
		this.defaultIcon = this.getIcon(this.getPropertyPrefix() + "icon");
	}
	,uninstallDefaults: function(b) {
		jive_plaf_flat_FlatToggleButtonUI.prototype.uninstallDefaults.call(this,b);
		if(this.defaultIcon.getDisplay(b) != null) {
			if(this.button.contains(this.defaultIcon.getDisplay(b))) this.button.removeChild(this.defaultIcon.getDisplay(b));
		}
	}
	,getPropertyPrefix: function() {
		return "RadioButton.";
	}
	,getDefaultIcon: function() {
		return this.defaultIcon;
	}
	,getIconToLayout: function() {
		if(this.button.getIcon() == null) {
			if(this.defaultIcon.getDisplay(this.button) != null) {
				if(!this.button.contains(this.defaultIcon.getDisplay(this.button))) this.button.addChild(this.defaultIcon.getDisplay(this.button));
			}
			return this.defaultIcon;
		} else return this.button.getIcon();
	}
	,paintBackGround: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,__class__: jive_plaf_flat_FlatRadioButtonUI
});
var jive_plaf_flat_FlatCheckBoxUI = function() {
	jive_plaf_flat_FlatRadioButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatCheckBoxUI"] = jive_plaf_flat_FlatCheckBoxUI;
jive_plaf_flat_FlatCheckBoxUI.__name__ = ["jive","plaf","flat","FlatCheckBoxUI"];
jive_plaf_flat_FlatCheckBoxUI.__super__ = jive_plaf_flat_FlatRadioButtonUI;
jive_plaf_flat_FlatCheckBoxUI.prototype = $extend(jive_plaf_flat_FlatRadioButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "CheckBox.";
	}
	,installDefaults: function(b) {
		jive_plaf_flat_FlatRadioButtonUI.prototype.installDefaults.call(this,b);
		var checkBox;
		checkBox = js_Boot.__instanceof(b,org_aswing_JCheckBox)?b:null;
		if(null == checkBox) return;
		checkBox.tickColor = this.getColor(this.getPropertyPrefix() + "tickColor");
	}
	,__class__: jive_plaf_flat_FlatCheckBoxUI
});
var org_aswing_Cell = function() { };
$hxClasses["org.aswing.Cell"] = org_aswing_Cell;
org_aswing_Cell.__name__ = ["org","aswing","Cell"];
org_aswing_Cell.prototype = {
	__class__: org_aswing_Cell
};
var org_aswing_ListCell = function() { };
$hxClasses["org.aswing.ListCell"] = org_aswing_ListCell;
org_aswing_ListCell.__name__ = ["org","aswing","ListCell"];
org_aswing_ListCell.__interfaces__ = [org_aswing_Cell];
org_aswing_ListCell.prototype = {
	__class__: org_aswing_ListCell
};
var org_aswing_AbstractListCell = function() {
	org_aswing_AbstractListCell.AWML_INDEX++;
	this.awmlIndex = org_aswing_AbstractListCell.AWML_INDEX;
};
$hxClasses["org.aswing.AbstractListCell"] = org_aswing_AbstractListCell;
org_aswing_AbstractListCell.__name__ = ["org","aswing","AbstractListCell"];
org_aswing_AbstractListCell.__interfaces__ = [org_aswing_ListCell];
org_aswing_AbstractListCell.prototype = {
	getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,setListCellStatus: function(list,isSelected,index) {
		var com = this.getCellComponent();
		if(isSelected) {
			com.setBackground(list.getSelectionBackground());
			com.setForeground(list.getSelectionForeground());
		} else {
			com.setBackground(list.getBackground());
			com.setForeground(list.getForeground());
		}
		com.setFont(list.getFont());
	}
	,setCellValue: function(value) {
		this.value = value;
	}
	,getCellValue: function() {
		return this.value;
	}
	,getCellComponent: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,__class__: org_aswing_AbstractListCell
};
var jive_plaf_flat_FlatListCell = function() {
	org_aswing_AbstractListCell.call(this);
};
$hxClasses["jive.plaf.flat.FlatListCell"] = jive_plaf_flat_FlatListCell;
jive_plaf_flat_FlatListCell.__name__ = ["jive","plaf","flat","FlatListCell"];
jive_plaf_flat_FlatListCell.__super__ = org_aswing_AbstractListCell;
jive_plaf_flat_FlatListCell.prototype = $extend(org_aswing_AbstractListCell.prototype,{
	get_cellComponent: function() {
		if(null == this._cellComponent) {
			this._cellComponent = new jive_plaf_flat_TextCellComponent();
			this.initCellComponent();
		}
		return this._cellComponent;
	}
	,initCellComponent: function() {
	}
	,setListCellStatus: function(list,isSelected,index) {
		org_aswing_AbstractListCell.prototype.setListCellStatus.call(this,list,isSelected,index);
		this.get_cellComponent().isLast = index == list.get_model().getSize() - 1;
		this.get_cellComponent().isFirst = 0 == index;
	}
	,setCellValue: function(value) {
		org_aswing_AbstractListCell.prototype.setCellValue.call(this,value);
		this.get_cellComponent().set_value(this.getStringValue(value));
	}
	,getStringValue: function(value) {
		return Std.string(value) + "";
	}
	,getCellComponent: function() {
		return this.get_cellComponent();
	}
	,__class__: jive_plaf_flat_FlatListCell
	,__properties__: {get_cellComponent:"get_cellComponent"}
});
var jive_plaf_flat_FlatComboBoxListCell = function() {
	jive_plaf_flat_FlatListCell.call(this);
};
$hxClasses["jive.plaf.flat.FlatComboBoxListCell"] = jive_plaf_flat_FlatComboBoxListCell;
jive_plaf_flat_FlatComboBoxListCell.__name__ = ["jive","plaf","flat","FlatComboBoxListCell"];
jive_plaf_flat_FlatComboBoxListCell.__super__ = jive_plaf_flat_FlatListCell;
jive_plaf_flat_FlatComboBoxListCell.prototype = $extend(jive_plaf_flat_FlatListCell.prototype,{
	initCellComponent: function() {
		jive_plaf_flat_FlatListCell.prototype.initCellComponent.call(this);
		this._cellComponent.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__labelRollover),false,0,false);
		this._cellComponent.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__labelRollout),false,0,false);
	}
	,setListCellStatus: function(list,isSelected,index) {
		jive_plaf_flat_FlatListCell.prototype.setListCellStatus.call(this,list,isSelected,index);
		var com = this.getCellComponent();
		if(isSelected) {
			com.setBackground(this.realBackground = list.getSelectionBackground());
			com.setForeground(this.realForeground = list.getSelectionForeground());
		} else {
			com.setBackground(this.realBackground = list.getBackground());
			com.setForeground(this.realForeground = list.getForeground());
		}
		com.setFont(list.getFont());
		this.rolloverBackground = list.getSelectionBackground().offsetHLS(0,0.05,-0.1);
		this.rolloverForeground = list.getSelectionForeground();
	}
	,__labelRollover: function(e) {
		if(this.rolloverBackground != null) {
			this.get_cellComponent().setBackground(this.rolloverBackground);
			this.get_cellComponent().setForeground(this.rolloverForeground);
		}
	}
	,__labelRollout: function(e) {
		if(this.realBackground != null) {
			this.get_cellComponent().setBackground(this.realBackground);
			this.get_cellComponent().setForeground(this.realForeground);
		}
	}
	,__class__: jive_plaf_flat_FlatComboBoxListCell
});
var org_aswing_ListCellFactory = function() { };
$hxClasses["org.aswing.ListCellFactory"] = org_aswing_ListCellFactory;
org_aswing_ListCellFactory.__name__ = ["org","aswing","ListCellFactory"];
org_aswing_ListCellFactory.prototype = {
	__class__: org_aswing_ListCellFactory
};
var org_aswing_DefaultListTextCellFactory = function(listCellClass,shareCelles,sameHeight,height) {
	if(height == null) height = -1;
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	this.listCellClass = listCellClass;
	this.shareCelles = shareCelles;
	this.sameHeight = sameHeight;
	this.cellHeight = height;
};
$hxClasses["org.aswing.DefaultListTextCellFactory"] = org_aswing_DefaultListTextCellFactory;
org_aswing_DefaultListTextCellFactory.__name__ = ["org","aswing","DefaultListTextCellFactory"];
org_aswing_DefaultListTextCellFactory.__interfaces__ = [org_aswing_ListCellFactory];
org_aswing_DefaultListTextCellFactory.prototype = {
	createNewCell: function() {
		return org_aswing_AsWingUtils["as"](Type.createInstance(this.listCellClass,[]),org_aswing_ListCell);
	}
	,isAllCellHasSameHeight: function() {
		return this.sameHeight;
	}
	,isShareCells: function() {
		return this.shareCelles;
	}
	,setCellHeight: function(h) {
		this.cellHeight = h;
	}
	,getCellHeight: function() {
		if(this.cellHeight < 0) {
			var cell = this.createNewCell();
			cell.setCellValue("JjHhWpqQ1@|");
			this.cellHeight = cell.getCellComponent().getPreferredSize().height;
		}
		return this.cellHeight;
	}
	,__class__: org_aswing_DefaultListTextCellFactory
};
var jive_plaf_flat_FlatComboBoxListCellFactory = function(shareCelles,sameHeight) {
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	org_aswing_DefaultListTextCellFactory.call(this,jive_plaf_flat_FlatComboBoxListCell,shareCelles,sameHeight);
};
$hxClasses["jive.plaf.flat.FlatComboBoxListCellFactory"] = jive_plaf_flat_FlatComboBoxListCellFactory;
jive_plaf_flat_FlatComboBoxListCellFactory.__name__ = ["jive","plaf","flat","FlatComboBoxListCellFactory"];
jive_plaf_flat_FlatComboBoxListCellFactory.__super__ = org_aswing_DefaultListTextCellFactory;
jive_plaf_flat_FlatComboBoxListCellFactory.prototype = $extend(org_aswing_DefaultListTextCellFactory.prototype,{
	__class__: jive_plaf_flat_FlatComboBoxListCellFactory
});
var org_aswing_plaf_ComboBoxUI = function() { };
$hxClasses["org.aswing.plaf.ComboBoxUI"] = org_aswing_plaf_ComboBoxUI;
org_aswing_plaf_ComboBoxUI.__name__ = ["org","aswing","plaf","ComboBoxUI"];
org_aswing_plaf_ComboBoxUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_ComboBoxUI.prototype = {
	__class__: org_aswing_plaf_ComboBoxUI
};
var org_aswing_plaf_basic_BasicComboBoxUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicComboBoxUI"] = org_aswing_plaf_basic_BasicComboBoxUI;
org_aswing_plaf_basic_BasicComboBoxUI.__name__ = ["org","aswing","plaf","basic","BasicComboBoxUI"];
org_aswing_plaf_basic_BasicComboBoxUI.__interfaces__ = [org_aswing_plaf_ComboBoxUI];
org_aswing_plaf_basic_BasicComboBoxUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicComboBoxUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.box = js_Boot.__instanceof(c,org_aswing_JComboBox)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.box = js_Boot.__instanceof(c,org_aswing_JComboBox)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "ComboBox.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.box,pp);
		org_aswing_LookAndFeel.installColorsAndFont(this.box,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.box,pp);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.box);
	}
	,installComponents: function() {
		this.dropDownButton = this.createDropDownButton();
		this.dropDownButton.setUIElement(true);
		this.box.addChild(this.dropDownButton);
	}
	,uninstallComponents: function() {
		this.box.removeChild(this.dropDownButton);
		if(this.isPopupVisible(this.box)) this.setPopupVisible(this.box,false);
	}
	,installListeners: function() {
		this.getPopupList().setFocusable(false);
		this.box.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onBoxPressed));
		this.box.addEventListener("focusKeyDown",$bind(this,this.__onFocusKeyDown));
		this.box.addEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.box.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onBoxRemovedFromStage));
		this.getPopupList().addEventListener("itemClick",$bind(this,this.__onListItemReleased),false,0,false);
		this.popupTimer = new org_aswing_util_Timer(40);
		this.popupTimer.addActionListener($bind(this,this.__movePopup));
	}
	,uninstallListeners: function() {
		this.popupTimer.stop();
		this.popupTimer = null;
		this.box.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onBoxPressed));
		this.box.removeEventListener("focusKeyDown",$bind(this,this.__onFocusKeyDown));
		this.box.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.box.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onBoxRemovedFromStage));
		this.getPopupList().removeEventListener("itemClick",$bind(this,this.__onListItemReleased));
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.layoutCombobox();
		this.dropDownButton.setEnabled(this.box.isEnabled());
	}
	,paintBackGround: function(c,g,b) {
	}
	,createDropDownButton: function() {
		var btn = new org_aswing_JButton("",new org_aswing_plaf_basic_icon_ArrowIcon(Math.PI / 2,16));
		btn.setFocusable(false);
		btn.setPreferredSize(new org_aswing_geom_IntDimension(16,16));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org_aswing_Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,getScollPane: function() {
		if(this.scollPane == null) {
			this.scollPane = new org_aswing_JScrollPane(this.getPopupList());
			this.scollPane.setBorder(this.getBorder(this.getPropertyPrefix() + "popupBorder"));
			this.scollPane.setOpaque(false);
			this.scollPane.setStyleProxy(this.box);
			this.scollPane.setBackground(null);
			this.scollPane.setStyleTune(null);
		}
		return this.scollPane;
	}
	,getPopup: function() {
		if(this.popup == null) {
			this.popup = new org_aswing_JPopup(org_aswing_AsWingManager.getRoot(),false);
			this.popup.setLayout(new org_aswing_BorderLayout());
			this.popup.append(this.getScollPane(),"Center");
			this.popup.setClipMasked(false);
		}
		return this.popup;
	}
	,getPopupList: function() {
		return this.box.getPopupList();
	}
	,viewPopup: function() {
		if(!this.box.isOnStage()) return;
		var width = this.box.getWidth();
		var cellHeight;
		if(this.box.getListCellFactory().isAllCellHasSameHeight()) cellHeight = this.box.getListCellFactory().getCellHeight(); else cellHeight = this.box.getPreferredSize().height;
		var height = Std["int"](Math.min(this.box.getItemCount(),this.box.getMaximumRowCount()) * cellHeight);
		var i = this.getScollPane().getInsets();
		height += i.top + i.bottom;
		width += i.right - i.left;
		i = this.getPopupList().getInsets();
		height += i.top + i.bottom;
		width += i.right - i.left;
		this.getPopup().changeOwner(org_aswing_AsWingUtils.getOwnerAncestor(this.box));
		this.getPopup().setSizeWH(width,height);
		this.getPopup().show();
		this.startMoveToView();
		org_aswing_AsWingManager.callLater($bind(this,this.__addMouseDownListenerToStage));
	}
	,__addMouseDownListenerToStage: function() {
		if(this.getPopup().isVisible() && this.box.stage != null) org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDownWhenPopuped),false,0,false);
	}
	,hidePopup: function() {
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDownWhenPopuped));
		this.popupTimer.stop();
		if(this.getPopup().isVisible()) this.getPopup().dispose();
	}
	,startMoveToView: function() {
		var popupPane = this.getPopup();
		var height = popupPane.getHeight();
		var popupPaneHeight = height;
		var downDest = this.box.componentToGlobal(new org_aswing_geom_IntPoint(0,this.box.getHeight()));
		var upDest = new org_aswing_geom_IntPoint(downDest.x,downDest.y - this.box.getHeight() - popupPaneHeight);
		var visibleBounds = org_aswing_AsWingUtils.getVisibleMaximizedBounds(popupPane.parent);
		var distToBottom = visibleBounds.y + visibleBounds.height - downDest.y - popupPaneHeight;
		var distToTop = upDest.y - visibleBounds.y;
		var gp = this.box.getGlobalLocation();
		if(distToBottom > 0 || distToBottom < 0 && distToTop < 0 && distToBottom > distToTop) {
			this.moveDir = 1;
			gp.y += this.box.getHeight();
			this.scrollRect = new org_aswing_geom_IntRectangle(0,height,popupPane.getWidth(),0);
		} else {
			this.moveDir = -1;
			this.scrollRect = new org_aswing_geom_IntRectangle(0,0,popupPane.getWidth(),0);
		}
		popupPane.setGlobalLocation(gp);
		popupPane.setClipMaskRect(this.scrollRect);
		this.popupTimer.restart();
	}
	,setComboBoxValueFromListSelection: function() {
		var selectedValue = this.getPopupList().getSelectedValue();
		this.box.setSelectedItem(selectedValue,false);
	}
	,__movePopup: function(e) {
		var popupPane = this.getPopup();
		var popupPaneHeight = popupPane.getHeight();
		var maxTime = 10;
		var minTime = 3;
		var speed = 50;
		if(popupPaneHeight < speed * minTime) speed = Math.ceil(popupPaneHeight / minTime); else if(popupPaneHeight > speed * maxTime) speed = Math.ceil(popupPaneHeight / maxTime);
		if(popupPane.getHeight() - this.scrollRect.height <= speed) {
			speed = Std["int"](popupPane.getHeight() - this.scrollRect.height);
			this.popupTimer.stop();
			this.getPopupList().ensureIndexIsVisible(this.getPopupList().getSelectedIndex());
		}
		if(this.moveDir > 0) {
			this.scrollRect.y -= speed;
			this.scrollRect.height += speed;
		} else {
			var _g = popupPane;
			_g.set_y(_g.get_y() - speed);
			this.scrollRect.height += speed;
		}
		popupPane.setClipMaskRect(this.scrollRect);
	}
	,__onFocusKeyDown: function(e) {
		var code = e.keyCode | 0;
		if(code == org_aswing_AWKeyboard.DOWN) {
			if(!this.isPopupVisible(this.box)) {
				this.setPopupVisible(this.box,true);
				return;
			}
		}
		if(code == org_aswing_AWKeyboard.ESCAPE) {
			if(this.isPopupVisible(this.box)) {
				this.setPopupVisible(this.box,false);
				return;
			}
		}
		if(code == org_aswing_AWKeyboard.ENTER && this.isPopupVisible(this.box)) {
			this.hidePopup();
			this.setComboBoxValueFromListSelection();
			return;
		}
		var list = this.getPopupList();
		var index = list.getSelectedIndex();
		if(code == org_aswing_AWKeyboard.DOWN) index += 1; else if(code == org_aswing_AWKeyboard.UP) index -= 1; else if(code == org_aswing_AWKeyboard.PAGE_DOWN) index += this.box.getMaximumRowCount(); else if(code == org_aswing_AWKeyboard.PAGE_UP) index -= this.box.getMaximumRowCount(); else if(code == org_aswing_AWKeyboard.HOME) index = 0; else if(code == org_aswing_AWKeyboard.END) index = list.getModel().getSize() - 1; else return;
		index = Std["int"](Math.max(0,Math.min(list.getModel().getSize() - 1,index)));
		list.setSelectedIndex(index,false);
		list.ensureIndexIsVisible(index);
	}
	,__onFocusLost: function(e) {
		this.hidePopup();
	}
	,__onBoxRemovedFromStage: function(e) {
		this.hidePopup();
	}
	,__onListItemReleased: function(e) {
		this.hidePopup();
		this.setComboBoxValueFromListSelection();
	}
	,__onBoxPressed: function(e) {
		if(!this.isPopupVisible(this.box)) {
			if(this.box.isEditable()) {
				if(!this.box.getEditor().getEditorComponent().hitTestMouse()) this.setPopupVisible(this.box,true);
			} else {
				this.dropDownButton.makeFocus();
				this.setPopupVisible(this.box,true);
			}
		} else this.hidePopup();
	}
	,__onMouseDownWhenPopuped: function(e) {
		if(!this.getPopup().hitTestMouse() && !this.box.hitTestMouse()) this.hidePopup();
	}
	,setPopupVisible: function(c,v) {
		if(v) this.viewPopup(); else this.hidePopup();
	}
	,isPopupVisible: function(c) {
		return this.getPopup().isVisible();
	}
	,layoutCombobox: function() {
		var td = this.box.getSize();
		var insets = this.box.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.dropDownButton.getPreferredSize();
		this.dropDownButton.setSizeWH(buttonSize.width,height);
		this.dropDownButton.setLocationXY(right - buttonSize.width,top);
		this.box.getEditor().getEditorComponent().setLocationXY(left,top);
		this.box.getEditor().getEditorComponent().setSizeWH(td.width - insets.left - insets.right - buttonSize.width,height);
		this.box.getEditor().getEditorComponent().revalidate();
	}
	,getPreferredSize: function(c) {
		var insets = this.box.getInsets();
		var listPreferSize = this.getPopupList().getPreferredSize();
		var ew = listPreferSize.width;
		var wh = this.box.getEditor().getEditorComponent().getPreferredSize().height;
		var buttonSize = this.dropDownButton.getPreferredSize();
		buttonSize.width += ew;
		if(wh > buttonSize.height) buttonSize.height = wh;
		return insets.getOutsideSize(buttonSize);
	}
	,getMinimumSize: function(c) {
		return this.box.getInsets().getOutsideSize(this.dropDownButton.getPreferredSize());
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__class__: org_aswing_plaf_basic_BasicComboBoxUI
});
var jive_plaf_flat_FlatComboBoxUI = function() {
	org_aswing_plaf_basic_BasicComboBoxUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatComboBoxUI"] = jive_plaf_flat_FlatComboBoxUI;
jive_plaf_flat_FlatComboBoxUI.__name__ = ["jive","plaf","flat","FlatComboBoxUI"];
jive_plaf_flat_FlatComboBoxUI.__super__ = org_aswing_plaf_basic_BasicComboBoxUI;
jive_plaf_flat_FlatComboBoxUI.prototype = $extend(org_aswing_plaf_basic_BasicComboBoxUI.prototype,{
	createDropDownButton: function() {
		var btn = new org_aswing_JButton("",new jive_plaf_flat_icon_FlatComboBoxArrowIcon());
		btn.setFocusable(false);
		btn.setPreferredSize(new org_aswing_geom_IntDimension(Std["int"](org_aswing_UIManager.get("iconSize") / 2),Std["int"](org_aswing_UIManager.get("iconSize") / 2)));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org_aswing_Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,installDefaults: function() {
		org_aswing_plaf_basic_BasicComboBoxUI.prototype.installDefaults.call(this);
		this.box.set_notEditableForeground(this.getColor(this.getPropertyPrefix() + "notEditableForeground"));
		this.box.set_notEditableBackground(this.getColor(this.getPropertyPrefix() + "notEditableBackground"));
	}
	,layoutCombobox: function() {
		org_aswing_plaf_basic_BasicComboBoxUI.prototype.layoutCombobox.call(this);
		this.dropDownButton.set_mideground(!this.box.get_enabled()?this.box.get_foreground().offsetHLS(0,0.3,0):this.box.get_editable()?this.box.get_foreground().offsetHLS(0,0.3,0):this.box.get_notEditableBackground().offsetHLS(0,-0.1,0));
		this.dropDownButton.set_foreground(!this.box.get_enabled()?this.box.get_foreground().offsetHLS(0,0.3,0):this.box.get_editable()?this.box.get_foreground():this.box.get_notEditableForeground());
	}
	,getScollPane: function() {
		if(this.scollPane == null) {
			this.scollPane = new org_aswing_JScrollPane(this.getPopupList());
			this.scollPane.setBorder(this.getBorder(this.getPropertyPrefix() + "popupBorder"));
			this.scollPane.setOpaque(false);
			this.scollPane.setStyleProxy(this.box);
			this.scollPane.setBackground(this.getColor(this.getPropertyPrefix() + "popupBackground"));
			this.scollPane.setStyleTune(new org_aswing_StyleTune(0,0,0,0,org_aswing_UIManager.get("cornerSize")));
		}
		return this.scollPane;
	}
	,startMoveToView: function() {
		var _g = this;
		var gp = this.box.getGlobalLocation();
		gp.y += this.box.getHeight();
		this.popup.setGlobalLocation(gp);
		this.popup.set_alpha(0.0);
		motion_Actuate.stop(this.popup);
		motion_Actuate.tween(this.popup,0.25,{ alpha : 1.0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g.popup.set_alpha(1.0);
		});
	}
	,hidePopup: function() {
		motion_Actuate.stop(this.popup);
		org_aswing_plaf_basic_BasicComboBoxUI.prototype.hidePopup.call(this);
	}
	,__class__: jive_plaf_flat_FlatComboBoxUI
});
var jive_plaf_flat_FlatListCellFactory = function(shareCelles,sameHeight) {
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	org_aswing_DefaultListTextCellFactory.call(this,jive_plaf_flat_FlatListCell,shareCelles,sameHeight);
};
$hxClasses["jive.plaf.flat.FlatListCellFactory"] = jive_plaf_flat_FlatListCellFactory;
jive_plaf_flat_FlatListCellFactory.__name__ = ["jive","plaf","flat","FlatListCellFactory"];
jive_plaf_flat_FlatListCellFactory.__super__ = org_aswing_DefaultListTextCellFactory;
jive_plaf_flat_FlatListCellFactory.prototype = $extend(org_aswing_DefaultListTextCellFactory.prototype,{
	__class__: jive_plaf_flat_FlatListCellFactory
});
var org_aswing_LookAndFeel = function() { };
$hxClasses["org.aswing.LookAndFeel"] = org_aswing_LookAndFeel;
org_aswing_LookAndFeel.__name__ = ["org","aswing","LookAndFeel"];
org_aswing_LookAndFeel.installBasicProperties = function(c,componentUIPrefix,defaultOpaquerName,defaultFocusableName) {
	if(defaultFocusableName == null) defaultFocusableName = "focusable";
	if(defaultOpaquerName == null) defaultOpaquerName = "opaque";
	if(!c.isOpaqueSet()) {
		c.setOpaque(c.getUI().getBoolean(componentUIPrefix + defaultOpaquerName));
		c.setOpaqueSet(false);
	}
	if(!c.isFocusableSet()) {
		c.setFocusable(c.getUI().getBoolean(componentUIPrefix + defaultFocusableName));
		c.setFocusableSet(false);
	}
};
org_aswing_LookAndFeel.installColors = function(c,componentUIPrefix,defaultBgName,defaultFgName,defaultMgName) {
	if(defaultMgName == null) defaultMgName = "mideground";
	if(defaultFgName == null) defaultFgName = "foreground";
	if(defaultBgName == null) defaultBgName = "background";
	var bg = c.getBackground();
	if(bg == null || js_Boot.__instanceof(bg,org_aswing_plaf_UIResource)) c.setBackground(c.getUI().getColor(componentUIPrefix + defaultBgName));
	var fg = c.getForeground();
	if(fg == null || js_Boot.__instanceof(fg,org_aswing_plaf_UIResource)) c.setForeground(c.getUI().getColor(componentUIPrefix + defaultFgName));
	var mg = c.getMideground();
	if(mg == null || js_Boot.__instanceof(mg,org_aswing_plaf_UIResource)) c.setMideground(c.getUI().getColor(componentUIPrefix + defaultMgName));
};
org_aswing_LookAndFeel.installStyleTune = function(c,componentUIPrefix,pname) {
	if(pname == null) pname = "colorAdjust";
	var ca = c.getStyleTune();
	if(ca == null || js_Boot.__instanceof(ca,org_aswing_plaf_UIResource)) c.setStyleTune(c.getUI().getStyleTune(componentUIPrefix + pname));
};
org_aswing_LookAndFeel.installFont = function(c,componentUIPrefix,defaultFontName) {
	if(defaultFontName == null) defaultFontName = "font";
	var f = c.getFont();
	if(f == null || js_Boot.__instanceof(f,org_aswing_plaf_UIResource)) c.setFont(c.getUI().getFont(componentUIPrefix + defaultFontName));
};
org_aswing_LookAndFeel.installColorsAndFont = function(c,componentUIPrefix,defaultBgName,defaultFgName,defaultFontName,defaultMgName,defaultCaName) {
	if(defaultCaName == null) defaultCaName = "colorAdjust";
	if(defaultMgName == null) defaultMgName = "mideground";
	if(defaultFontName == null) defaultFontName = "font";
	if(defaultFgName == null) defaultFgName = "foreground";
	if(defaultBgName == null) defaultBgName = "background";
	org_aswing_LookAndFeel.installColors(c,componentUIPrefix,defaultBgName,defaultFgName,defaultMgName);
	org_aswing_LookAndFeel.installFont(c,componentUIPrefix,defaultFontName);
	org_aswing_LookAndFeel.installStyleTune(c,componentUIPrefix,defaultCaName);
};
org_aswing_LookAndFeel.installBorderAndBFDecorators = function(c,componentUIPrefix,defaultBorderName,defaultBGDName,defaultFGDName) {
	if(defaultFGDName == null) defaultFGDName = "fg";
	if(defaultBGDName == null) defaultBGDName = "bg";
	if(defaultBorderName == null) defaultBorderName = "border";
	var b = c.getBorder();
	if(js_Boot.__instanceof(b,org_aswing_plaf_UIResource)) c.setBorder(c.getUI().getBorder(componentUIPrefix + defaultBorderName));
	var bg = c.getBackgroundDecorator();
	if(js_Boot.__instanceof(bg,org_aswing_plaf_UIResource)) c.setBackgroundDecorator(c.getUI().getGroundDecorator(componentUIPrefix + defaultBGDName));
	var fg = c.getForegroundDecorator();
	if(js_Boot.__instanceof(fg,org_aswing_plaf_UIResource)) c.setForegroundDecorator(c.getUI().getGroundDecorator(componentUIPrefix + defaultFGDName));
};
org_aswing_LookAndFeel.uninstallBorderAndBFDecorators = function(c) {
	if(Std["is"](c.getBorder(),org_aswing_plaf_UIResource)) c.setBorder(org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE);
	if(Std["is"](c.getBackgroundDecorator(),org_aswing_plaf_UIResource)) c.setBackgroundDecorator(org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE);
	if(Std["is"](c.getForegroundDecorator(),org_aswing_plaf_UIResource)) c.setForegroundDecorator(org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE);
};
org_aswing_LookAndFeel.prototype = {
	getDefaults: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,__class__: org_aswing_LookAndFeel
};
var jive_plaf_flat_FlatLookAndFeel = function() {
	this.NULL_COLOR = org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR;
	this.NULL_FONT = org_aswing_plaf_DefaultEmptyDecoraterResource.get_NULL_FONT();
};
$hxClasses["jive.plaf.flat.FlatLookAndFeel"] = jive_plaf_flat_FlatLookAndFeel;
jive_plaf_flat_FlatLookAndFeel.__name__ = ["jive","plaf","flat","FlatLookAndFeel"];
jive_plaf_flat_FlatLookAndFeel.__super__ = org_aswing_LookAndFeel;
jive_plaf_flat_FlatLookAndFeel.prototype = $extend(org_aswing_LookAndFeel.prototype,{
	getDefaults: function() {
		var table = new org_aswing_UIDefaults();
		this.initSizeDefaults(table);
		this.initClassDefaults(table);
		this.initSystemColorDefaults(table);
		this.initSystemFontDefaults(table);
		this.initCommonUtils(table);
		this.initComponentDefaults(table);
		return table;
	}
	,initSizeDefaults: function(table) {
		var size = 700;
		var fontSize = 14;
		table.set("fontSize",fontSize | 0);
		table.set("textHorizontalMarginSize",fontSize | 0);
		table.set("textVerticalMarginSize",fontSize / 2 | 0);
		table.set("cornerSize",fontSize / 3 | 0);
		table.set("iconSize",1.4 * fontSize | 0);
		table.set("margin",size / 10 | 0);
		table.set("scrollBarWidth",size / 60 | 0);
		table.set("halfMargin",size / 20 | 0);
		table.set("iconGap",0.5 * fontSize | 0);
	}
	,initClassDefaults: function(table) {
		var uiDefaults = ["ButtonUI",jive_plaf_flat_FlatButtonUI,"TextFieldUI",jive_plaf_flat_FlatTextFieldUI,"CheckBoxUI",jive_plaf_flat_FlatCheckBoxUI,"RadioButtonUI",jive_plaf_flat_FlatRadioButtonUI,"MenuUI",jive_plaf_flat_FlatMenuUI,"ComboBoxUI",jive_plaf_flat_FlatComboBoxUI,"ScrollBarUI",jive_plaf_flat_FlatScrollBarUI,"SliderUI",jive_plaf_flat_FlatSliderUI,"TabbedPaneUI",jive_plaf_flat_FlatTabbedPaneUI,"AdjusterUI",jive_plaf_flat_FlatAdjusterUI,"AccordionHeaderButtonUI",jive_plaf_flat_accordion_AccordionHeaderButtonUI,"TableUI",jive_plaf_flat_FlatTableUI];
		table.putDefaults(uiDefaults);
	}
	,initSystemColorDefaults: function(table) {
		var defaultSystemColors = ["white",16777215,"turquoise",1752220,"emerald",3066993,"nephritis",2600544,"peter-river",3447003,"amethyst",10181046,"wet-asphalt",3426654,"clouds",15528177,"silver",12436423,"concrete",9807270,"asbestos",8359053,"midnight-blue",8359053,"carrot",15105570,"pomegranate",12597547,"orange",15965202,"pumpkin",13849600];
		var _g1 = 0;
		var _g = defaultSystemColors.length;
		while(_g1 < _g) {
			var i = _g1++;
			table.set(defaultSystemColors[i],new org_aswing_plaf_ASColorUIResource(defaultSystemColors[i + 1]));
		}
		defaultSystemColors = ["window",new org_aswing_plaf_ASColorUIResource(16777215),"windowText",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"menu",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"menuText",__map_reserved.clouds != null?table.getReserved("clouds"):table.h["clouds"],"control",__map_reserved.asbestos != null?table.getReserved("asbestos"):table.h["asbestos"],"controlMide",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"controlText",new org_aswing_plaf_ASColorUIResource(16777215),"selectionForeground",new org_aswing_plaf_ASColorUIResource(16777215),"focusForeground",__map_reserved.turquoise != null?table.getReserved("turquoise"):table.h["turquoise"],"highlightControl",__map_reserved.turquoise != null?table.getReserved("turquoise"):table.h["turquoise"],"darkControlBackground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"]];
		var _g11 = 0;
		var _g2 = defaultSystemColors.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			table.set(defaultSystemColors[i1],defaultSystemColors[i1 + 1]);
		}
		table.set("selectionBackground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"]);
		table.set("focusInner",new org_aswing_plaf_ASColorUIResource(4259648,0.3));
		table.set("focusOutter",new org_aswing_plaf_ASColorUIResource(4259648,0.4));
	}
	,initSystemFontDefaults: function(table) {
		var defaultSystemFonts = ["systemFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Regular.ttf",14),"menuFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Regular.ttf",14),"topMenuFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Bold.ttf",16),"controlFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Regular.ttf",16,false),"windowFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Regular.ttf",14,true),"controlHeaderFont",new org_aswing_plaf_ASFontUIResource("assets/Lato-Bold.ttf",18)];
		table.putDefaults(defaultSystemFonts);
	}
	,initCommonUtils: function(table) {
		org_aswing_resizer_ResizerController.setDefaultResizerClass(org_aswing_resizer_DefaultResizer);
		var arrowColors = ["resizeArrow",new org_aswing_plaf_ASColorUIResource(5095888),"resizeArrowLight",new org_aswing_plaf_ASColorUIResource(10674150),"resizeArrowDark",new org_aswing_plaf_ASColorUIResource(2790817)];
		table.putDefaults(arrowColors);
		var cursors = ["System.hResizeCursor",org_aswing_plaf_basic_cursor_H_$ResizeCursor,"System.vResizeCursor",org_aswing_plaf_basic_cursor_V_$ResizeCursor,"System.hvResizeCursor",org_aswing_plaf_basic_cursor_HV_$ResizeCursor,"System.hMoveCursor",org_aswing_plaf_basic_cursor_H_$ResizeCursor,"System.vMoveCursor",org_aswing_plaf_basic_cursor_V_$ResizeCursor,"System.hvMoveCursor",org_aswing_plaf_basic_cursor_HV_$ResizeCursor];
		table.putDefaults(cursors);
	}
	,initComponentDefaults: function(table) {
		var buttonBG;
		buttonBG = __map_reserved.silver != null?table.getReserved("silver"):table.h["silver"];
		var textBG;
		textBG = __map_reserved.clouds != null?table.getReserved("clouds"):table.h["clouds"];
		var comDefaults = ["Button.background",buttonBG,"Button.foreground",__map_reserved.white != null?table.getReserved("white"):table.h["white"],"Button.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"Button.opaque",true,"Button.focusable",true,"Button.font",table.getFont("controlFont"),"Button.bg",jive_plaf_flat_background_FlatButtonBackground,"Button.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,-0.02,0.34,0.22,5),"Button.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15),"Button.textShiftOffset",0,"Button.textFilters",null,"Button.textGap",5];
		table.putDefaults(comDefaults);
		var f = [];
		f.push(new openfl_filters_DropShadowFilter(1,45,0,0.0,1,1,1,1));
		comDefaults = ["LabelButton.background",buttonBG,"LabelButton.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"LabelButton.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"LabelButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.26,0.05,0.20,0.20),"LabelButton.opaque",false,"LabelButton.focusable",true,"LabelButton.font",new org_aswing_plaf_ASFontUIResource("assets/Lato-Regular.ttf",16,false,false,true),"LabelButton.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"LabelButton.textShiftOffset",0,"LabelButton.textFilters",f];
		table.putDefaults(comDefaults);
		comDefaults = ["Panel.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Panel.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Panel.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Panel.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Panel.opaque",false,"Panel.focusable",false,"Panel.bg",org_aswing_plaf_basic_background_PanelBackground,"Panel.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["ToggleButton.background",buttonBG,"ToggleButton.foreground",__map_reserved.clouds != null?table.getReserved("clouds"):table.h["clouds"],"ToggleButton.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ToggleButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,-0.02,0.34,0.22,5),"ToggleButton.opaque",true,"ToggleButton.focusable",true,"ToggleButton.font",table.getFont("controlFont"),"ToggleButton.bg",jive_plaf_flat_background_FlatButtonBackground,"ToggleButton.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15),"ToggleButton.textShiftOffset",1,"ToggleButton.textFilters",null,"ToggleButton.textGap",5];
		table.putDefaults(comDefaults);
		comDefaults = ["RadioButton.background",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"RadioButton.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"RadioButton.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"RadioButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.8,0.01,0.4,0.30,0,new org_aswing_plaf_UIStyleTune(0.4,0.1,0.1,0.00)),"RadioButton.opaque",false,"RadioButton.focusable",true,"RadioButton.font",table.getFont("systemFont"),"RadioButton.icon",jive_plaf_flat_icon_FlatRadioButtonIcon,"RadioButton.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"RadioButton.textShiftOffset",0,"RadioButton.textGap",10,"RadioButton.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["TextField.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"TextField.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"TextField.mideground",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"TextField.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.30,3),"TextField.opaque",true,"TextField.focusable",true,"TextField.font",table.getFont("systemFont"),"TextField.bg",jive_plaf_flat_background_FlatTextComponentBackground,"TextField.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(7,15,7,15))];
		table.putDefaults(comDefaults);
		comDefaults = ["CheckBox.background",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"CheckBox.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"CheckBox.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"CheckBox.tickColor",new org_aswing_plaf_ASColorUIResource(16777215),"CheckBox.colorAdjust",new org_aswing_plaf_UIStyleTune(0.8,0.01,0.4,0.30,5,new org_aswing_plaf_UIStyleTune(0.5,-0.2,0.5,0.70)),"CheckBox.opaque",false,"CheckBox.focusable",true,"CheckBox.font",table.getFont("systemFont"),"CheckBox.icon",jive_plaf_flat_icon_FlatCheckBoxIcon,"CheckBox.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"CheckBox.textShiftOffset",0,"CheckBox.textGap",10,"CheckBox.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["Separator.background",new org_aswing_plaf_ASColorUIResource(3507061,0.3),"Separator.foreground",this.NULL_COLOR,"Separator.mideground",this.NULL_COLOR,"Separator.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Separator.opaque",false,"Separator.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollBar.background",new org_aswing_plaf_ASColorUIResource(14935269),"ScrollBar.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ScrollBar.mideground",new org_aswing_plaf_ASColorUIResource(13750737),"ScrollBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.08,0.20,0.50,5,new org_aswing_plaf_UIStyleTune(0.08,-0.3,0.08,0.20,2)),"ScrollBar.opaque",true,"ScrollBar.focusable",true,"ScrollBar.barWidth",12,"ScrollBar.minimumThumbLength",24,"ScrollBar.font",table.getFont("controlFont"),"ScrollBar.bg",jive_plaf_flat_background_FlatScrollBarBackground,"ScrollBar.thumbDecorator",jive_plaf_flat_background_FlatScrollBarThumb];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollPane.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"ScrollPane.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ScrollPane.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ScrollPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ScrollPane.opaque",false,"ScrollPane.focusable",false,"ScrollPane.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["ProgressBar.background",new org_aswing_plaf_ASColorUIResource(15461871),"ProgressBar.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ProgressBar.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"ProgressBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.50,6,new org_aswing_plaf_UIStyleTune(0.34,-0.4,0.01,0.50,6)),"ProgressBar.opaque",true,"ProgressBar.focusable",false,"ProgressBar.barWidth",12,"ProgressBar.font",new org_aswing_plaf_ASFontUIResource("Tahoma",9),"ProgressBar.bg",jive_plaf_flat_background_FlatProgressBarBackground,"ProgressBar.fg",jive_plaf_flat_background_FlatProgressBarIcon,"ProgressBar.indeterminateDelay",100];
		table.putDefaults(comDefaults);
		comDefaults = ["Viewport.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Viewport.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Viewport.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Viewport.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Viewport.opaque",false,"Viewport.focusable",true,"Viewport.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["Label.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Label.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Label.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Label.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Label.opaque",false,"Label.focusable",false,"Label.font",table.getFont("controlFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["TextArea.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"TextArea.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"TextArea.mideground",__map_reserved.concrete != null?table.getReserved("concrete"):table.h["concrete"],"TextArea.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.30,5),"TextArea.opaque",true,"TextArea.focusable",true,"TextArea.font",table.getFont("controlFont"),"TextArea.bg",org_aswing_plaf_basic_background_TextComponentBackBround,"TextArea.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(7,15,7,15))];
		table.putDefaults(comDefaults);
		comDefaults = ["Frame.background",new org_aswing_plaf_ASColorUIResource(16448250),"Frame.foreground",new org_aswing_plaf_ASColorUIResource(6710886),"Frame.mideground",__map_reserved.concrete != null?table.getReserved("concrete"):table.h["concrete"],"Frame.colorAdjust",new org_aswing_plaf_UIStyleTune(0.10,0.0,0.0,0.30,5,new org_aswing_plaf_UIStyleTune(0.10,0.0,0.0,0.60,5)),"Frame.opaque",true,"Frame.focusable",true,"Frame.dragDirectly",true,"Frame.resizeArrow",new org_aswing_plaf_ASColorUIResource(2977161),"Frame.resizeArrowLight",new org_aswing_plaf_ASColorUIResource(14869214),"Frame.resizeArrowDark",new org_aswing_plaf_ASColorUIResource(3042698),"Frame.resizer",org_aswing_resizer_DefaultResizer,"Frame.font",__map_reserved.controlFont != null?table.getReserved("controlFont"):table.h["controlFont"],"Frame.resizerMargin",new org_aswing_plaf_InsetsUIResource(2,1,6,6),"Frame.bg",jive_plaf_flat_background_FlatFrameBackground,"Frame.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(0,40,40,40)),"Frame.icon",org_aswing_plaf_basic_icon_TitleIcon,"Frame.iconifiedIcon",org_aswing_plaf_basic_icon_FrameIconifiedIcon,"Frame.normalIcon",org_aswing_plaf_basic_icon_FrameNormalIcon,"Frame.maximizeIcon",org_aswing_plaf_basic_icon_FrameMaximizeIcon,"Frame.closeIcon",jive_plaf_flat_icon_FrameCloseIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["FrameTitleBar.background",new org_aswing_plaf_ASColorUIResource(12902502),"FrameTitleBar.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"FrameTitleBar.mideground",__map_reserved.concrete != null?table.getReserved("concrete"):table.h["concrete"],"FrameTitleBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.24,0.01,0.18,0.50,0,new org_aswing_plaf_UIStyleTune(0.2,-0.28,0.08,0.10,1)),"FrameTitleBar.opaque",true,"FrameTitleBar.focusable",false,"FrameTitleBar.titleBarHeight",50,"FrameTitleBar.buttonGap",0,"FrameTitleBar.font",__map_reserved.controlHeaderFont != null?table.getReserved("controlHeaderFont"):table.h["controlHeaderFont"],"FrameTitleBar.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(30,0,30,0)),"FrameTitleBar.icon",org_aswing_plaf_basic_icon_TitleIcon,"FrameTitleBar.iconifiedIcon",org_aswing_plaf_basic_icon_FrameIconifiedIcon,"FrameTitleBar.normalIcon",org_aswing_plaf_basic_icon_FrameNormalIcon,"FrameTitleBar.maximizeIcon",org_aswing_plaf_basic_icon_FrameMaximizeIcon,"FrameTitleBar.closeIcon",jive_plaf_flat_icon_FrameCloseIcon];
		table.putDefaults(comDefaults);
		f = [];
		f.push(new openfl_filters_DropShadowFilter(4.0,45,0,0.3,2.0,2.0,0.5));
		comDefaults = ["ToolTip.background",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"ToolTip.foreground",new org_aswing_plaf_ASColorUIResource(16777215),"ToolTip.mideground",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"ToolTip.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20,5),"ToolTip.opaque",true,"ToolTip.focusable",false,"ToolTip.font",table.getFont("controlFont"),"ToolTip.filters",null,"ToolTip.bg",org_aswing_plaf_basic_background_ToolTipBackground,"ToolTip.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(3,7,3,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["List.font",table.getFont("controlFont"),"List.background",new org_aswing_plaf_ASColorUIResource(16777215,0),"List.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"List.mideground",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"List.colorAdjust",new org_aswing_plaf_UIStyleTune(0.08,0.05,0.20,0.20,5),"List.opaque",false,"List.focusable",true,"List.bg",org_aswing_plaf_basic_background_ListBackground,"List.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"List.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"]];
		table.putDefaults(comDefaults);
		comDefaults = ["SplitPane.background",new org_aswing_plaf_ASColorUIResource(2515580),"SplitPane.foreground",new org_aswing_plaf_ASColorUIResource(5287642),"SplitPane.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"SplitPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"SplitPane.opaque",false,"SplitPane.focusable",true,"SplitPane.defaultDividerSize",10,"SplitPane.font",table.getFont("windowFont"),"SplitPane.border",null,"SplitPane.presentDragColor",new org_aswing_plaf_ASColorUIResource(4560312,0.4)];
		table.putDefaults(comDefaults);
		comDefaults = ["Spacer.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Spacer.foreground",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Spacer.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Spacer.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Spacer.opaque",false,"Spacer.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ComboBox.font",table.getFont("systemFont"),"ComboBox.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"ComboBox.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"ComboBox.mideground",__map_reserved.concrete != null?table.getReserved("concrete"):table.h["concrete"],"ComboBox.notEditableBackground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"ComboBox.notEditableForeground",new org_aswing_plaf_ASColorUIResource(16777215),"ComboBox.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.32,5,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"ComboBox.opaque",true,"ComboBox.focusable",true,"ComboBox.popupBackground",new org_aswing_plaf_ASColorUIResource(14935269),"ComboBox.popupBorder",jive_plaf_flat_border_FlatComboBoxPopupBorder,"ComboBox.bg",jive_plaf_flat_background_FlatInputBackground,"ComboBox.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(7,15,7,15))];
		table.putDefaults(comDefaults);
		comDefaults = ["Slider.font",table.getFont("controlFont"),"Slider.background",new org_aswing_plaf_ASColorUIResource(15461871),"Slider.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Slider.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"Slider.progressColor",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"Slider.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.50,6,new org_aswing_plaf_UIStyleTune(0.2,0.00,0.4,0.00,0)),"Slider.opaque",false,"Slider.focusable",true,"Slider.thumbIcon",jive_plaf_flat_icon_FlatSliderThumbIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["Adjuster.background",new org_aswing_plaf_ASColorUIResource(15461871),"Adjuster.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Adjuster.mideground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Adjuster.opaque",false,"Adjuster.focusable",true,"Adjuster.font",table.getFont("controlFont"),"Adjuster.border",jive_plaf_flat_adjuster_AdjusterBorder,"Adjuster.bg",jive_plaf_flat_adjuster_AdjusterBackground,"Adjuster.cornerRadius",5.0];
		table.putDefaults(comDefaults);
		comDefaults = ["Stepper.font",table.getFont("controlFont"),"Stepper.background",textBG,"Stepper.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Stepper.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"Stepper.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.32,3,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"Stepper.opaque",true,"Stepper.focusable",true,"Stepper.bg",org_aswing_plaf_basic_background_InputBackground,"Stepper.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorSwatches.background",new org_aswing_plaf_ASColorUIResource(15658734),"ColorSwatches.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorSwatches.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorSwatches.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorSwatches.opaque",false,"ColorSwatches.focusable",false,"ColorSwatches.font",table.getFont("controlFont"),"ColorSwatches.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorMixer.background",new org_aswing_plaf_ASColorUIResource(15658734),"ColorMixer.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorMixer.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorMixer.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorMixer.opaque",false,"ColorMixer.focusable",false,"ColorMixer.font",table.getFont("controlFont"),"ColorMixer.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorChooser.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"ColorChooser.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorChooser.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorChooser.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorChooser.opaque",false,"ColorChooser.focusable",false,"ColorChooser.font",table.getFont("controlFont"),"ColorChooser.border",org_aswing_plaf_basic_border_ColorChooserBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["Accordion.font",table.getFont("controlFont"),"Accordion.background",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"Accordion.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Accordion.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Accordion.opaque",false,"Accordion.focusable",true,"Accordion.motionSpeed",1000,"Accordion.tabMargin",new org_aswing_plaf_InsetsUIResource(5,10,7,10),"Accordion.header",jive_plaf_flat_accordion_AccordionHeader,"Accordion.itemContainer",jive_plaf_flat_accordion_AccordionItemContainer];
		table.putDefaults(comDefaults);
		var comDefaults1 = ["AccordionHeaderButton.background",__map_reserved.darkControlBackground != null?table.getReserved("darkControlBackground"):table.h["darkControlBackground"],"AccordionHeaderButton.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"AccordionHeaderButton.opaque",true,"AccordionHeaderButton.focusable",true,"AccordionHeaderButton.shadow",table.getColor("controlShadow"),"AccordionHeaderButton.darkShadow",table.getColor("controlDkShadow"),"AccordionHeaderButton.light",table.getColor("controlHighlight"),"AccordionHeaderButton.highlight",table.getColor("controlLtHighlight"),"AccordionHeaderButton.bg",jive_plaf_flat_accordion_AccordionHeaderButtonBackground,"AccordionHeaderButton.textShiftOffset",1,"AccordionHeaderButton.cornerRadius",5];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["TabbedPane.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"TabbedPane.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"TabbedPane.mideground",new org_aswing_plaf_ASColorUIResource(13421772),"TabbedPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.01,-0.14,0.01,0.50,5,new org_aswing_plaf_UIStyleTune(0.05,-0.23,0.01,0.50,4)),"TabbedPane.opaque",false,"TabbedPane.focusable",true,"TabbedPane.arrowShadowColor",new org_aswing_plaf_ASColorUIResource(0),"TabbedPane.arrowLightColor",new org_aswing_plaf_ASColorUIResource(4473924),"TabbedPane.font",table.getFont("controlFont"),"TabbedPane.tabMargin",new org_aswing_plaf_InsetsUIResource(7,15,7,15),"TabbedPane.contentMargin",new org_aswing_plaf_InsetsUIResource(10,2,2,2),"TabbedPane.selectedTabExpandInsets",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"TabbedPane.tabBorderInsets",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"TabbedPane.contentRoundLineThickness",1,"TabbedPane.tabGap",3,"TabbedPane.tab",jive_plaf_flat_tabbedpane_FlatTabbedPaneTab,"TabbedPane.topBlankSpace",0,"TabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["TabButton.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"TabButton.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"TabButton.mideground",new org_aswing_plaf_ASColorUIResource(14803425),"TabButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.01,-0.14,0.01,0.50,5,new org_aswing_plaf_UIStyleTune(0.05,-0.23,0.01,0.50,4)),"TabButton.focusable",true,"TabButton.font",table.getFont("controlFont"),"TabButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,-0.02,0.34,0.22,5),"TabButton.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15),"TabButton.textShiftOffset",0,"TabButton.textFilters",null,"TabButton.textGap",5,"TabButton.normalColor",new org_aswing_plaf_ASColorUIResource(16777215),"TabButton.rolloverColor",new org_aswing_plaf_ASColorUIResource(14803425),"TabButton.selectedColor",new org_aswing_plaf_ASColorUIResource(16777215),"TabButton.borderColor",new org_aswing_plaf_ASColorUIResource(13421772)];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["ClosableTabbedPane.background",new org_aswing_plaf_ASColorUIResource(15198181),"ClosableTabbedPane.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ClosableTabbedPane.mideground",new org_aswing_plaf_ASColorUIResource(5095888),"ClosableTabbedPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.01,-0.24,0.01,0.50,4),"ClosableTabbedPane.opaque",false,"ClosableTabbedPane.focusable",true,"ClosableTabbedPane.shadow",new org_aswing_plaf_ASColorUIResource(8947848),"ClosableTabbedPane.darkShadow",new org_aswing_plaf_ASColorUIResource(4473924),"ClosableTabbedPane.light",table.getColor("controlHighlight"),"ClosableTabbedPane.highlight",new org_aswing_plaf_ASColorUIResource(16777215),"ClosableTabbedPane.arrowShadowColor",new org_aswing_plaf_ASColorUIResource(0),"ClosableTabbedPane.arrowLightColor",new org_aswing_plaf_ASColorUIResource(4473924),"ClosableTabbedPane.font",table.getFont("controlFont"),"ClosableTabbedPane.tabMargin",new org_aswing_plaf_InsetsUIResource(2,3,1,3),"ClosableTabbedPane.contentMargin",new org_aswing_plaf_InsetsUIResource(8,2,2,2),"ClosableTabbedPane.contentRoundLineThickness",2,"ClosableTabbedPane.topBlankSpace",4,"ClosableTabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["Table.background",new org_aswing_plaf_ASColorUIResource(16777215,0.0),"Table.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"Table.mideground",new org_aswing_plaf_ASColorUIResource(15856113),"Table.colorAdjust",new org_aswing_plaf_UIStyleTune(0.10,-0.2,0.10,0.20,5),"Table.opaque",true,"Table.focusable",true,"Table.font",table.getFont("controlFont"),"Table.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"Table.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"Table.gridColor",new org_aswing_plaf_ASColorUIResource(14079702),"Table.bg",jive_plaf_flat_background_FlatTableBackground,"Table.border",new jive_plaf_flat_border_TableLineBorder(null,__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],1,5)];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["TableHeader.font",table.getFont("topMenuFont"),"TableHeader.background",new org_aswing_plaf_ASColorUIResource(14408667),"TableHeader.foreground",__map_reserved["wet-asphalt"] != null?table.getReserved("wet-asphalt"):table.h["wet-asphalt"],"TableHeader.mideground",__map_reserved.silver != null?table.getReserved("silver"):table.h["silver"],"TableHeader.colorAdjust",new org_aswing_plaf_UIStyleTune(0.06,0.2,0.10,0.5,0,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"TableHeader.opaque",true,"TableHeader.focusable",true,"TableHeader.gridColor",new org_aswing_plaf_ASColorUIResource(14079702),"TableHeader.bg",jive_plaf_flat_background_FlatTableHeaderBackground,"TableHeader.border",null,"TableHeader.cellBorder",jive_plaf_flat_border_TableHeaderCellBorder,"TableHeader.sortableCellBorder",jive_plaf_flat_border_TableHeaderCellBorder];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["Tree.background",new org_aswing_plaf_ASColorUIResource(3376538,0),"Tree.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Tree.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Tree.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Tree.opaque",false,"Tree.focusable",true,"Tree.font",table.getFont("controlFont"),"Tree.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"Tree.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"Tree.leafIcon",org_aswing_tree_TreeLeafIcon,"Tree.folderExpandedIcon",org_aswing_tree_TreeFolderIcon,"Tree.folderCollapsedIcon",org_aswing_tree_TreeFolderIcon,"Tree.leftChildIndent",10,"Tree.rightChildIndent",0,"Tree.rowHeight",16,"Tree.expandControl",org_aswing_plaf_basic_tree_BasicExpandControl,"Tree.border",null];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["ToolBar.background",new org_aswing_plaf_ASColorUIResource(10866204),"ToolBar.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ToolBar.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ToolBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ToolBar.opaque",true,"ToolBar.focusable",false];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["MenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuItem.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"MenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,5),"MenuItem.opaque",false,"MenuItem.focusable",false,"MenuItem.font",table.getFont("menuFont"),"MenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"MenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"MenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"MenuItem.acceleratorFont",table.getFont("menuFont"),"MenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuItem.border",null,"MenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"MenuItem.checkIcon",org_aswing_plaf_basic_icon_MenuItemCheckIcon,"MenuItem.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15)];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["CheckBoxMenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"CheckBoxMenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"CheckBoxMenuItem.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"CheckBoxMenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,5),"CheckBoxMenuItem.opaque",false,"CheckBoxMenuItem.focusable",false,"CheckBoxMenuItem.font",table.getFont("menuFont"),"CheckBoxMenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"CheckBoxMenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"CheckBoxMenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"CheckBoxMenuItem.acceleratorFont",table.getFont("menuFont"),"CheckBoxMenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"CheckBoxMenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"CheckBoxMenuItem.border",null,"CheckBoxMenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"CheckBoxMenuItem.checkIcon",org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon,"CheckBoxMenuItem.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15)];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["RadioButtonMenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"RadioButtonMenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"RadioButtonMenuItem.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"RadioButtonMenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,5),"RadioButtonMenuItem.opaque",false,"RadioButtonMenuItem.focusable",false,"RadioButtonMenuItem.font",table.getFont("menuFont"),"RadioButtonMenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"RadioButtonMenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"RadioButtonMenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"RadioButtonMenuItem.acceleratorFont",table.getFont("menuFont"),"RadioButtonMenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"RadioButtonMenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"RadioButtonMenuItem.border",null,"RadioButtonMenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"RadioButtonMenuItem.checkIcon",org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon,"RadioButtonMenuItem.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15)];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["Menu.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"Menu.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"Menu.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"Menu.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,5),"Menu.opaque",false,"Menu.focusable",false,"Menu.font",table.getFont("menuFont"),"Menu.topMenuFont",table.getFont("topMenuFont"),"Menu.selectionBackground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"Menu.selectionForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"Menu.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"Menu.acceleratorFont",table.getFont("menuFont"),"Menu.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"Menu.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"Menu.border",null,"Menu.arrowIcon",jive_plaf_flat_icon_FlatMenuArrowIcon,"Menu.checkIcon",org_aswing_plaf_basic_icon_MenuCheckIcon,"Menu.margin",new org_aswing_plaf_InsetsUIResource(7,15,7,15),"Menu.useMenuBarBackgroundForTopLevel",true,"Menu.menuPopupOffsetX",0,"Menu.menuPopupOffsetY",5,"Menu.submenuPopupOffsetX",3,"Menu.submenuPopupOffsetY",0,"Menu.textGap",10];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["PopupMenu.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"PopupMenu.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"PopupMenu.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"PopupMenu.colorAdjust",new org_aswing_plaf_UIStyleTune(0.14,-0.14,0.06,0.20,5),"PopupMenu.opaque",true,"PopupMenu.focusable",false,"PopupMenu.font",table.getFont("menuFont"),"PopupMenu.borderColor",__map_reserved.controlDkShadow != null?table.getReserved("controlDkShadow"):table.h["controlDkShadow"],"PopupMenu.border",jive_plaf_flat_border_FlatPopupMenuBorder];
		table.putDefaults(comDefaults1);
		comDefaults1 = ["MenuBar.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuBar.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuBar.mideground",__map_reserved.highlightControl != null?table.getReserved("highlightControl"):table.h["highlightControl"],"MenuBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20,5),"MenuBar.opaque",true,"MenuBar.focusable",true,"MenuBar.font",table.getFont("menuFont"),"MenuBar.border",null];
		table.putDefaults(comDefaults1);
	}
	,__class__: jive_plaf_flat_FlatLookAndFeel
});
var org_aswing_plaf_MenuElementUI = function() { };
$hxClasses["org.aswing.plaf.MenuElementUI"] = org_aswing_plaf_MenuElementUI;
org_aswing_plaf_MenuElementUI.__name__ = ["org","aswing","plaf","MenuElementUI"];
org_aswing_plaf_MenuElementUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_MenuElementUI.prototype = {
	__class__: org_aswing_plaf_MenuElementUI
};
var org_aswing_plaf_basic_BasicMenuItemUI = function() {
	this.transitBackgroundFactor = 0.0;
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuItemUI"] = org_aswing_plaf_basic_BasicMenuItemUI;
org_aswing_plaf_basic_BasicMenuItemUI.__name__ = ["org","aswing","plaf","basic","BasicMenuItemUI"];
org_aswing_plaf_basic_BasicMenuItemUI.__interfaces__ = [org_aswing_plaf_MenuElementUI];
org_aswing_plaf_basic_BasicMenuItemUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicMenuItemUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	layoutMenuItem: function(font,text,accelFont,acceleratorText,icon,checkIcon,arrowIcon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,arg) {
		var viewRect = arg[0];
		var iconRect = arg[1];
		var textRect = arg[2];
		var acceleratorRect = arg[3];
		var checkIconRect = arg[4];
		var arrowIconRect = arg[5];
		var textIconGap = arg[6];
		var menuItemGap = arg[7];
		org_aswing_AsWingUtils.layoutCompoundLabel(this.menuItem,font,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewRect,iconRect,textRect,textIconGap);
		if(acceleratorText == null || acceleratorText == "") {
			acceleratorRect.width = acceleratorRect.height = 0;
			acceleratorText = "";
		} else {
			var td = accelFont.computeTextSize(acceleratorText);
			acceleratorRect.width = td.width;
			acceleratorRect.height = td.height;
		}
		if(this.useCheckAndArrow()) {
			if(checkIcon != null) {
				checkIconRect.width = checkIcon.getIconWidth(this.menuItem);
				checkIconRect.height = checkIcon.getIconHeight(this.menuItem);
			} else checkIconRect.width = checkIconRect.height = 0;
			if(arrowIcon != null) {
				arrowIconRect.width = arrowIcon.getIconWidth(this.menuItem);
				arrowIconRect.height = arrowIcon.getIconHeight(this.menuItem);
			} else arrowIconRect.width = arrowIconRect.height = 0;
		}
		var labelRect = iconRect.union(textRect);
		textRect.x += menuItemGap;
		iconRect.x += menuItemGap;
		acceleratorRect.x = viewRect.x + viewRect.width - arrowIconRect.width - menuItemGap * 2 - acceleratorRect.width;
		if(this.useCheckAndArrow()) {
			checkIconRect.x = viewRect.x + menuItemGap;
			textRect.x += menuItemGap + checkIconRect.width;
			iconRect.x += menuItemGap + checkIconRect.width;
			arrowIconRect.x = viewRect.x + viewRect.width - menuItemGap - arrowIconRect.width;
		}
		acceleratorRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(acceleratorRect.height / 2);
		if(this.useCheckAndArrow()) {
			arrowIconRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(arrowIconRect.height / 2);
			checkIconRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(checkIconRect.height / 2);
		}
		return text;
	}
	,installUI: function(c) {
		this.menuItem = js_Boot.__instanceof(c,org_aswing_JMenuItem)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.menuItem = js_Boot.__instanceof(c,org_aswing_JMenuItem)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "MenuItem.";
	}
	,installDefaults: function() {
		this.menuItem.setHorizontalAlignment(2);
		this.menuItem.setVerticalAlignment(0);
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.menuItem,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.menuItem,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.menuItem,pp);
		this.selectionBackground = this.getColor(pp + "selectionBackground");
		this.selectionForeground = this.getColor(pp + "selectionForeground");
		this.disabledForeground = this.getColor(pp + "disabledForeground");
		this.acceleratorForeground = this.getColor(pp + "acceleratorForeground");
		this.acceleratorSelectionForeground = this.getColor(pp + "acceleratorSelectionForeground");
		this.acceleratorFont = this.getFont(pp + "acceleratorFont");
		this.acceleratorFontValidated = false;
		if(Std["is"](this.menuItem.getMargin(),org_aswing_plaf_UIResource)) this.menuItem.setMargin(this.getInsets(pp + "margin"));
		this.arrowIcon = this.getIcon(pp + "arrowIcon");
		this.checkIcon = this.getIcon(pp + "checkIcon");
		this.installIcon(this.arrowIcon);
		this.installIcon(this.checkIcon);
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this.menuItem) != null) this.menuItem.addChild(icon.getDisplay(this.menuItem));
	}
	,uninstallIcon: function(icon) {
		if(icon != null && icon.getDisplay(this.menuItem) != null) this.menuItem.removeChild(icon.getDisplay(this.menuItem));
	}
	,installComponents: function() {
		this.textField = org_aswing_AsWingUtils.createLabel(this.menuItem,"label");
		this.accelTextField = org_aswing_AsWingUtils.createLabel(this.menuItem,"accLabel");
		this.menuItem.setFontValidated(false);
	}
	,installListeners: function() {
		this.menuItem.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.____menuItemRollOver));
		this.menuItem.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.____menuItemRollOut));
		this.menuItem.addActionListener($bind(this,this.____menuItemAct));
		this.menuItem.addStateListener($bind(this,this.__menuStateChanged));
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.menuItem);
		this.uninstallIcon(this.arrowIcon);
		this.uninstallIcon(this.checkIcon);
	}
	,uninstallComponents: function() {
		this.menuItem.removeChild(this.textField);
		this.menuItem.removeChild(this.accelTextField);
	}
	,uninstallListeners: function() {
		this.menuItem.removeEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.____menuItemRollOver));
		this.menuItem.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.____menuItemRollOut));
		this.menuItem.removeActionListener($bind(this,this.____menuItemAct));
		this.menuItem.removeStateListener($bind(this,this.__menuStateChanged));
	}
	,processKeyEvent: function(code) {
		var manager = org_aswing_MenuSelectionManager.defaultManager();
		var path = manager.getSelectedPath();
		if(path[path.length - 1] != this.menuItem) return;
		if(manager.isEnterKey(code)) {
			this.menuItem.doClick();
			return;
		}
		if(path.length > 1 && path[path.length - 1] == this.menuItem) {
			if(manager.isPageNavKey(code)) {
				path.pop();
				manager.setSelectedPath(this.menuItem.stage,path,false);
				org_aswing_AsWingUtils["as"](path[path.length - 1],org_aswing_MenuElement).processKeyEvent(code);
			} else if(manager.isItemNavKey(code)) {
				path.pop();
				if(manager.isPrevItemKey(code)) path.push(manager.prevSubElement(org_aswing_AsWingUtils["as"](path[path.length - 1],org_aswing_MenuElement),this.menuItem)); else path.push(manager.nextSubElement(org_aswing_AsWingUtils["as"](path[path.length - 1],org_aswing_MenuElement),this.menuItem));
				manager.setSelectedPath(this.menuItem.stage,path,false);
			}
		}
	}
	,__menuItemRollOver: function(e) {
		org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.stage,this.getPath(),false);
		this.doBackgroundTransition();
	}
	,__menuItemRollOut: function(e) {
		var path = org_aswing_MenuSelectionManager.defaultManager().getSelectedPath();
		if(path.length > 1 && js_Boot.__instanceof(path[path.length - 1],org_aswing_JMenuItem) && path[path.length - 1] == this.menuItem) {
			path.pop();
			org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.stage,path,false);
		} else if(null != this.menuItem.getParent() && Std["is"](this.menuItem.getParent(),org_aswing_JMenuBar)) org_aswing_MenuSelectionManager.defaultManager().clearSelectedPath(false);
		this.doBackgroundTransition();
	}
	,__menuItemAct: function(e) {
		if(!this.menuItem.isExternalAction) jive_Navigation.get_instance().navigate(org_aswing_MenuSelectionManager.defaultManager().getSelectedPath(),null);
		org_aswing_MenuSelectionManager.defaultManager().clearSelectedPath(false);
		this.menuItem.repaint();
	}
	,__menuStateChanged: function(e) {
		this.menuItem.repaint();
	}
	,____menuItemRollOver: function(e) {
		this.__menuItemRollOver(e);
	}
	,____menuItemRollOut: function(e) {
		this.__menuItemRollOut(e);
	}
	,____menuItemAct: function(e) {
		this.__menuItemAct(e);
	}
	,calculateTargetBackgroundTransitionFactor: function() {
		if(this.shouldPaintSelected()) return 1.0; else return 0.0;
	}
	,doBackgroundTransition: function(immediately) {
		if(immediately == null) immediately = false;
		var _g = this;
		var targetFactor = this.calculateTargetBackgroundTransitionFactor();
		if(this.transitBackgroundFactor != targetFactor) {
			if(immediately) {
				this.transitBackgroundFactor = targetFactor;
				return;
			}
			motion_Actuate.stop(this,"transitBackgroundFactor");
			motion_Actuate.tween(this,0.25,{ transitBackgroundFactor : targetFactor}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
				_g.menuItem.repaint();
			}).onComplete(function() {
				_g.transitBackgroundFactor = targetFactor;
			});
		}
	}
	,isMenu: function() {
		return false;
	}
	,isTopMenu: function() {
		return false;
	}
	,shouldPaintSelected: function() {
		return this.menuItem.getModel().isRollOver();
	}
	,getPath: function() {
		var m = org_aswing_MenuSelectionManager.defaultManager();
		var oldPath = m.getSelectedPath();
		var newPath;
		var i = oldPath.length;
		if(i == 0) return [];
		var parent = this.menuItem.getParent();
		var me = null;
		me = org_aswing_AsWingUtils["as"](oldPath[i - 1],org_aswing_MenuElement);
		if(me.getMenuComponent() == parent) {
			newPath = oldPath.slice();
			newPath.push(this.menuItem);
		} else {
			var j = 0;
			var _g1 = 0;
			var _g = oldPath.length;
			while(_g1 < _g) {
				var j1 = _g1++;
				me = org_aswing_AsWingUtils["as"](oldPath[j1],org_aswing_MenuElement);
				if(me.getMenuComponent() == parent) break;
			}
			newPath = oldPath.slice(0,j + 1);
			newPath.push(this.menuItem);
		}
		return newPath;
	}
	,paint: function(c,g,b) {
		var mi;
		mi = js_Boot.__instanceof(c,org_aswing_JMenuItem)?c:null;
		this.paintMenuItem(mi,g,b,this.checkIcon,this.arrowIcon,this.selectionBackground,this.selectionForeground,this.menuItem.getIconTextGap());
	}
	,paintMenuItem: function(b,g,r,checkIcon,arrowIcon,background,foreground,textIconGap) {
		var model = b.getModel();
		var bgRect = r;
		var insets = b.getMargin();
		if(insets != null) r = insets.getInsideBounds(r);
		this.resetRects();
		org_aswing_plaf_basic_BasicMenuItemUI.viewRect.setRect(r);
		var font = b.getFont();
		var acceleratorText = this.getAcceleratorText(b);
		var text = "";
		text = this.layoutMenuItem(font,b.getDisplayText(),this.acceleratorFont,acceleratorText,b.getIcon(),checkIcon,arrowIcon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),[org_aswing_plaf_basic_BasicMenuItemUI.viewRect,org_aswing_plaf_basic_BasicMenuItemUI.iconRect,org_aswing_plaf_basic_BasicMenuItemUI.textRect,org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect,org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect,org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect,b.getDisplayText() == null?0:textIconGap,textIconGap]);
		this.paintMenuBackground(b,g,bgRect,background);
		var isSelected = this.shouldPaintSelected();
		this.paintCheckIcon(b,this.useCheckAndArrow(),g,org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect.x,org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect.y);
		var icon = null;
		if(b.getIcon() != null) {
			if(!model.isEnabled()) icon = b.getDisabledIcon(); else if(model.isPressed() && model.isArmed()) {
				icon = b.getPressedIcon();
				if(icon == null) icon = b.getIcon();
			} else if(jive_Navigation.get_instance().isMenuElementActive(b)) {
				icon = b.getSelectedIcon();
				if(icon == null) icon = b.getIcon();
			} else icon = b.getIcon();
		}
		this.paintIcon(b,icon,g,org_aswing_plaf_basic_BasicMenuItemUI.iconRect.x,org_aswing_plaf_basic_BasicMenuItemUI.iconRect.y);
		var tc;
		if(text != null && text != "") {
			tc = b.getForeground();
			if(isSelected) tc = this.selectionForeground;
			if(!b.isEnabled()) {
				if(this.disabledForeground != null) tc = this.disabledForeground; else tc = org_aswing_plaf_basic_BasicGraphicsUtils.getDisabledColor(b);
			}
			this.textField.set_visible(true);
			this.paintTextField(b,org_aswing_plaf_basic_BasicMenuItemUI.textRect,this.textField,text,font,tc,!b.isFontValidated());
			b.setFontValidated(true);
		} else this.textField.set_visible(false);
		if(acceleratorText != null && acceleratorText != "") {
			var accOffset = 0;
			var parent = this.menuItem.getParent();
			if(parent != null) {
				var p = parent;
				var maxValueInt;
				if(p.getClientProperty("maxAccWidth") == null) maxValueInt = org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.width; else maxValueInt = p.getClientProperty("maxAccWidth");
				accOffset = maxValueInt - org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.width;
			}
			var accTextFieldRect = new org_aswing_geom_IntRectangle();
			accTextFieldRect.x = org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.x - accOffset;
			accTextFieldRect.y = org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.y;
			tc = this.acceleratorForeground;
			if(!model.isEnabled()) {
				if(this.disabledForeground != null) tc = this.disabledForeground; else tc = org_aswing_plaf_basic_BasicGraphicsUtils.getDisabledColor(b);
			} else if(isSelected) tc = this.acceleratorSelectionForeground;
			this.accelTextField.set_visible(true);
			this.paintTextField(b,accTextFieldRect,this.accelTextField,acceleratorText,this.acceleratorFont,tc,!this.acceleratorFontValidated);
			this.acceleratorFontValidated = true;
		} else this.accelTextField.set_visible(false);
		this.paintArrowIcon(b,this.useCheckAndArrow(),g,org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect.x,org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect.y);
	}
	,paintCheckIcon: function(b,isPaint,g,x,y) {
		if(this.checkIcon == null) return;
		if(isPaint != true) this.setIconVisible(this.checkIcon,false); else {
			this.setIconVisible(this.checkIcon,true);
			this.checkIcon.updateIcon(b,g,x,y);
		}
	}
	,paintArrowIcon: function(b,isPaint,g,x,y) {
		if(this.arrowIcon == null) return;
		if(isPaint != true) this.setIconVisible(this.arrowIcon,false); else {
			this.setIconVisible(this.arrowIcon,true);
			this.arrowIcon.updateIcon(b,g,x,y);
		}
	}
	,paintIcon: function(b,icon,g,x,y) {
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon != null) {
			this.setIconVisible(icon,true);
			icon.updateIcon(b,g,x,y);
		}
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.menuItem) != null) icon.getDisplay(this.menuItem).set_visible(visible);
	}
	,getIcons: function() {
		var arr = [];
		var button = this.menuItem;
		if(button.getIcon() != null) arr.push(button.getIcon());
		if(button.getDisabledIcon() != null) arr.push(button.getDisabledIcon());
		if(button.getSelectedIcon() != null) arr.push(button.getSelectedIcon());
		if(button.getDisabledSelectedIcon() != null) arr.push(button.getDisabledSelectedIcon());
		if(button.getRollOverIcon() != null) arr.push(button.getRollOverIcon());
		if(button.getRollOverSelectedIcon() != null) arr.push(button.getRollOverSelectedIcon());
		if(button.getPressedIcon() != null) arr.push(button.getPressedIcon());
		return arr;
	}
	,paintMenuBackground: function(menuItem,g,r,bgColor) {
		var tune = menuItem.getStyleTune();
		var beginColor;
		if(jive_Navigation.get_instance().isMenuElementActive(menuItem)) beginColor = bgColor; else beginColor = menuItem.getBackground();
		var endColor = bgColor.offsetHLS(0,0.03,0);
		var color = org_aswing_ASColor.getColorBetween(beginColor,endColor,this.transitBackgroundFactor);
		if(menuItem.isOpaque() || (this.shouldPaintSelected() || jive_Navigation.get_instance().isMenuElementActive(menuItem)) && (menuItem.getBackgroundDecorator() == null || menuItem.getBackgroundDecorator() == org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE)) this.doPaintMenuBackground(menuItem,g,color,r,tune.round);
	}
	,doPaintMenuBackground: function(c,g,cl,r,round) {
		var tune = c.getStyleTune();
		var style = new org_aswing_StyleResult(cl,tune);
		org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,r,style,Math.PI / 2);
	}
	,paintTextField: function(b,tRect,textField,text,font,color,validateFont) {
		if(textField.get_text() != text) textField.set_text(text);
		if(validateFont) org_aswing_AsWingUtils.applyTextFont(textField,font);
		org_aswing_AsWingUtils.applyTextColor(textField,color);
		textField.set_x(tRect.x);
		textField.set_y(tRect.y);
		if(b.getMnemonicIndex() >= 0) textField.setTextFormat(new openfl_text_TextFormat(null,null,null,null,null,true),b.getMnemonicIndex());
	}
	,resetRects: function() {
		org_aswing_plaf_basic_BasicMenuItemUI.iconRect.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
		org_aswing_plaf_basic_BasicMenuItemUI.textRect.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
		org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
		org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
		org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
		org_aswing_plaf_basic_BasicMenuItemUI.viewRect.setRectXYWH(0,0,100000,100000);
		org_aswing_plaf_basic_BasicMenuItemUI.r.setRect(org_aswing_plaf_basic_BasicMenuItemUI.zeroRect);
	}
	,getPreferredMenuItemSize: function(b,checkIcon,arrowIcon,textIconGap) {
		var icon = b.getIcon();
		var text = b.getDisplayText();
		var acceleratorText = this.getAcceleratorText(b);
		var font = b.getFont();
		this.resetRects();
		this.layoutMenuItem(font,text,this.acceleratorFont,acceleratorText,icon,checkIcon,arrowIcon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),[org_aswing_plaf_basic_BasicMenuItemUI.viewRect,org_aswing_plaf_basic_BasicMenuItemUI.iconRect,org_aswing_plaf_basic_BasicMenuItemUI.textRect,org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect,org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect,org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect,text == null?0:textIconGap,textIconGap]);
		org_aswing_plaf_basic_BasicMenuItemUI.r = org_aswing_plaf_basic_BasicMenuItemUI.textRect.union(org_aswing_plaf_basic_BasicMenuItemUI.iconRect);
		var parent = this.menuItem.getParent();
		if(parent != null && !this.isTopMenu()) {
			var p = parent;
			var maxTextValue = p.getClientProperty("maxTextWidth");
			var maxAccValue = p.getClientProperty("maxAccWidth");
			if(null != maxTextValue && org_aswing_plaf_basic_BasicMenuItemUI.r.width < maxTextValue) org_aswing_plaf_basic_BasicMenuItemUI.r.width = maxTextValue; else p.putClientProperty("maxTextWidth",org_aswing_plaf_basic_BasicMenuItemUI.r.width);
			if(null == maxAccValue || org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.width > maxAccValue) {
				maxAccValue = org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.width;
				p.putClientProperty("maxAccWidth",org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect.width);
			}
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += maxAccValue;
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += textIconGap;
		}
		if(this.useCheckAndArrow()) {
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect.width;
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += textIconGap;
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += textIconGap;
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect.width;
		}
		org_aswing_plaf_basic_BasicMenuItemUI.r.width += 2 * textIconGap;
		var insets = b.getInsets();
		if(insets != null) {
			org_aswing_plaf_basic_BasicMenuItemUI.r.width += insets.left + insets.right;
			org_aswing_plaf_basic_BasicMenuItemUI.r.height += insets.top + insets.bottom;
		}
		org_aswing_plaf_basic_BasicMenuItemUI.r.width = Math.ceil(org_aswing_plaf_basic_BasicMenuItemUI.r.width);
		org_aswing_plaf_basic_BasicMenuItemUI.r.height = Math.ceil(org_aswing_plaf_basic_BasicMenuItemUI.r.height);
		if(org_aswing_plaf_basic_BasicMenuItemUI.r.width % 2 == 0) org_aswing_plaf_basic_BasicMenuItemUI.r.width++;
		if(org_aswing_plaf_basic_BasicMenuItemUI.r.height % 2 == 0) org_aswing_plaf_basic_BasicMenuItemUI.r.height++;
		var size = b.getInsets().getOutsideSize(org_aswing_plaf_basic_BasicMenuItemUI.r.getSize());
		if(b.getMargin() != null) size = b.getMargin().getOutsideSize(size);
		return size;
	}
	,getAcceleratorText: function(b) {
		if(b.getAccelerator() == null) return ""; else return b.getAccelerator().getDescription();
	}
	,useCheckAndArrow: function() {
		return !this.isTopMenu();
	}
	,getPreferredSize: function(c) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_JMenuItem)?c:null;
		return this.getPreferredMenuItemSize(b,this.checkIcon,this.arrowIcon,this.menuItem.getIconTextGap());
	}
	,getMinimumSize: function(c) {
		var size = this.menuItem.getInsets().getOutsideSize();
		if(this.menuItem.getMargin() != null) size = this.menuItem.getMargin().getOutsideSize(size);
		return size;
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__class__: org_aswing_plaf_basic_BasicMenuItemUI
});
var org_aswing_plaf_basic_BasicMenuUI = function() {
	org_aswing_plaf_basic_BasicMenuItemUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuUI"] = org_aswing_plaf_basic_BasicMenuUI;
org_aswing_plaf_basic_BasicMenuUI.__name__ = ["org","aswing","plaf","basic","BasicMenuUI"];
org_aswing_plaf_basic_BasicMenuUI.__super__ = org_aswing_plaf_basic_BasicMenuItemUI;
org_aswing_plaf_basic_BasicMenuUI.prototype = $extend(org_aswing_plaf_basic_BasicMenuItemUI.prototype,{
	getPropertyPrefix: function() {
		return "Menu.";
	}
	,installDefaults: function() {
		org_aswing_plaf_basic_BasicMenuItemUI.prototype.installDefaults.call(this);
		this.updateDefaultBackgroundColor();
	}
	,uninstallDefaults: function() {
		this.menuItem.getModel().setRollOver(false);
		this.menuItem.setSelected(false);
		org_aswing_plaf_basic_BasicMenuItemUI.prototype.uninstallDefaults.call(this);
	}
	,installListeners: function() {
		org_aswing_plaf_basic_BasicMenuItemUI.prototype.installListeners.call(this);
		this.menuItem.addSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,uninstallListeners: function() {
		org_aswing_plaf_basic_BasicMenuItemUI.prototype.uninstallListeners.call(this);
		this.menuItem.removeSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,getMenu: function() {
		return org_aswing_AsWingUtils["as"](this.menuItem,org_aswing_JMenu);
	}
	,updateDefaultBackgroundColor: function() {
		if(!this.getBoolean("Menu.useMenuBarBackgroundForTopLevel")) return;
		var menu = this.getMenu();
		if(Std["is"](menu.getBackground(),org_aswing_plaf_UIResource)) {
			if(menu.isTopLevelMenu()) menu.setBackground(this.getColor("MenuBar.background")); else menu.setBackground(this.getColor(this.getPropertyPrefix() + ".background"));
		}
	}
	,isMenu: function() {
		return true;
	}
	,isTopMenu: function() {
		return this.getMenu().isTopLevelMenu();
	}
	,shouldPaintSelected: function() {
		return this.menuItem.getModel().isRollOver() || this.menuItem.isSelected();
	}
	,processKeyEvent: function(code) {
		var manager = org_aswing_MenuSelectionManager.defaultManager();
		if(manager.isNextPageKey(code)) {
			var path = manager.getSelectedPath();
			if(path[path.length - 1] == this.menuItem) {
				var popElement = this.getMenu().getPopupMenu();
				path.push(popElement);
				if(popElement.getSubElements().length > 0) path.push(popElement.getSubElements()[0]);
				manager.setSelectedPath(this.menuItem.stage,path,false);
			}
		} else org_aswing_plaf_basic_BasicMenuItemUI.prototype.processKeyEvent.call(this,code);
	}
	,__menuSelectionChanged: function(e) {
		this.menuItem.repaint();
	}
	,__menuItemRollOver: function(e) {
		var menu = this.getMenu();
		var manager = org_aswing_MenuSelectionManager.defaultManager();
		var selectedPath = manager.getSelectedPath();
		if(!menu.isTopLevelMenu()) {
			if(!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {
				if(menu.getDelay() <= 0) this.appendPath(this.getPath(),menu.getPopupMenu()); else {
					manager.setSelectedPath(this.menuItem.stage,this.getPath(),false);
					this.setupPostTimer(menu);
				}
			}
		} else if(selectedPath.length > 0 && selectedPath[0] == menu.getParent()) manager.setSelectedPath(this.menuItem.stage,[menu.getParent(),menu,menu.getPopupMenu()],false);
		this.doBackgroundTransition();
	}
	,__menuItemAct: function(e) {
		var menu = this.getMenu();
		var cnt = menu.getParent();
		if(cnt != null && js_Boot.__instanceof(cnt,org_aswing_JMenuBar) && menu.getSubElements().length > 0) {
			var me = [cnt,menu,menu.getPopupMenu()];
			org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.stage,me,false);
		}
		if(menu.getComponentCount() <= 0 && !menu.isExternalAction) jive_Navigation.get_instance().navigate(org_aswing_MenuSelectionManager.defaultManager().getSelectedPath(),null);
		this.menuItem.repaint();
	}
	,__postTimerAct: function(e) {
		var menu = this.getMenu();
		var path = org_aswing_MenuSelectionManager.defaultManager().getSelectedPath();
		if(path.length > 0 && js_Boot.__instanceof(path[path.length - 1],org_aswing_JMenu) && path[path.length - 1] == menu) this.appendPath(path,menu.getPopupMenu());
	}
	,appendPath: function(path,end) {
		path.push(end);
		org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.stage,path,false);
	}
	,setupPostTimer: function(menu) {
		if(this.postTimer == null) {
			this.postTimer = new org_aswing_util_Timer(menu.getDelay(),1);
			this.postTimer.addEventListener("act",$bind(this,this.__postTimerAct));
		}
		this.postTimer.restart();
	}
	,__class__: org_aswing_plaf_basic_BasicMenuUI
});
var jive_plaf_flat_FlatMenuUI = function() {
	org_aswing_plaf_basic_BasicMenuUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatMenuUI"] = jive_plaf_flat_FlatMenuUI;
jive_plaf_flat_FlatMenuUI.__name__ = ["jive","plaf","flat","FlatMenuUI"];
jive_plaf_flat_FlatMenuUI.__super__ = org_aswing_plaf_basic_BasicMenuUI;
jive_plaf_flat_FlatMenuUI.prototype = $extend(org_aswing_plaf_basic_BasicMenuUI.prototype,{
	doPaintMenuBackground: function(c,g,cl,r,round) {
		if(this.isTopMenu()) round = 0;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(cl),r.x,r.y,r.width,r.height,round);
	}
	,useCheckAndArrow: function() {
		return this.getMenu().getComponentCount() > 0;
	}
	,paint: function(c,g,b) {
		if(this.isTopMenu() && (this.menuItem.get_font() == null || Std["is"](this.menuItem.get_font(),org_aswing_plaf_UIResource))) this.menuItem.set_font(this.getFont(this.getPropertyPrefix() + "topMenuFont"));
		org_aswing_plaf_basic_BasicMenuUI.prototype.paint.call(this,c,g,b);
	}
	,__class__: jive_plaf_flat_FlatMenuUI
});
var org_aswing_plaf_basic_BasicScrollBarUI = function() {
	this.scrollBarWidth = 16;
	this.minimumThumbLength = 9;
	this.thumbRect = new org_aswing_geom_IntRectangle();
	this.isDragging = false;
	this.offset = 0;
	this.scrollIncrement = 0;
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicScrollBarUI"] = org_aswing_plaf_basic_BasicScrollBarUI;
org_aswing_plaf_basic_BasicScrollBarUI.__name__ = ["org","aswing","plaf","basic","BasicScrollBarUI"];
org_aswing_plaf_basic_BasicScrollBarUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicScrollBarUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "ScrollBar.";
	}
	,installUI: function(c) {
		this.scrollbar = js_Boot.__instanceof(c,org_aswing_JScrollBar)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.scrollbar = js_Boot.__instanceof(c,org_aswing_JScrollBar)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		this.configureScrollBarColors();
		var pp = this.getPropertyPrefix();
		if(this.containsKey(pp + "barWidth")) this.scrollBarWidth = this.getInt(pp + "barWidth");
		if(this.containsKey(pp + "minimumThumbLength")) this.minimumThumbLength = this.getInt(pp + "minimumThumbLength");
		org_aswing_LookAndFeel.installBasicProperties(this.scrollbar,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.scrollbar,pp);
	}
	,configureScrollBarColors: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.scrollbar,pp);
		this.arrowShadowColor = this.getColor(pp + "arrowShadowColor");
		this.arrowLightColor = this.getColor(pp + "arrowLightColor");
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.scrollbar);
	}
	,installComponents: function() {
		this.thumMC = new org_aswing_AWSprite();
		var pp = this.getPropertyPrefix();
		this.thumbDecorator = this.getGroundDecorator(pp + "thumbDecorator");
		if(this.thumbDecorator != null) {
			if(this.thumbDecorator.getDisplay(this.scrollbar) != null) this.thumMC.addChild(this.thumbDecorator.getDisplay(this.scrollbar));
		}
		this.scrollbar.addChild(this.thumMC);
		this.thumMC.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__startDragThumb));
		this.thumMC.addEventListener("release",$bind(this,this.__stopDragThumb));
		this.createIcons();
		this.incrButton = this.createArrowButton();
		this.incrButton.setName("JScrollbar_incrButton");
		this.decrButton = this.createArrowButton();
		this.decrButton.setName("JScrollbar_decrButton");
		this.setButtonIcons();
		this.incrButton.setUIElement(true);
		this.decrButton.setUIElement(true);
		this.scrollbar.addChild(this.incrButton);
		this.scrollbar.addChild(this.decrButton);
		this.scrollbar.setEnabled(this.scrollbar.isEnabled());
	}
	,uninstallComponents: function() {
		this.scrollbar.removeChild(this.incrButton);
		this.scrollbar.removeChild(this.decrButton);
		this.scrollbar.removeChild(this.thumMC);
		this.thumMC.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__startDragThumb));
		this.thumMC.removeEventListener("release",$bind(this,this.__stopDragThumb));
		this.thumbDecorator = null;
	}
	,installListeners: function() {
		this.scrollbar.addStateListener($bind(this,this.__adjustChanged));
		this.incrButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__incrButtonPress));
		this.incrButton.addEventListener("release",$bind(this,this.__incrButtonReleased));
		this.decrButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__decrButtonPress));
		this.decrButton.addEventListener("release",$bind(this,this.__decrButtonReleased));
		this.scrollbar.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__trackPress));
		this.scrollbar.addEventListener("release",$bind(this,this.__trackReleased));
		this.scrollbar.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.scrollbar.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.scrollbar.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__destroy));
		this.scrollTimer = new org_aswing_util_Timer(org_aswing_plaf_basic_BasicScrollBarUI.scrollSpeedThrottle);
		this.scrollTimer.setInitialDelay(org_aswing_plaf_basic_BasicScrollBarUI.initialScrollSpeedThrottle);
		this.scrollTimer.addActionListener($bind(this,this.__scrollTimerPerformed));
	}
	,uninstallListeners: function() {
		this.scrollbar.removeStateListener($bind(this,this.__adjustChanged));
		this.incrButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__incrButtonPress));
		this.incrButton.removeEventListener("release",$bind(this,this.__incrButtonReleased));
		this.decrButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__decrButtonPress));
		this.decrButton.removeEventListener("release",$bind(this,this.__decrButtonReleased));
		this.scrollbar.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__trackPress));
		this.scrollbar.removeEventListener("release",$bind(this,this.__trackReleased));
		this.scrollbar.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.scrollbar.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.scrollbar.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__destroy));
		this.scrollTimer.stop();
		this.scrollTimer = null;
	}
	,isVertical: function() {
		return this.scrollbar.getOrientation() == 1;
	}
	,getThumbRect: function() {
		return this.thumbRect.clone();
	}
	,__destroy: function(e) {
		this.scrollTimer.stop();
		if(this.isDragging) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
	}
	,__onMouseWheel: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollByIncrement(-e.delta * this.scrollbar.getUnitIncrement());
	}
	,__onKeyDown: function(e) {
		if(!(this.scrollbar.isEnabled() && this.scrollbar.isShowing())) return;
		var code = e.keyCode;
		if(code == org_aswing_AWKeyboard.UP || code == org_aswing_AWKeyboard.LEFT) this.scrollByIncrement(-this.scrollbar.getUnitIncrement()); else if(code == org_aswing_AWKeyboard.DOWN || code == org_aswing_AWKeyboard.RIGHT) this.scrollByIncrement(this.scrollbar.getUnitIncrement()); else if(code == org_aswing_AWKeyboard.PAGE_UP) this.scrollByIncrement(-this.scrollbar.getBlockIncrement()); else if(code == org_aswing_AWKeyboard.PAGE_DOWN) this.scrollByIncrement(this.scrollbar.getBlockIncrement()); else if(code == org_aswing_AWKeyboard.HOME) this.scrollbar.setValue(this.scrollbar.getMinimum()); else if(code == org_aswing_AWKeyboard.END) this.scrollbar.setValue(this.scrollbar.getMaximum() - this.scrollbar.getVisibleAmount());
	}
	,__scrollTimerPerformed: function(e) {
		var value = this.scrollbar.getValue() + this.scrollIncrement;
		var finished = false;
		if(this.scrollIncrement > 0) {
			if(value >= this.scrollContinueDestination) finished = true;
		} else if(value <= this.scrollContinueDestination) finished = true;
		if(finished) {
			this.scrollbar.setValue(this.scrollContinueDestination,false);
			this.scrollTimer.stop();
		} else this.scrollByIncrement(this.scrollIncrement);
	}
	,__adjustChanged: function(e) {
		if(this.scrollbar.isVisible() && !this.isDragging) this.paintAndLocateThumb(this.scrollbar.getPaintBounds());
	}
	,__incrButtonPress: function(e) {
		this.scrollIncrement = this.scrollbar.getUnitIncrement();
		this.scrollByIncrement(this.scrollIncrement);
		this.scrollContinueDestination = this.scrollbar.getMaximum() - this.scrollbar.getVisibleAmount();
		this.scrollTimer.restart();
	}
	,__incrButtonReleased: function(e) {
		this.scrollTimer.stop();
	}
	,__decrButtonPress: function(e) {
		this.scrollIncrement = -this.scrollbar.getUnitIncrement();
		this.scrollByIncrement(this.scrollIncrement);
		this.scrollContinueDestination = this.scrollbar.getMinimum();
		this.scrollTimer.restart();
	}
	,__decrButtonReleased: function(e) {
		this.scrollTimer.stop();
	}
	,__trackPress: function(e) {
		var aimPoint = this.scrollbar.getMousePosition();
		var isPressedInRange = false;
		var tr = this.getThumbRect();
		var mousePos;
		if(this.isVertical()) {
			mousePos = aimPoint.y;
			aimPoint.y -= tr.height / 2 | 0;
			if(mousePos < tr.y && mousePos > this.decrButton.get_y() + this.decrButton.get_height()) isPressedInRange = true; else if(mousePos > tr.y + tr.height && mousePos < this.incrButton.get_y()) isPressedInRange = true;
		} else {
			mousePos = aimPoint.x;
			aimPoint.x -= tr.width / 2 | 0;
			if(mousePos < tr.x && mousePos > this.decrButton.get_x() + this.decrButton.get_width()) isPressedInRange = true; else if(mousePos > tr.x + tr.width && mousePos < this.incrButton.get_x()) isPressedInRange = true;
		}
		if(isPressedInRange) {
			this.scrollContinueDestination = this.getValueWithPosition(aimPoint);
			if(this.scrollContinueDestination > this.scrollbar.getValue()) this.scrollIncrement = this.scrollbar.getBlockIncrement(); else this.scrollIncrement = -this.scrollbar.getBlockIncrement();
			this.scrollByIncrement(this.scrollIncrement);
			this.scrollTimer.restart();
		}
	}
	,__trackReleased: function(e) {
		this.scrollTimer.stop();
	}
	,scrollByIncrement: function(increment) {
		this.scrollbar.setValue(this.scrollbar.getValue() + increment,false);
	}
	,__startDragThumb: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollbar.setValueIsAdjusting(true);
		var mp = this.scrollbar.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var tr = this.getThumbRect();
		if(this.isVertical()) this.offset = my - tr.y; else this.offset = mx - tr.x;
		this.isDragging = true;
		this.__startHandleDrag();
	}
	,__stopDragThumb: function(e) {
		this.__stopHandleDrag();
		if(!this.scrollbar.isEnabled()) return;
		if(this.isDragging) this.scrollThumbToCurrentMousePosition();
		this.offset = 0;
		this.isDragging = false;
		this.scrollbar.setValueIsAdjusting(false);
	}
	,__startHandleDrag: function() {
		org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb),false,0,false);
	}
	,__stopHandleDrag: function() {
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
	}
	,__onMoveThumb: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollThumbToCurrentMousePosition();
		e.updateAfterEvent();
	}
	,scrollThumbToCurrentMousePosition: function() {
		var mp = this.scrollbar.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var thumbR = this.getThumbRect();
		var thumbMin;
		var thumbMax;
		var thumbPos;
		if(this.isVertical()) {
			thumbMin = this.decrButton.getY() + this.decrButton.getHeight();
			thumbMax = this.incrButton.getY() - thumbR.height;
			thumbPos = Std["int"](Math.min(thumbMax,Math.max(thumbMin,my - this.offset)));
			this.setThumbRect(thumbR.x,thumbPos,thumbR.width,thumbR.height);
		} else {
			thumbMin = this.decrButton.getX() + this.decrButton.getWidth();
			thumbMax = this.incrButton.getX() - thumbR.width;
			thumbPos = Std["int"](Math.min(thumbMax,Math.max(thumbMin,mx - this.offset)));
			this.setThumbRect(thumbPos,thumbR.y,thumbR.width,thumbR.height);
		}
		var scrollBarValue = this.getValueWithThumbMaxMinPos(thumbMin,thumbMax,thumbPos);
		this.scrollbar.setValue(scrollBarValue,false);
	}
	,getValueWithPosition: function(point) {
		var mx = point.x;
		var my = point.y;
		var thumbR = this.getThumbRect();
		var thumbMin;
		var thumbMax;
		var thumbPos;
		if(this.isVertical()) {
			thumbMin = this.decrButton.getY() + this.decrButton.getHeight();
			thumbMax = this.incrButton.getY() - thumbR.height;
			thumbPos = my;
		} else {
			thumbMin = this.decrButton.getX() + this.decrButton.getWidth();
			thumbMax = this.incrButton.getX() - thumbR.width;
			thumbPos = mx;
		}
		return this.getValueWithThumbMaxMinPos(thumbMin,thumbMax,thumbPos);
	}
	,getValueWithThumbMaxMinPos: function(thumbMin,thumbMax,thumbPos) {
		var model = this.scrollbar.getModel();
		var scrollBarValue;
		if(thumbPos >= thumbMax) scrollBarValue = model.getMaximum() - model.getExtent(); else {
			var valueMax = model.getMaximum() - model.getExtent();
			var valueRange = valueMax - model.getMinimum();
			var thumbValue = thumbPos - thumbMin;
			var thumbRange = thumbMax - thumbMin;
			var value = Math.round(thumbValue / thumbRange * valueRange);
			scrollBarValue = value + model.getMinimum();
		}
		return scrollBarValue;
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.layoutScrollBar();
		this.paintAndLocateThumb(b);
	}
	,paintBackGround: function(c,g,b) {
	}
	,paintAndLocateThumb: function(b) {
		if(!this.scrollbar.isEnabled()) {
			if(this.isVertical()) {
				if(this.scrollbar.mouseChildren) haxe_Log.trace("Logic Wrong : Scrollbar is not enabled, but its children enabled ",{ fileName : "BasicScrollBarUI.hx", lineNumber : 444, className : "org.aswing.plaf.basic.BasicScrollBarUI", methodName : "paintAndLocateThumb"});
			}
			this.thumMC.set_visible(false);
			return;
		}
		this.thumMC.set_visible(true);
		var min = this.scrollbar.getMinimum();
		var extent = this.scrollbar.getVisibleAmount();
		var range = this.scrollbar.getMaximum() - min;
		var value = this.scrollbar.getValue();
		if(range <= 0) {
			if(range < 0) haxe_Log.trace("Logic Wrong : Scrollbar range = " + range + ", max=" + this.scrollbar.getMaximum() + ", min=" + min,{ fileName : "BasicScrollBarUI.hx", lineNumber : 458, className : "org.aswing.plaf.basic.BasicScrollBarUI", methodName : "paintAndLocateThumb"});
			this.thumMC.set_visible(false);
			return;
		}
		var trackLength;
		var thumbLength;
		if(this.isVertical()) {
			trackLength = b.height - this.incrButton.getHeight() - this.decrButton.getHeight();
			thumbLength = Math.floor(trackLength * (extent / range));
		} else {
			trackLength = b.width - this.incrButton.getWidth() - this.decrButton.getWidth();
			thumbLength = Math.floor(trackLength * (extent / range));
		}
		if(trackLength > this.minimumThumbLength) thumbLength = Std["int"](Math.max(thumbLength,this.minimumThumbLength)); else {
			this.thumMC.set_visible(false);
			return;
		}
		var thumbRange = trackLength - thumbLength;
		var thumbPos;
		if(range - extent == 0) thumbPos = 0; else thumbPos = Math.round(thumbRange * ((value - min) / (range - extent)));
		if(this.isVertical()) this.setThumbRect(b.x,thumbPos + b.y + this.decrButton.getHeight(),this.scrollBarWidth,thumbLength); else this.setThumbRect(thumbPos + b.x + this.decrButton.getWidth(),b.y,thumbLength,this.scrollBarWidth);
	}
	,setThumbRect: function(x,y,w,h) {
		var oldW = this.thumbRect.width;
		var oldH = this.thumbRect.height;
		this.thumbRect.setRectXYWH(x,y,w,h);
		if(w != oldW || h != oldH) this.paintThumb(this.thumMC,this.thumbRect.getSize(),this.isDragging);
		this.thumMC.set_x(x);
		this.thumMC.set_y(y);
	}
	,paintThumb: function(thumMC,size,isPressed) {
		thumMC.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(thumMC.get_graphics());
		if(this.thumbDecorator != null) this.thumbDecorator.updateDecorator(this.scrollbar,g,size.getBounds());
	}
	,createArrowIcon: function(direction) {
		var icon = new org_aswing_plaf_basic_icon_ScrollBarArrowIcon(direction,this.scrollBarWidth,this.scrollBarWidth);
		return icon;
	}
	,createArrowButton: function() {
		var b = new org_aswing_JButton();
		b.setFocusable(false);
		b.setBackground(null);
		b.setForeground(null);
		b.setMideground(null);
		b.setStyleTune(null);
		b.setStyleProxy(this.scrollbar);
		b.setPreferredSize(new org_aswing_geom_IntDimension(this.scrollBarWidth,this.scrollBarWidth));
		return b;
	}
	,createIcons: function() {
		this.leftIcon = this.createArrowIcon(Math.PI);
		this.rightIcon = this.createArrowIcon(0);
		this.upIcon = this.createArrowIcon(-Math.PI / 2);
		this.downIcon = this.createArrowIcon(Math.PI / 2);
	}
	,setButtonIcons: function() {
		if(this.isVertical()) {
			this.incrButton.setIcon(this.downIcon);
			this.decrButton.setIcon(this.upIcon);
		} else {
			this.incrButton.setIcon(this.rightIcon);
			this.decrButton.setIcon(this.leftIcon);
		}
	}
	,getPreferredSize: function(c) {
		var w;
		var h;
		if(this.isVertical()) {
			w = this.scrollBarWidth;
			h = this.scrollBarWidth * 2;
		} else {
			w = this.scrollBarWidth * 2;
			h = this.scrollBarWidth;
		}
		return this.scrollbar.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(w,h));
	}
	,getMaximumSize: function(c) {
		var w;
		var h;
		if(this.isVertical()) {
			w = this.scrollBarWidth;
			h = 100000;
		} else {
			w = 100000;
			h = this.scrollBarWidth;
		}
		return this.scrollbar.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(w,h));
	}
	,getMinimumSize: function(c) {
		return this.getPreferredSize(c);
	}
	,layoutVScrollbar: function(sb) {
		var rd = sb.getPaintBounds();
		var bd = this.decrButton.getPreferredSize();
		var w = bd.width;
		var h = bd.height;
		var x = rd.x;
		var y = rd.y;
		var sbw = this.scrollBarWidth;
		this.decrButton.setComBoundsXYWH(x + (sbw - w) / 2 | 0,y,w,h);
		this.incrButton.setComBoundsXYWH(x + (sbw - w) / 2 | 0,y + rd.height - h,w,h);
	}
	,layoutHScrollbar: function(sb) {
		var rd = sb.getPaintBounds();
		var bd = this.decrButton.getPreferredSize();
		var w = bd.width;
		var h = bd.height;
		var x = rd.x;
		var y = rd.y;
		var sbw = this.scrollBarWidth;
		this.decrButton.setComBoundsXYWH(x,y + (sbw - h) / 2 | 0,w,h);
		this.incrButton.setComBoundsXYWH(x + rd.width - w | 0,y + (sbw - h) / 2 | 0,w,h);
	}
	,layoutScrollBar: function() {
		if(this.isDragging) return;
		this.setButtonIcons();
		if(this.isVertical()) this.layoutVScrollbar(this.scrollbar); else this.layoutHScrollbar(this.scrollbar);
	}
	,__class__: org_aswing_plaf_basic_BasicScrollBarUI
});
var jive_plaf_flat_FlatScrollBarUI = function() {
	org_aswing_plaf_basic_BasicScrollBarUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatScrollBarUI"] = jive_plaf_flat_FlatScrollBarUI;
jive_plaf_flat_FlatScrollBarUI.__name__ = ["jive","plaf","flat","FlatScrollBarUI"];
jive_plaf_flat_FlatScrollBarUI.__super__ = org_aswing_plaf_basic_BasicScrollBarUI;
jive_plaf_flat_FlatScrollBarUI.prototype = $extend(org_aswing_plaf_basic_BasicScrollBarUI.prototype,{
	installComponents: function() {
		org_aswing_plaf_basic_BasicScrollBarUI.prototype.installComponents.call(this);
		this.incrButton.set_preferredSize(this.decrButton.set_preferredSize(new org_aswing_geom_IntDimension(0,0)));
		this.incrButton.set_visibility(this.decrButton.set_visibility(false));
	}
	,__class__: jive_plaf_flat_FlatScrollBarUI
});
var org_aswing_plaf_SliderUI = function() { };
$hxClasses["org.aswing.plaf.SliderUI"] = org_aswing_plaf_SliderUI;
org_aswing_plaf_SliderUI.__name__ = ["org","aswing","plaf","SliderUI"];
org_aswing_plaf_SliderUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_SliderUI.prototype = {
	__class__: org_aswing_plaf_SliderUI
};
var org_aswing_plaf_basic_BasicSliderUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.trackRect = new org_aswing_geom_IntRectangle();
	this.tickRect = new org_aswing_geom_IntRectangle();
	this.thumbRect = new org_aswing_geom_IntRectangle();
	this.trackDrawRect = new org_aswing_geom_IntRectangle();
	this.offset = 0;
	this.isDragging = false;
};
$hxClasses["org.aswing.plaf.basic.BasicSliderUI"] = org_aswing_plaf_basic_BasicSliderUI;
org_aswing_plaf_basic_BasicSliderUI.__name__ = ["org","aswing","plaf","basic","BasicSliderUI"];
org_aswing_plaf_basic_BasicSliderUI.__interfaces__ = [org_aswing_plaf_SliderUI];
org_aswing_plaf_basic_BasicSliderUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicSliderUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Slider.";
	}
	,installUI: function(c) {
		this.slider = js_Boot.__instanceof(c,org_aswing_JSlider)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.slider = js_Boot.__instanceof(c,org_aswing_JSlider)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.slider,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.slider,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.slider,pp);
		this.configureSliderColors();
	}
	,configureSliderColors: function() {
		var pp = this.getPropertyPrefix();
		this.progressColor = this.getColor(pp + "progressColor");
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.slider);
	}
	,installComponents: function() {
		var pp = this.getPropertyPrefix();
		this.thumbIcon = this.getIcon(pp + "thumbIcon");
		if(this.thumbIcon.getDisplay(this.slider) == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Slider thumb icon must has its own display object(getDisplay()!=null)!"));
		this.trackCanvas = new openfl_display_Shape();
		this.progressCanvas = new openfl_display_Shape();
		this.slider.addChild(this.trackCanvas);
		this.slider.addChild(this.progressCanvas);
		this.slider.addChild(this.thumbIcon.getDisplay(this.slider));
	}
	,uninstallComponents: function() {
		this.slider.removeChild(this.trackCanvas);
		this.slider.removeChild(this.progressCanvas);
		this.slider.removeChild(this.thumbIcon.getDisplay(this.slider));
		this.thumbIcon = null;
		this.progressCanvas = null;
		this.trackCanvas = null;
	}
	,installListeners: function() {
		this.slider.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onSliderPress));
		this.slider.addEventListener("release",$bind(this,this.__onSliderReleased));
		this.slider.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onSliderMouseWheel));
		this.slider.addStateListener($bind(this,this.__onSliderStateChanged));
		this.slider.addEventListener("focusKeyDown",$bind(this,this.__onSliderKeyDown));
		this.scrollTimer = new org_aswing_util_Timer(org_aswing_plaf_basic_BasicSliderUI.scrollSpeedThrottle | 0);
		this.scrollTimer.setInitialDelay(org_aswing_plaf_basic_BasicSliderUI.initialScrollSpeedThrottle | 0);
		this.scrollTimer.addActionListener($bind(this,this.__scrollTimerPerformed));
	}
	,uninstallListeners: function() {
		this.slider.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onSliderPress));
		this.slider.removeEventListener("release",$bind(this,this.__onSliderReleased));
		this.slider.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onSliderMouseWheel));
		this.slider.removeStateListener($bind(this,this.__onSliderStateChanged));
		this.slider.removeEventListener("focusKeyDown",$bind(this,this.__onSliderKeyDown));
		this.scrollTimer.stop();
		this.scrollTimer = null;
	}
	,isVertical: function() {
		return this.slider.getOrientation() == 1;
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.countTrackRect(b);
		this.countThumbRect();
		this.countTickRect(b);
		this.paintTrack(g,this.trackDrawRect);
		this.paintThumb(g,this.thumbRect);
		this.paintTick(g,this.tickRect);
	}
	,countTrackRect: function(b) {
		var thumbSize = this.getThumbSize();
		var h_margin;
		var v_margin;
		if(this.isVertical()) {
			v_margin = Math.ceil(thumbSize.height / 2.0);
			h_margin = 2;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,thumbSize.width - h_margin * 2,b.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x,b.y + v_margin,thumbSize.width,b.height - v_margin * 2);
		} else {
			h_margin = Math.ceil(thumbSize.width / 2.0);
			v_margin = 2;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,b.width - h_margin * 2,thumbSize.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x + h_margin,b.y,b.width - h_margin * 2,thumbSize.height);
		}
	}
	,countTickRect: function(b) {
		if(this.isVertical()) {
			this.tickRect.y = this.trackRect.y;
			this.tickRect.x = this.trackRect.x + this.trackRect.width + this.getTickTrackGap();
			this.tickRect.height = this.trackRect.height;
			this.tickRect.width = b.width - this.trackRect.width - this.getTickTrackGap();
		} else {
			this.tickRect.x = this.trackRect.x;
			this.tickRect.y = this.trackRect.y + this.trackRect.height + this.getTickTrackGap();
			this.tickRect.width = this.trackRect.width;
			this.tickRect.height = b.height - this.trackRect.height - this.getTickTrackGap();
		}
	}
	,countThumbRect: function() {
		this.thumbRect.setSize(this.getThumbSize());
		if(this.slider.getSnapToTicks()) {
			var sliderValue = this.slider.getValue();
			var snappedValue = sliderValue;
			var majorTickSpacing = this.slider.getMajorTickSpacing();
			var minorTickSpacing = this.slider.getMinorTickSpacing();
			var tickSpacing = 0;
			if(minorTickSpacing > 0) tickSpacing = minorTickSpacing; else if(majorTickSpacing > 0) tickSpacing = majorTickSpacing;
			if(tickSpacing != 0) {
				if((sliderValue - this.slider.getMinimum()) % tickSpacing != 0) {
					var temp = (sliderValue - this.slider.getMinimum()) / tickSpacing;
					var whichTick = Math.round(temp);
					snappedValue = this.slider.getMinimum() + whichTick * tickSpacing;
				}
				if(snappedValue != sliderValue) this.slider.setValue(snappedValue);
			}
		}
		var valuePosition;
		if(this.isVertical()) {
			valuePosition = this.yPositionForValue(this.slider.getValue());
			this.thumbRect.x = this.trackRect.x;
			this.thumbRect.y = valuePosition - this.thumbRect.height / 2 | 0;
		} else {
			valuePosition = Std["int"](this.xPositionForValue(this.slider.getValue()));
			this.thumbRect.x = valuePosition - this.thumbRect.width / 2 | 0;
			this.thumbRect.y = this.trackRect.y;
		}
	}
	,getThumbSize: function() {
		if(this.isVertical()) return new org_aswing_geom_IntDimension(this.thumbIcon.getIconHeight(this.slider),this.thumbIcon.getIconWidth(this.slider)); else return new org_aswing_geom_IntDimension(this.thumbIcon.getIconWidth(this.slider),this.thumbIcon.getIconHeight(this.slider));
	}
	,countTickSize: function(sliderRect) {
		if(this.isVertical()) return new org_aswing_geom_IntDimension(Std["int"](this.getTickLength()),sliderRect.height); else return new org_aswing_geom_IntDimension(sliderRect.width,Std["int"](this.getTickLength()));
	}
	,getTickLength: function() {
		return 10;
	}
	,countTrackAndThumbSize: function(sliderRect) {
		if(this.isVertical()) return new org_aswing_geom_IntDimension(this.getThumbSize().width,sliderRect.height); else return new org_aswing_geom_IntDimension(sliderRect.width,this.getThumbSize().height);
	}
	,getTickTrackGap: function() {
		return 2;
	}
	,xPositionForValue: function(value) {
		var min = this.slider.getMinimum();
		var max = this.slider.getMaximum();
		var trackLength = this.trackRect.width;
		var valueRange = max - min;
		var pixelsPerValue = trackLength / valueRange;
		var trackLeft = this.trackRect.x;
		var trackRight = this.trackRect.x + this.trackRect.width;
		var xPosition;
		if(!this.slider.getInverted()) {
			xPosition = trackLeft;
			xPosition += Math.round(pixelsPerValue * (value - min));
		} else {
			xPosition = trackRight;
			xPosition -= Math.round(pixelsPerValue * (value - min));
		}
		xPosition = Std["int"](Math.max(trackLeft,xPosition));
		xPosition = Std["int"](Math.min(trackRight,xPosition));
		return xPosition;
	}
	,yPositionForValue: function(value) {
		var min = this.slider.getMinimum();
		var max = this.slider.getMaximum();
		var trackLength = this.trackRect.height;
		var valueRange = max - min;
		var pixelsPerValue = trackLength / valueRange;
		var trackTop = this.trackRect.y;
		var trackBottom = this.trackRect.y + (this.trackRect.height - 1);
		var yPosition;
		if(!this.slider.getInverted()) {
			yPosition = trackTop;
			yPosition += Math.round(pixelsPerValue * (max - value));
		} else {
			yPosition = trackTop;
			yPosition += Math.round(pixelsPerValue * (value - min));
		}
		yPosition = Std["int"](Math.max(trackTop,yPosition));
		yPosition = Std["int"](Math.min(trackBottom,yPosition));
		return yPosition;
	}
	,valueForYPosition: function(yPos) {
		var value;
		var minValue = this.slider.getMinimum();
		var maxValue = this.slider.getMaximum();
		var trackLength = this.trackRect.height;
		var trackTop = this.trackRect.y;
		var trackBottom = this.trackRect.y + (this.trackRect.height - 1);
		var inverted = this.slider.getInverted();
		if(yPos <= trackTop) if(inverted) value = minValue; else value = maxValue; else if(yPos >= trackBottom) if(inverted) value = maxValue; else value = minValue; else {
			var distanceFromTrackTop = yPos - trackTop;
			var valueRange = maxValue - minValue;
			var valuePerPixel = valueRange / trackLength;
			var valueFromTrackTop = Math.round(distanceFromTrackTop * valuePerPixel);
			if(inverted) value = minValue + valueFromTrackTop; else value = maxValue - valueFromTrackTop;
		}
		return value;
	}
	,valueForXPosition: function(xPos) {
		var value;
		var minValue = this.slider.getMinimum();
		var maxValue = this.slider.getMaximum();
		var trackLength = this.trackRect.width;
		var trackLeft = this.trackRect.x;
		var trackRight = this.trackRect.x + this.trackRect.width;
		var inverted = this.slider.getInverted();
		if(xPos <= trackLeft) if(inverted) value = maxValue; else value = minValue; else if(xPos >= trackRight) if(inverted) value = minValue; else value = maxValue; else {
			var distanceFromTrackLeft = xPos - trackLeft;
			var valueRange = maxValue - minValue;
			var valuePerPixel = valueRange / trackLength;
			var valueFromTrackLeft = Math.round(distanceFromTrackLeft * valuePerPixel);
			if(inverted) value = maxValue - valueFromTrackLeft; else value = minValue + valueFromTrackLeft;
		}
		return value;
	}
	,paintTrack: function(g,drawRect) {
		this.trackCanvas.get_graphics().clear();
		if(!this.slider.getPaintTrack()) return;
		g = new org_aswing_graphics_Graphics2D(this.trackCanvas.get_graphics());
		var verticle = this.slider.getOrientation() == 1;
		var style = this.slider.getStyleTune();
		var b = drawRect.clone();
		var radius = 0;
		if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(this.slider.getBackground()),b.x,b.y,b.width,b.height,radius);
		var trackCanvas_f = [];
		trackCanvas_f.push(new openfl_filters_GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
		this.trackCanvas.set_filters(trackCanvas_f);
	}
	,paintTrackProgress: function(g,trackDrawRect) {
		if(!this.slider.getPaintTrack()) return;
		return;
		var rect = trackDrawRect.clone();
		var width;
		var height;
		var x;
		var y;
		var inverted = this.slider.getInverted();
		if(this.isVertical()) {
			width = rect.width - 5;
			height = this.thumbRect.y + this.thumbRect.height / 2 - rect.y - 5 | 0;
			x = rect.x + 2;
			if(inverted) y = rect.y + 2; else {
				height = rect.y + rect.height - this.thumbRect.y - this.thumbRect.height / 2 - 2 | 0;
				y = this.thumbRect.y + this.thumbRect.height / 2 | 0;
			}
		} else {
			height = rect.height - 5;
			if(inverted) {
				width = rect.x + rect.width - this.thumbRect.x - this.thumbRect.width / 2 - 2 | 0;
				x = this.thumbRect.x + this.thumbRect.width / 2 | 0;
			} else {
				width = this.thumbRect.x + this.thumbRect.width / 2 - rect.x - 5 | 0;
				x = rect.x + 2;
			}
			y = rect.y + 2;
		}
		g.fillRectangle(new org_aswing_graphics_SolidBrush(this.progressColor),x,y,width,height);
	}
	,paintThumb: function(g,drawRect) {
		if(this.isVertical()) {
			this.thumbIcon.getDisplay(this.slider).set_rotation(90);
			this.thumbIcon.updateIcon(this.slider,g,drawRect.x + this.thumbIcon.getIconHeight(this.slider),drawRect.y);
		} else {
			this.thumbIcon.getDisplay(this.slider).set_rotation(0);
			this.thumbIcon.updateIcon(this.slider,g,drawRect.x,drawRect.y);
		}
	}
	,paintTick: function(g,drawRect) {
		if(!this.slider.getPaintTicks()) return;
		var tickBounds = drawRect;
		var majT = this.slider.getMajorTickSpacing();
		var minT = this.slider.getMinorTickSpacing();
		var max = this.slider.getMaximum();
		g.beginDraw(new org_aswing_graphics_Pen(this.slider.getForeground(),0));
		var yPos = 0;
		var value = 0;
		var xPos = 0;
		if(this.isVertical()) {
			xPos = tickBounds.x;
			value = this.slider.getMinimum();
			yPos = 0;
			if(minT > 0) while(value <= max) {
				yPos = this.yPositionForValue(value);
				this.paintMinorTickForVertSlider(g,tickBounds,xPos,yPos);
				value += minT;
			}
			if(majT > 0) {
				value = this.slider.getMinimum();
				while(value <= max) {
					yPos = this.yPositionForValue(value);
					this.paintMajorTickForVertSlider(g,tickBounds,xPos,yPos);
					value += majT;
				}
			}
		} else {
			yPos = tickBounds.y;
			value = this.slider.getMinimum();
			xPos = 0;
			if(minT > 0) while(value <= max) {
				xPos = Std["int"](this.xPositionForValue(value));
				this.paintMinorTickForHorizSlider(g,tickBounds,xPos,yPos);
				value += minT;
			}
			if(majT > 0) {
				value = this.slider.getMinimum();
				while(value <= max) {
					xPos = Std["int"](this.xPositionForValue(value));
					this.paintMajorTickForHorizSlider(g,tickBounds,xPos,yPos);
					value += majT;
				}
			}
		}
		g.endDraw();
	}
	,paintMinorTickForHorizSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x,y + tickBounds.height / 2 - 1);
	}
	,paintMajorTickForHorizSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x,y + tickBounds.height - 2);
	}
	,paintMinorTickForVertSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x + tickBounds.width / 2 - 1,y);
	}
	,paintMajorTickForVertSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x + tickBounds.width - 2,y);
	}
	,__onSliderStateChanged: function(e) {
		if(this.isDragging != true) {
			this.countThumbRect();
			this.paintThumb(null,this.thumbRect);
			this.progressCanvas.get_graphics().clear();
			this.paintTrackProgress(new org_aswing_graphics_Graphics2D(this.progressCanvas.get_graphics()),this.trackDrawRect);
		}
	}
	,__onSliderKeyDown: function(e) {
		if(!this.slider.isEnabled()) return;
		var code = e.keyCode;
		var unit = this.getUnitIncrement();
		var block;
		if(this.slider.getMajorTickSpacing() > 0) block = this.slider.getMajorTickSpacing(); else block = unit * 5;
		if(this.isVertical()) {
			unit = -unit;
			block = -block;
		}
		if(this.slider.getInverted()) {
			unit = -unit;
			block = -block;
		}
		if(code == org_aswing_AWKeyboard.UP || code == org_aswing_AWKeyboard.LEFT) this.scrollByIncrement(-unit); else if(code == org_aswing_AWKeyboard.DOWN || code == org_aswing_AWKeyboard.RIGHT) this.scrollByIncrement(unit); else if(code == org_aswing_AWKeyboard.PAGE_UP) this.scrollByIncrement(-block); else if(code == org_aswing_AWKeyboard.PAGE_DOWN) this.scrollByIncrement(block); else if(code == org_aswing_AWKeyboard.HOME) this.slider.setValue(this.slider.getMinimum()); else if(code == org_aswing_AWKeyboard.END) this.slider.setValue(this.slider.getMaximum() - this.slider.getExtent());
	}
	,__onSliderPress: function(e) {
		var mousePoint = this.slider.getMousePosition();
		if(this.thumbRect.containsPoint(mousePoint)) this.__startDragThumb(); else {
			var inverted = this.slider.getInverted();
			var thumbCenterPos;
			if(this.isVertical()) {
				thumbCenterPos = this.thumbRect.y + this.thumbRect.height / 2;
				if(mousePoint.y > thumbCenterPos) if(inverted) this.scrollIncrement = this.getUnitIncrement(); else this.scrollIncrement = -this.getUnitIncrement(); else if(inverted) this.scrollIncrement = -this.getUnitIncrement(); else this.scrollIncrement = this.getUnitIncrement();
				this.scrollContinueDestination = this.valueForYPosition(mousePoint.y);
			} else {
				thumbCenterPos = this.thumbRect.x + this.thumbRect.width / 2;
				if(mousePoint.x > thumbCenterPos) if(inverted) this.scrollIncrement = -this.getUnitIncrement(); else this.scrollIncrement = this.getUnitIncrement(); else if(inverted) this.scrollIncrement = this.getUnitIncrement(); else this.scrollIncrement = -this.getUnitIncrement();
				this.scrollContinueDestination = this.valueForXPosition(mousePoint.x);
			}
			this.scrollTimer.restart();
			this.__scrollTimerPerformed(null);
		}
	}
	,__onSliderReleased: function(e) {
		if(this.isDragging) this.__stopDragThumb();
		if(this.scrollTimer.isRunning()) this.scrollTimer.stop();
	}
	,__onSliderMouseWheel: function(e) {
		if(!this.slider.isEnabled()) return;
		var delta = e.delta;
		if(this.slider.getInverted()) delta = -delta;
		this.scrollByIncrement(delta * this.getUnitIncrement());
	}
	,__scrollTimerPerformed: function(e) {
		var value = this.slider.getValue() + this.scrollIncrement;
		var finished = false;
		if(this.scrollIncrement > 0) {
			if(value >= this.scrollContinueDestination) finished = true;
		} else if(value <= this.scrollContinueDestination) finished = true;
		if(finished) {
			this.slider.setValue(this.scrollContinueDestination);
			this.scrollTimer.stop();
		} else this.scrollByIncrement(this.scrollIncrement);
	}
	,scrollByIncrement: function(increment) {
		this.slider.setValue(this.slider.getValue() + increment);
	}
	,getUnitIncrement: function() {
		var unit = 0;
		if(this.slider.getMinorTickSpacing() > 0) unit = this.slider.getMinorTickSpacing(); else if(this.slider.getMajorTickSpacing() > 0) unit = this.slider.getMajorTickSpacing(); else {
			var range = this.slider.getMaximum() - this.slider.getMinimum();
			if(range > 2) unit = Std["int"](Math.max(1,Math.round(range / 500))); else unit = range / 100 | 0;
		}
		return unit;
	}
	,__startDragThumb: function() {
		this.isDragging = true;
		this.slider.setValueIsAdjusting(true);
		var mp = this.slider.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var tr = this.thumbRect;
		if(this.isVertical()) this.offset = my - tr.y; else this.offset = mx - tr.x;
		this.__startHandleDrag();
	}
	,__stopDragThumb: function() {
		this.__stopHandleDrag();
		if(this.isDragging) {
			this.isDragging = false;
			this.countThumbRect();
		}
		this.slider.setValueIsAdjusting(false);
		this.offset = 0;
	}
	,__startHandleDrag: function() {
		if(org_aswing_AsWingManager.getStage() != null) {
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb),false,0,false);
			this.slider.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onMoveThumbRFS),false,0,false);
			this.showValueTip();
		}
	}
	,__onMoveThumbRFS: function(e) {
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
		this.slider.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onMoveThumbRFS));
	}
	,__stopHandleDrag: function() {
		if(this.slider.stage != null) this.__onMoveThumbRFS(null);
		this.disposValueTip();
	}
	,__onMoveThumb: function(e) {
		this.scrollThumbToCurrentMousePosition();
		this.showValueTip();
		e.updateAfterEvent();
	}
	,showValueTip: function() {
		if(this.slider.getShowValueTip()) {
			var tip = this.slider.getValueTip();
			tip.setWaitThenPopupEnabled(false);
			tip.setTipText(this.slider.getValue() + "");
			if(!tip.isShowing()) tip.showToolTip();
			tip.moveLocationRelatedTo(this.slider.componentToGlobal(this.slider.getMousePosition()));
		}
	}
	,disposValueTip: function() {
		if(this.slider.getValueTip() != null) this.slider.getValueTip().disposeToolTip();
	}
	,scrollThumbToCurrentMousePosition: function() {
		var mp = this.slider.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var thumbPos;
		var minPos;
		var maxPos;
		var halfThumbLength;
		var sliderValue;
		var paintThumbRect = this.thumbRect.clone();
		if(this.isVertical()) {
			halfThumbLength = this.thumbRect.height / 2 | 0;
			thumbPos = my - this.offset;
			if(!this.slider.getInverted()) {
				maxPos = this.yPositionForValue(this.slider.getMinimum()) - halfThumbLength;
				minPos = this.yPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength;
			} else {
				minPos = this.yPositionForValue(this.slider.getMinimum()) - halfThumbLength;
				maxPos = this.yPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength;
			}
			thumbPos = Std["int"](Math.max(minPos,Math.min(maxPos,thumbPos)));
			sliderValue = this.valueForYPosition(thumbPos + halfThumbLength);
			this.slider.setValue(sliderValue);
			this.thumbRect.y = this.yPositionForValue(this.slider.getValue()) - halfThumbLength;
			paintThumbRect.y = thumbPos;
		} else {
			halfThumbLength = this.thumbRect.width / 2 | 0;
			thumbPos = mx - this.offset;
			if(this.slider.getInverted()) {
				maxPos = Std["int"](this.xPositionForValue(this.slider.getMinimum()) - halfThumbLength);
				minPos = Std["int"](this.xPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength);
			} else {
				minPos = Std["int"](this.xPositionForValue(this.slider.getMinimum()) - halfThumbLength);
				maxPos = Std["int"](this.xPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength);
			}
			thumbPos = Std["int"](Math.max(minPos,Math.min(maxPos,thumbPos)));
			sliderValue = this.valueForXPosition(thumbPos + halfThumbLength);
			this.slider.setValue(sliderValue);
			this.thumbRect.x = Std["int"](this.xPositionForValue(this.slider.getValue()) - halfThumbLength);
			paintThumbRect.x = thumbPos;
		}
		this.paintThumb(null,paintThumbRect);
		this.progressCanvas.get_graphics().clear();
		this.paintTrackProgress(new org_aswing_graphics_Graphics2D(this.progressCanvas.get_graphics()),this.trackDrawRect);
	}
	,getTrackMargin: function() {
		var b = this.slider.getPaintBounds();
		this.countTrackRect(b);
		var insets = new org_aswing_Insets();
		insets.top = this.trackRect.y - b.y;
		insets.bottom = b.y + b.height - this.trackRect.y - this.trackRect.height;
		insets.left = this.trackRect.x - b.x;
		insets.right = b.x + b.width - this.trackRect.x - this.trackRect.width;
		return insets;
	}
	,getPrefferedLength: function() {
		return 200;
	}
	,getPreferredSize: function(c) {
		var size;
		var thumbSize = this.getThumbSize();
		var tickLength = Std["int"](this.getTickLength());
		var gap = this.getTickTrackGap();
		var wide;
		if(this.slider.getPaintTicks()) wide = gap + tickLength; else wide = 0;
		if(this.isVertical()) {
			wide += thumbSize.width;
			size = new org_aswing_geom_IntDimension(wide,Std["int"](Math.max(wide,this.getPrefferedLength())));
		} else {
			wide += thumbSize.height;
			size = new org_aswing_geom_IntDimension(Std["int"](Math.max(wide,this.getPrefferedLength())),wide);
		}
		return c.getInsets().getOutsideSize(size);
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		var size;
		var thumbSize = this.getThumbSize();
		var tickLength = Std["int"](this.getTickLength());
		var gap = this.getTickTrackGap();
		var wide;
		if(this.slider.getPaintTicks()) wide = gap + tickLength; else wide = 0;
		if(this.isVertical()) {
			wide += thumbSize.width;
			size = new org_aswing_geom_IntDimension(wide,thumbSize.height);
		} else {
			wide += thumbSize.height;
			size = new org_aswing_geom_IntDimension(thumbSize.width,wide);
		}
		return c.getInsets().getOutsideSize(size);
	}
	,__class__: org_aswing_plaf_basic_BasicSliderUI
});
var jive_plaf_flat_FlatSliderUI = function() {
	org_aswing_plaf_basic_BasicSliderUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatSliderUI"] = jive_plaf_flat_FlatSliderUI;
jive_plaf_flat_FlatSliderUI.__name__ = ["jive","plaf","flat","FlatSliderUI"];
jive_plaf_flat_FlatSliderUI.__super__ = org_aswing_plaf_basic_BasicSliderUI;
jive_plaf_flat_FlatSliderUI.prototype = $extend(org_aswing_plaf_basic_BasicSliderUI.prototype,{
	paintTrack: function(g,drawRect) {
		this.trackCanvas.get_graphics().clear();
		if(!this.slider.getPaintTrack()) return;
		g = new org_aswing_graphics_Graphics2D(this.trackCanvas.get_graphics());
		var verticle = this.slider.getOrientation() == 1;
		var style = this.slider.get_styleTune();
		var b = drawRect.clone();
		var radius = 0;
		if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(this.slider.get_background()),b.x,b.y,b.width,b.height,radius);
	}
	,paintTrackProgress: function(g,trackDrawRect) {
		if(!this.slider.get_paintTrack()) return;
		var style = this.slider.get_styleTune();
		var rect = trackDrawRect.clone();
		var width;
		var height;
		var x;
		var y;
		var inverted = this.slider.get_isInverted();
		var radius = 0;
		if(this.isVertical()) {
			radius = Math.floor(rect.width / 2);
			width = rect.width;
			height = this.thumbRect.y + this.thumbRect.height / 2 - rect.y | 0;
			x = rect.x;
			if(inverted) y = rect.y; else {
				height = rect.y + rect.height - this.thumbRect.y - this.thumbRect.height / 2 | 0;
				y = this.thumbRect.y + this.thumbRect.height / 2 | 0;
			}
		} else {
			height = rect.height;
			radius = Math.floor(rect.height / 2);
			if(inverted) {
				width = rect.x + rect.width - this.thumbRect.x - this.thumbRect.width / 2 | 0;
				x = this.thumbRect.x + this.thumbRect.width / 2 | 0;
			} else {
				width = this.thumbRect.x + this.thumbRect.width / 2 - rect.x | 0;
				x = rect.x;
			}
			y = rect.y;
		}
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(this.progressColor),x,y,width,height,radius);
	}
	,countTrackRect: function(b) {
		var thumbSize = this.getThumbSize();
		var h_margin;
		var v_margin;
		if(this.isVertical()) {
			v_margin = Math.ceil(thumbSize.height / 2.0);
			h_margin = Math.ceil(thumbSize.width / 6);
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,thumbSize.width - h_margin * 2,b.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x,b.y + v_margin,thumbSize.width,b.height - v_margin * 2);
		} else {
			h_margin = Math.ceil(thumbSize.width / 2.0);
			v_margin = Math.ceil(thumbSize.height / 6);
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,b.width - h_margin * 2,thumbSize.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x + h_margin,b.y,b.width - h_margin * 2,thumbSize.height);
		}
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_basic_BasicSliderUI.prototype.paint.call(this,c,g,b);
		this.progressCanvas.get_graphics().clear();
		this.paintTrackProgress(new org_aswing_graphics_Graphics2D(this.progressCanvas.get_graphics()),this.trackDrawRect);
	}
	,__class__: jive_plaf_flat_FlatSliderUI
});
var org_aswing_LayoutManager = function() { };
$hxClasses["org.aswing.LayoutManager"] = org_aswing_LayoutManager;
org_aswing_LayoutManager.__name__ = ["org","aswing","LayoutManager"];
org_aswing_LayoutManager.prototype = {
	__class__: org_aswing_LayoutManager
};
var org_aswing_plaf_basic_BasicTabbedPaneUI = function() {
	this.topBlankSpace = 4;
	this.contentMargin = null;
	this.maxTabWidth = -1;
	this.tabGap = 1;
	org_aswing_plaf_BaseComponentUI.call(this);
	this.tabBorderInsets = new org_aswing_Insets(2,2,0,2);
	this.selectedTabExpandInsets = new org_aswing_Insets(2,2,0,2);
	this.tabs = [];
	this.firstIndex = 0;
	this.lastIndex = 0;
};
$hxClasses["org.aswing.plaf.basic.BasicTabbedPaneUI"] = org_aswing_plaf_basic_BasicTabbedPaneUI;
org_aswing_plaf_basic_BasicTabbedPaneUI.__name__ = ["org","aswing","plaf","basic","BasicTabbedPaneUI"];
org_aswing_plaf_basic_BasicTabbedPaneUI.__interfaces__ = [org_aswing_LayoutManager];
org_aswing_plaf_basic_BasicTabbedPaneUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicTabbedPaneUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.tabbedPane = js_Boot.__instanceof(c,org_aswing_JTabbedPane)?c:null;
		this.tabbedPane.setLayout(this);
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.tabbedPane = js_Boot.__instanceof(c,org_aswing_JTabbedPane)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "TabbedPane.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.tabbedPane,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.tabbedPane,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.tabbedPane,pp);
		this.contentMargin = this.getInsets(pp + "contentMargin");
		if(this.contentMargin == null) this.contentMargin = new org_aswing_Insets(8,2,2,2);
		this.maxTabWidth = this.getInt(pp + "maxTabWidth");
		if(this.maxTabWidth == -1) this.maxTabWidth = 1000;
		this.contentRoundLineThickness = this.getInt(this.getPropertyPrefix() + "contentRoundLineThickness");
		var tabMargin = this.getInsets(pp + "tabMargin");
		if(tabMargin == null) tabMargin = new org_aswing_plaf_InsetsUIResource(1,1,1,1);
		if(this.containsKey(pp + "topBlankSpace")) this.topBlankSpace = this.getInt(pp + "topBlankSpace");
		if(this.containsKey(pp + "tabGap")) this.tabGap = this.getInt(pp + "tabGap");
		if(this.containsKey(pp + "tabBorderInsets")) this.tabBorderInsets = this.getInsets(pp + "tabBorderInsets");
		if(this.containsKey(pp + "selectedTabExpandInsets")) this.selectedTabExpandInsets = this.getInsets(pp + "selectedTabExpandInsets");
		var i = this.tabbedPane.getMargin();
		if(js_Boot.__instanceof(i,org_aswing_plaf_UIResource)) this.tabbedPane.setMargin(tabMargin);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.tabbedPane);
	}
	,installComponents: function() {
		this.prevButton = this.createPrevButton();
		this.nextButton = this.createNextButton();
		this.prevButton.setFocusable(false);
		this.nextButton.setFocusable(false);
		this.prevButton.setUIElement(true);
		this.nextButton.setUIElement(true);
		this.prevButton.addActionListener($bind(this,this.__prevButtonReleased));
		this.nextButton.addActionListener($bind(this,this.__nextButtonReleased));
		this.createUIAssets();
		this.synTabs();
	}
	,uninstallComponents: function() {
		this.prevButton.removeActionListener($bind(this,this.__prevButtonReleased));
		this.nextButton.removeActionListener($bind(this,this.__nextButtonReleased));
		this.removeUIAssets();
	}
	,installListeners: function() {
		this.tabbedPane.addStateListener($bind(this,this.__onSelectionChanged));
		this.tabbedPane.addEventListener("focusKeyDown",$bind(this,this.__onNavKeyDown));
		this.tabbedPane.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTabPanePressed));
	}
	,uninstallListeners: function() {
		this.tabbedPane.removeStateListener($bind(this,this.__onSelectionChanged));
		this.tabbedPane.removeEventListener("focusKeyDown",$bind(this,this.__onNavKeyDown));
		this.tabbedPane.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTabPanePressed));
	}
	,getMousedOnTabIndex: function() {
		var p = this.tabbedPane.getMousePosition();
		var n = this.tabbedPane.getComponentCount();
		var i = this.firstIndex;
		while(i < n && i <= this.lastIndex + 1) {
			var b = this.getDrawnTabBounds(i);
			if(b != null && b.containsPoint(p)) return i;
			i++;
		}
		return -1;
	}
	,__onSelectionChanged: function(e) {
		this.tabbedPane.revalidate();
		this.tabbedPane.repaint();
	}
	,__onTabPanePressed: function(e) {
		if((this.prevButton.hitTestMouse() || this.nextButton.hitTestMouse()) && (this.prevButton.isShowing() && this.nextButton.isShowing())) return;
		var index = this.getMousedOnTabIndex();
		if(index >= 0 && this.tabbedPane.isEnabledAt(index)) this.tabbedPane.setSelectedIndex(index,false);
	}
	,__onNavKeyDown: function(e) {
		if(!this.tabbedPane.isEnabled()) return;
		var n = this.tabbedPane.getComponentCount();
		if(n > 0) {
			var index = this.tabbedPane.getSelectedIndex();
			var code = e.keyCode;
			var count = 1;
			if(code == org_aswing_AWKeyboard.DOWN || code == org_aswing_AWKeyboard.RIGHT) {
				this.setTraversingTrue();
				index++;
				while((!this.tabbedPane.isEnabledAt(index) || !this.tabbedPane.isVisibleAt(index)) && index < n) {
					index++;
					count++;
					if(index >= n) return;
				}
				if(index >= n) return;
				if(this.lastIndex < n - 1) this.firstIndex = Std["int"](Math.min(this.firstIndex + count,n - 1));
			} else if(code == org_aswing_AWKeyboard.UP || code == org_aswing_AWKeyboard.LEFT) {
				this.setTraversingTrue();
				index--;
				while((!this.tabbedPane.isEnabledAt(index) || !this.tabbedPane.isVisibleAt(index)) && index >= 0) {
					index--;
					count++;
					if(index < 0) return;
				}
				if(index < 0) return;
				if(this.firstIndex > 0) this.firstIndex = Std["int"](Math.max(0,this.firstIndex - count));
			}
			this.tabbedPane.setSelectedIndex(index,false);
		}
	}
	,setTraversingTrue: function() {
		var fm = org_aswing_FocusManager.getManager(this.tabbedPane.stage);
		if(fm != null) fm.setTraversing(true);
	}
	,__prevButtonReleased: function(e) {
		if(this.firstIndex > 0) {
			this.firstIndex--;
			this.tabbedPane.repaint();
		}
	}
	,__nextButtonReleased: function(e) {
		if(this.lastIndex < this.tabbedPane.getComponentCount() - 1) {
			this.firstIndex++;
			this.tabbedPane.repaint();
		}
	}
	,isTabHorizontalPlacing: function() {
		return this.tabbedPane.getTabPlacement() == 1 || this.tabbedPane.getTabPlacement() == 3;
	}
	,getTabBorderInsets: function() {
		return this.tabBorderInsets;
	}
	,createPrevButton: function() {
		return this.createArrowButton(Math.PI);
	}
	,createArrowButton: function(direction) {
		var btn = new org_aswing_JButton("",this.createArrowIcon(direction,true));
		btn.setFocusable(false);
		btn.setPreferredSize(new org_aswing_geom_IntDimension(16,16));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org_aswing_Insets());
		btn.setBorder(null);
		btn.setStyleProxy(this.tabbedPane);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,createNextButton: function() {
		return this.createArrowButton(0);
	}
	,createArrowIcon: function(direction,enable) {
		return new org_aswing_plaf_basic_icon_ArrowIcon(direction,16);
	}
	,getTabBarSize: function() {
		if(this.tabBarSize != null) return this.tabBarSize;
		var isHorizontalPlacing = this.isTabHorizontalPlacing();
		this.tabBarSize = new org_aswing_geom_IntDimension(0,0);
		var n = this.tabbedPane.getComponentCount();
		this.tabBoundArray = [];
		var x = 0;
		var y = 0;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var ts = this.countPreferredTabSizeAt(i);
			var tbounds = new org_aswing_geom_IntRectangle(x,y,ts.width,ts.height);
			this.tabBoundArray[i] = tbounds;
			var offset;
			if(i < n + 1) offset = this.tabGap; else offset = 0;
			if(isHorizontalPlacing) {
				this.tabBarSize.height = Std["int"](Math.max(this.tabBarSize.height,ts.height));
				this.tabBarSize.width += ts.width + offset;
				x += ts.width + offset;
			} else {
				this.tabBarSize.width = Std["int"](Math.max(this.tabBarSize.width,ts.width));
				this.tabBarSize.height += ts.height + offset;
				y += ts.height + offset;
			}
		}
		var leadOffset = this.tabbedPane.getLeadingOffset();
		this.maxTabSize = this.tabBarSize.clone();
		if(isHorizontalPlacing) {
			this.tabBarSize.height += this.topBlankSpace + this.contentMargin.top;
			this.tabBarSize.width += this.tabBorderInsets.left + this.tabBorderInsets.right + leadOffset;
		} else {
			this.tabBarSize.width += this.topBlankSpace + this.contentMargin.top;
			this.tabBarSize.height += this.tabBorderInsets.left + this.tabBorderInsets.right + leadOffset;
		}
		return this.tabBarSize;
	}
	,getTabBoundArray: function() {
		if(this.tabBoundArray != null && this.tabBoundArray.length == this.tabbedPane.getComponentCount()) return this.tabBoundArray; else {
			this.invalidateLayout(this.tabbedPane);
			this.getTabBarSize();
			if(this.tabBoundArray == null) haxe_Log.trace("Debug : Error tabBoundArray == null but tabBarSize = " + Std.string(this.tabBarSize),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 370, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "getTabBoundArray"});
			return this.tabBoundArray;
		}
	}
	,countPreferredTabSizeAt: function(index) {
		var tab = this.getTab(index);
		var size = tab.getTabComponent().getPreferredSize();
		size.width = Std["int"](Math.min(size.width,this.maxTabWidth));
		return size;
	}
	,setDrawnTabBounds: function(index,b,paneBounds) {
		b = b.clone();
		if(b.x < paneBounds.x) b.x = paneBounds.x;
		if(b.y < paneBounds.y) b.y = paneBounds.y;
		if(b.x + b.width > paneBounds.x + paneBounds.width) b.width = paneBounds.x + paneBounds.width - b.x;
		if(b.y + b.height > paneBounds.y + paneBounds.height) b.height = paneBounds.y + paneBounds.height - b.y;
		this.drawnTabBoundArray[index] = b;
	}
	,getDrawnTabBounds: function(index) {
		return this.drawnTabBoundArray[index];
	}
	,createUIAssets: function() {
		this.uiRootMC = org_aswing_AsWingUtils.createSprite(this.tabbedPane,"uiRootMC");
		this.tabBarMC = org_aswing_AsWingUtils.createSprite(this.uiRootMC,"tabBarMC");
		this.tabBarMaskMC = org_aswing_AsWingUtils.createShape(this.uiRootMC,"tabBarMaskMC");
		this.tabBarMC.set_mask(this.tabBarMaskMC);
		var g = new org_aswing_graphics_Graphics2D(this.tabBarMaskMC.get_graphics());
		g.fillRectangle(new org_aswing_graphics_SolidBrush(org_aswing_ASColor.WHITE),0,0,1,1);
		this.buttonHolderMC = org_aswing_AsWingUtils.createSprite(this.uiRootMC,"buttonHolderMC");
		var p = new org_aswing_JPanel(new org_aswing_SoftBoxLayout(0,0));
		p.setOpaque(false);
		p.setFocusable(false);
		p.setSizeWH(100,100);
		p.setUIElement(true);
		this.buttonHolderMC.addChild(p);
		this.buttonMCPane = p;
		var insets = new org_aswing_Insets(this.topBlankSpace,this.topBlankSpace,this.topBlankSpace,this.topBlankSpace);
		p.setBorder(new org_aswing_border_EmptyBorder(null,insets));
		p.append(this.prevButton);
		p.append(this.nextButton);
	}
	,removeUIAssets: function() {
		this.tabbedPane.removeChild(this.uiRootMC);
		this.tabs = [];
	}
	,createTabBarGraphics: function() {
		this.tabBarMC.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.tabBarMC.get_graphics());
		return g;
	}
	,getTab: function(i) {
		return org_aswing_AsWingUtils["as"](this.tabs[i],org_aswing_plaf_basic_tabbedpane_Tab);
	}
	,getSelectedTab: function() {
		if(this.tabbedPane.getSelectedIndex() >= 0) return this.getTab(this.tabbedPane.getSelectedIndex()); else return null;
	}
	,indexOfTabComponent: function(tab) {
		var _g1 = 0;
		var _g = this.tabs.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getTab(i).getTabComponent() == tab) return i;
		}
		return -1;
	}
	,paintFocus: function(c,g,b) {
		var header = this.getSelectedTab();
		if(header != null) header.getTabComponent().paintFocusRect(true); else org_aswing_plaf_BaseComponentUI.prototype.paintFocus.call(this,c,g,b);
	}
	,createNewTab: function() {
		var tab = org_aswing_AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "tab"),org_aswing_plaf_basic_tabbedpane_Tab);
		if(tab == null) tab = new org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab();
		tab.initTab(this.tabbedPane);
		this.topTabCom = tab.getTabComponent();
		this.topTabCom.setFocusable(false);
		this.topTabCom.setStyleProxy(this.tabbedPane);
		this.topTabCom.setStyleTune(null);
		this.topTabCom.setForeground(null);
		this.topTabCom.setBackground(null);
		this.topTabCom.setMideground(null);
		this.topTabCom.setFont(null);
		return tab;
	}
	,synTabs: function() {
		var comCount = this.tabbedPane.getComponentCount();
		if(comCount != this.tabs.length) {
			var i;
			var header;
			if(comCount > this.tabs.length) {
				var _g = this.tabs.length;
				while(_g < comCount) {
					var i1 = _g++;
					header = this.createNewTab();
					this.setTabProperties(header,i1);
					this.tabBarMC.addChild(header.getTabComponent());
					this.tabs.push(header);
				}
			} else {
				var it = this.tabs.length - comCount;
				while(it > 0) {
					header = org_aswing_AsWingUtils["as"](this.tabs.shift(),org_aswing_plaf_basic_tabbedpane_Tab);
					this.tabBarMC.removeChild(header.getTabComponent());
					it--;
				}
			}
		}
	}
	,synTabProperties: function() {
		var _g1 = 0;
		var _g = this.tabs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getTab(i);
			this.setTabProperties(header,i);
		}
	}
	,setTabProperties: function(header,i) {
		header.setTextAndIcon(this.tabbedPane.getTitleAt(i),this.tabbedPane.getIconAt(i));
		header.getTabComponent().setUIElement(true);
		header.getTabComponent().setEnabled(this.tabbedPane.isEnabledAt(i));
		header.getTabComponent().setVisible(this.tabbedPane.isVisibleAt(i));
		header.getTabComponent().setToolTipText(this.tabbedPane.getTipAt(i));
		header.setHorizontalAlignment(this.tabbedPane.getHorizontalAlignment());
		header.setHorizontalTextPosition(this.tabbedPane.getHorizontalTextPosition());
		header.setIconTextGap(this.tabbedPane.getIconTextGap());
		this.setTabMarginProperty(header,this.getTransformedMargin());
		header.setVerticalAlignment(this.tabbedPane.getVerticalAlignment());
		header.setVerticalTextPosition(this.tabbedPane.getVerticalTextPosition());
		header.setFont(this.tabbedPane.getFont());
		header.setForeground(this.tabbedPane.getForeground());
	}
	,setTabMarginProperty: function(tab,margin) {
		tab.setMargin(margin);
	}
	,getTransformedMargin: function() {
		return this.transformMargin(this.tabbedPane.getMargin());
	}
	,transformMargin: function(margin) {
		var placement = this.tabbedPane.getTabPlacement();
		var transformedMargin = margin.clone();
		if(placement == 2) {
			transformedMargin.left = margin.top;
			transformedMargin.right = margin.bottom;
			transformedMargin.top = margin.right;
			transformedMargin.bottom = margin.left;
		} else if(placement == 4) {
			transformedMargin.left = margin.bottom;
			transformedMargin.right = margin.top;
			transformedMargin.top = margin.left;
			transformedMargin.bottom = margin.right;
		} else if(placement == 3) {
			transformedMargin.top = margin.bottom;
			transformedMargin.bottom = margin.top;
		}
		return transformedMargin;
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.synTabProperties();
		this.tabBarMaskMC.set_x(b.x);
		this.tabBarMaskMC.set_y(b.y);
		this.tabBarMaskMC.set_width(b.width);
		this.tabBarMaskMC.set_height(b.height);
		g = this.createTabBarGraphics();
		var horizontalPlacing = this.isTabHorizontalPlacing();
		var contentBounds = b.clone();
		var tabBarBoundsDraft = this.getTabBarSize().getBounds(0,0);
		var tabBarBounds = tabBarBoundsDraft.clone();
		tabBarBounds.x = b.x;
		tabBarBounds.y = b.y;
		tabBarBounds.width = contentBounds.width;
		tabBarBounds.height = Std["int"](Math.min(tabBarBounds.height,contentBounds.height));
		var transformedTabMargin = this.getTransformedMargin();
		var placement = this.tabbedPane.getTabPlacement();
		var leadingOffset = this.tabbedPane.getLeadingOffset();
		if(placement == 2) {
			tabBarBounds.y += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.height -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else if(placement == 4) {
			tabBarBounds.x = contentBounds.x + contentBounds.width - tabBarBounds.width;
			tabBarBounds.y += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.height -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else if(placement == 3) {
			tabBarBounds.y = contentBounds.y + contentBounds.height - tabBarBounds.height;
			tabBarBounds.x += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.width -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else {
			tabBarBounds.x += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.width -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		}
		var i = 0;
		var n = this.tabbedPane.getComponentCount();
		var tba = this.getTabBoundArray();
		this.drawnTabBoundArray = [];
		var selectedIndex = this.tabbedPane.getSelectedIndex();
		var offsetPoint = new org_aswing_geom_IntPoint();
		var _g1 = 0;
		var _g = this.firstIndex;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(horizontalPlacing) offsetPoint.x -= Std["int"](tba[i1].width); else offsetPoint.y -= Std["int"](tba[i1].height);
			this.getTab(i1).getTabComponent().setVisible(false);
		}
		var _g2 = this.firstIndex;
		while(_g2 < n) {
			var i2 = _g2++;
			if(i2 != selectedIndex) {
				var viewedFlag = this.drawTabWithFullInfosAt(i2,b,tba[i2],g,tabBarBounds,offsetPoint,transformedTabMargin);
				if(viewedFlag < 0) this.lastIndex = i2;
				if(viewedFlag >= 0) break;
			}
		}
		if(selectedIndex >= 0) {
			if(this.drawTabWithFullInfosAt(selectedIndex,b,tba[selectedIndex],g,tabBarBounds,offsetPoint,transformedTabMargin) < 0) this.lastIndex = Std["int"](Math.max(this.lastIndex,selectedIndex));
		}
		var selBounds = null;
		if(selectedIndex >= 0) selBounds = this.getDrawnTabBounds(selectedIndex);
		this.drawBaseLine(tabBarBounds,g,b,selBounds);
		var _g3 = this.lastIndex + 2;
		while(_g3 < n) {
			var i3 = _g3++;
			this.getTab(i3).getTabComponent().setVisible(false);
		}
		if(this.firstIndex > 0 || this.lastIndex < n - 1) {
			this.buttonMCPane.setVisible(true);
			this.prevButton.setEnabled(this.firstIndex > 0);
			this.nextButton.setEnabled(this.lastIndex < n - 1);
			var bps = this.buttonMCPane.getPreferredSize();
			this.buttonMCPane.setSize(bps);
			var bpl = new org_aswing_geom_IntPoint();
			if(placement == 2) {
				bpl.x = contentBounds.x;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else if(placement == 4) {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else if(placement == 3) {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y;
			}
			this.buttonMCPane.setLocation(bpl);
			this.buttonMCPane.revalidate();
		} else this.buttonMCPane.setVisible(false);
		this.tabbedPane.bringToTop(this.uiRootMC);
	}
	,drawTabWithFullInfosAt: function(index,paneBounds,bounds,g,tabBarBounds,offsetPoint,transformedTabMargin) {
		var tb = bounds.clone();
		tb.x += tabBarBounds.x + offsetPoint.x;
		tb.y += tabBarBounds.y + offsetPoint.y;
		var placement = this.tabbedPane.getTabPlacement();
		if(placement == 2) {
			tb.width = this.maxTabSize.width;
			tb.x += this.topBlankSpace;
		} else if(placement == 4) {
			tb.width = this.maxTabSize.width;
			tb.x += this.contentMargin.top;
		} else if(placement == 3) {
			tb.y += this.contentMargin.top;
			tb.height = this.maxTabSize.height;
		} else {
			tb.height = this.maxTabSize.height;
			tb.y += this.topBlankSpace;
		}
		if(this.isTabHorizontalPlacing()) {
			if(tb.x > paneBounds.x + paneBounds.width) return 1;
		} else if(tb.y > paneBounds.y + paneBounds.height) return 1;
		this.drawTabAt(index,tb,paneBounds,g,transformedTabMargin);
		if(this.isTabHorizontalPlacing()) {
			if(tb.x + tb.width > paneBounds.x + paneBounds.width) return 0;
		} else if(tb.y + tb.height > paneBounds.y + paneBounds.height) return 0;
		return -1;
	}
	,drawBaseLine: function(tabBarBounds,g,fullB,selTabB) {
		return;
		var b = tabBarBounds.clone();
		var placement = this.tabbedPane.getTabPlacement();
		var pen;
		var lineT = this.contentRoundLineThickness;
		if(selTabB == null) selTabB = new org_aswing_geom_IntRectangle(fullB.x + fullB.width / 2 | 0,fullB.y + fullB.height / 2 | 0,0,0);
		selTabB = selTabB.clone();
		var cl = this.tabbedPane.getMideground();
		var adjuster = this.tabbedPane.getStyleTune();
		var style = new org_aswing_StyleResult(cl,adjuster);
		var matrix = new openfl_geom_Matrix();
		var dark = style.bdark;
		var light = style.bdark.offsetHLS(0,0.15,-0.1);
		var leadingOffset = this.tabbedPane.getLeadingOffset();
		if(this.isTabHorizontalPlacing()) {
			var isTop = placement == 1;
			if(isTop) b.y = b.y + b.height - this.contentMargin.top; else b.y += this.contentMargin.top - lineT / 2 | 0;
			b.width += this.tabBorderInsets.getMarginWidth();
			b.x -= this.tabBorderInsets.left;
			var leftPart = new org_aswing_geom_IntRectangle(b.x,b.y,selTabB.x - b.x,2);
			var rightPart = new org_aswing_geom_IntRectangle(selTabB.x + selTabB.width,b.y,b.x + b.width - (selTabB.x + selTabB.width),2);
			matrix.createGradientBox(this.tabBorderInsets.left,1,0,leftPart.x,leftPart.y);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),leftPart.x,leftPart.y,leftPart.width,1);
			matrix.createGradientBox(this.tabBorderInsets.right,1,Math.PI,rightPart.x + rightPart.width - this.tabBorderInsets.right,rightPart.y);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),rightPart.x,rightPart.y,rightPart.width,1);
		} else {
			var isLeft = placement == 2;
			if(isLeft) b.x = b.x + b.width - this.contentMargin.top; else b.x += this.contentMargin.top - lineT / 2 | 0;
			b.height += this.tabBorderInsets.getMarginWidth();
			b.y -= this.tabBorderInsets.left;
			var topPart = new org_aswing_geom_IntRectangle(b.x,b.y,2,selTabB.y - b.y);
			var botPart = new org_aswing_geom_IntRectangle(b.x,selTabB.y + selTabB.height,2,b.y + b.height - (selTabB.y + selTabB.height));
			matrix.createGradientBox(1,this.tabBorderInsets.left,Math.PI / 2,topPart.x,topPart.y);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),topPart.x,topPart.y,1,topPart.height);
			matrix.createGradientBox(1,this.tabBorderInsets.right,-Math.PI / 2,botPart.x,botPart.y + botPart.height - this.tabBorderInsets.right);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),botPart.x,botPart.y,1,botPart.height);
		}
	}
	,drawTabBorderAt: function(index,b,paneBounds,g) {
		var placement = this.tabbedPane.getTabPlacement();
		b = b.clone();
		if(index == this.tabbedPane.getSelectedIndex()) {
			if(this.isTabHorizontalPlacing()) {
				b.x -= this.selectedTabExpandInsets.left;
				b.width += this.selectedTabExpandInsets.left + this.selectedTabExpandInsets.right;
				b.height += Math.round(this.topBlankSpace / 2 + this.contentRoundLineThickness);
				if(placement == 3) b.y -= this.contentRoundLineThickness; else b.y -= Math.round(this.topBlankSpace / 2);
			} else {
				b.y -= this.selectedTabExpandInsets.left;
				b.height += this.selectedTabExpandInsets.left + this.selectedTabExpandInsets.right;
				b.width += Math.round(this.topBlankSpace / 2 + this.contentRoundLineThickness);
				if(placement == 4) b.x -= this.contentRoundLineThickness; else b.x -= Math.round(this.topBlankSpace / 2);
			}
		}
		this.setDrawnTabBounds(index,b,paneBounds);
		this.getTab(index).setTabPlacement(placement);
	}
	,drawTabAt: function(index,bounds,paneBounds,g,transformedTabMargin) {
		this.drawTabBorderAt(index,bounds,paneBounds,g);
		var tab = this.getTab(index);
		tab.setSelected(index == this.tabbedPane.getSelectedIndex());
		var tc = tab.getTabComponent();
		tc.setComBounds(this.getDrawnTabBounds(index));
		if(index == this.tabbedPane.getSelectedIndex()) {
			if(null != this.topTabCom && tc.parent.contains(this.topTabCom)) tc.parent.swapChildren(tc,this.topTabCom);
			this.topTabCom = tc;
		}
	}
	,getTabColor: function(index) {
		return this.tabbedPane.getBackground();
	}
	,addLayoutComponent: function(comp,constraints) {
		this.tabbedPane.repaint();
		this.synTabs();
		this.synTabProperties();
	}
	,removeLayoutComponent: function(comp) {
		this.tabbedPane.repaint();
		this.synTabs();
		this.synTabProperties();
	}
	,preferredLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			haxe_Log.trace("Error : BasicTabbedPaneUI Can't layout " + Std.string(target),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 942, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "preferredLayoutSize"});
			return null;
		}
		if(this.prefferedSize != null) return this.prefferedSize;
		var insets = this.tabbedPane.getInsets();
		var w = 0;
		var h = 0;
		var _g1 = 0;
		var _g = this.tabbedPane.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var size = this.tabbedPane.getComponent(i).getPreferredSize();
			w = Std["int"](Math.max(w,size.width));
			h = Std["int"](Math.max(h,size.height));
		}
		var cm = this.contentMargin.clone();
		cm.top = 0;
		cm = this.transformMargin(cm);
		var csize = cm.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		w = csize.width;
		h = csize.height;
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) {
			w = Std["int"](Math.max(w,tbs.width));
			h += tbs.height;
		} else {
			h = Std["int"](Math.max(h,tbs.height));
			w += tbs.width;
		}
		this.prefferedSize = insets.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		return this.prefferedSize;
	}
	,minimumLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			haxe_Log.trace("Error : BasicTabbedPaneUI Can't layout " + Std.string(target),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 980, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "minimumLayoutSize"});
			return null;
		}
		if(this.minimumSize != null) return this.minimumSize;
		var insets = this.tabbedPane.getInsets();
		var w = 0;
		var h = 0;
		var _g1 = 0;
		var _g = this.tabbedPane.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var size = this.tabbedPane.getComponent(i).getMinimumSize();
			w = Std["int"](Math.max(w,size.width));
			h = Std["int"](Math.max(h,size.height));
		}
		var cm = this.contentMargin.clone();
		cm.top = 0;
		cm = this.transformMargin(cm);
		var csize = cm.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		w = csize.width;
		h = csize.height;
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) h += tbs.height; else w += tbs.width;
		this.minimumSize = insets.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		return this.minimumSize;
	}
	,maximumLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			haxe_Log.trace("Error : BasicTabbedPaneUI Can't layout " + Std.string(target),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 1016, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "maximumLayoutSize"});
			return null;
		}
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		if(target != this.tabbedPane) {
			haxe_Log.trace("Error : BasicTabbedPaneUI Can't layout " + Std.string(target),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 1024, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "layoutContainer"});
			return;
		}
		var n = this.tabbedPane.getComponentCount();
		var selectedIndex = this.tabbedPane.getSelectedIndex();
		var insets = this.tabbedPane.getInsets();
		var paneBounds = insets.getInsideBounds(new org_aswing_geom_IntRectangle(0,0,this.tabbedPane.getWidth(),this.tabbedPane.getHeight()));
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) {
			paneBounds.height -= tbs.height + this.contentMargin.bottom;
			paneBounds.x += this.contentMargin.left;
			paneBounds.width -= this.contentMargin.left + this.contentMargin.right;
		} else {
			paneBounds.width -= tbs.width + this.contentMargin.bottom;
			paneBounds.y += this.contentMargin.right;
			paneBounds.height -= this.contentMargin.left + this.contentMargin.right;
		}
		var placement = this.tabbedPane.getTabPlacement();
		if(placement == 2) paneBounds.x += tbs.width; else if(placement == 4) paneBounds.x += this.contentMargin.bottom; else if(placement == 3) paneBounds.y += this.contentMargin.bottom; else paneBounds.y += tbs.height;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.tabbedPane.getComponent(i).setBounds(paneBounds);
			this.tabbedPane.getComponent(i).setVisible(i == selectedIndex);
		}
	}
	,invalidateLayout: function(target) {
		if(target != this.tabbedPane) {
			haxe_Log.trace("Error : BasicTabbedPaneUI Can't layout " + Std.string(target),{ fileName : "BasicTabbedPaneUI.hx", lineNumber : 1061, className : "org.aswing.plaf.basic.BasicTabbedPaneUI", methodName : "invalidateLayout"});
			return;
		}
		this.prefferedSize = null;
		this.minimumSize = null;
		this.tabBarSize = null;
		this.tabBoundArray = null;
		this.synTabProperties();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,__class__: org_aswing_plaf_basic_BasicTabbedPaneUI
});
var jive_plaf_flat_FlatTabbedPaneUI = function() {
	org_aswing_plaf_basic_BasicTabbedPaneUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatTabbedPaneUI"] = jive_plaf_flat_FlatTabbedPaneUI;
jive_plaf_flat_FlatTabbedPaneUI.__name__ = ["jive","plaf","flat","FlatTabbedPaneUI"];
jive_plaf_flat_FlatTabbedPaneUI.__super__ = org_aswing_plaf_basic_BasicTabbedPaneUI;
jive_plaf_flat_FlatTabbedPaneUI.prototype = $extend(org_aswing_plaf_basic_BasicTabbedPaneUI.prototype,{
	drawBaseLine: function(tabBarBounds,g,fullB,selTabB) {
		var b = tabBarBounds.clone();
		var placement = this.tabbedPane.getTabPlacement();
		var lineT = this.contentRoundLineThickness | 0;
		if(selTabB == null) selTabB = new org_aswing_geom_IntRectangle(fullB.x + fullB.width / 2 | 0,fullB.y + fullB.height / 2 | 0,0,0);
		selTabB = selTabB.clone();
		var leadingOffset = this.tabbedPane.getLeadingOffset();
		var brush = new org_aswing_graphics_SolidBrush(this.tabbedPane.get_mideground());
		if(this.isTabHorizontalPlacing()) {
			var isTop = placement == 1;
			if(isTop) b.y = b.y + b.height - this.contentMargin.top; else b.y += this.contentMargin.top - lineT / 2 | 0;
			b.width += this.tabBorderInsets.getMarginWidth();
			b.x -= this.tabBorderInsets.left;
			var leftPart = new org_aswing_geom_IntRectangle(b.x,b.y,selTabB.x - b.x,2);
			var rightPart = new org_aswing_geom_IntRectangle(selTabB.x + selTabB.width,b.y,b.x + b.width - (selTabB.x + selTabB.width),2);
			g.fillRectangle(brush,leftPart.x,leftPart.y,leftPart.width,lineT);
			g.fillRectangle(brush,rightPart.x,rightPart.y,rightPart.width,lineT);
		} else {
			var isLeft = placement == 2;
			if(isLeft) b.x = b.x + b.width - this.contentMargin.top; else b.x += this.contentMargin.top - lineT / 2 | 0;
			b.height += this.tabBorderInsets.getMarginWidth();
			b.y -= this.tabBorderInsets.left;
			var topPart = new org_aswing_geom_IntRectangle(b.x,b.y,lineT,selTabB.y - b.y);
			var botPart = new org_aswing_geom_IntRectangle(b.x,selTabB.y + selTabB.height,lineT,b.y + b.height - (selTabB.y + selTabB.height));
			g.fillRectangle(brush,topPart.x,topPart.y,1,topPart.height);
			g.fillRectangle(brush,botPart.x,botPart.y,1,botPart.height);
		}
	}
	,__class__: jive_plaf_flat_FlatTabbedPaneUI
});
var org_aswing_plaf_TableUI = function() { };
$hxClasses["org.aswing.plaf.TableUI"] = org_aswing_plaf_TableUI;
org_aswing_plaf_TableUI.__name__ = ["org","aswing","plaf","TableUI"];
org_aswing_plaf_TableUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_TableUI.prototype = {
	__class__: org_aswing_plaf_TableUI
};
var org_aswing_plaf_basic_BasicTableUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.focusRow = 0;
	this.focusColumn = 0;
};
$hxClasses["org.aswing.plaf.basic.BasicTableUI"] = org_aswing_plaf_basic_BasicTableUI;
org_aswing_plaf_basic_BasicTableUI.__name__ = ["org","aswing","plaf","basic","BasicTableUI"];
org_aswing_plaf_basic_BasicTableUI.__interfaces__ = [org_aswing_plaf_TableUI];
org_aswing_plaf_basic_BasicTableUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicTableUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.table = js_Boot.__instanceof(c,org_aswing_JTable)?c:null;
		this.installDefaults();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "Table.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.table,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.table,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.table,pp);
		var sbg = this.table.getSelectionBackground();
		if(sbg == null || js_Boot.__instanceof(sbg,org_aswing_plaf_UIResource)) this.table.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.table.getSelectionForeground();
		if(sfg == null || js_Boot.__instanceof(sfg,org_aswing_plaf_UIResource)) this.table.setSelectionForeground(this.getColor(pp + "selectionForeground"));
		var gridColor = this.table.getGridColor();
		if(gridColor == null || js_Boot.__instanceof(gridColor,org_aswing_plaf_UIResource)) this.table.setGridColor(this.getColor(pp + "gridColor"));
	}
	,installListeners: function() {
		this.table.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTablePress));
		this.table.addEventListener("release",$bind(this,this.__onTableRelease));
		this.table.addEventListener("clickCount",$bind(this,this.__onTableClicked));
		this.table.addEventListener("focusKeyDown",$bind(this,this.__onTableKeyDown));
		this.table.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onTableMouseWheel));
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.table);
	}
	,uninstallListeners: function() {
		this.table.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTablePress));
		this.table.removeEventListener("release",$bind(this,this.__onTableRelease));
		this.table.removeEventListener("clickCount",$bind(this,this.__onTableClicked));
		this.table.removeEventListener("focusKeyDown",$bind(this,this.__onTableKeyDown));
		this.table.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onTableMouseWheel));
		this.table.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
	}
	,__onTablePress: function(e) {
		if(!this.table.getCellPane().hitTestMouse()) return;
		this.selectMousePointed(e);
		this.table.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
		var editor = this.table.getCellEditor();
		if(editor != null && editor.isCellEditing()) this.table.getCellEditor().stopCellEditing();
	}
	,__onTableClicked: function(e) {
		if(!this.table.getCellPane().hitTestMouse()) return;
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(this.table.editCellAt(row,column,e.getCount())) {
		}
	}
	,__onTableRelease: function(e) {
		this.table.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
	}
	,__onTableMouseMove: function(e) {
		this.addSelectMousePointed();
	}
	,__onTableMouseWheel: function(e) {
		if(!this.table.isEnabled()) return;
		if(!this.table.getCellPane().hitTestMouse()) return;
		var viewPos = this.table.getViewPosition();
		viewPos.y -= e.delta * this.table.getVerticalUnitIncrement();
		this.table.setViewPosition(viewPos);
	}
	,selectMousePointed: function(e) {
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(column == -1 || row == -1) return;
		this.makeSelectionChange(row,column,e);
	}
	,addSelectMousePointed: function() {
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(column == -1 || row == -1) return;
		this.changeSelection(row,column,false,true);
	}
	,makeSelectionChange: function(row,column,e) {
		this.recordFocusIndecis(row,column);
		var ctrl = e.ctrlKey;
		var shift = e.shiftKey;
		if(ctrl && shift) {
			var rm = this.table.getSelectionModel();
			var cm = this.table.getColumnModel().getSelectionModel();
			var anchorRow = rm.getAnchorSelectionIndex();
			var anchorCol = cm.getAnchorSelectionIndex();
			if(this.table.isCellSelected(anchorRow,anchorCol)) {
				rm.addSelectionInterval(anchorRow,row,false);
				cm.addSelectionInterval(anchorCol,column,false);
			} else {
				rm.removeSelectionInterval(anchorRow,row,false);
				rm.addSelectionInterval(row,row,false);
				rm.setAnchorSelectionIndex(anchorRow);
				cm.removeSelectionInterval(anchorCol,column,false);
				cm.addSelectionInterval(column,column,false);
				cm.setAnchorSelectionIndex(anchorCol);
			}
		} else this.changeSelection(row,column,ctrl,!ctrl && shift);
	}
	,changeSelection: function(rowIndex,columnIndex,toggle,extend) {
		this.recordFocusIndecis(rowIndex,columnIndex);
		this.table.changeSelection(rowIndex,columnIndex,toggle,extend,false);
	}
	,getMousePosOnTable: function() {
		var p = this.table.getMousePosition();
		return this.table.getLogicLocationFromPixelLocation(p);
	}
	,getEditionKey: function() {
		return org_aswing_AWKeyboard.ENTER;
	}
	,getSelectionKey: function() {
		return org_aswing_AWKeyboard.SPACE;
	}
	,createGridGraphics: function() {
		if(this.gridShape == null) {
			this.gridShape = new openfl_display_Shape();
			this.table.getCellPane().addChild(this.gridShape);
		}
		this.gridShape.get_graphics().clear();
		return new org_aswing_graphics_Graphics2D(this.gridShape.get_graphics());
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		g = this.createGridGraphics();
		var rowCount = this.table.getRowCount();
		var columnCount = this.table.getColumnCount();
		if(rowCount <= 0 || columnCount <= 0) return;
		var extentSize = this.table.getExtentSize();
		var viewPos = this.table.getViewPosition();
		var startX = -viewPos.x;
		var startY = -viewPos.y;
		var vb = new org_aswing_geom_IntRectangle();
		vb.setSize(extentSize);
		vb.setLocation(viewPos);
		var upperLeft = vb.getLocation();
		var lowerRight = vb.rightBottom();
		var rMin = this.table.rowAtPoint(upperLeft);
		var rMax = this.table.rowAtPoint(lowerRight);
		if(rMin == -1) rMin = 0;
		if(rMax == -1) rMax = rowCount - 1;
		var cMin = this.table.columnAtPoint(upperLeft);
		var cMax = this.table.columnAtPoint(lowerRight);
		if(cMin == -1) cMin = 0;
		if(cMax == -1) cMax = columnCount - 1;
		var minCell = this.table.getCellRect(rMin,cMin,true);
		var maxCell = this.table.getCellRect(rMax,cMax,true);
		var damagedArea = minCell.union(maxCell);
		damagedArea.setLocation(damagedArea.getLocation().move(startX,startY));
		var pen = new org_aswing_graphics_Pen(this.table.getGridColor(),1);
		if(this.table.getShowHorizontalLines()) {
			var x1 = damagedArea.x + 0.5;
			var x2 = damagedArea.x + damagedArea.width - 1;
			var y = damagedArea.y + 0.5;
			var rh = this.table.getRowHeight();
			var _g1 = rMin;
			var _g = rMax + 2;
			while(_g1 < _g) {
				var row = _g1++;
				if(row == rowCount) y -= 1;
				g.drawLine(pen,x1,y,x2,y);
				y += rh;
			}
		}
		if(this.table.getShowVerticalLines()) {
			var cm = this.table.getColumnModel();
			var x = damagedArea.x + 0.5;
			var y1 = damagedArea.y + 0.5;
			var y2 = y1 + damagedArea.height - 1;
			var _g11 = cMin;
			var _g2 = cMax + 2;
			while(_g11 < _g2) {
				var column = _g11++;
				if(column == columnCount) x -= 1;
				g.drawLine(pen,x,y1,x,y2);
				if(column < columnCount) x += cm.getColumn(column).getWidth();
			}
		}
	}
	,__onTableKeyDown: function(e) {
		if(!this.table.isEnabled()) return;
		var rDir = 0;
		var cDir = 0;
		var code = e.keyCode;
		if(code == org_aswing_AWKeyboard.LEFT) cDir = -1; else if(code == org_aswing_AWKeyboard.RIGHT) cDir = 1; else if(code == org_aswing_AWKeyboard.UP) rDir = -1; else if(code == org_aswing_AWKeyboard.DOWN) rDir = 1;
		if(cDir != 0 || rDir != 0) {
			this.moveFocus(rDir,cDir,e);
			var fm = org_aswing_FocusManager.getManager(this.table.stage);
			if(fm != null) fm.setTraversing(true);
			this.table.paintFocusRect();
			return;
		}
		if(code == this.getSelectionKey()) this.table.changeSelection(this.focusRow,this.focusColumn,true,false); else if(code == this.getEditionKey()) this.table.editCellAt(this.focusRow,this.focusColumn,-1);
	}
	,recordFocusIndecis: function(row,column) {
		this.focusRow = row;
		this.focusColumn = column;
	}
	,restrictRow: function(row) {
		return Std["int"](Math.max(0,Math.min(this.table.getRowCount() - 1,row)));
	}
	,restrictColumn: function(column) {
		return Std["int"](Math.max(0,Math.min(this.table.getColumnCount() - 1,column)));
	}
	,moveFocus: function(rDir,cDir,e) {
		var ctrl = e.ctrlKey;
		var shift = e.shiftKey;
		this.focusRow += rDir | 0;
		this.focusRow = this.restrictRow(this.focusRow);
		this.focusColumn += cDir | 0;
		this.focusColumn = this.restrictColumn(this.focusColumn);
		if(ctrl != true) this.changeSelection(this.focusRow,this.focusColumn,ctrl,!ctrl && shift);
		this.table.ensureCellIsVisible(this.focusRow,this.focusColumn);
	}
	,paintFocus: function(c,g,b) {
		this.paintCurrentCellFocus(g);
	}
	,paintCurrentCellFocus: function(g) {
		this.paintCellFocusWithRowColumn(g,this.focusRow,this.focusColumn);
	}
	,paintCellFocusWithRowColumn: function(g,row,column) {
		var rect = this.table.getCellRect(row,column,true);
		rect.setLocation(this.table.getPixelLocationFromLogicLocation(rect.getLocation()));
		g.drawRectangle(new org_aswing_graphics_Pen(this.getDefaultFocusColorOutter(),2),rect.x,rect.y,rect.width,rect.height);
	}
	,createTableSize: function(width) {
		var height = 0;
		var rowCount = this.table.getRowCount();
		if(rowCount > 0 && this.table.getColumnCount() > 0) {
			var r = this.table.getCellRect(rowCount - 1,0,true);
			height = r.y + r.height;
		}
		height += this.table.getTableHeader().getPreferredHeight();
		if(this.table.getFooter() != null) height += this.table.getFooter().getPreferredHeight();
		return new org_aswing_geom_IntDimension(width,height);
	}
	,getViewSize: function(table) {
		var width = 0;
		var enumeration = table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getPreferredWidth();
		}
		var d = this.createTableSize(width);
		if(table.getAutoResizeMode() != 0) d.width = table.getExtentSize().width; else d.width = table.getColumnModel().getTotalColumnWidth();
		d.height -= table.getTableHeader().getHeight();
		if(table.getFooter() != null) d.height -= table.getFooter().getHeight();
		return d;
	}
	,getMinimumSize: function(c) {
		var width = 0;
		var enumeration = this.table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getMinWidth();
		}
		return this.table.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(width,0));
	}
	,getPreferredSize: function(c) {
		var width = 0;
		var enumeration = this.table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getPreferredWidth();
		}
		return this.table.getInsets().getOutsideSize(this.createTableSize(width));
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,toString: function() {
		return "BasicTableUI[]";
	}
	,__class__: org_aswing_plaf_basic_BasicTableUI
});
var jive_plaf_flat_FlatTableUI = function() {
	org_aswing_plaf_basic_BasicTableUI.call(this);
	this.mask = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.FlatTableUI"] = jive_plaf_flat_FlatTableUI;
jive_plaf_flat_FlatTableUI.__name__ = ["jive","plaf","flat","FlatTableUI"];
jive_plaf_flat_FlatTableUI.__super__ = org_aswing_plaf_basic_BasicTableUI;
jive_plaf_flat_FlatTableUI.prototype = $extend(org_aswing_plaf_basic_BasicTableUI.prototype,{
	paint: function(c,g,b) {
		org_aswing_plaf_basic_BasicTableUI.prototype.paint.call(this,c,g,b);
		g = this.createGridGraphics();
		var rowCount = this.table.getRowCount();
		var columnCount = this.table.getColumnCount();
		if(rowCount <= 0 || columnCount <= 0) return;
		var extentSize = this.table.getExtentSize();
		var viewPos = this.table.getViewPosition();
		var startX = -viewPos.x;
		var startY = -viewPos.y;
		var vb = new org_aswing_geom_IntRectangle();
		vb.setSize(extentSize);
		vb.setLocation(viewPos);
		var upperLeft = vb.getLocation();
		var lowerRight = vb.rightBottom();
		var rMin = this.table.rowAtPoint(upperLeft);
		var rMax = this.table.rowAtPoint(lowerRight);
		if(rMin == -1) rMin = 0;
		if(rMax == -1) rMax = rowCount - 1;
		var cMin = this.table.columnAtPoint(upperLeft);
		var cMax = this.table.columnAtPoint(lowerRight);
		if(cMin == -1) cMin = 0;
		if(cMax == -1) cMax = columnCount - 1;
		var minCell = this.table.getCellRect(rMin,cMin,true);
		var maxCell = this.table.getCellRect(rMax,cMax,true);
		var damagedArea = minCell.union(maxCell);
		damagedArea.setLocation(damagedArea.getLocation().move(startX,startY));
		var rh = this.table.getRowHeight();
		var x1 = damagedArea.x + 0.5;
		var x2 = damagedArea.x + damagedArea.width - 1;
		var y = damagedArea.y + 0.5 + rh;
		var _g1 = rMin + 1;
		var _g = rMax + 1;
		while(_g1 < _g) {
			var row = _g1++;
			if(row == rowCount) y -= 1;
			g.fillRectangle(new org_aswing_graphics_SolidBrush(c.get_mideground()),x1,y,x2 - x1,rh);
			y += 2 * rh;
		}
		var rh1 = this.table.getRowHeight();
		var x11 = damagedArea.x + 0.5;
		var x21 = damagedArea.x + damagedArea.width - 1;
		var y1 = damagedArea.y + 0.5;
		var _g11 = rMin;
		var _g2 = rMax + 1;
		while(_g11 < _g2) {
			var row1 = _g11++;
			if(row1 == rowCount) y1 -= 1;
			if(row1 == this.table.getSelectedRow()) g.fillRectangle(new org_aswing_graphics_SolidBrush(this.table.getSelectionBackground()),x11,y1,x21 - x11,rh1);
			y1 += rh1;
		}
		this.mask.get_graphics().clear();
		var mg = new org_aswing_graphics_Graphics2D(this.mask.get_graphics());
		var mb = new org_aswing_graphics_SolidBrush(org_aswing_ASColor.WHITE);
		mg.fillRoundRect(mb,b.x + 1,b.y,extentSize.width - 2,extentSize.height,c.get_styleTune().round);
		mg.fillRectangle(mb,b.x + 1,b.y,extentSize.width - 2,c.get_styleTune().round * 2);
	}
	,createGridGraphics: function() {
		if(this.gridShape == null) {
			this.gridShape = new openfl_display_Shape();
			this.table.getCellPane().addChild(this.mask);
			this.table.getCellPane().set_mask(this.mask);
			this.table.getCellPane().addChildAt(this.gridShape,0);
		}
		this.gridShape.get_graphics().clear();
		return new org_aswing_graphics_Graphics2D(this.gridShape.get_graphics());
	}
	,__class__: jive_plaf_flat_FlatTableUI
});
var org_aswing_plaf_basic_BasicTextComponentUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextComponentUI"] = org_aswing_plaf_basic_BasicTextComponentUI;
org_aswing_plaf_basic_BasicTextComponentUI.__name__ = ["org","aswing","plaf","basic","BasicTextComponentUI"];
org_aswing_plaf_basic_BasicTextComponentUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicTextComponentUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return "";
	}
	,paint: function(c,g,r) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,r);
	}
	,paintBackGround: function(c,g,b) {
	}
	,installUI: function(c) {
		this.textComponent = js_Boot.__instanceof(c,org_aswing_JTextComponent)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.textComponent = js_Boot.__instanceof(c,org_aswing_JTextComponent)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.textComponent,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.textComponent,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.textComponent,pp);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.textComponent);
	}
	,installComponents: function() {
	}
	,uninstallComponents: function() {
	}
	,installListeners: function() {
	}
	,uninstallListeners: function() {
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,__class__: org_aswing_plaf_basic_BasicTextComponentUI
});
var jive_plaf_flat_FlatTextComponentUI = function() {
	org_aswing_plaf_basic_BasicTextComponentUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatTextComponentUI"] = jive_plaf_flat_FlatTextComponentUI;
jive_plaf_flat_FlatTextComponentUI.__name__ = ["jive","plaf","flat","FlatTextComponentUI"];
jive_plaf_flat_FlatTextComponentUI.__super__ = org_aswing_plaf_basic_BasicTextComponentUI;
jive_plaf_flat_FlatTextComponentUI.prototype = $extend(org_aswing_plaf_basic_BasicTextComponentUI.prototype,{
	paintFocus: function(c,g,b) {
	}
	,__class__: jive_plaf_flat_FlatTextComponentUI
});
var jive_plaf_flat_FlatTextFieldUI = function() {
	jive_plaf_flat_FlatTextComponentUI.call(this);
};
$hxClasses["jive.plaf.flat.FlatTextFieldUI"] = jive_plaf_flat_FlatTextFieldUI;
jive_plaf_flat_FlatTextFieldUI.__name__ = ["jive","plaf","flat","FlatTextFieldUI"];
jive_plaf_flat_FlatTextFieldUI.__super__ = jive_plaf_flat_FlatTextComponentUI;
jive_plaf_flat_FlatTextFieldUI.prototype = $extend(jive_plaf_flat_FlatTextComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TextField.";
	}
	,__class__: jive_plaf_flat_FlatTextFieldUI
});
var org_aswing_JPanel = function(layout) {
	org_aswing_Container.call(this);
	this.setName("JPanel");
	if(layout == null) layout = new org_aswing_FlowLayout();
	this._layout = layout;
	this.updateUI();
};
$hxClasses["org.aswing.JPanel"] = org_aswing_JPanel;
org_aswing_JPanel.__name__ = ["org","aswing","JPanel"];
org_aswing_JPanel.__super__ = org_aswing_Container;
org_aswing_JPanel.prototype = $extend(org_aswing_Container.prototype,{
	updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicPanelUI;
	}
	,getUIClassID: function() {
		return "PanelUI";
	}
	,__class__: org_aswing_JPanel
});
var jive_plaf_flat_TextCellComponent = function() {
	this.transitBackgroundFactor = 0.0;
	var _g = this;
	this.label = new org_aswing_JLabel();
	this.label.setHorizontalAlignment(2);
	this.label.setOpaque(false);
	this.label.setFocusable(false);
	this.label.addEventListener("resized",$bind(this,this.__resized));
	org_aswing_JPanel.call(this,new org_aswing_BoxLayout());
	if(jive_plaf_flat_TextCellComponent.sharedToolTip == null) {
		jive_plaf_flat_TextCellComponent.sharedToolTip = org_aswing_JSharedToolTip.getSharedInstance();
		jive_plaf_flat_TextCellComponent.sharedToolTip.setOffsetsRelatedToMouse(false);
		jive_plaf_flat_TextCellComponent.sharedToolTip.setOffsets(new org_aswing_geom_IntPoint(0,0));
	}
	this.append(this.label);
	this.set_border(new jive_plaf_flat_border_TextCellComponentBorder());
	this.set_styleTune(new org_aswing_StyleTune(0,0,0,0,org_aswing_UIManager.get("cornerSize")));
	this.addEventListener(openfl_events_MouseEvent.ROLL_OVER,function(e) {
		_g.rollover = true;
		_g.doBackgroundTransition();
	});
	this.addEventListener(openfl_events_MouseEvent.ROLL_OUT,function(e1) {
		_g.rollover = false;
		_g.doBackgroundTransition();
	});
};
$hxClasses["jive.plaf.flat.TextCellComponent"] = jive_plaf_flat_TextCellComponent;
jive_plaf_flat_TextCellComponent.__name__ = ["jive","plaf","flat","TextCellComponent"];
jive_plaf_flat_TextCellComponent.sharedToolTip = null;
jive_plaf_flat_TextCellComponent.__super__ = org_aswing_JPanel;
jive_plaf_flat_TextCellComponent.prototype = $extend(org_aswing_JPanel.prototype,{
	get_value: function() {
		return this.label.get_text();
	}
	,set_value: function(v) {
		this.label.set_text(v);
		this.__resized(null);
		return v;
	}
	,calculateTargetBackgroundTransitionFactor: function() {
		if(this.rollover) return 1.0; else return 0.0;
	}
	,doBackgroundTransition: function(immediately) {
		if(immediately == null) immediately = false;
		var _g = this;
		var targetFactor = this.calculateTargetBackgroundTransitionFactor();
		if(this.transitBackgroundFactor != targetFactor) {
			if(immediately) {
				this.transitBackgroundFactor = targetFactor;
				return;
			}
			motion_Actuate.stop(this,"transitBackgroundFactor");
			motion_Actuate.tween(this,0.4,{ transitBackgroundFactor : targetFactor}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
				_g.repaint();
			}).onComplete(function() {
				_g.transitBackgroundFactor = targetFactor;
			});
		}
	}
	,setForeground: function(color) {
		org_aswing_JPanel.prototype.setForeground.call(this,color);
		this.label.setForeground(color);
	}
	,setFont: function(font) {
		org_aswing_JPanel.prototype.setFont.call(this,font);
		this.label.setFont(font);
	}
	,__resized: function(e) {
		if(this.label.getWidth() < this.label.getPreferredWidth()) {
			this.label.setToolTipText(this.get_value());
			jive_plaf_flat_TextCellComponent.sharedToolTip.registerComponent(this.label);
		} else {
			this.label.setToolTipText(null);
			jive_plaf_flat_TextCellComponent.sharedToolTip.unregisterComponent(this.label);
		}
	}
	,updateUI: function() {
	}
	,__class__: jive_plaf_flat_TextCellComponent
	,__properties__: $extend(org_aswing_JPanel.prototype.__properties__,{set_value:"set_value",get_value:"get_value"})
});
var org_aswing_plaf_basic_tabbedpane_Tab = function() { };
$hxClasses["org.aswing.plaf.basic.tabbedpane.Tab"] = org_aswing_plaf_basic_tabbedpane_Tab;
org_aswing_plaf_basic_tabbedpane_Tab.__name__ = ["org","aswing","plaf","basic","tabbedpane","Tab"];
org_aswing_plaf_basic_tabbedpane_Tab.prototype = {
	__class__: org_aswing_plaf_basic_tabbedpane_Tab
};
var org_aswing_plaf_basic_accordion_BasicAccordionHeader = function() {
};
$hxClasses["org.aswing.plaf.basic.accordion.BasicAccordionHeader"] = org_aswing_plaf_basic_accordion_BasicAccordionHeader;
org_aswing_plaf_basic_accordion_BasicAccordionHeader.__name__ = ["org","aswing","plaf","basic","accordion","BasicAccordionHeader"];
org_aswing_plaf_basic_accordion_BasicAccordionHeader.__interfaces__ = [org_aswing_plaf_basic_tabbedpane_Tab];
org_aswing_plaf_basic_accordion_BasicAccordionHeader.prototype = {
	set_maxPlacement: function(v) {
		this.maxPlacement = v;
		return v;
	}
	,initTab: function(owner) {
		this.owner = owner;
		this.button = this.createHeaderButton();
	}
	,setTabPlacement: function(tp) {
		this.placement = tp;
	}
	,getTabPlacement: function() {
		return this.placement;
	}
	,createHeaderButton: function() {
		return new org_aswing_JButton();
	}
	,setTextAndIcon: function(text,icon) {
		this.button.setText(text);
		this.button.setIcon(icon);
	}
	,setFont: function(font) {
		this.button.setFont(font);
	}
	,setForeground: function(color) {
		this.button.setForeground(color);
	}
	,setSelected: function(b) {
	}
	,setVerticalAlignment: function(alignment) {
		this.button.setVerticalAlignment(alignment);
	}
	,setHorizontalAlignment: function(alignment) {
		this.button.setHorizontalAlignment(alignment);
	}
	,setVerticalTextPosition: function(textPosition) {
		this.button.setVerticalTextPosition(textPosition);
	}
	,setHorizontalTextPosition: function(textPosition) {
		this.button.setHorizontalTextPosition(textPosition);
	}
	,setIconTextGap: function(iconTextGap) {
		this.button.setIconTextGap(iconTextGap);
	}
	,setMargin: function(m) {
		this.button.setMargin(m);
	}
	,getTabComponent: function() {
		return this.button;
	}
	,__class__: org_aswing_plaf_basic_accordion_BasicAccordionHeader
	,__properties__: {set_maxPlacement:"set_maxPlacement"}
};
var jive_plaf_flat_accordion_AccordionHeader = function() {
	org_aswing_plaf_basic_accordion_BasicAccordionHeader.call(this);
};
$hxClasses["jive.plaf.flat.accordion.AccordionHeader"] = jive_plaf_flat_accordion_AccordionHeader;
jive_plaf_flat_accordion_AccordionHeader.__name__ = ["jive","plaf","flat","accordion","AccordionHeader"];
jive_plaf_flat_accordion_AccordionHeader.__super__ = org_aswing_plaf_basic_accordion_BasicAccordionHeader;
jive_plaf_flat_accordion_AccordionHeader.prototype = $extend(org_aswing_plaf_basic_accordion_BasicAccordionHeader.prototype,{
	getIconSize: function() {
		return Std["int"](org_aswing_UIManager.get("iconSize") * 0.4);
	}
	,createHeaderButton: function() {
		var b = new jive_plaf_flat_accordion_AccordionHeaderButton();
		b.setHorizontalAlignment(2);
		b.setIcon(new jive_plaf_flat_icon_ExpandIcon(this.getIconSize(),new org_aswing_ASColor(13421772),false));
		return b;
	}
	,setSelected: function(b) {
		if(this.button.get_selected() == b) return;
		this.button.setSelected(b);
		if(b) this.button.setIcon(new jive_plaf_flat_icon_ExpandIcon(this.getIconSize(),new org_aswing_ASColor(13421772),true)); else this.button.setIcon(new jive_plaf_flat_icon_ExpandIcon(this.getIconSize(),new org_aswing_ASColor(13421772),false));
	}
	,setHorizontalAlignment: function(alignment) {
	}
	,setTextAndIcon: function(text,icon) {
		this.button.setText(text);
	}
	,setTabPlacement: function(tp) {
		org_aswing_plaf_basic_accordion_BasicAccordionHeader.prototype.setTabPlacement.call(this,tp);
		var b = org_aswing_AsWingUtils["as"](this.button,jive_plaf_flat_accordion_AccordionHeaderButton);
		b.set_tabPlacement(tp);
	}
	,set_maxPlacement: function(v) {
		this.maxPlacement = v;
		var b = org_aswing_AsWingUtils["as"](this.button,jive_plaf_flat_accordion_AccordionHeaderButton);
		b.maxPlacement = v;
		return v;
	}
	,__class__: jive_plaf_flat_accordion_AccordionHeader
});
var org_aswing_AbstractButton = function(text,icon) {
	if(text == null) text = "";
	this.transitBackgroundFactor = 0.0;
	this.iconTextGapSet = false;
	var _g = this;
	this._shiftOffset = 0;
	this.shiftOffsetSet = false;
	org_aswing_Component.call(this);
	this.setName("AbstractButton");
	this._rolloverEnabled = true;
	this._verticalAlignment = 0;
	this._horizontalAlignment = 0;
	this._verticalTextPosition = 0;
	this._horizontalTextPosition = 4;
	this._textFilters = [];
	this._iconTextGap = 2;
	this._mnemonicEnabled = true;
	this._text = text;
	this.analyzeMnemonic();
	this._defaultIcon = icon;
	this.initSelfHandlers();
	this.updateUI();
	this.installIcon(this._defaultIcon);
	this.addActionListener(function(e) {
		if(null != _g.command) _g.command.action();
	});
};
$hxClasses["org.aswing.AbstractButton"] = org_aswing_AbstractButton;
org_aswing_AbstractButton.__name__ = ["org","aswing","AbstractButton"];
org_aswing_AbstractButton.__super__ = org_aswing_Component;
org_aswing_AbstractButton.prototype = $extend(org_aswing_Component.prototype,{
	get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_text: function() {
		return this.getText();
	}
	,set_text: function(s) {
		this.setText(s);
		return s;
	}
	,get_mnemonicEnabled: function() {
		return this.isMnemonicEnabled();
	}
	,set_mnemonicEnabled: function(v) {
		this.setMnemonicEnabled(v);
		return v;
	}
	,get_margin: function() {
		return this.getMargin();
	}
	,set_margin: function(v) {
		this.setMargin(v);
		return v;
	}
	,get_icon: function() {
		return this.getIcon();
	}
	,set_icon: function(v) {
		this.setIcon(v);
		return v;
	}
	,get_pressedIcon: function() {
		return this.getPressedIcon();
	}
	,set_pressedIcon: function(v) {
		this.setPressedIcon(v);
		return v;
	}
	,get_disabledIcon: function() {
		return this.getDisabledIcon();
	}
	,set_disabledIcon: function(v) {
		this.setDisabledIcon(v);
		return v;
	}
	,get_selectedIcon: function() {
		return this.getSelectedIcon();
	}
	,set_selectedIcon: function(v) {
		this.setSelectedIcon(v);
		return v;
	}
	,get_disabledSelectedIcon: function() {
		return this.getDisabledSelectedIcon();
	}
	,set_disabledSelectedIcon: function(v) {
		this.setDisabledSelectedIcon(v);
		return v;
	}
	,get_rolloverIcon: function() {
		return this.getRollOverIcon();
	}
	,set_rolloverIcon: function(v) {
		this.setRollOverIcon(v);
		return v;
	}
	,get_rolloverSelectedIcon: function() {
		return this.getRollOverSelectedIcon();
	}
	,set_rolloverSelectedIcon: function(v) {
		this.setRollOverSelectedIcon(v);
		return v;
	}
	,get_rolloverEnabled: function() {
		return this.isRollOverEnabled();
	}
	,set_rolloverEnabled: function(v) {
		this.setRollOverEnabled(v);
		return v;
	}
	,get_verticalAlignment: function() {
		return this.getVerticalAlignment();
	}
	,set_verticalAlignment: function(v) {
		this.setVerticalAlignment(v);
		return v;
	}
	,get_horizontalAlignment: function() {
		return this.getHorizontalAlignment();
	}
	,set_horizontalAlignment: function(v) {
		this.setHorizontalAlignment(v);
		return v;
	}
	,get_verticalTextPosition: function() {
		return this.getVerticalTextPosition();
	}
	,set_verticalTextPosition: function(v) {
		this.setVerticalTextPosition(v);
		return v;
	}
	,get_horizontalTextPosition: function() {
		return this.getHorizontalTextPosition();
	}
	,set_horizontalTextPosition: function(v) {
		this.setHorizontalTextPosition(v);
		return v;
	}
	,get_iconTextGap: function() {
		return this.getIconTextGap();
	}
	,set_iconTextGap: function(v) {
		this.setIconTextGap(v);
		return v;
	}
	,get_shiftOffset: function() {
		return this.getShiftOffset();
	}
	,set_shiftOffset: function(v) {
		this.setShiftOffset(v);
		return v;
	}
	,get_textFilters: function() {
		return this.getTextFilters();
	}
	,set_textFilters: function(v) {
		this.setTextFilters(v);
		return v;
	}
	,get_selected: function() {
		return this.isSelected();
	}
	,set_selected: function(v) {
		var __oldValue__ = this.get_selected();
		if(v == __oldValue__) return __oldValue__;
		this.setSelected(v);
		this.__fieldBindings__.dispatch("selected",__oldValue__,this.get_selected());
		return v;
	}
	,getModel: function() {
		return this._model;
	}
	,setModel: function(newModel) {
		var oldModel = this.getModel();
		if(oldModel != null) {
			oldModel.removeActionListener($bind(this,this.__modelActionListener));
			oldModel.removeStateListener($bind(this,this.__modelStateListener));
			oldModel.removeSelectionListener($bind(this,this.__modelSelectionListener));
		}
		this._model = newModel;
		if(newModel != null) {
			newModel.addActionListener($bind(this,this.__modelActionListener));
			newModel.addStateListener($bind(this,this.__modelStateListener));
			newModel.addSelectionListener($bind(this,this.__modelSelectionListener));
		}
		if(newModel != oldModel) {
			this.revalidate();
			this.repaint();
		}
		this.doBackgroundTransition(true);
	}
	,updateUI: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,doClick: function() {
		this.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.ROLL_OVER,true,false,0,0));
		this.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_DOWN,true,false,0,0));
		if(this.isOnStage()) this.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_UP,true,false,0,0)); else this.dispatchEvent(new org_aswing_event_ReleaseEvent("release",this,false,new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_UP)));
		this.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.CLICK,true,false,0,0));
		this.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.ROLL_OUT,true,false,0,0));
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,setEnabled: function(b) {
		if(!b && this._model.isRollOver()) this._model.setRollOver(false);
		org_aswing_Component.prototype.setEnabled.call(this,b);
		this._model.setEnabled(b);
	}
	,isSelected: function() {
		return this._model.isSelected();
	}
	,setSelected: function(b) {
		this._model.setSelected(b);
	}
	,setRollOverEnabled: function(b) {
		if(this._rolloverEnabled != b) {
			this._rolloverEnabled = b;
			this.repaint();
		}
	}
	,isRollOverEnabled: function() {
		return this._rolloverEnabled;
	}
	,setMargin: function(m) {
		if(js_Boot.__instanceof(m,org_aswing_plaf_UIResource)) this.defaultMargin = m;
		if(m == null && this.defaultMargin != null) m = this.defaultMargin;
		var old = this._margin;
		this._margin = m;
		if(old == null || !m.equals(old)) {
			this.revalidate();
			this.repaint();
		}
	}
	,getMargin: function() {
		var m = this._margin;
		if(this._margin == null) m = this.defaultMargin;
		if(m == null) return new org_aswing_plaf_InsetsUIResource(); else if(js_Boot.__instanceof(m,org_aswing_plaf_UIResource)) return new org_aswing_plaf_InsetsUIResource(m.top,m.left,m.bottom,m.right); else return new org_aswing_Insets(m.top,m.left,m.bottom,m.right);
	}
	,setTextFilters: function(fs) {
		this._textFilters = fs;
		this.repaint();
	}
	,getTextFilters: function() {
		return this._textFilters;
	}
	,wrapSimpleButton: function(btn) {
		this.setShiftOffset(0);
		this.setIcon(new org_aswing_SimpleButtonIconToggle(btn));
		this.setBorder(null);
		this.setMargin(new org_aswing_Insets());
		this.setBackgroundDecorator(null);
		this.setOpaque(false);
		return this;
	}
	,setText: function(text) {
		if(this._text != text) {
			this._text = text;
			this.analyzeMnemonic();
			this.repaint();
			this.invalidate();
		}
	}
	,setMnemonicEnabled: function(b) {
		if(this._mnemonicEnabled != b) {
			this._mnemonicEnabled = b;
			this.analyzeMnemonic();
		}
	}
	,isMnemonicEnabled: function() {
		return this._mnemonicEnabled;
	}
	,analyzeMnemonic: function() {
		this.displayText = this._text;
		this.mnemonic = -1;
		this.mnemonicIndex = -1;
		if(this._text == null) return;
		if(this._mnemonicEnabled != true) return;
		var mi = this._text.indexOf("&");
		var mc = "";
		var found = false;
		while(mi >= 0) {
			if(mi + 1 < this._text.length) {
				mc = this._text.charAt(mi + 1);
				if(org_aswing_util_StringUtils.isLetter(mc)) {
					found = true;
					break;
				}
			} else break;
			mi = this._text.indexOf("&",mi + 1);
		}
		if(found) {
			this.displayText = HxOverrides.substr(this._text,0,mi) + HxOverrides.substr(this._text,mi + 1,null);
			var _this = mc.toUpperCase();
			this.mnemonic = HxOverrides.cca(_this,0);
			this.mnemonicIndex = mi;
		}
	}
	,getText: function() {
		return this._text;
	}
	,getDisplayText: function() {
		return this.displayText;
	}
	,getMnemonicIndex: function() {
		return this.mnemonicIndex;
	}
	,getMnemonic: function() {
		return this.mnemonic;
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this) != null) this.addChild(icon.getDisplay(this));
	}
	,uninstallIcon: function(icon) {
		var iconDis;
		if(icon == null) iconDis = null; else iconDis = icon.getDisplay(this);
		if(iconDis != null && this.isChild(iconDis)) this.removeChild(icon.getDisplay(this));
	}
	,setIcon: function(defaultIcon) {
		if(this._defaultIcon != defaultIcon) {
			this.uninstallIcon(this._defaultIcon);
			this._defaultIcon = defaultIcon;
			this.installIcon(defaultIcon);
			this.repaint();
			this.invalidate();
		}
	}
	,getIcon: function() {
		return this._defaultIcon;
	}
	,getPressedIcon: function() {
		return this._pressedIcon;
	}
	,setPressedIcon: function(pressedIcon) {
		var oldValue = this._pressedIcon;
		this._pressedIcon = pressedIcon;
		if(pressedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(pressedIcon);
			this.repaint();
		}
	}
	,getSelectedIcon: function() {
		return this._selectedIcon;
	}
	,setSelectedIcon: function(selectedIcon) {
		var oldValue = this._selectedIcon;
		this._selectedIcon = selectedIcon;
		if(selectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(selectedIcon);
			this.repaint();
		}
	}
	,getRollOverIcon: function() {
		return this._rolloverIcon;
	}
	,setRollOverIcon: function(rolloverIcon) {
		var oldValue = this._rolloverIcon;
		this._rolloverIcon = rolloverIcon;
		this.setRollOverEnabled(true);
		if(rolloverIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(rolloverIcon);
			this.repaint();
		}
	}
	,getRollOverSelectedIcon: function() {
		return this._rolloverSelectedIcon;
	}
	,setRollOverSelectedIcon: function(rolloverSelectedIcon) {
		var oldValue = this._rolloverSelectedIcon;
		this._rolloverSelectedIcon = rolloverSelectedIcon;
		this.setRollOverEnabled(true);
		if(rolloverSelectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(rolloverSelectedIcon);
			this.repaint();
		}
	}
	,getDisabledIcon: function() {
		if(this._disabledIcon == null) {
			if(this._defaultIcon != null) return this._defaultIcon;
		}
		return this._disabledIcon;
	}
	,setDisabledIcon: function(disabledIcon) {
		var oldValue = this._disabledIcon;
		this._disabledIcon = disabledIcon;
		if(disabledIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledIcon);
			this.repaint();
		}
	}
	,getDisabledSelectedIcon: function() {
		if(this._disabledSelectedIcon == null) {
			if(this._selectedIcon != null) {
			} else return this.getDisabledIcon();
		}
		return this._disabledSelectedIcon;
	}
	,setDisabledSelectedIcon: function(disabledSelectedIcon) {
		var oldValue = this._disabledSelectedIcon;
		this._disabledSelectedIcon = disabledSelectedIcon;
		if(disabledSelectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledSelectedIcon);
			this.repaint();
			this.revalidate();
		}
	}
	,getVerticalAlignment: function() {
		return this._verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this._verticalAlignment) return; else {
			this._verticalAlignment = alignment;
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this._horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this._horizontalAlignment) return; else {
			this._horizontalAlignment = alignment;
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this._verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this._verticalTextPosition) return; else {
			this._verticalTextPosition = textPosition;
			this.repaint();
			this.revalidate();
		}
	}
	,getHorizontalTextPosition: function() {
		return this._horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this._horizontalTextPosition) return; else {
			this._horizontalTextPosition = textPosition;
			this.repaint();
			this.revalidate();
		}
	}
	,getIconTextGap: function() {
		return this._iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this._iconTextGap;
		this._iconTextGap = iconTextGap;
		if(iconTextGap != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,getShiftOffset: function() {
		return this._shiftOffset;
	}
	,setShiftOffset: function(shiftOffset) {
		var oldValue = this._shiftOffset;
		this._shiftOffset = shiftOffset;
		this.setShiftOffsetSet(true);
		if(shiftOffset != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,isShiftOffsetSet: function() {
		return this.shiftOffsetSet;
	}
	,setShiftOffsetSet: function(b) {
		this.shiftOffsetSet = b;
	}
	,initSelfHandlers: function() {
		this.addEventListener("touchRollOut",$bind(this,this.__rollOutListener));
		this.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__rollOutListener));
		this.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__rollOverListener));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDownListener));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__mouseUpListener));
		this.addEventListener("release",$bind(this,this.__mouseReleaseListener));
		this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__addedToStage));
		this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__removedFromStage));
	}
	,__addedToStage: function(e) {
		this.rootPane = this.getRootPaneAncestor();
		if(this.rootPane != null) this.rootPane.registerMnemonic(this);
	}
	,__removedFromStage: function(e) {
		if(this.rootPane != null) {
			this.rootPane.unregisterMnemonic(this);
			this.rootPane = null;
		}
	}
	,__rollOverListener: function(e) {
		var m = this.getModel();
		if(this.isRollOverEnabled()) {
			if(m.isPressed() || !e.buttonDown) m.setRollOver(true);
		}
		if(m.isPressed()) m.setArmed(true);
	}
	,__rollOutListener: function(e) {
		var m = this.getModel();
		if(this.isRollOverEnabled()) {
			if(!m.isPressed()) m.setRollOver(false);
		}
		m.setArmed(false);
	}
	,__mouseDownListener: function(e) {
		this.getModel().setArmed(true);
		this.getModel().setPressed(true);
	}
	,__mouseUpListener: function(e) {
		if(this.isRollOverEnabled()) this.getModel().setRollOver(true);
	}
	,__mouseReleaseListener: function(e) {
		this.getModel().setPressed(false);
		this.getModel().setArmed(false);
		if(this.isRollOverEnabled() && !this.hitTestMouse()) this.getModel().setRollOver(false);
	}
	,__modelActionListener: function(e) {
		this.dispatchEvent(new org_aswing_event_AWEvent("act"));
		this.doBackgroundTransition();
	}
	,__modelStateListener: function(e) {
		this.__fieldBindings__.dispatch("selected",null,null);
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged"));
		this.doBackgroundTransition();
	}
	,__modelSelectionListener: function(e) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("selectionChanged"));
		this.doBackgroundTransition();
	}
	,calculateTargetBackgroundTransitionFactor: function() {
		if(this.get_model().isPressed()) return -1.0; else if(this.get_model().isRollOver()) return 1.0; else return 0.0;
	}
	,doBackgroundTransition: function(immediately) {
		if(immediately == null) immediately = false;
		var _g = this;
		var targetFactor = this.calculateTargetBackgroundTransitionFactor();
		if(this.transitBackgroundFactor != targetFactor) {
			if(immediately) {
				this.transitBackgroundFactor = targetFactor;
				return;
			}
			motion_Actuate.stop(this,"transitBackgroundFactor");
			motion_Actuate.tween(this,0.25,{ transitBackgroundFactor : targetFactor}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
				_g.repaint();
			}).onComplete(function() {
				_g.transitBackgroundFactor = targetFactor;
			});
		}
	}
	,__class__: org_aswing_AbstractButton
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected",set_textFilters:"set_textFilters",get_textFilters:"get_textFilters",set_shiftOffset:"set_shiftOffset",get_shiftOffset:"get_shiftOffset",set_iconTextGap:"set_iconTextGap",get_iconTextGap:"get_iconTextGap",set_horizontalTextPosition:"set_horizontalTextPosition",get_horizontalTextPosition:"get_horizontalTextPosition",set_verticalTextPosition:"set_verticalTextPosition",get_verticalTextPosition:"get_verticalTextPosition",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_rolloverEnabled:"set_rolloverEnabled",get_rolloverEnabled:"get_rolloverEnabled",set_rolloverSelectedIcon:"set_rolloverSelectedIcon",get_rolloverSelectedIcon:"get_rolloverSelectedIcon",set_rolloverIcon:"set_rolloverIcon",get_rolloverIcon:"get_rolloverIcon",set_disabledSelectedIcon:"set_disabledSelectedIcon",get_disabledSelectedIcon:"get_disabledSelectedIcon",set_selectedIcon:"set_selectedIcon",get_selectedIcon:"get_selectedIcon",set_disabledIcon:"set_disabledIcon",get_disabledIcon:"get_disabledIcon",set_pressedIcon:"set_pressedIcon",get_pressedIcon:"get_pressedIcon",set_icon:"set_icon",get_icon:"get_icon",set_margin:"set_margin",get_margin:"get_margin",set_mnemonicEnabled:"set_mnemonicEnabled",get_mnemonicEnabled:"get_mnemonicEnabled",set_text:"set_text",get_text:"get_text",set_model:"set_model",get_model:"get_model"})
});
var org_aswing_JButton = function(text,icon) {
	if(text == null) text = "";
	org_aswing_AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JButton" + text);
	this.setModel(new org_aswing_DefaultButtonModel());
};
$hxClasses["org.aswing.JButton"] = org_aswing_JButton;
org_aswing_JButton.__name__ = ["org","aswing","JButton"];
org_aswing_JButton.__super__ = org_aswing_AbstractButton;
org_aswing_JButton.prototype = $extend(org_aswing_AbstractButton.prototype,{
	isDefaultButton: function() {
		var rootPane = this.getRootPaneAncestor();
		if(rootPane != null) return rootPane.getDefaultButton() == this;
		return false;
	}
	,wrapSimpleButton: function(btn) {
		this.mouseChildren = true;
		this.drawTransparentTrigger = false;
		this.setShiftOffset(0);
		this.setIcon(new org_aswing_SimpleButtonIcon(btn));
		this.setBorder(null);
		this.setMargin(new org_aswing_Insets());
		this.setBackgroundDecorator(null);
		this.setOpaque(false);
		this.setHorizontalTextPosition(0);
		this.setVerticalTextPosition(0);
		return this;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicButtonUI;
	}
	,getUIClassID: function() {
		return "ButtonUI";
	}
	,__class__: org_aswing_JButton
});
var jive_plaf_flat_accordion_AccordionHeaderButton = function() {
	org_aswing_JButton.call(this);
};
$hxClasses["jive.plaf.flat.accordion.AccordionHeaderButton"] = jive_plaf_flat_accordion_AccordionHeaderButton;
jive_plaf_flat_accordion_AccordionHeaderButton.__name__ = ["jive","plaf","flat","accordion","AccordionHeaderButton"];
jive_plaf_flat_accordion_AccordionHeaderButton.__super__ = org_aswing_JButton;
jive_plaf_flat_accordion_AccordionHeaderButton.prototype = $extend(org_aswing_JButton.prototype,{
	set_tabPlacement: function(v) {
		this.tabPlacement = v;
		this.repaint();
		return v;
	}
	,set_maxPlacement: function(v) {
		this.maxPlacement = v;
		this.repaint();
		return v;
	}
	,getUIClassID: function() {
		return "AccordionHeaderButtonUI";
	}
	,__class__: jive_plaf_flat_accordion_AccordionHeaderButton
	,__properties__: $extend(org_aswing_JButton.prototype.__properties__,{set_tabPlacement:"set_tabPlacement"})
});
var org_aswing_plaf_UIResource = function() { };
$hxClasses["org.aswing.plaf.UIResource"] = org_aswing_plaf_UIResource;
org_aswing_plaf_UIResource.__name__ = ["org","aswing","plaf","UIResource"];
var org_aswing_Decorator = function() { };
$hxClasses["org.aswing.Decorator"] = org_aswing_Decorator;
org_aswing_Decorator.__name__ = ["org","aswing","Decorator"];
org_aswing_Decorator.prototype = {
	__class__: org_aswing_Decorator
};
var org_aswing_GroundDecorator = function() { };
$hxClasses["org.aswing.GroundDecorator"] = org_aswing_GroundDecorator;
org_aswing_GroundDecorator.__name__ = ["org","aswing","GroundDecorator"];
org_aswing_GroundDecorator.__interfaces__ = [org_aswing_Decorator];
org_aswing_GroundDecorator.prototype = {
	__class__: org_aswing_GroundDecorator
};
var jive_plaf_flat_accordion_AccordionHeaderButtonBackground = function() {
	this.cornerRaduis = -1;
};
$hxClasses["jive.plaf.flat.accordion.AccordionHeaderButtonBackground"] = jive_plaf_flat_accordion_AccordionHeaderButtonBackground;
jive_plaf_flat_accordion_AccordionHeaderButtonBackground.__name__ = ["jive","plaf","flat","accordion","AccordionHeaderButtonBackground"];
jive_plaf_flat_accordion_AccordionHeaderButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_accordion_AccordionHeaderButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		b = js_Boot.__instanceof(c,jive_plaf_flat_accordion_AccordionHeaderButton)?c:null;
		if(b == null) return;
		if(this.cornerRaduis <= 0) this.cornerRaduis = c.getUI().getNumber("AccordionHeaderButton.cornerRadius");
		bounds = bounds.clone();
		if(c.isOpaque()) {
			var model = b.getModel();
			var isPressing = model.isArmed() && b.isEnabled();
			var isRollover = (model.isRollOver() || model.isSelected()) && b.isEnabled() && !isPressing;
			var isSelected = model.isSelected();
			var isFirst = b.tabPlacement == 0;
			var isLast = b.tabPlacement == b.maxPlacement;
			var topLeftRadius;
			if(isFirst) topLeftRadius = this.cornerRaduis; else topLeftRadius = 0;
			var topRightRadius;
			if(isFirst) topRightRadius = this.cornerRaduis; else topRightRadius = 0;
			var bottomLeftRadius;
			if(isLast && !isSelected) bottomLeftRadius = this.cornerRaduis; else bottomLeftRadius = 0;
			var bottomRightRadius;
			if(isLast && !isSelected) bottomRightRadius = this.cornerRaduis; else bottomRightRadius = 0;
			var color;
			if(isPressing && !isSelected) color = c.get_background().offsetHLS(0,-0.1,0); else if(isRollover && !isSelected) color = c.get_background().offsetHLS(0,0.1,0); else color = c.get_background();
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(color),bounds.x,bounds.y,bounds.width,bounds.height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius);
		}
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_accordion_AccordionHeaderButtonBackground
};
var jive_plaf_flat_accordion_AccordionHeaderButtonUI = function() {
	org_aswing_plaf_basic_BasicButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.accordion.AccordionHeaderButtonUI"] = jive_plaf_flat_accordion_AccordionHeaderButtonUI;
jive_plaf_flat_accordion_AccordionHeaderButtonUI.__name__ = ["jive","plaf","flat","accordion","AccordionHeaderButtonUI"];
jive_plaf_flat_accordion_AccordionHeaderButtonUI.__super__ = org_aswing_plaf_basic_BasicButtonUI;
jive_plaf_flat_accordion_AccordionHeaderButtonUI.prototype = $extend(org_aswing_plaf_basic_BasicButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "AccordionHeaderButton.";
	}
	,paintIcon: function(b,g,iconRect) {
		if(b.isSelected()) iconRect.y += Std["int"](org_aswing_UIManager.get("iconSize") * 0.1);
		org_aswing_plaf_basic_BasicButtonUI.prototype.paintIcon.call(this,b,g,iconRect);
	}
	,__class__: jive_plaf_flat_accordion_AccordionHeaderButtonUI
});
var jive_plaf_flat_accordion_AccordionItemBackground = function() {
};
$hxClasses["jive.plaf.flat.accordion.AccordionItemBackground"] = jive_plaf_flat_accordion_AccordionItemBackground;
jive_plaf_flat_accordion_AccordionItemBackground.__name__ = ["jive","plaf","flat","accordion","AccordionItemBackground"];
jive_plaf_flat_accordion_AccordionItemBackground.__interfaces__ = [org_aswing_GroundDecorator];
jive_plaf_flat_accordion_AccordionItemBackground.prototype = {
	updateDecorator: function(c,g,b) {
		g.clear();
		g.fillRectangle(new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(16448250)),b.x - c.getInsets().left,b.y - c.getInsets().top,b.width + c.getInsets().getMarginWidth(),b.height + c.getInsets().getMarginHeight());
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_accordion_AccordionItemBackground
};
var org_aswing_Border = function() { };
$hxClasses["org.aswing.Border"] = org_aswing_Border;
org_aswing_Border.__name__ = ["org","aswing","Border"];
org_aswing_Border.__interfaces__ = [org_aswing_Decorator];
org_aswing_Border.prototype = {
	__class__: org_aswing_Border
};
var org_aswing_border_DecorateBorder = function(interior) {
	this.interior = interior;
};
$hxClasses["org.aswing.border.DecorateBorder"] = org_aswing_border_DecorateBorder;
org_aswing_border_DecorateBorder.__name__ = ["org","aswing","border","DecorateBorder"];
org_aswing_border_DecorateBorder.__interfaces__ = [org_aswing_Border];
org_aswing_border_DecorateBorder.prototype = {
	setInterior: function(interior) {
		this.interior = interior;
	}
	,getInterior: function() {
		return this.interior;
	}
	,getDisplayImp: function() {
		return null;
	}
	,updateBorderImp: function(com,g,bounds) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,getBorderInsetsImp: function(c,bounds) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return new org_aswing_Insets();
	}
	,getDisplay: function(c) {
		var inter = this.getInterior();
		if(inter != null) {
			var interDis = inter.getDisplay(c);
			var selfDis = this.getDisplayImp();
			if(interDis == null) return selfDis; else if(selfDis == null) return interDis; else {
				if(this.disContainer == null) {
					this.disContainer = new openfl_display_Sprite();
					this.disContainer.addChild(selfDis);
					this.disContainer.addChild(interDis);
				}
				return this.disContainer;
			}
		} else return this.getDisplayImp();
	}
	,updateBorder: function(c,g,bounds) {
		this.updateBorderImp(c,g,bounds);
		if(this.getInterior() != null) {
			var interiorBounds = this.getBorderInsetsImp(c,bounds).getInsideBounds(bounds);
			this.getInterior().updateBorder(c,g,interiorBounds);
		}
	}
	,getBorderInsets: function(c,bounds) {
		var insets = this.getBorderInsetsImp(c,bounds);
		if(this.getInterior() != null) {
			var interiorBounds = insets.getInsideBounds(bounds);
			insets.addInsets(this.getInterior().getBorderInsets(c,interiorBounds));
		}
		return insets;
	}
	,__class__: org_aswing_border_DecorateBorder
};
var jive_plaf_flat_accordion_AccordionItemBorder = function(interior,color,thickness,radius) {
	if(radius == null) radius = 5;
	if(thickness == null) thickness = 1;
	org_aswing_border_DecorateBorder.call(this,interior);
	if(color == null) color = org_aswing_ASColor.BLACK;
	this.color = color;
	this.thickness = thickness;
	this.radius = radius;
};
$hxClasses["jive.plaf.flat.accordion.AccordionItemBorder"] = jive_plaf_flat_accordion_AccordionItemBorder;
jive_plaf_flat_accordion_AccordionItemBorder.__name__ = ["jive","plaf","flat","accordion","AccordionItemBorder"];
jive_plaf_flat_accordion_AccordionItemBorder.__super__ = org_aswing_border_DecorateBorder;
jive_plaf_flat_accordion_AccordionItemBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		var accordion = org_aswing_AsWingUtils["as"](com.parent,org_aswing_JAccordion);
		if(null == accordion) return;
		var itemIndex = accordion.getIndex(com);
		var isLast = itemIndex == accordion.getComponentCount() - 1;
		var isSelected = itemIndex == accordion.getSelectedIndex();
		var topLeftRadius = 0;
		var topRightRadius = 0;
		var bottomLeftRadius;
		if(isLast && isSelected) bottomLeftRadius = this.radius; else bottomLeftRadius = 0;
		var bottomRightRadius;
		if(isLast && isSelected) bottomRightRadius = this.radius; else bottomRightRadius = 0;
		g.beginFill(new org_aswing_graphics_SolidBrush(this.color));
		g.roundRect(b.x,b.y,b.width,b.height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius);
		var innerTopLeftRadius = topLeftRadius - this.thickness;
		var innerTopRightRadius = topRightRadius - this.thickness;
		var innerBottomLeftRadius = bottomLeftRadius - this.thickness;
		var innerBottomRightRadius = bottomRightRadius - this.thickness;
		g.roundRect(b.x + this.thickness,b.y + this.thickness,b.width - this.thickness * 2,b.height - this.thickness * 2,innerTopLeftRadius,innerTopRightRadius,innerBottomLeftRadius,innerBottomRightRadius);
		g.endFill();
	}
	,getBorderInsetsImp: function(com,bounds) {
		var width = Std["int"](Math.ceil(this.thickness + this.radius - this.radius * 0.707106781186547));
		return new org_aswing_Insets(width,width,width,width);
	}
	,getDisplayImp: function() {
		return null;
	}
	,__class__: jive_plaf_flat_accordion_AccordionItemBorder
});
var jive_plaf_flat_accordion_AccordionItemContainer = function() {
	org_aswing_JPanel.call(this);
	this.setLayout(new org_aswing_BorderLayout());
	this.set_backgroundDecorator(new jive_plaf_flat_accordion_AccordionItemBackground());
	this.set_border(new jive_plaf_flat_accordion_AccordionItemBorder(new org_aswing_border_EmptyBorder(null,org_aswing_Insets.createIdentic(Std["int"](org_aswing_UIManager.get("margin") / 4))),new org_aswing_ASColor(12303291),1,org_aswing_UIManager.get("cornerSize")));
};
$hxClasses["jive.plaf.flat.accordion.AccordionItemContainer"] = jive_plaf_flat_accordion_AccordionItemContainer;
jive_plaf_flat_accordion_AccordionItemContainer.__name__ = ["jive","plaf","flat","accordion","AccordionItemContainer"];
jive_plaf_flat_accordion_AccordionItemContainer.__super__ = org_aswing_JPanel;
jive_plaf_flat_accordion_AccordionItemContainer.prototype = $extend(org_aswing_JPanel.prototype,{
	__class__: jive_plaf_flat_accordion_AccordionItemContainer
});
var jive_plaf_flat_adjuster_AdjusterBackground = function() {
};
$hxClasses["jive.plaf.flat.adjuster.AdjusterBackground"] = jive_plaf_flat_adjuster_AdjusterBackground;
jive_plaf_flat_adjuster_AdjusterBackground.__name__ = ["jive","plaf","flat","adjuster","AdjusterBackground"];
jive_plaf_flat_adjuster_AdjusterBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_adjuster_AdjusterBackground.prototype = {
	updateDecorator: function(c,g,b) {
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_adjuster_AdjusterBackground
};
var jive_plaf_flat_adjuster_AdjusterBorder = function() {
};
$hxClasses["jive.plaf.flat.adjuster.AdjusterBorder"] = jive_plaf_flat_adjuster_AdjusterBorder;
jive_plaf_flat_adjuster_AdjusterBorder.__name__ = ["jive","plaf","flat","adjuster","AdjusterBorder"];
jive_plaf_flat_adjuster_AdjusterBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
jive_plaf_flat_adjuster_AdjusterBorder.prototype = {
	updateBorder: function(c,g,r) {
		g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(c.get_background().offsetHLS(0,-0.2,-0.2)),r.x,r.y,r.width,r.height,5,1);
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(2,1,2,1);
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_adjuster_AdjusterBorder
};
var jive_plaf_flat_adjuster_MinusButtonBackground = function(normalBg,rolloverBg,pressedBg,cornerRadius) {
	this.normalBg = normalBg;
	this.rolloverBg = rolloverBg;
	this.pressedBg = pressedBg;
	this.cornerRadius = cornerRadius;
};
$hxClasses["jive.plaf.flat.adjuster.MinusButtonBackground"] = jive_plaf_flat_adjuster_MinusButtonBackground;
jive_plaf_flat_adjuster_MinusButtonBackground.__name__ = ["jive","plaf","flat","adjuster","MinusButtonBackground"];
jive_plaf_flat_adjuster_MinusButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_adjuster_MinusButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b = c;
		var model = b.getModel();
		var isPressing = model.isArmed() && b.isEnabled();
		var isRollover = (model.isRollOver() || model.isSelected()) && b.isEnabled() && !isPressing;
		var color;
		if(isPressing) color = this.pressedBg; else if(isRollover) color = this.rolloverBg; else color = this.normalBg;
		g.beginFill(new org_aswing_graphics_SolidBrush(color));
		g.moveTo(bounds.x,bounds.y);
		g.lineTo(bounds.x + bounds.width,bounds.y);
		g.lineTo(bounds.x + bounds.width,bounds.y + bounds.height - this.cornerRadius);
		g.curveTo(bounds.x + bounds.width,bounds.y + bounds.height,bounds.x + bounds.width - this.cornerRadius,bounds.y + bounds.height);
		g.lineTo(bounds.x,bounds.y + bounds.height);
		g.lineTo(bounds.x,bounds.y);
		g.endFill();
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_adjuster_MinusButtonBackground
};
var jive_plaf_flat_adjuster_PlusButtonBackground = function(normalBg,rolloverBg,pressedBg,cornerRadius) {
	this.normalBg = normalBg;
	this.rolloverBg = rolloverBg;
	this.pressedBg = pressedBg;
	this.cornerRadius = cornerRadius;
};
$hxClasses["jive.plaf.flat.adjuster.PlusButtonBackground"] = jive_plaf_flat_adjuster_PlusButtonBackground;
jive_plaf_flat_adjuster_PlusButtonBackground.__name__ = ["jive","plaf","flat","adjuster","PlusButtonBackground"];
jive_plaf_flat_adjuster_PlusButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_adjuster_PlusButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b = c;
		var model = b.getModel();
		var isPressing = model.isArmed() && b.isEnabled();
		var isRollover = (model.isRollOver() || model.isSelected()) && b.isEnabled() && !isPressing;
		var color;
		if(isPressing) color = this.pressedBg; else if(isRollover) color = this.rolloverBg; else color = this.normalBg;
		g.beginFill(new org_aswing_graphics_SolidBrush(color));
		g.moveTo(bounds.x,bounds.y);
		g.lineTo(bounds.x + bounds.width - this.cornerRadius,bounds.y);
		g.curveTo(bounds.x + bounds.width,bounds.y,bounds.x + bounds.width,bounds.y + this.cornerRadius);
		g.lineTo(bounds.x + bounds.width,bounds.y + bounds.height);
		g.lineTo(bounds.x,bounds.y + bounds.height);
		g.lineTo(bounds.x,bounds.y);
		g.endFill();
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: jive_plaf_flat_adjuster_PlusButtonBackground
};
var jive_plaf_flat_background_FlatButtonBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatButtonBackground"] = jive_plaf_flat_background_FlatButtonBackground;
jive_plaf_flat_background_FlatButtonBackground.__name__ = ["jive","plaf","flat","background","FlatButtonBackground"];
jive_plaf_flat_background_FlatButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(b == null) return;
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		bounds = bounds.clone();
		var color = c.get_background();
		if(js_Boot.__instanceof(b,org_aswing_JButton)) {
			var _b;
			_b = js_Boot.__instanceof(b,org_aswing_JButton)?b:null;
			if(_b.isDefaultButton()) color = c.get_mideground();
		}
		if(c.get_opaque()) {
			if(Math.abs(b.transitBackgroundFactor) < 1) {
				var factor = b.transitBackgroundFactor * jive_plaf_flat_background_FlatButtonBackground.luminanceFactor;
				color = color.offsetHLS(0,factor,0);
			} else {
				var model = b.get_model();
				var isPressing = model.isArmed() || model.isSelected();
				if(isPressing) color = color.offsetHLS(0,-jive_plaf_flat_background_FlatButtonBackground.luminanceFactor,0); else if(b.get_model().isRollOver()) color = color.offsetHLS(0,jive_plaf_flat_background_FlatButtonBackground.luminanceFactor,0);
			}
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(color),bounds.x,bounds.y,bounds.width,bounds.height,b.get_styleTune().round);
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_background_FlatButtonBackground
};
var jive_plaf_flat_background_FlatFrameBackground = function() {
	this.shape = new openfl_display_Sprite();
	this.shape.mouseChildren = false;
	this.shape.mouseEnabled = false;
};
$hxClasses["jive.plaf.flat.background.FlatFrameBackground"] = jive_plaf_flat_background_FlatFrameBackground;
jive_plaf_flat_background_FlatFrameBackground.__name__ = ["jive","plaf","flat","background","FlatFrameBackground"];
jive_plaf_flat_background_FlatFrameBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatFrameBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			var shadowW = 6;
			var shadowH = 6;
			var shadowScale = 1;
			b = new org_aswing_geom_IntRectangle(1,2,Std["int"](c.getWidth() - shadowW - 1),Std["int"](c.getHeight() - shadowH - 2));
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var ui = org_aswing_AsWingUtils["as"](c.getUI(),org_aswing_plaf_FrameUI);
			if(ui != null) {
				if(!ui.isPaintActivedFrame()) shadowScale = 0.5;
			}
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.get_background()),b.x,b.y,b.width,b.height,c.get_styleTune().round);
			var shape_f = [];
			shape_f.push(new openfl_filters_DropShadowFilter(2,45,0,c.get_styleTune().shadowAlpha * shadowScale,shadowW,shadowH,1,1));
			this.shape.set_filters(shape_f);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: jive_plaf_flat_background_FlatFrameBackground
};
var jive_plaf_flat_background_FlatInputBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatInputBackground"] = jive_plaf_flat_background_FlatInputBackground;
jive_plaf_flat_background_FlatInputBackground.__name__ = ["jive","plaf","flat","background","FlatInputBackground"];
jive_plaf_flat_background_FlatInputBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatInputBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.shape.set_visible(c.get_opaque());
		if(c.get_opaque()) {
			this.shape.get_graphics().clear();
			var cb;
			cb = js_Boot.__instanceof(c,org_aswing_JComboBox)?c:null;
			if(null == cb) return;
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			bounds = c.get_border().getBorderInsets(null,null).getOutsideBounds(bounds);
			var bgColor = c.get_background();
			if(!cb.get_editable() && cb.get_enabled()) bgColor = cb.get_notEditableBackground();
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(bgColor),bounds.x + 1,bounds.y + 1,bounds.width - 2,bounds.height - 2,c.get_styleTune().round);
			var borderColor = c.get_mideground();
			if(!c.get_enabled()) borderColor = borderColor.offsetHLS(0,0.2,0); else if(!cb.get_editable()) borderColor = cb.get_notEditableBackground(); else borderColor = org_aswing_ASColor.getColorBetween(borderColor,org_aswing_UIManager.getColor("focusForeground"),cb.transitFocusFactor);
			g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(borderColor),bounds.x,bounds.y,bounds.width,bounds.height,c.get_styleTune().round,1.5,c.get_styleTune().round - 1);
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_background_FlatInputBackground
};
var jive_plaf_flat_background_FlatProgressBarBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatProgressBarBackground"] = jive_plaf_flat_background_FlatProgressBarBackground;
jive_plaf_flat_background_FlatProgressBarBackground.__name__ = ["jive","plaf","flat","background","FlatProgressBarBackground"];
jive_plaf_flat_background_FlatProgressBarBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatProgressBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_Orientable) && c.isOpaque()) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_Orientable)?c:null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			b = b.clone();
			var radius = 0;
			if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
			if(radius > style.round) radius = style.round;
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.getBackground().changeAlpha(1)),b.x,b.y,b.width,b.height,radius);
			this.shape.set_alpha(c.getBackground().getAlpha());
		}
	}
	,__class__: jive_plaf_flat_background_FlatProgressBarBackground
};
var jive_plaf_flat_background_FlatProgressBarIcon = function() {
	this.shape = new openfl_display_Shape();
	this.indeterminatePercent = 0;
};
$hxClasses["jive.plaf.flat.background.FlatProgressBarIcon"] = jive_plaf_flat_background_FlatProgressBarIcon;
jive_plaf_flat_background_FlatProgressBarIcon.__name__ = ["jive","plaf","flat","background","FlatProgressBarIcon"];
jive_plaf_flat_background_FlatProgressBarIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatProgressBarIcon.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_JProgressBar)) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
			b = b.clone();
			var percent;
			if(bar.isIndeterminate()) {
				percent = this.indeterminatePercent;
				this.indeterminatePercent += 0.01;
				if(this.indeterminatePercent > 1) this.indeterminatePercent = 0;
			} else percent = bar.getPercentComplete();
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune().get_mide();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var radius = 0;
			if(verticle) {
				radius = Math.floor(b.width / 2);
				b.height = b.height * percent | 0;
			} else {
				radius = Math.floor(b.height / 2);
				b.width = b.width * percent | 0;
			}
			if(radius > style.round) radius = style.round;
			if(b.width > 1) g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.get_mideground()),b.x,b.y,b.width,b.height,radius);
		}
	}
	,__class__: jive_plaf_flat_background_FlatProgressBarIcon
};
var jive_plaf_flat_background_FlatScrollBarBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatScrollBarBackground"] = jive_plaf_flat_background_FlatScrollBarBackground;
jive_plaf_flat_background_FlatScrollBarBackground.__name__ = ["jive","plaf","flat","background","FlatScrollBarBackground"];
jive_plaf_flat_background_FlatScrollBarBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatScrollBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_Orientable) && c.isOpaque()) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_Orientable)?c:null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			b = b.clone();
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.get_background()),b.x,b.y,b.width,b.height,c.get_styleTune().round);
		}
	}
	,__class__: jive_plaf_flat_background_FlatScrollBarBackground
};
var org_aswing_plaf_basic_background_ScrollBarThumb = function() {
	this.thumb = new org_aswing_AWSprite();
	this.rollover = false;
	this.pressed = false;
	this.initSelfHandlers();
};
$hxClasses["org.aswing.plaf.basic.background.ScrollBarThumb"] = org_aswing_plaf_basic_background_ScrollBarThumb;
org_aswing_plaf_basic_background_ScrollBarThumb.__name__ = ["org","aswing","plaf","basic","background","ScrollBarThumb"];
org_aswing_plaf_basic_background_ScrollBarThumb.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ScrollBarThumb.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.thumb.set_x(bounds.x);
		this.thumb.set_y(bounds.y);
		this.size = bounds.getSize();
		this.bar = js_Boot.__instanceof(c,org_aswing_JScrollBar)?c:null;
		this.verticle = this.bar.getOrientation() == 1;
		this.paint();
	}
	,paint: function() {
		var x = 0;
		var y = 0;
		var w = this.size.width;
		var h = this.size.height;
		this.thumb.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.thumb.get_graphics());
		var b;
		var direction;
		var notchSize;
		if(this.verticle) {
			direction = Math.PI / 2;
			notchSize = w - 6 | 0;
		} else {
			direction = 0;
			notchSize = h - 6 | 0;
		}
		b = new org_aswing_geom_IntRectangle(x | 0,y | 0,w | 0,h | 0);
		var tune = this.bar.getStyleTune().get_mide();
		var style;
		var cl = this.bar.getMideground().changeAlpha(1);
		if(!this.bar.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			tune = tune.sharpen(0.4);
		} else if(this.pressed) tune = tune.sharpen(0.8); else if(this.rollover) cl = cl.offsetHLS(0,0.06,0);
		style = new org_aswing_StyleResult(cl,tune);
		org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction);
		org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction);
		b = b.clone();
		b.grow(-1,-1);
		var innerStyle = new org_aswing_StyleResult(cl,tune);
		innerStyle.bdark = innerStyle.cdark.offsetHLS(0,0.06,0);
		innerStyle.blight = innerStyle.clight.offsetHLS(0,0.06,0);
		org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,innerStyle,direction);
		var snotchX = 0;
		var snotchY = 0;
		var lightPen = new org_aswing_graphics_Pen(innerStyle.blight,1,true,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE);
		var darkPen = new org_aswing_graphics_Pen(style.blight,1,true,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE);
		if(this.verticle) {
			snotchX = x + 3 | 0;
			snotchY = y + h / 2 - 3 | 0;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
		} else {
			snotchX = x + w / 2 - 3 | 0;
			snotchY = y + 3 | 0;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
		}
		this.thumb.set_alpha(this.bar.getMideground().getAlpha());
	}
	,getDisplay: function(c) {
		return this.thumb;
	}
	,initSelfHandlers: function() {
		this.thumb.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__rollOutListener));
		this.thumb.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__rollOverListener));
		this.thumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDownListener));
		this.thumb.addEventListener("release",$bind(this,this.__mouseUpListener));
	}
	,__rollOverListener: function(e) {
		this.rollover = true;
		this.paint();
	}
	,__rollOutListener: function(e) {
		this.rollover = false;
		if(this.pressed != true) this.paint();
	}
	,__mouseDownListener: function(e) {
		this.pressed = true;
		this.paint();
	}
	,__mouseUpListener: function(e) {
		if(this.pressed) {
			this.pressed = false;
			this.paint();
		}
	}
	,__class__: org_aswing_plaf_basic_background_ScrollBarThumb
};
var jive_plaf_flat_background_FlatScrollBarThumb = function() {
	org_aswing_plaf_basic_background_ScrollBarThumb.call(this);
};
$hxClasses["jive.plaf.flat.background.FlatScrollBarThumb"] = jive_plaf_flat_background_FlatScrollBarThumb;
jive_plaf_flat_background_FlatScrollBarThumb.__name__ = ["jive","plaf","flat","background","FlatScrollBarThumb"];
jive_plaf_flat_background_FlatScrollBarThumb.__super__ = org_aswing_plaf_basic_background_ScrollBarThumb;
jive_plaf_flat_background_FlatScrollBarThumb.prototype = $extend(org_aswing_plaf_basic_background_ScrollBarThumb.prototype,{
	paint: function() {
		this.thumb.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.thumb.get_graphics());
		var cl = this.bar.get_mideground();
		if(!this.bar.get_enabled()) cl = cl.offsetHLS(0,0.1,-0.03); else if(this.rollover) cl = cl.offsetHLS(0,-0.2,0);
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(cl),this.verticle?2:0,this.verticle?0:2,this.verticle?this.size.width - 4:this.size.width,this.verticle?this.size.height:this.size.height - 4,(Math.min(this.size.width,this.size.height) - 4) / 2);
	}
	,__class__: jive_plaf_flat_background_FlatScrollBarThumb
});
var org_aswing_plaf_basic_background_TableBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TableBackground"] = org_aswing_plaf_basic_background_TableBackground;
org_aswing_plaf_basic_background_TableBackground.__name__ = ["org","aswing","plaf","basic","background","TableBackground"];
org_aswing_plaf_basic_background_TableBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_TableBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var tune = c.getStyleTune().get_mide();
			var cl = c.getMideground();
			var style = new org_aswing_StyleResult(cl,tune);
			b = b.clone();
			style.cdark = style.cdark.changeAlpha(1);
			style.clight = style.clight.changeAlpha(1);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2);
			var bd = style.bdark;
			var f = [];
			f.push(new openfl_filters_GlowFilter(16777215,0.5,2,2,20,1,true));
			f.push(new openfl_filters_GlowFilter(bd.getRGB(),1,2,2,20,1));
			this.shape.set_filters(f);
			this.shape.set_alpha(cl.getAlpha());
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org_aswing_plaf_basic_background_TableBackground
};
var jive_plaf_flat_background_FlatTableBackground = function() {
	org_aswing_plaf_basic_background_TableBackground.call(this);
};
$hxClasses["jive.plaf.flat.background.FlatTableBackground"] = jive_plaf_flat_background_FlatTableBackground;
jive_plaf_flat_background_FlatTableBackground.__name__ = ["jive","plaf","flat","background","FlatTableBackground"];
jive_plaf_flat_background_FlatTableBackground.__super__ = org_aswing_plaf_basic_background_TableBackground;
jive_plaf_flat_background_FlatTableBackground.prototype = $extend(org_aswing_plaf_basic_background_TableBackground.prototype,{
	updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: jive_plaf_flat_background_FlatTableBackground
});
var jive_plaf_flat_background_FlatTableHeaderBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatTableHeaderBackground"] = jive_plaf_flat_background_FlatTableHeaderBackground;
jive_plaf_flat_background_FlatTableHeaderBackground.__name__ = ["jive","plaf","flat","background","FlatTableHeaderBackground"];
jive_plaf_flat_background_FlatTableHeaderBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatTableHeaderBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			g.drawLine(new org_aswing_graphics_Pen(c.get_mideground()),b.x,b.y + b.height - 1,b.x + b.width,b.y + b.height - 1);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: jive_plaf_flat_background_FlatTableHeaderBackground
};
var jive_plaf_flat_background_FlatTextComponentBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.background.FlatTextComponentBackground"] = jive_plaf_flat_background_FlatTextComponentBackground;
jive_plaf_flat_background_FlatTextComponentBackground.__name__ = ["jive","plaf","flat","background","FlatTextComponentBackground"];
jive_plaf_flat_background_FlatTextComponentBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_background_FlatTextComponentBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.shape.set_visible(c.get_opaque());
		if(c.get_opaque()) {
			this.shape.get_graphics().clear();
			var textComponent;
			textComponent = js_Boot.__instanceof(c,org_aswing_JTextComponent)?c:null;
			if(null == textComponent) return;
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			bounds = c.get_border().getBorderInsets(null,null).getOutsideBounds(bounds);
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.get_background()),bounds.x + 1,bounds.y + 1,bounds.width - 2,bounds.height - 2,c.get_styleTune().round);
			var borderColor = c.get_mideground();
			if(!c.get_enabled() || !textComponent.get_editable()) borderColor = borderColor.offsetHLS(0,0.2,0); else borderColor = org_aswing_ASColor.getColorBetween(borderColor,org_aswing_UIManager.getColor("focusForeground"),textComponent.transitFocusFactor);
			g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(borderColor),bounds.x,bounds.y,bounds.width,bounds.height,c.get_styleTune().round,2,c.get_styleTune().round - 1);
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_background_FlatTextComponentBackground
};
var jive_plaf_flat_border_ExtendedLineBorder = function(interior,color,thickness,topLeftRadius,topRightRadius,bottomRightRadius,bottomLeftRadius) {
	if(bottomLeftRadius == null) bottomLeftRadius = 0;
	if(bottomRightRadius == null) bottomRightRadius = 0;
	if(topRightRadius == null) topRightRadius = 0;
	if(topLeftRadius == null) topLeftRadius = 0;
	if(thickness == null) thickness = 1;
	org_aswing_border_DecorateBorder.call(this,interior);
	if(color == null) color = org_aswing_ASColor.BLACK;
	this.color = color;
	this.thickness = thickness;
	this.topLeftRadius = topLeftRadius;
	this.topRightRadius = topRightRadius;
	this.bottomLeftRadius = bottomLeftRadius;
	this.bottomRightRadius = bottomRightRadius;
};
$hxClasses["jive.plaf.flat.border.ExtendedLineBorder"] = jive_plaf_flat_border_ExtendedLineBorder;
jive_plaf_flat_border_ExtendedLineBorder.__name__ = ["jive","plaf","flat","border","ExtendedLineBorder"];
jive_plaf_flat_border_ExtendedLineBorder.__super__ = org_aswing_border_DecorateBorder;
jive_plaf_flat_border_ExtendedLineBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		g.beginFill(new org_aswing_graphics_SolidBrush(this.color));
		g.roundRect(b.x,b.y,b.width,b.height,this.topLeftRadius,this.topRightRadius,this.bottomLeftRadius,this.bottomRightRadius);
		var innerTopLeftRadius = this.topLeftRadius - this.thickness;
		var innerTopRightRadius = this.topRightRadius - this.thickness;
		var innerBottomLeftRadius = this.bottomLeftRadius - this.thickness;
		var innerBottomRightRadius = this.bottomRightRadius - this.thickness;
		g.roundRect(b.x + this.thickness,b.y + this.thickness,b.width - this.thickness * 2,b.height - this.thickness * 2,innerTopLeftRadius,innerTopRightRadius,innerBottomLeftRadius,innerBottomRightRadius);
		g.endFill();
	}
	,getBorderInsetsImp: function(com,bounds) {
		var width = Std["int"](Math.ceil(this.thickness + this.topLeftRadius - this.topLeftRadius * 0.707106781186547));
		return new org_aswing_Insets(width,width,width,width);
	}
	,getDisplayImp: function() {
		return null;
	}
	,__class__: jive_plaf_flat_border_ExtendedLineBorder
});
var jive_plaf_flat_border_FlatComboBoxPopupBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.border.FlatComboBoxPopupBorder"] = jive_plaf_flat_border_FlatComboBoxPopupBorder;
jive_plaf_flat_border_FlatComboBoxPopupBorder.__name__ = ["jive","plaf","flat","border","FlatComboBoxPopupBorder"];
jive_plaf_flat_border_FlatComboBoxPopupBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
jive_plaf_flat_border_FlatComboBoxPopupBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		b = b.clone();
		b.y += Std["int"](org_aswing_UIManager.get("margin") / 4);
		b.height -= Std["int"](org_aswing_UIManager.get("margin") / 4);
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.get_background()),b.x,b.y,b.width,b.height,c.get_styleTune().round);
	}
	,getBorderInsets: function(c,b) {
		return new org_aswing_Insets(Std["int"](org_aswing_UIManager.get("margin") / 4),0,0,0);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_border_FlatComboBoxPopupBorder
};
var jive_plaf_flat_border_FlatPopupMenuBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.border.FlatPopupMenuBorder"] = jive_plaf_flat_border_FlatPopupMenuBorder;
jive_plaf_flat_border_FlatPopupMenuBorder.__name__ = ["jive","plaf","flat","border","FlatPopupMenuBorder"];
jive_plaf_flat_border_FlatPopupMenuBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
jive_plaf_flat_border_FlatPopupMenuBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height,c.get_styleTune().round);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(3,3,3,3);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_border_FlatPopupMenuBorder
};
var jive_plaf_flat_border_TableHeaderCellBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.border.TableHeaderCellBorder"] = jive_plaf_flat_border_TableHeaderCellBorder;
jive_plaf_flat_border_TableHeaderCellBorder.__name__ = ["jive","plaf","flat","border","TableHeaderCellBorder"];
jive_plaf_flat_border_TableHeaderCellBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
jive_plaf_flat_border_TableHeaderCellBorder.prototype = {
	updateBorder: function(c,g,b) {
		b = b.clone();
		if(js_Boot.__instanceof(c,org_aswing_AbstractButton)) haxe_Log.trace("header AbstractButton",{ fileName : "TableHeaderCellBorder.hx", lineNumber : 40, className : "jive.plaf.flat.border.TableHeaderCellBorder", methodName : "updateBorder"});
		var headerCell;
		headerCell = js_Boot.__instanceof(c,org_aswing_table_DefaultTextHeaderCell)?c:null;
		if(null == headerCell) return;
		if(b.height > 0 && headerCell.columnIndex < headerCell.table.getColumnCount() - 1) g.drawLine(new org_aswing_graphics_Pen(c.get_mideground()),b.x + b.width - 1,b.y,b.x + b.width - 1,b.y + b.height);
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(0,0,1,1);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_border_TableHeaderCellBorder
};
var org_aswing_border_LineBorder = function(interior,color,thickness,round) {
	if(round == null) round = 0;
	if(thickness == null) thickness = 1;
	org_aswing_border_DecorateBorder.call(this,interior);
	if(color == null) color = org_aswing_ASColor.BLACK;
	this.color = color;
	this.thickness = thickness;
	this.round = round;
};
$hxClasses["org.aswing.border.LineBorder"] = org_aswing_border_LineBorder;
org_aswing_border_LineBorder.__name__ = ["org","aswing","border","LineBorder"];
org_aswing_border_LineBorder.__super__ = org_aswing_border_DecorateBorder;
org_aswing_border_LineBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		var t = this.thickness;
		if(this.round <= 0) g.drawRectangle(new org_aswing_graphics_Pen(this.color,this.thickness),b.x + t / 2,b.y + t / 2,b.width - t,b.height - t); else g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(this.color),b.x,b.y,b.width,b.height,this.round,t);
	}
	,getBorderInsetsImp: function(com,bounds) {
		var width = Std["int"](Math.ceil(this.thickness + this.round - this.round * 0.707106781186547));
		return new org_aswing_Insets(width,width,width,width);
	}
	,getDisplayImp: function() {
		return null;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,getThickness: function() {
		return this.thickness;
	}
	,setThickness: function(thickness) {
		this.thickness = thickness;
	}
	,getRound: function() {
		return this.round;
	}
	,setRound: function(round) {
		this.round = round;
	}
	,__class__: org_aswing_border_LineBorder
});
var org_aswing_plaf_basic_border_LineBorderResource = function(interior,color,thickness,round) {
	if(round == null) round = 0;
	if(thickness == null) thickness = 1;
	org_aswing_border_LineBorder.call(this,interior,color,thickness,round);
};
$hxClasses["org.aswing.plaf.basic.border.LineBorderResource"] = org_aswing_plaf_basic_border_LineBorderResource;
org_aswing_plaf_basic_border_LineBorderResource.__name__ = ["org","aswing","plaf","basic","border","LineBorderResource"];
org_aswing_plaf_basic_border_LineBorderResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_basic_border_LineBorderResource.__super__ = org_aswing_border_LineBorder;
org_aswing_plaf_basic_border_LineBorderResource.prototype = $extend(org_aswing_border_LineBorder.prototype,{
	__class__: org_aswing_plaf_basic_border_LineBorderResource
});
var jive_plaf_flat_border_TableLineBorder = function(interior,color,thickness,round) {
	if(round == null) round = 0;
	if(thickness == null) thickness = 1;
	org_aswing_plaf_basic_border_LineBorderResource.call(this,interior,color,thickness,round);
};
$hxClasses["jive.plaf.flat.border.TableLineBorder"] = jive_plaf_flat_border_TableLineBorder;
jive_plaf_flat_border_TableLineBorder.__name__ = ["jive","plaf","flat","border","TableLineBorder"];
jive_plaf_flat_border_TableLineBorder.__super__ = org_aswing_plaf_basic_border_LineBorderResource;
jive_plaf_flat_border_TableLineBorder.prototype = $extend(org_aswing_plaf_basic_border_LineBorderResource.prototype,{
	getBorderInsetsImp: function(com,bounds) {
		return new org_aswing_Insets(0,0,1,0);
	}
	,__class__: jive_plaf_flat_border_TableLineBorder
});
var jive_plaf_flat_border_TextCellComponentBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.border.TextCellComponentBorder"] = jive_plaf_flat_border_TextCellComponentBorder;
jive_plaf_flat_border_TextCellComponentBorder.__name__ = ["jive","plaf","flat","border","TextCellComponentBorder"];
jive_plaf_flat_border_TextCellComponentBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
jive_plaf_flat_border_TextCellComponentBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		var tc;
		tc = js_Boot.__instanceof(c,jive_plaf_flat_TextCellComponent)?c:null;
		if(null == tc) return;
		b = b.clone();
		var brush = new org_aswing_graphics_SolidBrush(c.get_background().offsetHLS(0,-0.1 * tc.transitBackgroundFactor,0));
		var round = c.get_styleTune().round;
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		if(tc.isFirst) {
			g.fillRoundRect(brush,b.x,b.y,b.width,2 * round,round);
			g.fillRectangle(brush,b.x,b.y + round,b.width,b.height - round);
		} else if(tc.isLast) {
			g.fillRoundRect(brush,b.x,b.y + b.height - 2 * round,b.width,2 * round,round);
			g.fillRectangle(brush,b.x,b.y,b.width,b.height - round);
		} else g.fillRectangle(brush,b.x,b.y,b.width,b.height);
	}
	,getBorderInsets: function(c,b) {
		return new org_aswing_Insets(org_aswing_UIManager.get("textVerticalMarginSize"),org_aswing_UIManager.get("textHorizontalMarginSize"),org_aswing_UIManager.get("textVerticalMarginSize"),org_aswing_UIManager.get("textHorizontalMarginSize"));
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_border_TextCellComponentBorder
};
var org_aswing_Icon = function() { };
$hxClasses["org.aswing.Icon"] = org_aswing_Icon;
org_aswing_Icon.__name__ = ["org","aswing","Icon"];
org_aswing_Icon.__interfaces__ = [org_aswing_Decorator];
org_aswing_Icon.prototype = {
	__class__: org_aswing_Icon
};
var jive_plaf_flat_icon_ExpandIcon = function(size,color,expanded) {
	if(expanded == null) expanded = false;
	if(size == null) size = 16;
	if(null == color) color = org_aswing_ASColor.LIGHT_GRAY;
	this.size = size;
	this.color = color;
	this.expanded = expanded;
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.icon.ExpandIcon"] = jive_plaf_flat_icon_ExpandIcon;
jive_plaf_flat_icon_ExpandIcon.__name__ = ["jive","plaf","flat","icon","ExpandIcon"];
jive_plaf_flat_icon_ExpandIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_ExpandIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.set_x(x);
		this.shape.set_y(y);
		x = 0;
		y = 0;
		var g1 = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		g1.beginFill(new org_aswing_graphics_SolidBrush(this.color));
		g1.moveTo(0,0);
		if(this.expanded) {
			g1.lineTo(this.size,0);
			g1.lineTo(this.size / 2,3 * this.size / 4);
		} else {
			g1.lineTo(3 * this.size / 4,this.size / 2);
			g1.lineTo(0,this.size);
		}
		g1.lineTo(0,0);
		g1.endFill();
	}
	,getIconHeight: function(c) {
		return this.size | 0;
	}
	,getIconWidth: function(c) {
		return this.size | 0;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_icon_ExpandIcon
};
var jive_plaf_flat_icon_FlatCheckBoxIcon = function() {
	this.sprite = new openfl_display_Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl_display_Sprite();
	this.dot = new openfl_display_Sprite();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["jive.plaf.flat.icon.FlatCheckBoxIcon"] = jive_plaf_flat_icon_FlatCheckBoxIcon;
jive_plaf_flat_icon_FlatCheckBoxIcon.__name__ = ["jive","plaf","flat","icon","FlatCheckBoxIcon"];
jive_plaf_flat_icon_FlatCheckBoxIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_FlatCheckBoxIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_JCheckBox)?c:null;
		var model = b.getModel();
		this.box.get_graphics().clear();
		var g1 = new org_aswing_graphics_Graphics2D(this.box.get_graphics());
		var w = this.getIconWidth(c);
		var h = this.getIconHeight(c);
		var cl = c.get_background();
		var drawDot = model.isArmed() || model.isSelected() || model.isRollOver();
		if(b.transitBackgroundFactor < 0) cl = org_aswing_ASColor.getColorBetween(c.get_background(),c.get_mideground(),-b.transitBackgroundFactor);
		if(!b.get_enabled()) cl = cl.offsetHLS(0,0.1,-0.4);
		g1.fillRoundRect(new org_aswing_graphics_SolidBrush(cl),x,y,w,h,b.get_styleTune().round);
		this.dot.get_graphics().clear();
		if(drawDot) {
			g1 = new org_aswing_graphics_Graphics2D(this.dot.get_graphics());
			cl = b.tickColor;
			g1.beginDraw(new org_aswing_graphics_Pen(cl,1.6));
			g1.moveTo(x + w * 5 / 20,y + h / 2);
			g1.lineTo(x + w * 9 / 20,y + h * 14 / 20);
			g1.lineTo(x + w * 15 / 20,y + h * 7 / 20);
			g1.endDraw();
		}
		this.dot.set_visible(drawDot);
	}
	,getIconHeight: function(c) {
		if(null != org_aswing_UIManager.get("iconSize")) return org_aswing_UIManager.get("iconSize"); else return 20;
	}
	,getIconWidth: function(c) {
		if(null != org_aswing_UIManager.get("iconSize")) return org_aswing_UIManager.get("iconSize"); else return 20;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: jive_plaf_flat_icon_FlatCheckBoxIcon
};
var org_aswing_plaf_basic_icon_SolidArrowIcon = function(arrow,size,color) {
	this.arrow = arrow;
	this.width = size;
	this.height = size;
	this.shape = new openfl_display_Shape();
	this.paintIconWithColor(color);
};
$hxClasses["org.aswing.plaf.basic.icon.SolidArrowIcon"] = org_aswing_plaf_basic_icon_SolidArrowIcon;
org_aswing_plaf_basic_icon_SolidArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","SolidArrowIcon"];
org_aswing_plaf_basic_icon_SolidArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_SolidArrowIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.set_x(x);
		this.shape.set_y(y);
	}
	,paintIconWithColor: function(cl) {
		var x = 0;
		var y = 0;
		this.shape.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var center = new openfl_geom_Point(x + this.width / 2,y + this.height / 2);
		var w = this.width;
		var ps1 = [];
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		g.fillPolygon(new org_aswing_graphics_SolidBrush(cl),ps1);
	}
	,nextPoint: function(op,direction,distance) {
		return new openfl_geom_Point(op.x + Math.cos(direction) * distance,op.y + Math.sin(direction) * distance);
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,setArrow: function(arrow) {
		this.arrow = arrow;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_SolidArrowIcon
};
var jive_plaf_flat_icon_FlatComboBoxArrowIcon = function() {
	org_aswing_plaf_basic_icon_SolidArrowIcon.call(this,Math.PI / 2,Std["int"](org_aswing_UIManager.get("iconSize") / 2),org_aswing_ASColor.BLACK);
};
$hxClasses["jive.plaf.flat.icon.FlatComboBoxArrowIcon"] = jive_plaf_flat_icon_FlatComboBoxArrowIcon;
jive_plaf_flat_icon_FlatComboBoxArrowIcon.__name__ = ["jive","plaf","flat","icon","FlatComboBoxArrowIcon"];
jive_plaf_flat_icon_FlatComboBoxArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource];
jive_plaf_flat_icon_FlatComboBoxArrowIcon.__super__ = org_aswing_plaf_basic_icon_SolidArrowIcon;
jive_plaf_flat_icon_FlatComboBoxArrowIcon.prototype = $extend(org_aswing_plaf_basic_icon_SolidArrowIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		org_aswing_plaf_basic_icon_SolidArrowIcon.prototype.updateIcon.call(this,c,g,x,y);
		var m;
		m = js_Boot.__instanceof(c,org_aswing_JButton)?c:null;
		if(null == m) return;
		this.paintIconWithColor(m.get_selected() || m.get_model().isRollOver()?m.get_foreground():m.get_mideground());
	}
	,__class__: jive_plaf_flat_icon_FlatComboBoxArrowIcon
});
var jive_plaf_flat_icon_FlatMenuArrowIcon = function() {
	org_aswing_plaf_basic_icon_SolidArrowIcon.call(this,0,12,org_aswing_ASColor.BLACK);
};
$hxClasses["jive.plaf.flat.icon.FlatMenuArrowIcon"] = jive_plaf_flat_icon_FlatMenuArrowIcon;
jive_plaf_flat_icon_FlatMenuArrowIcon.__name__ = ["jive","plaf","flat","icon","FlatMenuArrowIcon"];
jive_plaf_flat_icon_FlatMenuArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource];
jive_plaf_flat_icon_FlatMenuArrowIcon.__super__ = org_aswing_plaf_basic_icon_SolidArrowIcon;
jive_plaf_flat_icon_FlatMenuArrowIcon.prototype = $extend(org_aswing_plaf_basic_icon_SolidArrowIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		org_aswing_plaf_basic_icon_SolidArrowIcon.prototype.updateIcon.call(this,c,g,x,y);
		var m;
		m = js_Boot.__instanceof(c,org_aswing_JMenu)?c:null;
		if(null == m) return;
		if(m.isTopLevelMenu()) this.arrow = Math.PI / 2; else this.arrow = 0.0;
		this.paintIconWithColor(m.get_selected() || m.get_model().isRollOver()?m.get_foreground():m.get_background().offsetHLS(0,0.1,0));
	}
	,__class__: jive_plaf_flat_icon_FlatMenuArrowIcon
});
var jive_plaf_flat_icon_FlatRadioButtonIcon = function() {
	this.sprite = new openfl_display_Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl_display_Sprite();
	this.dot = new openfl_display_Sprite();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["jive.plaf.flat.icon.FlatRadioButtonIcon"] = jive_plaf_flat_icon_FlatRadioButtonIcon;
jive_plaf_flat_icon_FlatRadioButtonIcon.__name__ = ["jive","plaf","flat","icon","FlatRadioButtonIcon"];
jive_plaf_flat_icon_FlatRadioButtonIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_FlatRadioButtonIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_JRadioButton)?c:null;
		var model = b.getModel();
		this.box.get_graphics().clear();
		var g1 = new org_aswing_graphics_Graphics2D(this.box.get_graphics());
		var w = this.getIconWidth(c);
		var h = this.getIconHeight(c);
		var cl = c.get_background();
		var drawDot = model.isArmed() || model.isSelected() || model.isRollOver();
		if(b.transitBackgroundFactor < 0) cl = org_aswing_ASColor.getColorBetween(c.get_background(),c.get_mideground(),-b.transitBackgroundFactor);
		if(!b.get_enabled()) cl = cl.offsetHLS(0,0.1,-0.4);
		g1.fillCircle(new org_aswing_graphics_SolidBrush(cl),w / 2,h / 2,w * 10 / 20);
		g1.fillCircle(new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(16777215)),w / 2,h / 2,w * 6 / 20);
		this.dot.get_graphics().clear();
		if(drawDot) {
			g1 = new org_aswing_graphics_Graphics2D(this.dot.get_graphics());
			g1.fillCircle(new org_aswing_graphics_SolidBrush(cl),w / 2,h / 2,w * 3 / 20);
		}
		this.dot.set_visible(drawDot);
	}
	,getIconHeight: function(c) {
		if(null != org_aswing_UIManager.get("iconSize")) return org_aswing_UIManager.get("iconSize"); else return 20;
	}
	,getIconWidth: function(c) {
		if(null != org_aswing_UIManager.get("iconSize")) return org_aswing_UIManager.get("iconSize"); else return 20;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: jive_plaf_flat_icon_FlatRadioButtonIcon
};
var jive_plaf_flat_icon_FlatSliderThumbIcon = function() {
	this.thumb = new openfl_display_Sprite();
};
$hxClasses["jive.plaf.flat.icon.FlatSliderThumbIcon"] = jive_plaf_flat_icon_FlatSliderThumbIcon;
jive_plaf_flat_icon_FlatSliderThumbIcon.__name__ = ["jive","plaf","flat","icon","FlatSliderThumbIcon"];
jive_plaf_flat_icon_FlatSliderThumbIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_FlatSliderThumbIcon.prototype = {
	getPropertyPrefix: function() {
		return "Slider.";
	}
	,initThumb: function(c) {
		var upState = new openfl_display_Shape();
		var g = new org_aswing_graphics_Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,true,false);
		var overState = new openfl_display_Shape();
		g = new org_aswing_graphics_Graphics2D(overState.get_graphics());
		this.paintThumb(g,c,true,true);
		var downState = new openfl_display_Shape();
		g = new org_aswing_graphics_Graphics2D(downState.get_graphics());
		this.paintThumb(g,c,true,true,true);
		this.enabledButton = new org_aswing_SimpleButton();
		this.enabledButton.upState = upState;
		this.enabledButton.overState = upState;
		this.enabledButton.downState = downState;
		this.enabledButton.hitTestState = upState;
		this.enabledButton.useHandCursor = false;
		this.enabledButton.show();
		this.thumb.addChild(this.enabledButton);
		upState = new openfl_display_Shape();
		g = new org_aswing_graphics_Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,false,false);
		this.disabledButton = new org_aswing_SimpleButton();
		this.disabledButton.upState = upState;
		this.disabledButton.overState = upState;
		this.disabledButton.downState = upState;
		this.disabledButton.hitTestState = upState;
		this.disabledButton.useHandCursor = false;
		this.disabledButton.show();
		this.thumb.addChild(this.disabledButton);
		this.disabledButton.set_visible(false);
	}
	,paintThumb: function(g,c,enabled,over,down) {
		if(down == null) down = false;
		var tune = c.getStyleTune().get_mide();
		var cl = c.getMideground().offsetHLS(0,0.05,0);
		if(enabled != true) cl = cl.offsetHLS(0,0.1,-0.5); else if(down) cl = cl.offsetHLS(0,-0.1,0); else if(over) cl = cl.offsetHLS(0,0.05,0);
		var w = this.getIconWidth(null);
		var h = this.getIconHeight(null);
		g.fillEllipse(new org_aswing_graphics_SolidBrush(cl),0,0,w,h);
	}
	,updateIcon: function(c,g,x,y) {
		if(this.enabledButton == null) this.initThumb(c);
		this.thumb.set_x(x);
		this.thumb.set_y(y);
		this.disabledButton.set_visible(!c.isEnabled());
		this.enabledButton.set_visible(c.isEnabled());
	}
	,getIconHeight: function(c) {
		return 15;
	}
	,getIconWidth: function(c) {
		return 15;
	}
	,getDisplay: function(c) {
		return this.thumb;
	}
	,__class__: jive_plaf_flat_icon_FlatSliderThumbIcon
};
var jive_plaf_flat_icon_FrameIcon = function(width) {
	if(width == null) width = 0;
	if(0 == width) width = org_aswing_UIManager.get("iconSize");
	this.width = width;
	this.height = width;
	this.sprite = new openfl_display_Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl_display_Shape();
	this.dot = new openfl_display_Shape();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["jive.plaf.flat.icon.FrameIcon"] = jive_plaf_flat_icon_FrameIcon;
jive_plaf_flat_icon_FrameIcon.__name__ = ["jive","plaf","flat","icon","FrameIcon"];
jive_plaf_flat_icon_FrameIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_FrameIcon.prototype = {
	getColor: function(c) {
		return c.getMideground();
	}
	,updateIcon: function(c,g,x,y) {
		this.box.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.box.get_graphics());
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(b == null) return;
		var bounds = new org_aswing_geom_IntRectangle(x,y,this.width,this.height);
		bounds.width -= 1;
		bounds.height -= 1;
		var cl = c.get_mideground();
		var model = b.getModel();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		if(!b.isEnabled()) cl = cl.offsetHLS(0,0.2,0); else if(model.isRollOver()) cl = cl.offsetHLS(0,-0.2,0);
		var box_f = [];
		box_f.push(new openfl_filters_DropShadowFilter(1,45,16777215,c.get_styleTune().shadowAlpha * shadowScale,1,1,1,1));
		this.box.set_filters(box_f);
		this.dot.get_graphics().clear();
		this.updateIconImp(cl,new org_aswing_graphics_Graphics2D(this.dot.get_graphics()),x,y);
	}
	,updateIconImp: function(color,g,x,y) {
	}
	,getSize: function() {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,getIconWidth: function(c) {
		return this.height;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: jive_plaf_flat_icon_FrameIcon
};
var jive_plaf_flat_icon_FrameCloseIcon = function() {
	jive_plaf_flat_icon_FrameIcon.call(this);
};
$hxClasses["jive.plaf.flat.icon.FrameCloseIcon"] = jive_plaf_flat_icon_FrameCloseIcon;
jive_plaf_flat_icon_FrameCloseIcon.__name__ = ["jive","plaf","flat","icon","FrameCloseIcon"];
jive_plaf_flat_icon_FrameCloseIcon.__super__ = jive_plaf_flat_icon_FrameIcon;
jive_plaf_flat_icon_FrameCloseIcon.prototype = $extend(jive_plaf_flat_icon_FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 4;
		var w = this.width - 1 - gap * 2;
		var h = this.height - 1 - gap * 2;
		var x1 = x + gap;
		var y1 = y + gap;
		var lightPane = new org_aswing_graphics_Pen(c,2,true,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.ROUND);
		g.drawLine(lightPane,x1,y1,x1 + w,y1 + h);
		g.drawLine(lightPane,x1 + w,y1,x1,y1 + h);
	}
	,__class__: jive_plaf_flat_icon_FrameCloseIcon
});
var jive_plaf_flat_icon_MinusIcon = function(size,color) {
	this.width = size;
	this.height = size;
	this.color = color;
	this.shape = new openfl_display_Shape();
	var x = 0;
	var y = 0;
	var g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
	var pen = new org_aswing_graphics_Pen(color,2);
	var halfSize = size / 2;
	g.drawLine(pen,0,halfSize,size,halfSize);
};
$hxClasses["jive.plaf.flat.icon.MinusIcon"] = jive_plaf_flat_icon_MinusIcon;
jive_plaf_flat_icon_MinusIcon.__name__ = ["jive","plaf","flat","icon","MinusIcon"];
jive_plaf_flat_icon_MinusIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_MinusIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.set_x(x);
		this.shape.set_y(y);
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_icon_MinusIcon
};
var jive_plaf_flat_icon_PlusIcon = function(size,color) {
	this.width = size;
	this.height = size;
	this.color = color;
	this.shape = new openfl_display_Shape();
	var x = 0;
	var y = 0;
	var g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
	var pen = new org_aswing_graphics_Pen(color,2);
	var halfSize = size / 2;
	g.drawLine(pen,0,halfSize,size,halfSize);
	g.drawLine(pen,halfSize,0,halfSize,size);
};
$hxClasses["jive.plaf.flat.icon.PlusIcon"] = jive_plaf_flat_icon_PlusIcon;
jive_plaf_flat_icon_PlusIcon.__name__ = ["jive","plaf","flat","icon","PlusIcon"];
jive_plaf_flat_icon_PlusIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
jive_plaf_flat_icon_PlusIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.set_x(x);
		this.shape.set_y(y);
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: jive_plaf_flat_icon_PlusIcon
};
var jive_plaf_flat_tabbedpane_FlatTabBackground = function(tab) {
	this.tab = tab;
	this.shape = new openfl_display_Shape();
};
$hxClasses["jive.plaf.flat.tabbedpane.FlatTabBackground"] = jive_plaf_flat_tabbedpane_FlatTabBackground;
jive_plaf_flat_tabbedpane_FlatTabBackground.__name__ = ["jive","plaf","flat","tabbedpane","FlatTabBackground"];
jive_plaf_flat_tabbedpane_FlatTabBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
jive_plaf_flat_tabbedpane_FlatTabBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,bounds) {
		this.shape.get_graphics().clear();
		var button;
		button = js_Boot.__instanceof(c,jive_plaf_flat_tabbedpane_FlatTabButton)?c:null;
		if(button != null && this.tab != null) {
			bounds = bounds.clone();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var model = button.get_model();
			var color = button.normalColor;
			if(button.transitBackgroundFactor < 0) color = org_aswing_ASColor.getColorBetween(button.normalColor,button.selectedColor,-button.transitBackgroundFactor); else color = org_aswing_ASColor.getColorBetween(button.normalColor,button.rolloverColor,button.transitBackgroundFactor);
			var placement = this.tab.getTabPlacement();
			if(placement == 1) bounds.height += Std["int"](c.get_styleTune().round * 2); else if(placement == 3) {
				bounds.height += Std["int"](c.get_styleTune().round * 2);
				bounds.y -= Std["int"](c.get_styleTune().round * 2);
			} else if(placement == 2) bounds.width += Std["int"](c.get_styleTune().round * 2); else {
				bounds.width += Std["int"](c.get_styleTune().round * 2);
				bounds.x -= Std["int"](c.get_styleTune().round * 2);
			}
			if(null != color) g.fillRoundRect(new org_aswing_graphics_SolidBrush(color),bounds.x,bounds.y,bounds.width,bounds.height,c.get_styleTune().round);
			if(model.isSelected()) g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(button.borderColor),bounds.x,bounds.y,bounds.width,bounds.height,c.get_styleTune().round,1,c.get_styleTune().round - 1);
		}
	}
	,__class__: jive_plaf_flat_tabbedpane_FlatTabBackground
};
var jive_plaf_flat_tabbedpane_FlatTabButton = function() {
	org_aswing_JButton.call(this);
	this.setName("FlatTabButton");
};
$hxClasses["jive.plaf.flat.tabbedpane.FlatTabButton"] = jive_plaf_flat_tabbedpane_FlatTabButton;
jive_plaf_flat_tabbedpane_FlatTabButton.__name__ = ["jive","plaf","flat","tabbedpane","FlatTabButton"];
jive_plaf_flat_tabbedpane_FlatTabButton.__super__ = org_aswing_JButton;
jive_plaf_flat_tabbedpane_FlatTabButton.prototype = $extend(org_aswing_JButton.prototype,{
	calculateTargetBackgroundTransitionFactor: function() {
		if(this.get_model().isPressed() || this.get_model().isSelected()) return -1.0; else if(this.get_model().isRollOver()) return 1.0; else return 0.0;
	}
	,getUIClassID: function() {
		return "TabButtonUI";
	}
	,getDefaultBasicUIClass: function() {
		return jive_plaf_flat_tabbedpane_TabButtonUI;
	}
	,__class__: jive_plaf_flat_tabbedpane_FlatTabButton
});
var org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab = function() {
	this.placement = 0;
};
$hxClasses["org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab"] = org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab;
org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab.__name__ = ["org","aswing","plaf","basic","tabbedpane","BasicTabbedPaneTab"];
org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab.__interfaces__ = [org_aswing_plaf_basic_tabbedpane_Tab];
org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab.prototype = {
	initTab: function(owner) {
		this.owner = owner;
		this.button = this.createHeaderButton();
	}
	,setTabPlacement: function(tp) {
		this.placement = tp;
	}
	,getTabPlacement: function() {
		return this.placement;
	}
	,createHeaderButton: function() {
		var btn = new org_aswing_JButton();
		btn.setBackgroundDecorator(new org_aswing_plaf_basic_tabbedpane_TabBackground(this));
		btn.setTextFilters([]);
		return btn;
	}
	,setTextAndIcon: function(text,icon) {
		this.button.setText(text);
		this.button.setIcon(icon);
	}
	,setFont: function(font) {
		this.button.setFont(font);
	}
	,setForeground: function(color) {
		this.button.setForeground(color);
	}
	,setSelected: function(b) {
		this.button.setSelected(b);
	}
	,setVerticalAlignment: function(alignment) {
		this.button.setVerticalAlignment(alignment);
	}
	,setHorizontalAlignment: function(alignment) {
		this.button.setHorizontalAlignment(alignment);
	}
	,setVerticalTextPosition: function(textPosition) {
		this.button.setVerticalTextPosition(textPosition);
	}
	,setHorizontalTextPosition: function(textPosition) {
		this.button.setHorizontalTextPosition(textPosition);
	}
	,setIconTextGap: function(iconTextGap) {
		this.button.setIconTextGap(iconTextGap);
	}
	,setMargin: function(m) {
		this.button.setMargin(m);
	}
	,getTabComponent: function() {
		return this.button;
	}
	,__class__: org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab
};
var jive_plaf_flat_tabbedpane_FlatTabbedPaneTab = function() {
	org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab.call(this);
};
$hxClasses["jive.plaf.flat.tabbedpane.FlatTabbedPaneTab"] = jive_plaf_flat_tabbedpane_FlatTabbedPaneTab;
jive_plaf_flat_tabbedpane_FlatTabbedPaneTab.__name__ = ["jive","plaf","flat","tabbedpane","FlatTabbedPaneTab"];
jive_plaf_flat_tabbedpane_FlatTabbedPaneTab.__super__ = org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab;
jive_plaf_flat_tabbedpane_FlatTabbedPaneTab.prototype = $extend(org_aswing_plaf_basic_tabbedpane_BasicTabbedPaneTab.prototype,{
	createHeaderButton: function() {
		var btn = new jive_plaf_flat_tabbedpane_FlatTabButton();
		btn.setBackgroundDecorator(new jive_plaf_flat_tabbedpane_FlatTabBackground(this));
		btn.setTextFilters([]);
		return btn;
	}
	,__class__: jive_plaf_flat_tabbedpane_FlatTabbedPaneTab
});
var jive_plaf_flat_tabbedpane_TabButtonUI = function() {
	org_aswing_plaf_basic_BasicButtonUI.call(this);
};
$hxClasses["jive.plaf.flat.tabbedpane.TabButtonUI"] = jive_plaf_flat_tabbedpane_TabButtonUI;
jive_plaf_flat_tabbedpane_TabButtonUI.__name__ = ["jive","plaf","flat","tabbedpane","TabButtonUI"];
jive_plaf_flat_tabbedpane_TabButtonUI.__super__ = org_aswing_plaf_basic_BasicButtonUI;
jive_plaf_flat_tabbedpane_TabButtonUI.prototype = $extend(org_aswing_plaf_basic_BasicButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "TabButton.";
	}
	,installUI: function(c) {
		org_aswing_plaf_basic_BasicButtonUI.prototype.installUI.call(this,c);
		var tb = c;
		var pp = this.getPropertyPrefix();
		if(null == tb.normalColor || js_Boot.__instanceof(tb.normalColor,org_aswing_plaf_UIResource)) tb.normalColor = this.getColor(pp + "normalColor");
		if(null == tb.selectedColor || js_Boot.__instanceof(tb.selectedColor,org_aswing_plaf_UIResource)) tb.selectedColor = this.getColor(pp + "selectedColor");
		if(null == tb.rolloverColor || js_Boot.__instanceof(tb.rolloverColor,org_aswing_plaf_UIResource)) tb.rolloverColor = this.getColor(pp + "rolloverColor");
		if(null == tb.borderColor || js_Boot.__instanceof(tb.borderColor,org_aswing_plaf_UIResource)) tb.borderColor = this.getColor(pp + "borderColor");
	}
	,__class__: jive_plaf_flat_tabbedpane_TabButtonUI
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") return new XMLHttpRequest();
	if(typeof ActiveXObject != "undefined") return new ActiveXObject("Microsoft.XMLHTTP");
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime_Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime_Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime_Assets.loadBytes = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime_Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime_Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime_Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime_Assets.loadLibrary = function(name,handler) {
	lime_Assets.initialize();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.eventCallback = lime_Assets.library_onEvent;
		library.load(handler);
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime_Assets.loadText = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) lime_Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime_Assets.library_onEvent;
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.unload();
		library.eventCallback = null;
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onEvent = function(library,type) {
	if(type == "change") lime_Assets.cache.clear();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			this.setFrameRate(config.fps);
			var $window = new lime_ui_Window(config);
			var renderer = new lime_graphics_Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) this.parent.windows[0].onKeyDown.remove(listeners[i]); else i++;
				}
				if(this.parent.windows[0].backend.getEnableTextEvents()) {
					var listeners1 = this.parent.windows[0].onTextInput.listeners;
					var repeat1 = this.parent.windows[0].onTextInput.repeat;
					var i1 = 0;
					while(i1 < listeners1.length) {
						listeners1[i1](String.fromCharCode(event.keyCode));
						if(!repeat1[i1]) this.parent.windows[0].onTextInput.remove(listeners1[i1]); else i1++;
					}
				}
			} else {
				var listeners2 = this.parent.windows[0].onKeyUp.listeners;
				var repeat2 = this.parent.windows[0].onKeyUp.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2](keyCode,modifier);
					if(!repeat2[i2]) this.parent.windows[0].onKeyUp.remove(listeners2[i2]); else i2++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var listeners = this.parent.onUpdate.listeners;
			var repeat = this.parent.onUpdate.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](this.deltaTime | 0);
				if(!repeat[i]) this.parent.onUpdate.remove(listeners[i]); else i++;
			}
			if(this.parent.renderers[0] != null) {
				var listeners1 = this.parent.renderers[0].onRender.listeners;
				var repeat1 = this.parent.renderers[0].onRender.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1](this.parent.renderers[0].context);
					if(!repeat1[i1]) this.parent.renderers[0].onRender.remove(listeners1[i1]); else i1++;
				}
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i]();
					if(!repeat[i]) this.parent.windows[0].onWindowFocusIn.remove(listeners[i]); else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1]();
					if(!repeat1[i1]) this.parent.windows[0].onWindowActivate.remove(listeners1[i1]); else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2]();
					if(!repeat2[i2]) this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]); else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3]();
					if(!repeat3[i3]) this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]); else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var i4 = 0;
					while(i4 < listeners4.length) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) this.parent.windows[0].onWindowResize.remove(listeners4[i4]); else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var i5 = 0;
				while(i5 < listeners5.length) {
					listeners5[i5]();
					if(!repeat5[i5]) this.parent.windows[0].onWindowClose.remove(listeners5[i5]); else i5++;
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i]();
				if(!repeat[i]) this.parent.onRenderContextLost.remove(listeners[i]); else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var i1 = 0;
			while(i1 < listeners1.length) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) this.parent.onRenderContextRestored.remove(listeners1[i1]); else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) this.parent.onMouseDown.remove(listeners[i]); else i++;
				}
				break;
			case "mouseenter":
				var listeners1 = this.parent.onWindowEnter.listeners;
				var repeat1 = this.parent.onWindowEnter.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1]();
					if(!repeat1[i1]) this.parent.onWindowEnter.remove(listeners1[i1]); else i1++;
				}
				break;
			case "mouseleave":
				var listeners2 = this.parent.onWindowLeave.listeners;
				var repeat2 = this.parent.onWindowLeave.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2]();
					if(!repeat2[i2]) this.parent.onWindowLeave.remove(listeners2[i2]); else i2++;
				}
				break;
			case "mouseup":
				var listeners3 = this.parent.onMouseUp.listeners;
				var repeat3 = this.parent.onMouseUp.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3](x,y,event.button);
					if(!repeat3[i3]) this.parent.onMouseUp.remove(listeners3[i3]); else i3++;
				}
				break;
			case "mousemove":
				var listeners4 = this.parent.onMouseMove.listeners;
				var repeat4 = this.parent.onMouseMove.repeat;
				var i4 = 0;
				while(i4 < listeners4.length) {
					listeners4[i4](x,y);
					if(!repeat4[i4]) this.parent.onMouseMove.remove(listeners4[i4]); else i4++;
				}
				break;
			default:
			}
		} else {
			var listeners5 = this.parent.onMouseWheel.listeners;
			var repeat5 = this.parent.onMouseWheel.repeat;
			var i5 = 0;
			while(i5 < listeners5.length) {
				listeners5[i5](event.deltaX,-event.deltaY);
				if(!repeat5[i5]) this.parent.onMouseWheel.remove(listeners5[i5]); else i5++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](x,y,id);
				if(!repeat[i]) this.parent.onTouchStart.remove(listeners[i]); else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var i1 = 0;
			while(i1 < listeners1.length) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) this.parent.onTouchMove.remove(listeners1[i1]); else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var i2 = 0;
			while(i2 < listeners2.length) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) this.parent.onTouchEnd.remove(listeners2[i2]); else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTextEdit.add($bind(this,this.onTextEdit));
		window.onTextInput.add($bind(this,this.onTextInput));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowEnter.add($bind(this,this.onWindowEnter));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowLeave.add($bind(this,this.onWindowLeave));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTextEdit: function(text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(text,start,length);
		}
	}
	,onTextInput: function(text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(text);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowEnter: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowLeave: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		return index > -1;
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime_app_Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime_net_URLLoader();
				loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
				lime_app_Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime_net_URLLoader();
				lime_app_Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
};
lime_audio_AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime_graphics_ConsoleRenderContext
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this);
				this.buffer.data = null;
				this.buffer.__srcImageData = null;
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format == null || format == 0) {
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = byteArray.readUnsignedInt();
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) {
				var srcData = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				srcData.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event();
	this.onRenderContextRestored = new lime_app_Event();
	this.onRenderContextLost = new lime_app_Event();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	recreate: function(surface) {
	}
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,destroy: function() {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,reference: function() {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontFace: function(face) {
	}
	,setFontSize: function(size) {
	}
	,getFontOptions: function() {
		return 0;
	}
	,setFontOptions: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_referenceCount: function() {
		return 0;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",get_referenceCount:"get_referenceCount",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFont = function(font) {
};
$hxClasses["lime.graphics.cairo.CairoFont"] = lime_graphics_cairo_CairoFont;
lime_graphics_cairo_CairoFont.__name__ = ["lime","graphics","cairo","CairoFont"];
lime_graphics_cairo_CairoFont.prototype = {
	destroy: function() {
	}
	,__class__: lime_graphics_cairo_CairoFont
};
var lime_graphics_cairo_CairoFontOptions = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.graphics.cairo.CairoFontOptions"] = lime_graphics_cairo_CairoFontOptions;
lime_graphics_cairo_CairoFontOptions.__name__ = ["lime","graphics","cairo","CairoFontOptions"];
lime_graphics_cairo_CairoFontOptions.prototype = {
	get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_subpixelOrder: function() {
		return 0;
	}
	,set_subpixelOrder: function(value) {
		return value;
	}
	,get_hintStyle: function() {
		return 0;
	}
	,set_hintStyle: function(value) {
		return value;
	}
	,get_hintMetrics: function() {
		return 0;
	}
	,set_hintMetrics: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_CairoFontOptions
	,__properties__: {set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime_graphics_format_BMPType.RGB?24:32);
	data.writeInt(type == lime_graphics_format_BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime_utils_ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint.x >= sourceRect.width || destPoint.y >= sourceRect.height) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var r;
	var g;
	var b;
	var a;
	var mr;
	var mg;
	var mb;
	var ma;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) ma = mask >> 24 & 255; else ma = 255;
		mr = mask >> 16 & 255;
		mg = mask >> 8 & 255;
		mb = mask & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
		mr = mask >> 24 & 255;
		mg = mask >> 16 & 255;
		mb = mask >> 8 & 255;
		if(image.get_transparent()) ma = mask & 255; else ma = 255;
	}
	color = r | g << 8 | b << 16 | a << 24;
	mask = mr | mg << 8 | mb << 16 | mask << 24;
	var pix;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var ix = _g1++;
		var hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var iy = _g3++;
			pix = image.getPixel32(ix,iy);
			if(findColor) hit = (pix & mask) == color; else hit = (pix & mask) != color;
			if(hit) {
				if(ix < left) left = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var _ix = _g11++;
		var ix1 = image.width - 1 - _ix;
		var hit1 = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var iy1 = _g31++;
			pix = image.getPixel32(ix1,iy1);
			if(findColor) hit1 = (pix & mask) == color; else hit1 = (pix & mask) != color;
			if(hit1) {
				if(ix1 > right) right = ix1;
				break;
			}
		}
		if(hit1) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var iy2 = _g12++;
		var hit2 = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var ix2 = _g32++;
			pix = image.getPixel32(ix2,iy2);
			if(findColor) hit2 = (pix & mask) == color; else hit2 = (pix & mask) != color;
			if(hit2) {
				if(iy2 < top) top = iy2;
				break;
			}
		}
		if(hit2) break;
	}
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var _iy = _g13++;
		var iy3 = image.height - 1 - _iy;
		var hit3 = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var ix3 = _g33++;
			pix = image.getPixel32(ix3,iy3);
			if(findColor) hit3 = (pix & mask) == color; else hit3 = (pix & mask) != color;
			if(hit3) {
				if(iy3 > bottom) bottom = iy3;
				break;
			}
		}
		if(hit3) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return pixel >> 8 & 16777215;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime_utils_ByteArray(length * 4);
	byteArray.position = 0;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			byteArray.__set(destPosition++,pixel >> 24 & 255);
			byteArray.__set(destPosition++,pixel >> 16 & 255);
			byteArray.__set(destPosition++,pixel >> 8 & 255);
			byteArray.__set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	if(format == 0) color = color >> 8;
	var pixel = color;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
	255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = byteArray.readUnsignedInt();
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event();
	this.onProgress = new lime_app_Event();
	this.onOpen = new lime_app_Event();
	this.onIOError = new lime_app_Event();
	this.onHTTPStatus = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = ["lime","net","URLLoader"];
lime_net_URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](_g,s);
					if(!repeat[i]) self.onHTTPStatus.remove(listeners[i]); else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) self.onIOError.remove(listeners1[i1]); else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) self.onIOError.remove(listeners2[i2]); else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) self.onIOError.remove(listeners3[i3]); else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var i4 = 0;
				while(i4 < listeners4.length) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) self.onIOError.remove(listeners4[i4]); else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var i5 = 0;
				while(i5 < listeners5.length) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) self.onSecurityError.remove(listeners5[i5]); else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var i6 = 0;
				while(i6 < listeners6.length) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) self.onIOError.remove(listeners6[i6]); else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) this.onIOError.remove(listeners[i]); else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var i1 = 0;
		while(i1 < listeners1.length) {
			listeners1[i1](this);
			if(!repeat1[i1]) this.onOpen.remove(listeners1[i1]); else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](this);
			if(!repeat[i]) this.onComplete.remove(listeners[i]); else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) this.onProgress.remove(listeners[i]); else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = ["lime","net","URLRequest"];
lime_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime_net_URLRequestHeader.prototype = {
	__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = ["lime","net","URLVariables"];
lime_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime_net_URLVariables
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event();
	this.onError = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.doWork = new lime_app_Event();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			var listeners = this.onComplete.listeners;
			var repeat = this.onComplete.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](message);
				if(!repeat[i]) this.onComplete.remove(listeners[i]); else i++;
			}
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			var listeners = this.onError.listeners;
			var repeat = this.onError.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](message);
				if(!repeat[i]) this.onError.remove(listeners[i]); else i++;
			}
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			var listeners = this.onProgress.listeners;
			var repeat = this.onProgress.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](message);
				if(!repeat[i]) this.onProgress.remove(listeners[i]); else i++;
			}
		}
	}
	,__doWork: function() {
		var listeners = this.doWork.listeners;
		var repeat = this.doWork.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](this.__runMessage);
			if(!repeat[i]) this.doWork.remove(listeners[i]); else i++;
		}
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.fontsDirectory = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.findHaxeLib = function(library) {
	return "";
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime_system_System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_System.sysName = function() {
	return null;
};
lime_system_System.tryLoad = function(name,library,func,args) {
	return null;
};
lime_system_System.loaderTrace = function(message) {
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event();
	this.onError = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.doWork = new lime_app_Event();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	queue: function(id,message) {
		var listeners = this.doWork.listeners;
		var repeat = this.doWork.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.doWork.remove(listeners[i]); else i++;
		}
	}
	,sendComplete: function(id,message) {
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onComplete.remove(listeners[i]); else i++;
		}
	}
	,sendError: function(id,message) {
		var listeners = this.onError.listeners;
		var repeat = this.onError.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onError.remove(listeners[i]); else i++;
		}
	}
	,sendProgress: function(id,message) {
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onProgress.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : true, __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,id,message) {
	this.type = type;
	this.id = id;
	this.message = message;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Window = function(config) {
	this.onWindowRestore = new lime_app_Event();
	this.onWindowResize = new lime_app_Event();
	this.onWindowMove = new lime_app_Event();
	this.onWindowMinimize = new lime_app_Event();
	this.onWindowLeave = new lime_app_Event();
	this.onWindowFullscreen = new lime_app_Event();
	this.onWindowFocusOut = new lime_app_Event();
	this.onWindowFocusIn = new lime_app_Event();
	this.onWindowEnter = new lime_app_Event();
	this.onWindowDeactivate = new lime_app_Event();
	this.onWindowClose = new lime_app_Event();
	this.onWindowActivate = new lime_app_Event();
	this.onTouchStart = new lime_app_Event();
	this.onTouchMove = new lime_app_Event();
	this.onTouchEnd = new lime_app_Event();
	this.onTextInput = new lime_app_Event();
	this.onTextEdit = new lime_app_Event();
	this.onMouseWheel = new lime_app_Event();
	this.onMouseUp = new lime_app_Event();
	this.onMouseMoveRelative = new lime_app_Event();
	this.onMouseMove = new lime_app_Event();
	this.onMouseDown = new lime_app_Event();
	this.onKeyUp = new lime_app_Event();
	this.onKeyDown = new lime_app_Event();
	this.onGamepadDisconnect = new lime_app_Event();
	this.onGamepadConnect = new lime_app_Event();
	this.onGamepadButtonUp = new lime_app_Event();
	this.onGamepadButtonDown = new lime_app_Event();
	this.onGamepadAxisMove = new lime_app_Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents"}
};
var lime_utils__$ArrayBufferView_TAError = $hxClasses["lime.utils._ArrayBufferView.TAError"] = { __ename__ : true, __constructs__ : ["RangeError"] };
lime_utils__$ArrayBufferView_TAError.RangeError = ["RangeError",0];
lime_utils__$ArrayBufferView_TAError.RangeError.toString = $estr;
lime_utils__$ArrayBufferView_TAError.RangeError.__enum__ = lime_utils__$ArrayBufferView_TAError;
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = ["lime","utils","ByteArray"];
lime_utils_ByteArray.fromBytes = function(bytes) {
	var result = new lime_utils_ByteArray();
	result.byteView = new Uint8Array(bytes.b.bufferValue);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime_utils_ByteArray.readFile = function(path) {
	return null;
};
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 600, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if(_$UInt_UInt_$Impl_$.gt(0,offset) || _$UInt_UInt_$Impl_$.gt(0,length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b.bufferValue);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils_IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
lime_utils_IDataInput.__name__ = ["lime","utils","IDataInput"];
lime_utils_IDataInput.prototype = {
	__class__: lime_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
lime_utils_IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime_utils_IMemoryRange.prototype = {
	__class__: lime_utils_IMemoryRange
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion_RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Back = function() { };
$hxClasses["motion.easing.Back"] = motion_easing_Back;
motion_easing_Back.__name__ = ["motion","easing","Back"];
motion_easing_Back.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Back.get_easeIn = function() {
	return new motion_easing_BackEaseIn(1.70158);
};
motion_easing_Back.get_easeInOut = function() {
	return new motion_easing_BackEaseInOut(1.70158);
};
motion_easing_Back.get_easeOut = function() {
	return new motion_easing_BackEaseOut(1.70158);
};
var motion_easing_BackEaseIn = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseIn"] = motion_easing_BackEaseIn;
motion_easing_BackEaseIn.__name__ = ["motion","easing","BackEaseIn"];
motion_easing_BackEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseIn.prototype = {
	calculate: function(k) {
		return k * k * ((this.s + 1) * k - this.s);
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * ((this.s + 1) * t - this.s) + b;
	}
	,__class__: motion_easing_BackEaseIn
};
var motion_easing_BackEaseInOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseInOut"] = motion_easing_BackEaseInOut;
motion_easing_BackEaseInOut.__name__ = ["motion","easing","BackEaseInOut"];
motion_easing_BackEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) return 0.5 * (k * k * (((this.s *= 1.525) + 1) * k - this.s));
		return 0.5 * ((k -= 2) * k * (((this.s *= 1.525) + 1) * k + this.s) + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * (t * t * (((this.s *= 1.525) + 1) * t - this.s)) + b;
		return c / 2 * ((t -= 2) * t * (((this.s *= 1.525) + 1) * t + this.s) + 2) + b;
	}
	,__class__: motion_easing_BackEaseInOut
};
var motion_easing_BackEaseOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseOut"] = motion_easing_BackEaseOut;
motion_easing_BackEaseOut.__name__ = ["motion","easing","BackEaseOut"];
motion_easing_BackEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseOut.prototype = {
	calculate: function(k) {
		return (k = k - 1) * k * ((this.s + 1) * k + this.s) + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * ((this.s + 1) * t + this.s) + 1) + b;
	}
	,__class__: motion_easing_BackEaseOut
};
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quart = function() { };
$hxClasses["motion.easing.Quart"] = motion_easing_Quart;
motion_easing_Quart.__name__ = ["motion","easing","Quart"];
motion_easing_Quart.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Quart.get_easeIn = function() {
	return new motion_easing_QuartEaseIn();
};
motion_easing_Quart.get_easeInOut = function() {
	return new motion_easing_QuartEaseInOut();
};
motion_easing_Quart.get_easeOut = function() {
	return new motion_easing_QuartEaseOut();
};
var motion_easing_QuartEaseIn = function() {
};
$hxClasses["motion.easing.QuartEaseIn"] = motion_easing_QuartEaseIn;
motion_easing_QuartEaseIn.__name__ = ["motion","easing","QuartEaseIn"];
motion_easing_QuartEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t * t + b;
	}
	,__class__: motion_easing_QuartEaseIn
};
var motion_easing_QuartEaseInOut = function() {
};
$hxClasses["motion.easing.QuartEaseInOut"] = motion_easing_QuartEaseInOut;
motion_easing_QuartEaseInOut.__name__ = ["motion","easing","QuartEaseInOut"];
motion_easing_QuartEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k * k * k;
		return -0.5 * ((k -= 2) * k * k * k - 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	}
	,__class__: motion_easing_QuartEaseInOut
};
var motion_easing_QuartEaseOut = function() {
};
$hxClasses["motion.easing.QuartEaseOut"] = motion_easing_QuartEaseOut;
motion_easing_QuartEaseOut.__name__ = ["motion","easing","QuartEaseOut"];
motion_easing_QuartEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseOut.prototype = {
	calculate: function(k) {
		return -(--k * k * k * k - 1);
	}
	,ease: function(t,b,c,d) {
		return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	}
	,__class__: motion_easing_QuartEaseOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return lime_Assets.getBytes(id);
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 221, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 227, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.__image != null;
	return true;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime_Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl_Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 546, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 552, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl_Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		handler(openfl_Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			library.loadFont(symbolName,function(limeFont) {
				var font = openfl_text_Font.__fromLimeFont(limeFont);
				if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
				handler(font);
			});
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 611, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 617, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl_Assets.loadLibrary = function(name,handler) {
	lime_Assets.loadLibrary(name,handler);
};
openfl_Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl_Assets.getMusic(id,useCache));
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 695, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 701, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl_Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl_Assets.getSound(id,useCache));
};
openfl_Assets.loadText = function(id,handler) {
	lime_Assets.loadText(id,handler);
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl_Assets.cache.clear();
		openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function(target) {
	openfl_events_EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	var array = [a,b,c,d,tx,ty,0,0,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.__array = this1;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl_geom_Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl_geom_Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return (function($this) {
			var $r;
			var array = [$this.redMultiplier,0,0,0,$this.redOffset / 255,0,$this.greenMultiplier,0,0,$this.greenOffset / 255,0,0,$this.blueMultiplier,0,$this.blueOffset / 255,0,0,0,$this.alphaMultiplier,$this.alphaOffset / 255];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this));
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 145, className : "openfl.Lib", methodName : "trace"});
};
var openfl_Memory = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.data.getInt8(addr);
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	if(inBytes != null) openfl_Memory.len = inBytes.length; else openfl_Memory.len = 0;
};
openfl_Memory.setByte = function(addr,v) {
	openfl_Memory.gcRef.data.setUint8(addr,v);
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_TextFieldGraphics = function() { };
$hxClasses["openfl._internal.renderer.TextFieldGraphics"] = openfl__$internal_renderer_TextFieldGraphics;
openfl__$internal_renderer_TextFieldGraphics.__name__ = ["openfl","_internal","renderer","TextFieldGraphics"];
openfl__$internal_renderer_TextFieldGraphics.render = function(textField) {
	var bounds = textField.getBounds(null);
	openfl__$internal_renderer_TextFieldGraphics.update(textField,bounds);
	if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
	var graphics = textField.__graphics;
	graphics.clear();
	if(textField.border || textField.background) {
		if(textField.border) graphics.lineStyle(1,textField.borderColor);
		if(textField.background) graphics.beginFill(textField.backgroundColor);
		graphics.drawRect(bounds.x + 0.5,bounds.y + 0.5,bounds.width - 1,bounds.height - 1);
	}
	if(textField.__tileData != null) {
		var $it0 = textField.__tilesheets.keys();
		while( $it0.hasNext() ) {
			var tilesheet = $it0.next();
			graphics.drawTiles(tilesheet,textField.__tileData.h[tilesheet.__id__],true,4,textField.__tileDataLength.h[tilesheet.__id__]);
		}
	}
};
openfl__$internal_renderer_TextFieldGraphics.renderText = function(textField,text,format,offsetX,bounds) {
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(format);
	if(font != null && format.size != null) {
		if(!(openfl__$internal_renderer_TextFieldGraphics.glyphs.h.__keys__[font.__id__] != null)) {
			var value = new haxe_ds_IntMap();
			openfl__$internal_renderer_TextFieldGraphics.glyphs.set(font,value);
		}
		var size = format.size | 0;
		var fontGlyphs = openfl__$internal_renderer_TextFieldGraphics.glyphs.h[font.__id__];
		if(!fontGlyphs.h.hasOwnProperty(size)) {
			var value1 = font.renderGlyphs(font.getGlyphs(),size);
			fontGlyphs.h[size] = value1;
		}
		var images = fontGlyphs.h[size];
		if(!(openfl__$internal_renderer_TextFieldGraphics.bitmapData.h.__keys__[font.__id__] != null)) {
			var value2 = new haxe_ds_IntMap();
			openfl__$internal_renderer_TextFieldGraphics.bitmapData.set(font,value2);
		}
		var fontBitmapData = openfl__$internal_renderer_TextFieldGraphics.bitmapData.h[font.__id__];
		if(!fontBitmapData.h.hasOwnProperty(size)) {
			var width;
			var height;
			var data;
			var $it0 = images.iterator();
			while( $it0.hasNext() ) {
				var image1 = $it0.next();
				width = image1.buffer.width;
				height = image1.buffer.height;
				data = image1.get_data();
				break;
			}
			var bitmapData1 = new openfl_display_BitmapData(width,height);
			var _g = 0;
			while(_g < width) {
				var x1 = _g++;
				var _g1 = 0;
				while(_g1 < height) {
					var y1 = _g1++;
					var alpha = data[y1 * width + x1];
					var color = alpha << 24 | 16711680 | 65280 | 255;
					bitmapData1.setPixel32(x1,y1,color);
				}
			}
			fontBitmapData.h[size] = bitmapData1;
		}
		var bitmapData = fontBitmapData.h[size];
		if(!(openfl__$internal_renderer_TextFieldGraphics.tilesheets.h.__keys__[bitmapData.__id__] != null)) {
			var tilesheet1 = new openfl_display_Tilesheet(bitmapData);
			var tileID1 = new haxe_ds_IntMap();
			var image2;
			var index;
			var $it1 = images.keys();
			while( $it1.hasNext() ) {
				var key = $it1.next();
				image2 = images.h[key];
				index = tilesheet1.addTileRect(new openfl_geom_Rectangle(image2.offsetX,image2.offsetY,image2.width,image2.height));
				tileID1.h[key] = index;
			}
			openfl__$internal_renderer_TextFieldGraphics.tileIDs.set(bitmapData,tileID1);
			openfl__$internal_renderer_TextFieldGraphics.tilesheets.set(bitmapData,tilesheet1);
		}
		var tilesheet = openfl__$internal_renderer_TextFieldGraphics.tilesheets.h[bitmapData.__id__];
		var tileID = openfl__$internal_renderer_TextFieldGraphics.tileIDs.h[bitmapData.__id__];
		var r = (format.color >> 16 & 255) / 255;
		var g = (format.color >> 8 & 255) / 255;
		var b = (format.color & 255) / 255;
		var tlm = textField.getLineMetrics(0);
		var image;
		var x = offsetX;
		var y = 2 + tlm.ascent;
		var tileData;
		textField.__tilesheets.set(tilesheet,true);
		if(!(textField.__tileData.h.__keys__[tilesheet.__id__] != null)) {
			tileData = [];
			textField.__tileData.set(tilesheet,tileData);
			textField.__tileDataLength.set(tilesheet,0);
		}
		tileData = textField.__tileData.h[tilesheet.__id__];
		var offsetY = 0;
		var lines = text.split("\n");
		if(textField.__textLayout == null) textField.__textLayout = new lime_text_TextLayout();
		var textLayout = textField.__textLayout;
		var length = 0;
		var line_i = 0;
		var oldX = x;
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			tlm = textField.getLineMetrics(line_i);
			x = oldX;
			var _g11 = format.align;
			switch(_g11[1]) {
			case 0:case 2:
				x += 0;
				break;
			case 3:
				x += (textField.__width - 4 - tlm.width) / 2;
				break;
			case 1:
				x += textField.__width - 4 - tlm.width;
				break;
			}
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(size);
			textLayout.set_text(line);
			var _g12 = 0;
			var _g21 = textLayout.get_positions();
			while(_g12 < _g21.length) {
				var position = _g21[_g12];
				++_g12;
				image = images.h[position.glyph];
				if(image != null) {
					if(length >= tileData.length) {
						tileData.push(x + position.offset.x + image.x);
						tileData.push(y + position.offset.y - image.y);
						tileData.push(tileID.h[position.glyph]);
						tileData.push(r);
						tileData.push(g);
						tileData.push(b);
					} else {
						tileData[length] = x + position.offset.x + image.x;
						tileData[length + 1] = y + position.offset.y - image.y;
						tileData[length + 2] = tileID.h[position.glyph];
						tileData[length + 3] = r;
						tileData[length + 4] = g;
						tileData[length + 5] = b;
					}
					length += 6;
				}
				x += position.advance.x;
				y -= position.advance.y;
			}
			y += tlm.height;
			line_i++;
		}
		textField.__tileDataLength.set(tilesheet,length);
	}
};
openfl__$internal_renderer_TextFieldGraphics.update = function(textField,bounds) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl_text_TextFieldAutoSize.LEFT) {
			textField.__tilesheets = null;
			textField.__tileData = null;
			textField.__tileDataLength = null;
			textField.__dirty = false;
		} else {
			textField.__tilesheets = new haxe_ds_ObjectMap();
			if(textField.__tileData == null) {
				textField.__tileData = new haxe_ds_ObjectMap();
				textField.__tileDataLength = new haxe_ds_ObjectMap();
			}
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = openfl__$internal_renderer_cairo_CairoTextField.measureText(textField);
				if(textField.__ranges == null) openfl__$internal_renderer_TextFieldGraphics.renderText(textField,text,textField.__textFormat,2,bounds); else {
					var currentIndex = 0;
					var range;
					var offsetX = 2.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						range = textField.__ranges[i1];
						openfl__$internal_renderer_TextFieldGraphics.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,bounds);
						offsetX += measurements[i1];
					}
				}
			}
			var $it0 = textField.__tileData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(!(textField.__tilesheets.h.__keys__[key.__id__] != null)) {
					textField.__tileData.remove(key);
					textField.__tileDataLength.remove(key);
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(pattern);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = [];
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = [];
};
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var _g = 0;
	try {
		while(_g < commands.length) {
			var command = commands[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x2 - offsetX + radius,y2 - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 7:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(x3 - offsetX,y3 - offsetY,width,height);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				hasPath = true;
				x4 -= offsetX;
				y4 -= offsetY;
				var kappa = .5522848;
				var ox = width1 / 2 * kappa;
				var oy = height1 / 2 * kappa;
				var xe = x4 + width1;
				var ye = y4 + height1;
				var xm = x4 + width1 / 2;
				var ym = y4 + height1 / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x4,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x4,ym - oy,xm - ox,y4,xm,y4);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y4,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x4,ym + oy,x4,ym);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				closeGap = true;
				startX = x7;
				startY = y7;
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha = command[4];
				var color = command[3];
				var thickness = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(thickness == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(thickness);
					if(joints == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						switch(joints[1]) {
						case 0:
							$r = 0;
							break;
						case 2:
							$r = 2;
							break;
						default:
							$r = 1;
						}
						return $r;
					}(this)));
					if(caps == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						switch(caps[1]) {
						case 0:
							$r = 0;
							break;
						case 2:
							$r = 2;
							break;
						default:
							$r = 1;
						}
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(miterLimit == null?3:miterLimit);
					if(color != null) {
						var r = ((color & 16711680) >>> 16) / 255;
						var g = ((color & 65280) >>> 8) / 255;
						var b = (color & 255) / 255;
						if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
						if(alpha == 1 || alpha == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,alpha);
					}
				}
				break;
			case 14:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var type = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var smooth = command[5];
				var repeat = command[4];
				var matrix1 = command[3];
				var bitmap = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(bitmap,matrix1,repeat);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var smooth1 = command[5];
				var repeat1 = command[4];
				var matrix2 = command[3];
				var bitmap1 = command[2];
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(bitmap1,matrix2,repeat1);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = bitmap1;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = repeat1;
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var alpha1 = command[3];
				var rgb = command[2];
				if(alpha1 < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((rgb & 16711680) >>> 16) / 255,((rgb & 65280) >>> 8) / 255,(rgb & 255) / 255,alpha1);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var focalPointRatio1 = command[9];
				var interpolationMethod1 = command[8];
				var spreadMethod1 = command[7];
				var matrix3 = command[6];
				var ratios1 = command[5];
				var alphas1 = command[4];
				var colors1 = command[3];
				var type1 = command[2];
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 10:
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var v = vertices;
				var ind = indices;
				var uvt = uvtData;
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width3 = 0;
				var height3 = 0;
				if(!colorFill) {
					if(uvtData == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvtData = this1;
						var _g2 = 0;
						var _g1 = v.length / 2 | 0;
						while(_g2 < _g1) {
							var i1 = _g2++;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var data;
									var this3;
									this3 = new Array(uvtData.data.length + 10);
									data = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
									uvtData.data = data;
								}
								uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvtData.length;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var data1;
									var this4;
									this4 = new Array(uvtData.data.length + 10);
									data1 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
									uvtData.data = data1;
								}
								uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvtData.length;
						}
					}
					var skipT = uvtData.length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvtData,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width3 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height3 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width3 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height3 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a;
				var b1;
				var c;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y11;
				var x21;
				var y21;
				var x31;
				var y31;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a = i;
					b1 = i + 1;
					c = i + 2;
					iax = ind.data[a] * 2;
					iay = ind.data[a] * 2 + 1;
					ibx = ind.data[b1] * 2;
					iby = ind.data[b1] * 2 + 1;
					icx = ind.data[c] * 2;
					icy = ind.data[c] * 2 + 1;
					x11 = v.data[iax];
					y11 = v.data[iay];
					x21 = v.data[ibx];
					y21 = v.data[iby];
					x31 = v.data[icx];
					y31 = v.data[icy];
					switch(culling[1]) {
					case 2:
						if(!((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y11);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y21);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x31,y31);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y11);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y21);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x31,y31);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width3;
					uvx2 = uvt.data[ibx] * width3;
					uvx3 = uvt.data[icx] * width3;
					uvy1 = uvt.data[iay] * height3;
					uvy2 = uvt.data[iby] * height3;
					uvy3 = uvt.data[icy] * height3;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x31 - x21) - uvy2 * x31 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y31 + uvy1 * (y21 - y31) - uvy3 * y21 + (uvy3 - uvy2) * y11) / denom;
					t3 = (uvx1 * (x31 - x21) - uvx2 * x31 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y31 + uvx1 * (y21 - y31) - uvx3 * y21 + (uvx3 - uvx2) * y11) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x31) + uvy1 * (uvx2 * x31 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y21 - uvy2 * y31) + uvy1 * (uvx2 * y31 - uvx3 * y21) + (uvx3 * uvy2 - uvx2 * uvy3) * y11) / denom;
					var matrix4 = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix4);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth2 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				var useScale = (flags & 1) > 0;
				var useRotation = (flags & 2) > 0;
				var useTransform = (flags & 16) > 0;
				var useRGB = (flags & 4) > 0;
				var useAlpha = (flags & 8) > 0;
				var useRect = (flags & 32) > 0;
				var useOrigin = (flags & 64) > 0;
				var useBlendAdd = (flags & 65536) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = tileData.length;
				if(count >= 0 && totalCount > count) totalCount = count;
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				sheet.__bitmap.__sync();
				surface = sheet.__bitmap.getSurface();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				while(index < totalCount) {
					var i2 = tileData[index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = sheet.__tileRects[tileID];
						center = sheet.__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = sheet.__rectTile;
						rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
						center = sheet.__point;
						if(useOrigin) {
							center.x = tileData[index + 6];
							center.y = tileData[index + 7];
						} else {
							center.x = 0;
							center.y = 0;
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix5 = new lime_math_Matrix3(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix5);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(tileData[index],tileData[index + 1]);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(tileData[index + rotationIndex]);
						if(useScale) {
							var scale = tileData[index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(tileData[index + alphaIndex]); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				break;
			default:
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix6 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix6.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix6.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix6.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				cairo.moveTo(x3,ym);
				cairo.curveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				cairo.curveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				cairo.rectangle(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.findFont = function(name) {
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.getFontInstance = function(format) {
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreaks = function(textField) {
	var lines = 0;
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) lines++;
	}
	return lines;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreakIndices = function(textField) {
	var breaks = [];
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) breaks.push(i);
	}
	return breaks;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreaksInRange = function(textField,i) {
	var lines = 0;
	if(textField.__ranges.length > i && i >= 0) {
		var range = textField.__ranges[i];
		if(range.start > 0 && range.end < textField.get_text().length) {
			var _g1 = range.start;
			var _g = range.end + 1;
			while(_g1 < _g) {
				var j = _g1++;
				var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
				if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) lines++;
			}
		}
	}
	return lines;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineIndices = function(textField,line) {
	var breaks = openfl__$internal_renderer_cairo_CairoTextField.getLineBreakIndices(textField);
	var i = 0;
	var first_char = 0;
	var last_char = textField.get_text().length - 1;
	var _g = 0;
	while(_g < breaks.length) {
		var br = breaks[_g];
		++_g;
		if(i == line) {
			first_char = br + 1;
			if(i != breaks.length - 1) last_char = breaks[i + 1] - 1;
		}
		i++;
	}
	return [first_char,last_char];
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetric = function(textField,line,metric) {
	if(textField.__ranges == null) return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,true,metric); else return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,line,metric);
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull = function(textField,specificLine,metric) {
	var lineChars = openfl__$internal_renderer_cairo_CairoTextField.getLineIndices(textField,specificLine);
	var m = 0.0;
	var best_m = 0.0;
	var _g = 0;
	var _g1 = textField.__ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		if(range.start >= lineChars[0]) {
			var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(range.format);
			if(font != null) switch(metric) {
			case 2:
				m = openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,1) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,3);
				break;
			case 0:
				m = font.get_ascender() / font.get_unitsPerEM() * textField.__textFormat.size;
				break;
			case 1:
				m = Math.abs(font.get_descender() / font.get_unitsPerEM() * textField.__textFormat.size);
				break;
			case 3:
				m = textField.__textFormat.leading + 4;
				break;
			default:
				m = 0;
			}
		}
		if(m > best_m) best_m = m;
		m = 0;
	}
	return best_m;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull = function(textField,singleLine,metric) {
	if(singleLine == null) singleLine = false;
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(textField.__textFormat);
	if(font != null) switch(metric) {
	case 2:
		return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,1) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,3);
	case 0:
		return font.get_ascender() / font.get_unitsPerEM() * textField.__textFormat.size;
	case 1:
		return Math.abs(font.get_descender() / font.get_unitsPerEM() * textField.__textFormat.size);
	case 3:
		return textField.__textFormat.leading + 4;
	default:
		return 0;
	}
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineWidth = function(textField,line) {
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.getTextHeight = function(textField) {
	var th = 0.0;
	var _g1 = 0;
	var _g = textField.get_numLines();
	while(_g1 < _g) {
		var i = _g1++;
		th += openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,1);
		if(i != textField.get_numLines() - 1) th += openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,3);
	}
	return th;
};
openfl__$internal_renderer_cairo_CairoTextField.getTextWidth = function(textField,text) {
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.measureText = function(textField,condense) {
	if(condense == null) condense = true;
	return openfl__$internal_renderer_cairo_CairoTextField.measureTextSub(textField,condense);
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSub = function(textField,condense) {
	if(textField.__textLayout == null) textField.__textLayout = new lime_text_TextLayout();
	if(textField.__ranges == null) return openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNull(textField,condense); else return openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNotNull(textField,condense);
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNotNull = function(textField,condense) {
	var measurements = [];
	var textLayout = textField.__textLayout;
	var _g = 0;
	var _g1 = textField.__ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(range.format);
		var width = 0.0;
		if(font != null && range.format.size != null) {
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(range.format.size | 0);
			textLayout.set_text(textField.get_text().substring(range.start,range.end));
			var _g2 = 0;
			var _g3 = textLayout.get_positions();
			while(_g2 < _g3.length) {
				var position = _g3[_g2];
				++_g2;
				if(condense) width += position.advance.x; else measurements.push(position.advance.x);
			}
		}
		if(condense) measurements.push(width);
	}
	return measurements;
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNull = function(textField,condense) {
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(textField.__textFormat);
	var width = 0.0;
	var widths = [];
	var textLayout = textField.__textLayout;
	if(font != null && textField.__textFormat.size != null) {
		textLayout.set_text(null);
		textLayout.set_font(font);
		textLayout.set_size(textField.__textFormat.size | 0);
		textLayout.set_text(textField.__text);
		var _g = 0;
		var _g1 = textLayout.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			if(condense) width += position.advance.x; else widths.push(position.advance.x);
		}
	}
	if(condense) widths.push(width);
	return widths;
};
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
openfl__$internal_renderer_cairo_CairoTextField.renderText = function(textField,text,format,offsetX,bounds) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	return null;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x3,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 15:
			var y5 = command[3];
			var x5 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 16:
			var y6 = command[3];
			var x6 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = thickness;
				if(joints == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
				if(caps == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
				case 0:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
					break;
				default:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
				}
				if(miterLimit == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = miterLimit;
				if(alpha == 1 || alpha == null) if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
					var r = (color & 16711680) >>> 16;
					var g = (color & 65280) >>> 8;
					var b = color & 255;
					if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var smooth = command[5];
			var repeat = command[4];
			var matrix1 = command[3];
			var bitmap = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap,repeat);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var smooth1 = command[5];
			var repeat1 = command[4];
			var matrix2 = command[3];
			var bitmap1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap1,true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(matrix2 != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = matrix2;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = new openfl_geom_Matrix(matrix2.a,matrix2.b,matrix2.c,matrix2.d,matrix2.tx,matrix2.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(alpha1 == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
					var r1 = (rgb & 16711680) >>> 16;
					var g1 = (rgb & 65280) >>> 8;
					var b1 = rgb & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio1 = command[9];
			var interpolationMethod1 = command[8];
			var spreadMethod1 = command[7];
			var matrix3 = command[6];
			var ratios1 = command[5];
			var alphas1 = command[4];
			var colors1 = command[3];
			var type1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7,y7));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7 + width2,y7 + height2));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = y7;
					sl = x7;
					sb = y7 + height2;
					sr = x7 + width2;
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x7 - offsetX,y7 - offsetY,width2,height2);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
			var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 15:case 16:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:case 14:case 13:
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a = i;
							b = i + 1;
							c = i + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						openfl_Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.clipText = function(textField,value) {
	var textWidth = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,value);
	var fillPer = textWidth / textField.__width;
	textField.set_text(fillPer > 1?(function($this) {
		var $r;
		var _this = textField.get_text();
		var pos = -1 * Math.floor(textField.get_text().length / fillPer);
		$r = HxOverrides.substr(_this,pos,null);
		return $r;
	}(this)):textField.get_text());
	return textField.get_text() + "";
};
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textField) {
	textField.this_onRemovedFromStage(null);
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textField) {
	textField.__cursorPosition = -1;
	if(textField.__hiddenInput == null) {
		textField.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textField.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textField.maxChars > 0) hiddenInput.maxLength = textField.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textField.__text;
	}
	if(textField.stage != null) textField.this_onAddedToStage(null); else {
		textField.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(textField,textField.this_onAddedToStage));
		textField.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(textField,textField.this_onRemovedFromStage));
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices = function(textField) {
	var breaks = [];
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code) breaks.push(i);
	}
	return breaks;
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth = function(textField,line) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	var linebreaks = openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices(textField);
	var context = textField.__context;
	context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	if(line == -1) {
		var longest = 0.0;
		var _g1 = 0;
		var _g = linebreaks.length;
		while(_g1 < _g) {
			var i = _g1++;
			longest = Math.max(longest,context.measureText(textField.__text.substring(i == 0?0:linebreaks[i - 1] + 1,linebreaks[i])).width);
		}
		longest = Math.max(longest,context.measureText(textField.__text.substring(linebreaks.length == 0?0:linebreaks[linebreaks.length - 1] + 1)).width);
		return longest;
	} else return context.measureText(textField.__text.substring(line == 0?0:linebreaks[line - 1] + 1)).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth = function(textField,text) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	textField.__context.textAlign = "left";
	return textField.__context.measureText(text).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.measureText = function(textField,condense) {
	if(condense == null) condense = true;
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	if(textField.__ranges == null) {
		textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
		return [textField.__context.measureText(textField.__text).width];
	} else {
		var measurements = [];
		var _g = 0;
		var _g1 = textField.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(range.format);
			measurements.push(textField.__context.measureText(textField.get_text().substring(range.start,range.end)).width);
		}
		return measurements;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	var bounds = textField.getBounds(null);
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border && !textField.__hasFocus || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textField.__text != null && textField.__text != "" || textField.__hasFocus) {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = openfl__$internal_renderer_canvas_CanvasTextField.measureText(textField);
				var bounds1 = textField.get_bounds();
				graphics.__canvas.width = Math.ceil(bounds1.width);
				graphics.__canvas.height = Math.ceil(bounds1.height);
				if(textField.border || textField.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds1.width,bounds1.height);
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,textField.__cursorPosition)) + 3;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size * 1.185 - 4);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,lowPos)) + 2;
					var widthPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(lowPos,highPos));
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size * 1.185 - 4);
				}
				if(textField.__ranges == null) openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text,textField.__textFormat,0,bounds1); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						range = textField.__ranges[i1];
						openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,bounds1);
						offsetX += measurements[i1];
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(textField.__width);
				graphics.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,textField.get_width(),textField.get_height()); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,textField.get_width(),textField.get_height());
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.renderText = function(textField,text,format,offsetX,bounds) {
	openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(format);
	openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
	var yOffset = 0.0;
	if(new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent)) yOffset = format.size * 0.185;
	var lines = [];
	if(textField.get_wordWrap()) {
		var words = text.split(" ");
		var line = "";
		var word;
		var newLineIndex;
		var test;
		var _g1 = 0;
		var _g = words.length;
		while(_g1 < _g) {
			var i = _g1++;
			word = words[i];
			newLineIndex = word.indexOf("\n");
			if(newLineIndex > -1) {
				while(newLineIndex > -1) {
					test = line + word.substring(0,newLineIndex) + " ";
					if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
						lines.push(line);
						lines.push(word.substring(0,newLineIndex));
					} else lines.push(line + word.substring(0,newLineIndex));
					word = HxOverrides.substr(word,newLineIndex + 1,null);
					newLineIndex = word.indexOf("\n");
					line = "";
				}
				if(word != "") line = word + " ";
			} else {
				test = line + words[i] + " ";
				if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
					lines.push(line);
					line = words[i] + " ";
				} else line = test;
			}
		}
		if(line != "") lines.push(line);
	} else lines = text.split("\n");
	var _g2 = 0;
	while(_g2 < lines.length) {
		var line1 = lines[_g2];
		++_g2;
		var _g11 = format.align;
		switch(_g11[1]) {
		case 3:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "center";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() / 2,2 + yOffset,textField.get_textWidth());
			break;
		case 1:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "end";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() - 2,2 + yOffset,textField.get_textWidth());
			break;
		default:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,2 + offsetX,2 + yOffset,textField.get_textWidth());
		}
		yOffset += format.size + format.leading + 4;
		offsetX = 0;
	}
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl_geom_Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textField.__text,"<br>");
		div.style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textField.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textField.__width - 4) + "px";
	textField.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__worldTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.pixelSnapping);
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var bounds = shape.getBounds(null);
	var bitmap = shape.__graphics.__bitmap;
	var local = new openfl_geom_Matrix();
	local.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	local = local.mult(shape.__worldTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,true,local,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl__$internal_renderer_opengl_GLTextField;
openfl__$internal_renderer_opengl_GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl__$internal_renderer_opengl_GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl__$internal_renderer_TextFieldGraphics.render(textField);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(textField,renderSession);
};
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe_Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	init: function() {
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "uSampler0" + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec3 " + "uColor" + ";","uniform bool " + "uUseTexture" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "uUseTexture" + ") {","       tmp = texture2D(" + "uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColor" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "uColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform mat3 " + "uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "uPatternMatrix" + " * vec3(" + "aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "uAlpha" + ";","uniform vec2 " + "uPatternTL" + ";","uniform vec2 " + "uPatternBR" + ";","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "uPatternTL" + ", " + "uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","uniform float " + "uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "aColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
	if(openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes == null) {
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = new haxe_ds_EnumValueMap();
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.NORMAL,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ADD,{ src : 1, dest : 1, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.MULTIPLY,{ src : 774, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SCREEN,{ src : 1, dest : 769, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SUBTRACT,{ src : 1, dest : 1, func : 32779});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LAYER,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DARKEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LIGHTEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ERASE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ALPHA,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.INVERT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DIFFERENCE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.HARDLIGHT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.OVERLAY,{ src : 1, dest : 771, func : 32774});
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var glBlend = openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.get(this.currentBlendMode);
		this.gl.blendEquation(glBlend.func);
		this.gl.blendFunc(glBlend.src,glBlend.dest);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function() {
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(bitmap != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(bitmap,matrix,repeat,smooth); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(alpha > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(rgb & 16777215,alpha); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(thickness == null || isNaN(thickness) || thickness < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(thickness == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = thickness;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(color == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = color;
				if(alpha1 == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = alpha1;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = scaleMode;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = caps;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = joints;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = miterLimit;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(x6,y6);
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 17:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(winding) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var m = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(m);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl__$internal_renderer_opengl_utils_FilterTexture;
openfl__$internal_renderer_opengl_utils_FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl__$internal_renderer_opengl_utils_FilterTexture.prototype = {
	clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterTexture
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	destroy: function() {
		this.gl = null;
	}
	,pushMask: function(mask) {
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
	}
	,popMask: function() {
		this.renderSession.stencilManager.popMask(null,this.renderSession);
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		var this1;
		if(components != null) this1 = new Float32Array(components); else this1 = null;
		this.defaultValue = this1;
	} else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl_geom_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 411, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = openfl__$internal_renderer_opengl_utils_PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var recPoints = [];
	recPoints.push(xe);
	recPoints.push(ye - ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,ye,xe - rx,ye);
	recPoints.push(x + rx);
	recPoints.push(ye);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,ye + cy2,x,ye - ry);
	recPoints.push(x);
	recPoints.push(y + ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,y,x + rx,y);
	recPoints.push(xe - rx);
	recPoints.push(y);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,y - cy2,xe,y + ry);
	recPoints.push(xe);
	recPoints.push(ye - ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl__$internal_renderer_opengl_utils_PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : true, __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		var this1;
		if(elements != null) this1 = new Float32Array(elements); else this1 = null;
		this.glData = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		var this2;
		if(elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
		this.glIndices = this2;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl__$internal_renderer_opengl_utils_PolyK;
openfl__$internal_renderer_opengl_utils_PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl__$internal_renderer_opengl_utils_PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_opengl_utils_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1718, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_opengl_utils_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw new js__$Boot_HaxeError("Call Spritebatch.begin() before start()");
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			blendMode = openfl_display_BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl_geom_Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl_display_TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color,openfl_display_PixelSnapping.NEVER);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl_display_TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl_geom_Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color,null);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color,pixelSnapping) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		if(pixelSnapping == null) pixelSnapping = openfl_display_PixelSnapping.NEVER;
		var snap = pixelSnapping != openfl_display_PixelSnapping.NEVER;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		if(!snap) {
			var idx = index++;
			this.positions[idx] = a * w1 + c * h1 + tx;
			var idx1 = index++;
			this.positions[idx1] = d * h1 + b * w1 + ty;
		} else {
			var idx2 = index++;
			var val = Math.round(a * w1 + c * h1 + tx);
			this.positions[idx2] = val;
			var idx3 = index++;
			var val1 = Math.round(d * h1 + b * w1 + ty);
			this.positions[idx3] = val1;
		}
		var idx4 = index++;
		this.positions[idx4] = uvs.x0;
		var idx5 = index++;
		this.positions[idx5] = uvs.y0;
		if(this.enableColor) {
			var idx6 = index++;
			this.colors[idx6] = color;
		}
		if(!snap) {
			var idx7 = index++;
			this.positions[idx7] = a * w0 + c * h1 + tx;
			var idx8 = index++;
			this.positions[idx8] = d * h1 + b * w0 + ty;
		} else {
			var idx9 = index++;
			var val2 = Math.round(a * w0 + c * h1 + tx);
			this.positions[idx9] = val2;
			var idx10 = index++;
			var val3 = Math.round(d * h1 + b * w0 + ty);
			this.positions[idx10] = val3;
		}
		var idx11 = index++;
		this.positions[idx11] = uvs.x1;
		var idx12 = index++;
		this.positions[idx12] = uvs.y1;
		if(this.enableColor) {
			var idx13 = index++;
			this.colors[idx13] = color;
		}
		if(!snap) {
			var idx14 = index++;
			this.positions[idx14] = a * w0 + c * h0 + tx;
			var idx15 = index++;
			this.positions[idx15] = d * h0 + b * w0 + ty;
		} else {
			var idx16 = index++;
			var val4 = Math.round(a * w0 + c * h0 + tx);
			this.positions[idx16] = val4;
			var idx17 = index++;
			var val5 = Math.round(d * h0 + b * w0 + ty);
			this.positions[idx17] = val5;
		}
		var idx18 = index++;
		this.positions[idx18] = uvs.x2;
		var idx19 = index++;
		this.positions[idx19] = uvs.y2;
		if(this.enableColor) {
			var idx20 = index++;
			this.colors[idx20] = color;
		}
		if(!snap) {
			var idx21 = index++;
			this.positions[idx21] = a * w1 + c * h0 + tx;
			var idx22 = index++;
			this.positions[idx22] = d * h0 + b * w1 + ty;
		} else {
			var idx23 = index++;
			var val6 = Math.round(a * w1 + c * h0 + tx);
			this.positions[idx23] = val6;
			var idx24 = index++;
			var val7 = Math.round(d * h0 + b * w1 + ty);
			this.positions[idx24] = val7;
		}
		var idx25 = index++;
		this.positions[idx25] = uvs.x3;
		var idx26 = index++;
		this.positions[idx26] = uvs.y3;
		if(this.enableColor) {
			var idx27 = index++;
			this.colors[idx27] = color;
		}
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl_geom_Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.pixelSnapping);
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingFramebuffer = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.__image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl_display_BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl_display_BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.__image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingFramebuffer = false;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingFramebuffer = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingFramebuffer = false;
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) gl.deleteTexture(this.__texture);
			}
		}
		if(this.__framebuffer != null) this.__framebuffer.destroy();
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
		var buffer = this.__image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.webkitImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		var matrixCache = source.__worldTransform;
		if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl_geom_Matrix();
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__worldTransform = matrixCache;
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.webkitImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingFramebuffer = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,(function($this) {
				var $r;
				var this1;
				if(data != null) this1 = new Float32Array(data); else this1 = null;
				$r = this1;
				return $r;
			}(this)),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		var rect = this.__image.getColorBoundsRect(mask,color,findColor);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle(),1);
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.__image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingFramebuffer && this.__framebuffer != null) return this.__framebuffer.texture;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__image.dirty = true;
		}
		if(this.__image != null && this.__image.dirty) {
			var internalFormat;
			if(this.__image.buffer.bitsPerPixel == 1) internalFormat = gl.ALPHA; else internalFormat = gl.RGBA;
			var format = gl.RGBA;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				textureImage = textureImage.clone();
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl_Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingFramebuffer = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl_Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) return;
		this.__image.scroll(x,y);
		this.__usingFramebuffer = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray,1);
		this.__usingFramebuffer = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime_utils_ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime_utils_ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl_Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl_Memory._setPositionTemporarily(position,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl_display_BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl_Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl_Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime_utils_ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl_Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl_Memory._setPositionTemporarily(position1,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl_display_BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl_Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl_Memory.setI32(position1,openfl_Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl_Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl_Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__drawGL: function(renderSession,width,height,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels) {
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		var renderer = openfl_Lib.current.stage.__renderer;
		if(renderer == null) return;
		var renderSession1 = renderer.renderSession;
		var gl = renderSession1.gl;
		if(gl == null) return;
		var spritebatch = renderSession1.spriteBatch;
		var renderTransparent = renderSession1.renderer.transparent;
		var tmpRect;
		if(clipRect == null) tmpRect = new openfl_geom_Rectangle(0,0,width,height); else tmpRect = clipRect.clone();
		renderSession1.renderer.transparent = this.transparent;
		if(this.__framebuffer == null) this.__framebuffer = new openfl__$internal_renderer_opengl_utils_FilterTexture(gl,width,height,smoothing);
		this.__framebuffer.resize(width,height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
		renderer.setViewport(0,0,width,height);
		spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
		gl.colorMask(true,true,true,true);
		renderSession1.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		renderSession1.shaderManager.setShader(renderSession1.shaderManager.defaultShader,true);
		if(clearBuffer || drawSelf) this.__framebuffer.clear();
		if(drawSelf) {
			this.__worldTransform.identity();
			this.__flipMatrix(this.__worldTransform);
			this.__renderGL(renderSession1);
			spritebatch.stop();
			gl.deleteTexture(this.__texture);
			this.__texture = null;
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var matrixCache = source.__worldTransform;
		var blendModeCache = source.__blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
		this.__flipMatrix(m);
		source.__worldTransform = m;
		if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
		source.__blendMode = blendMode;
		source.__cacheAsBitmap = false;
		source.__updateChildren(false);
		source.__renderGL(renderSession1);
		source.__worldColorTransform = ctCache;
		source.__worldTransform = matrixCache;
		source.__blendMode = blendModeCache;
		source.__cacheAsBitmap = cached;
		source.__updateChildren(true);
		spritebatch.finish();
		if(readPixels) {
			if(this.__image.width != width || this.__image.height != height) this.__image.resize(width,height);
			gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER,renderSession1.defaultFramebuffer);
		renderer.setViewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
		renderSession1.renderer.transparent = renderTransparent;
		gl.colorMask(true,true,true,renderSession1.renderer.transparent);
		this.__usingFramebuffer = false;
		if(this.__image != null) {
			this.__image.dirty = false;
			this.__image.set_premultiplied(true);
		}
		this.__createUVs();
		this.__isValid = true;
	}
	,__flipMatrix: function(m) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,this.height);
		m.tx += tx;
		m.ty -= ty;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(_g.__image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(pattern);
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode);
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	__class__: openfl_display_TextureUvs
};
var openfl_display_BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
openfl_display_BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = [];
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl_display_DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl_display_DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl_display_DrawCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands = [];
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__halfStrokeWidth,iy1 - this.__halfStrokeWidth);
		this.__inflateBounds(ix1 + this.__halfStrokeWidth,iy1 + this.__halfStrokeWidth);
		this.__inflateBounds(ix2 - this.__halfStrokeWidth,iy2 - this.__halfStrokeWidth);
		this.__inflateBounds(ix2 + this.__halfStrokeWidth,iy2 + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl_display_DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__halfStrokeWidth,iy - this.__halfStrokeWidth);
		this.__inflateBounds(ix + this.__halfStrokeWidth,iy + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl_display_DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawCircle(x,y,radius));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawEllipse(x,y,width,height));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl_Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			if(command != null) switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			} else {
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
		this.__commands.push(openfl_display_DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl_display_TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl_display_DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl_display_DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl_display_DrawCommand.LineBitmapStyle(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl_display_DrawCommand.LineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness > this.__halfStrokeWidth) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = this.__halfStrokeWidth;
		this.__commands.push(openfl_display_DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.LineTo(x,y));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl_display_DrawCommand.MoveTo(x,y));
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineBitmapStyle","LineGradientStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl_display_DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.EndFill = ["EndFill",11];
openfl_display_DrawCommand.EndFill.toString = $estr;
openfl_display_DrawCommand.EndFill.__enum__ = openfl_display_DrawCommand;
openfl_display_DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineBitmapStyle = function(bitmap,matrix,repeat,smooth) { var $x = ["LineBitmapStyle",13,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineGradientStyle = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["LineGradientStyle",14,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",15,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",16,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",17,commands,data,winding]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",18,matrix]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
var openfl_display_GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
openfl_display_GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_Sprite.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_Sprite;
openfl_display_Loader.prototype = $extend(openfl_display_Sprite.prototype,{
	close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromFile(request.url,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime_graphics_opengl_GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(width,height,color) {
	openfl_display_DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		case 4:
			var cairo = context[2];
			this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
			break;
		default:
		}
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) {
			switch(context[1]) {
			case 4:
				var cairo = context[2];
				(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
				break;
			default:
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) this.set_focus(target);
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl_geom_Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl_events_MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl_events_MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl_events_MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl_Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl_Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		return openfl_Lib.application.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return openfl_Lib.application.backend.setFrameRate(value);
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl_display_OpenGLView.get_isSupported()) {
			this.context3D = new openfl_display3D_Context3D();
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl_display3D_IndexBuffer3D(lime_graphics_opengl_GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,(function($this) {
			var $r;
			var array;
			{
				var this2 = matrix.rawData;
				var value = [];
				var _g1 = 0;
				var _g = this2.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this2.data[i]);
				}
				array = value;
			}
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			openfl_display3D_Context3D.anisotropySupportTested = true;
			lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy));
			openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.context.getTexParameter(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		var this1;
		if(length != null) this1 = new Int16Array(length); else this1 = null;
		indices = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			indices[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indices = this1;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	dispose: function() {
		lime_graphics_opengl_GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			float32Array[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispose: function() {
		lime_graphics_opengl_GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime_utils_ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source;
		var elements = data.length;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.__image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source;
		var elements = data.length;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=\"" + this.text + "\"]";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	clone: function() {
		return new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
	}
	,toString: function() {
		return "[GameInputEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " device=" + Std.string(this.device) + "]";
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		return new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + this.keyLocation + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		return new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,local.x,local.y,1,1,null,false,false,false,false,0,false,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterType = function() { };
$hxClasses["openfl.filters.BitmapFilterType"] = openfl_filters_BitmapFilterType;
openfl_filters_BitmapFilterType.__name__ = ["openfl","filters","BitmapFilterType"];
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.quality = quality;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__class__: openfl_filters_BlurFilter
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
	this.hideObject = hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__class__: openfl_filters_DropShadowFilter
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__class__: openfl_filters_GlowFilter
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]"));
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + row + " out of bounds [0, ..., 3]"));
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = new openfl_geom_Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl_geom_Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl_geom_Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl_geom_Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.QUATERNION = ["QUATERNION",2];
openfl_geom_Orientation3D.QUATERNION.toString = $estr;
openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.concatenatedMatrix = new openfl_geom_Matrix();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl_geom_Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl_geom_Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl_geom_Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl_geom_Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,sndTransform.pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,sndTransform.pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : true, __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl_system_TouchscreenType.FINGER = ["FINGER",0];
openfl_system_TouchscreenType.FINGER.toString = $estr;
openfl_system_TouchscreenType.FINGER.__enum__ = openfl_system_TouchscreenType;
openfl_system_TouchscreenType.NONE = ["NONE",1];
openfl_system_TouchscreenType.NONE.toString = $estr;
openfl_system_TouchscreenType.NONE.__enum__ = openfl_system_TouchscreenType;
openfl_system_TouchscreenType.STYLUS = ["STYLUS",2];
openfl_system_TouchscreenType.STYLUS.toString = $estr;
openfl_system_TouchscreenType.STYLUS.__enum__ = openfl_system_TouchscreenType;
var openfl_system_Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl_system_Capabilities.language = null;
openfl_system_Capabilities.os = null;
openfl_system_Capabilities.pixelAspectRatio = null;
openfl_system_Capabilities.screenDPI = null;
openfl_system_Capabilities.screenResolutionX = null;
openfl_system_Capabilities.screenResolutionY = null;
openfl_system_Capabilities.version = null;
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	if(openfl_system_Capabilities.screenDPI > 0) return openfl_system_Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl_system_Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl_system_Capabilities.screenDPI;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl_system_Capabilities.get_language = function() {
	return navigator.language;
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("3.2.0",".",",") + ",0";
	return value;
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : true, __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(bytes);
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl_text_FontStyle.REGULAR = ["REGULAR",0];
openfl_text_FontStyle.REGULAR.toString = $estr;
openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.ITALIC = ["ITALIC",1];
openfl_text_FontStyle.ITALIC.toString = $estr;
openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD = ["BOLD",3];
openfl_text_FontStyle.BOLD.toString = $estr;
openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl_text_FontType.DEVICE = ["DEVICE",0];
openfl_text_FontType.DEVICE.toString = $estr;
openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED = ["EMBEDDED",1];
openfl_text_FontType.EMBEDDED.toString = $estr;
openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.__dirtyBounds = true;
	this.__bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.__graphics = new openfl_display_Graphics();
	this.set_type(openfl_text_TextFieldType.DYNAMIC);
	this.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.set_selectable(true);
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl_Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl_Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl_Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		var lineWidth = openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,lineIndex);
		var lineHeight = this.get_textHeight();
		var ascender = lineHeight * 0.8;
		var descender = lineHeight * 0.2;
		var leading = 0;
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.get_width() - lineWidth - 2;
			break;
		case 3:
			margin = (this.get_width() - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		openfl_Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl_Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl_Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__dirtyBounds = true;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = this.get_bounds().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.type == openfl_text_TextFieldType.INPUT && this.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		if(x <= 2) return 0;
		var value = this.get_text();
		var text = value;
		var totalW = 2;
		var pos = text.length;
		if(x < openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text) + 2) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(this.get_bounds().containsPoint(point)) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			this.__cursorPosition = this.__getPosition(localPoint.x,localPoint.y);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			var upPos = this.__getPosition(localPoint.x,localPoint.y);
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
			rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
			this.__selectionStart = leftPos;
			this.__cursorPosition = rightPos;
			this.this_onFocusIn(null);
		}
	}
	,this_onAddedToStage: function(event) {
		this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage.get_focus() == this) this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		if(this.__hiddenInput != null) this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,this_onMouseDown: function(event) {
		if(!this.selectable) return;
		var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
		this.__selectionStart = this.__getPosition(localPoint.x,localPoint.y);
		this.__cursorPosition = this.__selectionStart;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.this_onFocusOut(null);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_bounds: function() {
		if(!this.__dirtyBounds) return this.__bounds;
		if(this.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			this.__bounds.width = this.get_textWidth() + 4 + (this.border?1:0);
			this.__bounds.height = this.get_textHeight() + 4 + (this.border?1:0);
		} else {
			this.__bounds.width = this.__width;
			this.__bounds.height = this.__height;
		}
		this.__dirtyBounds = false;
		return this.__bounds;
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.get_bounds().height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__text != value && this.__hiddenInput != null) {
					var selectionStart = this.__hiddenInput.selectionStart;
					var selectionEnd = this.__hiddenInput.selectionEnd;
					this.__hiddenInput.value = value;
					this.__hiddenInput.selectionStart = selectionStart;
					this.__hiddenInput.selectionEnd = selectionEnd;
				}
				return this.__text = value;
			} else {
				value = "";
				this.__ranges = [];
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__ranges.push(new openfl_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__ranges.push(new openfl_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__ranges.push(new openfl_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart1 = this.__hiddenInput.selectionStart;
			var selectionEnd1 = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart1;
			this.__hiddenInput.selectionEnd = selectionEnd1;
		}
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,set_selectable: function(value) {
		if(!value && this.selectable && this.type == openfl_text_TextFieldType.INPUT) this.this_onRemovedFromStage(null);
		return this.selectable = value;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart = this.__hiddenInput.selectionStart;
			var selectionEnd = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart;
			this.__hiddenInput.selectionEnd = selectionEnd;
		}
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		return openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,-1);
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185 * this.get_numLines() + (this.__textFormat.leading == null?0:this.__textFormat.leading) * this.get_numLines(); else if(this.__div != null) return this.__div.clientHeight; else {
			openfl__$internal_renderer_dom_DOMTextField.measureText(this);
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) {
			if(value == openfl_text_TextFieldType.INPUT) openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode(this); else openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode(this);
			this.__dirty = true;
		}
		return this.type = value;
	}
	,get_width: function() {
		return this.get_bounds().width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_bounds:"get_bounds",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
var openfl_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl_text_TextFormatRange;
openfl_text_TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl_text_TextFormatRange.prototype = {
	__class__: openfl_text_TextFormatRange
};
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(lime_ui_Gamepad.devices.h.hasOwnProperty(index)) {
		var key = lime_ui_Gamepad.devices.h[index];
		return openfl_ui_GameInput.__devices.h[key.__id__];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.id == null?"null":"" + gamepad.id,null);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		openfl_ui_GameInput.__devices.remove(gamepad);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
openfl_ui_Multitouch.maxTouchPoints = null;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = null;
openfl_ui_Multitouch.supportsTouchEvents = null;
openfl_ui_Multitouch.get_inputMode = function() {
	return openfl_ui_MultitouchInputMode.TOUCH_POINT;
};
openfl_ui_Multitouch.set_inputMode = function(inMode) {
	if(inMode == openfl_ui_MultitouchInputMode.GESTURE) return openfl_ui_Multitouch.get_inputMode();
	return inMode;
};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
var openfl_ui_MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : true, __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl_ui_MultitouchInputMode.NONE = ["NONE",0];
openfl_ui_MultitouchInputMode.NONE.toString = $estr;
openfl_ui_MultitouchInputMode.NONE.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl_ui_MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl_ui_MultitouchInputMode.TOUCH_POINT.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl_ui_MultitouchInputMode.GESTURE.toString = $estr;
openfl_ui_MultitouchInputMode.GESTURE.__enum__ = openfl_ui_MultitouchInputMode;
var org_aswing_ASFont = function(name,size,bold,italic,underline,embedFontsOrAdvancedPros,family) {
	if(underline == null) underline = false;
	if(italic == null) italic = false;
	if(bold == null) bold = false;
	if(size == null) size = 11;
	if(name == null) name = "Tahoma";
	this.set_name(name);
	this.set_size(size | 0);
	this.set_bold(bold);
	this.set_italic(italic);
	this.set_underline(underline);
	if(js_Boot.__instanceof(embedFontsOrAdvancedPros,org_aswing_ASFontAdvProperties)) this.advancedProperties = js_Boot.__instanceof(embedFontsOrAdvancedPros,org_aswing_ASFontAdvProperties)?embedFontsOrAdvancedPros:null; else this.advancedProperties = new org_aswing_ASFontAdvProperties(embedFontsOrAdvancedPros == true);
	this.textFormat = this.getTextFormat();
};
$hxClasses["org.aswing.ASFont"] = org_aswing_ASFont;
org_aswing_ASFont.__name__ = ["org","aswing","ASFont"];
org_aswing_ASFont.prototype = {
	set_name: function(v) {
		if(openfl_Assets.exists(v,"FONT")) v = openfl_Assets.getFont(v).get_fontName();
		this.family = v;
		this.name = v;
		this.textFormat = this.getTextFormat();
		return v;
	}
	,set_size: function(v) {
		this.size = v;
		this.textFormat = this.getTextFormat();
		return v;
	}
	,set_bold: function(v) {
		this.bold = v;
		this.textFormat = this.getTextFormat();
		return v;
	}
	,set_italic: function(v) {
		this.italic = v;
		this.textFormat = this.getTextFormat();
		return v;
	}
	,set_underline: function(v) {
		this.underline = v;
		this.textFormat = this.getTextFormat();
		return v;
	}
	,getName: function() {
		return this.name;
	}
	,changeName: function(name) {
		return new org_aswing_ASFont(name,this.size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,getSize: function() {
		return this.size;
	}
	,changeSize: function(size) {
		return new org_aswing_ASFont(this.name,size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,isBold: function() {
		return this.bold;
	}
	,changeBold: function(bold) {
		return new org_aswing_ASFont(this.name,this.size,bold,this.italic,this.underline,this.advancedProperties);
	}
	,isItalic: function() {
		return this.italic;
	}
	,changeItalic: function(italic) {
		return new org_aswing_ASFont(this.name,this.size,this.bold,italic,this.underline,this.advancedProperties);
	}
	,isUnderline: function() {
		return this.underline;
	}
	,changeUnderline: function(underline) {
		return new org_aswing_ASFont(this.name,this.size,this.bold,this.italic,underline,this.advancedProperties);
	}
	,isEmbedFonts: function() {
		return this.advancedProperties.isEmbedFonts();
	}
	,getAdvancedProperties: function() {
		return this.advancedProperties;
	}
	,apply: function(textField,beginIndex,endIndex) {
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = -1;
		this.advancedProperties.apply(textField);
		textField.setTextFormat(this.textFormat,beginIndex,endIndex);
		textField.set_defaultTextFormat(this.textFormat);
	}
	,getTextFormat: function() {
		return new openfl_text_TextFormat(this.name,this.size,null,this.bold,this.italic,this.underline,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
	}
	,computeTextSize: function(text,includeGutters) {
		if(includeGutters == null) includeGutters = true;
		return org_aswing_AsWingUtils.computeStringSizeWithFont(this,text,includeGutters);
	}
	,clone: function() {
		return new org_aswing_ASFont(this.name,this.size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,toString: function() {
		return "ASFont[" + "name : " + this.name + ", size : " + this.size + ", bold : " + Std.string(this.bold) + ", italic : " + Std.string(this.italic) + ", underline : " + Std.string(this.underline) + ", advanced : " + Std.string(this.advancedProperties) + "]";
	}
	,__class__: org_aswing_ASFont
	,__properties__: {set_underline:"set_underline",set_italic:"set_italic",set_bold:"set_bold",set_size:"set_size",set_name:"set_name"}
};
var org_aswing_ASFontAdvProperties = function(embedFonts,antiAliasType,gridFitType,sharpness,thickness) {
	if(thickness == null) thickness = 0;
	if(sharpness == null) sharpness = 0;
	if(gridFitType == null) gridFitType = "PIXEL";
	if(antiAliasType == null) antiAliasType = "NORMAL";
	if(embedFonts == null) embedFonts = false;
	this.embedFonts = embedFonts;
	this.antiAliasType = antiAliasType;
	this.gridFitType = gridFitType;
	this.sharpness = sharpness;
	this.thickness = thickness;
};
$hxClasses["org.aswing.ASFontAdvProperties"] = org_aswing_ASFontAdvProperties;
org_aswing_ASFontAdvProperties.__name__ = ["org","aswing","ASFontAdvProperties"];
org_aswing_ASFontAdvProperties.prototype = {
	getAntiAliasType: function() {
		if(this.antiAliasType != null) return this.antiAliasType; else return "NORMAL";
	}
	,changeAntiAliasType: function(newType) {
		return new org_aswing_ASFontAdvProperties(this.embedFonts,newType,this.gridFitType,this.sharpness,this.thickness);
	}
	,getGridFitType: function() {
		if(this.gridFitType != null) return this.gridFitType; else return "PIXEL";
	}
	,changeGridFitType: function(newType) {
		return new org_aswing_ASFontAdvProperties(this.embedFonts,this.antiAliasType,newType,this.sharpness,this.thickness);
	}
	,getSharpness: function() {
		return this.sharpness;
	}
	,changeSharpness: function(newSharpness) {
		return new org_aswing_ASFontAdvProperties(this.embedFonts,this.antiAliasType,this.gridFitType,newSharpness,this.thickness);
	}
	,getThickness: function() {
		return this.thickness;
	}
	,changeThickness: function(newThickness) {
		return new org_aswing_ASFontAdvProperties(this.embedFonts,this.antiAliasType,this.gridFitType,this.sharpness,newThickness);
	}
	,isEmbedFonts: function() {
		return this.embedFonts;
	}
	,changeEmbedFonts: function(ef) {
		return new org_aswing_ASFontAdvProperties(ef,this.antiAliasType,this.gridFitType,this.sharpness,this.thickness);
	}
	,apply: function(textField) {
	}
	,toString: function() {
		return "ASFontAdvProperties[" + "embedFonts : " + Std.string(this.embedFonts) + ", antiAliasType : " + this.antiAliasType + ", gridFitType : " + this.gridFitType + ", sharpness : " + this.sharpness + ", thickness : " + this.thickness + "]";
	}
	,__class__: org_aswing_ASFontAdvProperties
};
var org_aswing_AWKeyboard = function() { };
$hxClasses["org.aswing.AWKeyboard"] = org_aswing_AWKeyboard;
org_aswing_AWKeyboard.__name__ = ["org","aswing","AWKeyboard"];
var org_aswing_CellEditor = function() { };
$hxClasses["org.aswing.CellEditor"] = org_aswing_CellEditor;
org_aswing_CellEditor.__name__ = ["org","aswing","CellEditor"];
org_aswing_CellEditor.prototype = {
	__class__: org_aswing_CellEditor
};
var org_aswing_tree_TreeCellEditor = function() { };
$hxClasses["org.aswing.tree.TreeCellEditor"] = org_aswing_tree_TreeCellEditor;
org_aswing_tree_TreeCellEditor.__name__ = ["org","aswing","tree","TreeCellEditor"];
org_aswing_tree_TreeCellEditor.__interfaces__ = [org_aswing_CellEditor];
var org_aswing_table_TableCellEditor = function() { };
$hxClasses["org.aswing.table.TableCellEditor"] = org_aswing_table_TableCellEditor;
org_aswing_table_TableCellEditor.__name__ = ["org","aswing","table","TableCellEditor"];
org_aswing_table_TableCellEditor.__interfaces__ = [org_aswing_CellEditor];
var org_aswing_AbstractCellEditor = function() {
	this.listeners = [];
	this.clickCountToStart = 0;
	this.popup = new org_aswing_JPopup();
	this.popup.setLayout(new org_aswing_EmptyLayout());
};
$hxClasses["org.aswing.AbstractCellEditor"] = org_aswing_AbstractCellEditor;
org_aswing_AbstractCellEditor.__name__ = ["org","aswing","AbstractCellEditor"];
org_aswing_AbstractCellEditor.__interfaces__ = [org_aswing_tree_TreeCellEditor,org_aswing_table_TableCellEditor,org_aswing_CellEditor];
org_aswing_AbstractCellEditor.prototype = {
	setClickCountToStart: function(count) {
		this.clickCountToStart = count | 0;
	}
	,getClickCountToStart: function() {
		return this.clickCountToStart;
	}
	,updateUI: function() {
		this.getEditorComponent().updateUI();
	}
	,getEditorComponent: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getCellEditorValue: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,setCellEditorValue: function(value) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,isCellEditable: function(clickCount) {
		return clickCount == this.clickCountToStart;
	}
	,startCellEditing: function(owner,value,bounds) {
		this.popup.changeOwner(org_aswing_AsWingUtils.getOwnerAncestor(owner));
		var gp = owner.getGlobalLocation().move(bounds.x,bounds.y);
		this.popup.setSizeWH(bounds.width,bounds.height);
		this.popup.show();
		this.popup.setGlobalLocation(gp);
		this.popup.validate();
		this.popup.toFront();
		var com = this.getEditorComponent();
		com.removeEventListener("act",$bind(this,this.__editorComponentAct));
		com.removeEventListener("focusLost",$bind(this,this.__editorComponentFocusLost));
		com.removeEventListener("focusKeyDown",$bind(this,this.__editorComponentKeyDown));
		com.setSizeWH(bounds.width,bounds.height);
		this.popup.append(com);
		this.setCellEditorValue(value);
		com.requestFocus();
		if(js_Boot.__instanceof(com,org_aswing_Container) && !com.isFocusOwner()) {
			var con;
			con = js_Boot.__instanceof(com,org_aswing_Container)?com:null;
			var sub;
			sub = con.getFocusTraversalPolicy().getDefaultComponent(con);
			if(sub != null) sub.requestFocus();
			if(sub == null || !sub.isFocusOwner()) {
				var _g1 = 0;
				var _g = con.getComponentCount();
				while(_g1 < _g) {
					var i = _g1++;
					sub = con.getComponent(i);
					sub.requestFocus();
					if(sub.isFocusOwner()) break;
				}
			}
		}
		com.addEventListener("act",$bind(this,this.__editorComponentAct));
		com.addEventListener("focusLost",$bind(this,this.__editorComponentFocusLost));
		com.addEventListener("focusKeyDown",$bind(this,this.__editorComponentKeyDown));
		com.validate();
	}
	,__editorComponentFocusLost: function(e) {
		this.cancelCellEditing();
	}
	,__editorComponentAct: function(e) {
		this.stopCellEditing();
	}
	,__editorComponentKeyDown: function(e) {
		if((e.keyCode | 0) == org_aswing_AWKeyboard.ESCAPE) this.cancelCellEditing();
	}
	,stopCellEditing: function() {
		this.removeEditorComponent();
		this.fireEditingStopped();
		return true;
	}
	,cancelCellEditing: function() {
		this.removeEditorComponent();
		this.fireEditingCanceled();
	}
	,isCellEditing: function() {
		var editorCom = this.getEditorComponent();
		return editorCom != null && editorCom.isShowing();
	}
	,addCellEditorListener: function(l) {
		this.listeners.push(l);
	}
	,removeCellEditorListener: function(l) {
		org_aswing_util_ArrayUtils.removeFromArray(this.listeners,l);
	}
	,fireEditingStopped: function() {
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = org_aswing_AsWingUtils["as"](this.listeners[i],org_aswing_event_CellEditorListener);
			l.editingStopped(this);
		}
	}
	,fireEditingCanceled: function() {
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = org_aswing_AsWingUtils["as"](this.listeners[i],org_aswing_event_CellEditorListener);
			l.editingCanceled(this);
		}
	}
	,removeEditorComponent: function() {
		this.getEditorComponent().removeFromContainer();
		this.popup.dispose();
	}
	,__class__: org_aswing_AbstractCellEditor
};
var org_aswing_AbstractListModel = function() {
	this.listeners = [];
};
$hxClasses["org.aswing.AbstractListModel"] = org_aswing_AbstractListModel;
org_aswing_AbstractListModel.__name__ = ["org","aswing","AbstractListModel"];
org_aswing_AbstractListModel.prototype = {
	addListDataListener: function(l) {
		this.listeners.push(l);
	}
	,removeListDataListener: function(l) {
		org_aswing_util_ArrayUtils.removeFromArray(this.listeners,l);
	}
	,fireContentsChanged: function(target,index0,index1,removedItems) {
		var e = new org_aswing_event_ListDataEvent(target,index0,index1,removedItems);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](this.listeners[i],org_aswing_event_ListDataListener);
			lis.contentsChanged(e);
		}
	}
	,fireIntervalAdded: function(target,index0,index1) {
		var e = new org_aswing_event_ListDataEvent(target,index0,index1,[]);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](this.listeners[i],org_aswing_event_ListDataListener);
			lis.intervalAdded(e);
		}
	}
	,fireIntervalRemoved: function(target,index0,index1,removedItems) {
		var e = new org_aswing_event_ListDataEvent(target,index0,index1,removedItems);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](this.listeners[i],org_aswing_event_ListDataListener);
			lis.intervalRemoved(e);
		}
	}
	,__class__: org_aswing_AbstractListModel
};
var org_aswing_AbstractTabbedPane = function() {
	org_aswing_Container.call(this);
	this.setClipMasked(true);
	this._verticalAlignment = 0;
	this._horizontalAlignment = 0;
	this._verticalTextPosition = 0;
	this._horizontalTextPosition = 4;
	if(null != org_aswing_UIManager.get("iconGap")) this._iconTextGap = org_aswing_UIManager.get("iconGap"); else this._iconTextGap = 4;
	this.titles = [];
	this.icons = [];
	this.tips = [];
	this.enables = [];
	this.visibles = [];
	this.setModel(new org_aswing_DefaultSingleSelectionModel());
};
$hxClasses["org.aswing.AbstractTabbedPane"] = org_aswing_AbstractTabbedPane;
org_aswing_AbstractTabbedPane.__name__ = ["org","aswing","AbstractTabbedPane"];
org_aswing_AbstractTabbedPane.__super__ = org_aswing_Container;
org_aswing_AbstractTabbedPane.prototype = $extend(org_aswing_Container.prototype,{
	get_selectionModel: function() {
		return this.getModel();
	}
	,set_selectionModel: function(v) {
		this.setModel(v);
		return v;
	}
	,get_selectedIndex: function() {
		return this.get_selectionModel().getSelectedIndex();
	}
	,set_selectedIndex: function(v) {
		var __oldValue__ = this.get_selectedIndex();
		if(v == __oldValue__) return __oldValue__;
		this.get_selectionModel().setSelectedIndex(v,false);
		this.__fieldBindings__.dispatch("selectedIndex",__oldValue__,this.get_selectedIndex());
		return v;
	}
	,get_verticalAlignment: function() {
		return Std["int"](this.getVerticalAlignment());
	}
	,set_verticalAlignment: function(v) {
		this.setVerticalAlignment(v);
		return v;
	}
	,get_horizontalAlignment: function() {
		return Std["int"](this.getHorizontalAlignment());
	}
	,set_horizontalAlignment: function(v) {
		this.setHorizontalAlignment(v);
		return v;
	}
	,get_verticalTextPosition: function() {
		return Std["int"](this.getVerticalTextPosition());
	}
	,set_verticalTextPosition: function(v) {
		this.setVerticalTextPosition(v);
		return v;
	}
	,get_horizontalTextPosition: function() {
		return Std["int"](this.getHorizontalTextPosition());
	}
	,set_horizontalTextPosition: function(v) {
		this.setHorizontalTextPosition(v);
		return v;
	}
	,get_iconTextGap: function() {
		return Std["int"](this.getIconTextGap());
	}
	,set_iconTextGap: function(v) {
		this.setIconTextGap(v);
		return v;
	}
	,get_margin: function() {
		return this.getMargin();
	}
	,set_margin: function(v) {
		this.setMargin(v);
		return v;
	}
	,setModel: function(model) {
		var oldModel = this.getModel();
		if(oldModel != null) oldModel.removeStateListener($bind(this,this.__modelStateChanged));
		this._selectionModel = model;
		if(model != null) model.addStateListener($bind(this,this.__modelStateChanged));
		this.repaint();
	}
	,getModel: function() {
		return this._selectionModel;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,append: function(com,constraints) {
		this.insert(-1,com,constraints);
	}
	,insert: function(i,com,constraints) {
		this.insertImp(i,com,constraints);
	}
	,insertImp: function(i,com,constraints) {
		var title = null;
		var icon = null;
		if(constraints == null) title = com.getName(); else if(typeof(constraints) == "string") title = typeof(constraints) == "string"?constraints:null; else if(js_Boot.__instanceof(constraints,org_aswing_Icon)) icon = js_Boot.__instanceof(constraints,org_aswing_Icon)?constraints:null; else title = constraints.toString();
		this.insertTab(i,com,title,icon,null);
	}
	,appendTab: function(com,title,icon,tip) {
		if(title == null) title = "";
		this.insertTab(-1,com,title,icon,tip);
	}
	,appendTabInfo: function(t) {
		if(null != t) this.insertTab(-1,t.content,t.title,t.icon,t.tooltip);
	}
	,insertTab: function(i,com,title,icon,tip) {
		if(title == null) title = "";
		if(i > this.getComponentCount()) throw new js__$Boot_HaxeError(new org_aswing_error_Error("illegal component position when insert comp to container"));
		if(i < 0) i = this.getComponentCount();
		this.insertProperties(i,title,icon,tip);
		var currentSelectedIndex = this.getSelectedIndex();
		var selectedIndexAfterRemove = currentSelectedIndex;
		if(i <= currentSelectedIndex) selectedIndexAfterRemove = currentSelectedIndex + 1; else if(currentSelectedIndex < 0) selectedIndexAfterRemove = i;
		org_aswing_Container.prototype.insertImp.call(this,i,com);
		this.getModel().setSelectedIndex(selectedIndexAfterRemove);
	}
	,insertProperties: function(i,title,icon,tip) {
		if(title == null) title = "";
		this.insertToArray(this.titles,i,title);
		this.insertToArray(this.icons,i,icon);
		this.insertToArray(this.tips,i,tip);
		this.insertToArray(this.enables,i,true);
		this.insertToArray(this.visibles,i,true);
	}
	,removeAtImp: function(i) {
		return this.removeTabAt(i);
	}
	,removeTabAt: function(i) {
		if(i >= this.getComponentCount() || this.getComponentCount() < 0) return null;
		this.removeProperties(i);
		var currentSelectedIndex = this.getSelectedIndex();
		var selectedIndexAfterRemove = currentSelectedIndex;
		if(i == currentSelectedIndex) selectedIndexAfterRemove = -1; else if(i < currentSelectedIndex) selectedIndexAfterRemove = currentSelectedIndex - 1;
		var rc = org_aswing_Container.prototype.removeAtImp.call(this,i);
		rc.setVisible(true);
		if(selectedIndexAfterRemove < 0) this.getModel().clearSelection(); else this.getModel().setSelectedIndex(selectedIndexAfterRemove);
		return rc;
	}
	,removeProperties: function(i) {
		this.removeFromArray(this.titles,i);
		this.removeFromArray(this.icons,i);
		this.removeFromArray(this.tips,i);
		this.removeFromArray(this.enables,i);
		this.removeFromArray(this.visibles,i);
	}
	,setEnabledAt: function(index,enabled) {
		if(this.enables[index] != enabled) {
			this.enables[index] = enabled;
			this.revalidate();
			this.repaint();
		}
	}
	,isEnabledAt: function(index) {
		return this.enables[index] == true;
	}
	,setVisibleAt: function(index,visible) {
		if(this.visibles[index] != visible) {
			this.visibles[index] = visible;
			this.revalidate();
			this.repaint();
		}
	}
	,isVisibleAt: function(index) {
		return this.visibles[index] == true;
	}
	,remove: function(com) {
		var index = this.getIndex(com);
		if(index >= 0) return this.removeAt(index);
		return null;
	}
	,removeAt: function(index) {
		return this.removeAtImp(index);
	}
	,removeAll: function() {
		while(this.children.length > 0) this.removeAt(this.children.length - 1);
	}
	,getTabCount: function() {
		return this.getComponentCount();
	}
	,getTitleAt: function(i) {
		return this.titles[i];
	}
	,getIconAt: function(i) {
		return org_aswing_AsWingUtils["as"](this.icons[i],org_aswing_Icon);
	}
	,getTipAt: function(i) {
		return this.tips[i];
	}
	,setTitleAt: function(i,t) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.titles[i] != t) {
			this.titles[i] = t;
			this.revalidate();
			this.repaint();
		}
	}
	,setIconAt: function(i,icon) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.icons[i] != icon) {
			this.icons[i] = icon;
			this.revalidate();
			this.repaint();
		}
	}
	,setTipAt: function(i,t) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.tips[i] != t) {
			this.tips[i] = t;
			this.revalidate();
			this.repaint();
		}
	}
	,indexOfTitle: function(title) {
		return org_aswing_util_ArrayUtils.indexInArray(this.titles,title);
	}
	,indexOfIcon: function(icon) {
		return org_aswing_util_ArrayUtils.indexInArray(this.icons,icon);
	}
	,indexOfTip: function(tip) {
		return org_aswing_util_ArrayUtils.indexInArray(this.tips,tip);
	}
	,setSelectedIndex: function(i,programmatic) {
		if(programmatic == null) programmatic = true;
		if(i >= -1 && i < this.getComponentCount()) this.getModel().setSelectedIndex(i,programmatic);
	}
	,setSelectedComponent: function(com,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectedIndex(this.getIndex(com),programmatic);
	}
	,getSelectedIndex: function() {
		return this.getModel().getSelectedIndex();
	}
	,getSelectedComponent: function() {
		var index = this.getModel().getSelectedIndex();
		if(index >= 0) return this.getComponent(index);
		return null;
	}
	,getVerticalAlignment: function() {
		return this._verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this._verticalAlignment) return; else {
			this._verticalAlignment = alignment;
			this.revalidate();
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this._horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this._horizontalAlignment) return; else {
			this._horizontalAlignment = alignment;
			this.revalidate();
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this._verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this._verticalTextPosition) return; else {
			this._verticalTextPosition = textPosition;
			this.revalidate();
			this.repaint();
		}
	}
	,getHorizontalTextPosition: function() {
		return this._horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this._horizontalTextPosition) return; else {
			this._horizontalTextPosition = textPosition;
			this.revalidate();
			this.repaint();
		}
	}
	,getIconTextGap: function() {
		return this._iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this._iconTextGap;
		this._iconTextGap = iconTextGap;
		if(iconTextGap != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,setMargin: function(m) {
		if(m != null && !m.equals(this._margin)) {
			this._margin = m;
			this.revalidate();
			this.repaint();
		}
	}
	,getMargin: function() {
		if(this._margin == null) return new org_aswing_plaf_InsetsUIResource(); else if(js_Boot.__instanceof(this._margin,org_aswing_plaf_UIResource)) return new org_aswing_plaf_InsetsUIResource(this._margin.top,this._margin.left,this._margin.bottom,this._margin.right); else return new org_aswing_Insets(this._margin.top,this._margin.left,this._margin.bottom,this._margin.right);
	}
	,__modelStateChanged: function(e) {
		this.__fieldBindings__.dispatch("selectedIndex",null,null);
		this.fireStateChanged(e.isProgrammatic());
	}
	,fireStateChanged: function(programmatic) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,insertToArray: function(arr,i,obj) {
		if(i < 0) arr.push(obj); else {
			var x = obj;
			arr.splice(i,0,x);
		}
	}
	,removeFromArray: function(arr,i) {
		if(i < 0) arr.pop(); else arr.splice(i,1);
	}
	,__class__: org_aswing_AbstractTabbedPane
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_margin:"set_margin",get_margin:"get_margin",set_iconTextGap:"set_iconTextGap",get_iconTextGap:"get_iconTextGap",set_horizontalTextPosition:"set_horizontalTextPosition",get_horizontalTextPosition:"get_horizontalTextPosition",set_verticalTextPosition:"set_verticalTextPosition",get_verticalTextPosition:"get_verticalTextPosition",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_selectionModel:"set_selectionModel",get_selectionModel:"get_selectionModel"})
});
var org_aswing_AsWingConstants = function() { };
$hxClasses["org.aswing.AsWingConstants"] = org_aswing_AsWingConstants;
org_aswing_AsWingConstants.__name__ = ["org","aswing","AsWingConstants"];
var org_aswing_AsWingManager = function() { };
$hxClasses["org.aswing.AsWingManager"] = org_aswing_AsWingManager;
org_aswing_AsWingManager.__name__ = ["org","aswing","AsWingManager"];
org_aswing_AsWingManager.ROOT = null;
org_aswing_AsWingManager.INITIAL_STAGE_WIDTH = null;
org_aswing_AsWingManager.INITIAL_STAGE_HEIGHT = null;
org_aswing_AsWingManager.timer = null;
org_aswing_AsWingManager.setRoot = function(root) {
	org_aswing_AsWingManager.ROOT = root;
	if(root != null && org_aswing_AsWingManager.stage == null && root.stage != null) org_aswing_AsWingManager.initStage(root.stage);
};
org_aswing_AsWingManager.initAsStandard = function(root,_preventNullFocus,workWithFlex) {
	if(workWithFlex == null) workWithFlex = false;
	if(_preventNullFocus == null) _preventNullFocus = true;
	org_aswing_AsWingManager.setRoot(root);
	if(org_aswing_AsWingManager.stage != null) {
		org_aswing_AsWingManager.stage.align = openfl_display_StageAlign.TOP_LEFT;
		org_aswing_AsWingManager.stage.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
		org_aswing_AsWingManager.stage.stageFocusRect = false;
	}
	org_aswing_AsWingManager.preventNullFocus = _preventNullFocus;
	org_aswing_RepaintManager.getInstance().setAlwaysUseTimer(workWithFlex);
	org_aswing_AsWingUtils.initAsStandard();
};
org_aswing_AsWingManager.setPreventNullFocus = function(prevent) {
	org_aswing_AsWingManager.preventNullFocus = prevent;
};
org_aswing_AsWingManager.isPreventNullFocus = function() {
	return org_aswing_AsWingManager.preventNullFocus;
};
org_aswing_AsWingManager.setInitialStageSize = function(width,height) {
	org_aswing_AsWingManager.INITIAL_STAGE_WIDTH = width;
	org_aswing_AsWingManager.INITIAL_STAGE_HEIGHT = height;
};
org_aswing_AsWingManager.getInitialStageSize = function() {
	if(org_aswing_AsWingManager.ROOT == null) throw new js__$Boot_HaxeError(new org_aswing_error_AsWingManagerNotInited());
	return new org_aswing_geom_IntDimension(org_aswing_AsWingManager.INITIAL_STAGE_WIDTH,org_aswing_AsWingManager.INITIAL_STAGE_HEIGHT);
};
org_aswing_AsWingManager.getRoot = function(checkError) {
	if(checkError == null) checkError = true;
	return org_aswing_AsWingManager.ROOT;
};
org_aswing_AsWingManager.initStage = function(theStage) {
	if(org_aswing_AsWingManager.stage == null) {
		org_aswing_AsWingManager.stage = theStage;
		org_aswing_AsWingManager.INITIAL_STAGE_WIDTH = org_aswing_AsWingManager.stage.stageWidth | 0;
		org_aswing_AsWingManager.INITIAL_STAGE_HEIGHT = org_aswing_AsWingManager.stage.stageHeight | 0;
	}
};
org_aswing_AsWingManager.isStageInited = function() {
	return org_aswing_AsWingManager.stage != null;
};
org_aswing_AsWingManager.getStage = function(checkError) {
	if(checkError == null) checkError = true;
	if(checkError && org_aswing_AsWingManager.stage == null) throw new js__$Boot_HaxeError(new org_aswing_error_AsWingManagerNotInited());
	return org_aswing_AsWingManager.stage;
};
org_aswing_AsWingManager.updateAfterMilliseconds = function(delay) {
	if(delay == null) delay = 20;
	if(org_aswing_AsWingManager.timer == null) {
		org_aswing_AsWingManager.timer = new org_aswing_util_Timer(delay,0);
		org_aswing_AsWingManager.timer.addEventListener("act",org_aswing_AsWingManager.__update);
	}
	if(org_aswing_AsWingManager.timer.isRunning() != true) org_aswing_AsWingManager.timer.restart();
};
org_aswing_AsWingManager.frameTrigger = null;
org_aswing_AsWingManager.callNextFrame = function(func) {
	if(org_aswing_AsWingManager.frameTrigger == null) {
		org_aswing_AsWingManager.frameTrigger = new openfl_display_Sprite();
		org_aswing_AsWingManager.frameTrigger.addEventListener(openfl_events_Event.ENTER_FRAME,org_aswing_AsWingManager.__enterFrame);
	}
	org_aswing_AsWingManager.nextFrameCalls.push(func);
};
org_aswing_AsWingManager.callLater = function(func,time) {
	if(time == null) time = 40;
	var timer = new org_aswing_util_Timer(time,0);
	timer.addEventListener("act",function(e) {
		func();
	});
	timer.start();
};
org_aswing_AsWingManager.__update = function(e) {
};
org_aswing_AsWingManager.__enterFrame = function(e) {
	var calls = org_aswing_AsWingManager.nextFrameCalls;
	org_aswing_AsWingManager.nextFrameCalls = [];
	var _g1 = 0;
	var _g = calls.length;
	while(_g1 < _g) {
		var i = _g1++;
		var func = calls[i];
		func();
	}
};
var org_aswing_AsWingUtils = function() { };
$hxClasses["org.aswing.AsWingUtils"] = org_aswing_AsWingUtils;
org_aswing_AsWingUtils.__name__ = ["org","aswing","AsWingUtils"];
org_aswing_AsWingUtils["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
org_aswing_AsWingUtils.initAsStandard = function() {
	org_aswing_AsWingUtils.TEXT_FIELD.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	org_aswing_AsWingUtils.TEXT_FIELD.set_type(openfl_text_TextFieldType.DYNAMIC);
};
org_aswing_AsWingUtils.createSprite = function(parent,name) {
	var sp = new openfl_display_Sprite();
	if(name != null) sp.set_name(name);
	sp.mouseEnabled = false;
	if(parent != null) parent.addChild(sp);
	return sp;
};
org_aswing_AsWingUtils.createLabel = function(parent,name) {
	var textField = new openfl_text_TextField();
	if(name != null) textField.set_name(name);
	textField.set_selectable(false);
	textField.mouseEnabled = false;
	textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	if(parent != null) parent.addChild(textField);
	return textField;
};
org_aswing_AsWingUtils.createShape = function(parent,name) {
	var sp = new openfl_display_Shape();
	if(name != null) sp.set_name(name);
	if(parent != null) parent.addChild(sp);
	return sp;
};
org_aswing_AsWingUtils.isDisplayObjectShowing = function(dis) {
	if(dis == null || dis.stage == null) return false;
	while(dis != null && dis.get_visible() == true) {
		if(dis == dis.stage) return true;
		dis = dis.parent;
	}
	return false;
};
org_aswing_AsWingUtils.isAncestor = function(ancestor,child) {
	if(ancestor == null || child == null) return false;
	var pa = child.parent;
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.parent;
	}
	return false;
};
org_aswing_AsWingUtils.isAncestorComponent = function(ancestor,child) {
	if(ancestor == null || child == null || !js_Boot.__instanceof(ancestor,org_aswing_Container)) return false;
	var pa = child.getParent();
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.getParent();
	}
	return false;
};
org_aswing_AsWingUtils.isAncestorDisplayObject = function(ancestor,child) {
	if(ancestor == null || child == null) return false;
	var pa = child.parent;
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.parent;
	}
	return false;
};
org_aswing_AsWingUtils.getStageMousePosition = function(stage) {
	if(stage == null) stage = org_aswing_AsWingManager.getStage();
	return new org_aswing_geom_IntPoint(Std["int"](org_aswing_AsWingManager.getStage().get_mouseX()),Std["int"](org_aswing_AsWingManager.getStage().get_mouseY()));
};
org_aswing_AsWingUtils.getScreenCenterPosition = function() {
	var r = org_aswing_AsWingUtils.getVisibleMaximizedBounds();
	return new org_aswing_geom_IntPoint(r.x + r.width / 2 | 0,r.y + r.height / 2 | 0);
};
org_aswing_AsWingUtils.centerLocate = function(popup) {
	var p = org_aswing_AsWingUtils.getScreenCenterPosition();
	p.x = Math.round(p.x - popup.getWidth() / 2);
	p.y = Math.round(p.y - popup.getHeight() / 2);
	popup.setLocation(p);
};
org_aswing_AsWingUtils.getVisibleMaximizedBounds = function(dis) {
	var stage;
	if(dis == null) stage = null; else stage = dis.stage;
	if(stage == null) stage = org_aswing_AsWingManager.getStage();
	if(stage == null) return new org_aswing_geom_IntRectangle(200,200);
	if(org_aswing_AsWingManager.getStage().scaleMode != openfl_display_StageScaleMode.NO_SCALE) return new org_aswing_geom_IntRectangle(0,0,Std["int"](org_aswing_AsWingManager.getStage().stageWidth),Std["int"](org_aswing_AsWingManager.getStage().stageHeight));
	var sw = org_aswing_AsWingManager.getStage().stageWidth;
	var sh = org_aswing_AsWingManager.getStage().stageHeight;
	var b = new org_aswing_geom_IntRectangle(0,0,sw | 0,sh | 0);
	if(dis != null) {
		var p = dis.globalToLocal(new openfl_geom_Point(0,0));
		b.setLocation(new org_aswing_geom_IntPoint(p.x | 0,p.y | 0));
	}
	return b;
};
org_aswing_AsWingUtils.applyTextFontAndColor = function(text,font,color) {
	org_aswing_AsWingUtils.applyTextFont(text,font);
	org_aswing_AsWingUtils.applyTextColor(text,color);
};
org_aswing_AsWingUtils.applyTextFont = function(text,font) {
	font.apply(text);
};
org_aswing_AsWingUtils.applyTextFormat = function(text,textFormat) {
	text.setTextFormat(textFormat);
};
org_aswing_AsWingUtils.applyTextColor = function(text,color) {
	if(Std["int"](text.get_textColor()) != color.getRGB()) text.set_textColor(color.getRGB());
	if(text.get_alpha() != color.getAlpha()) text.set_alpha(color.getAlpha());
};
org_aswing_AsWingUtils.layoutCompoundLabel = function(c,f,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap) {
	if(icon != null) {
		iconR.width = icon.getIconWidth(c);
		iconR.height = icon.getIconHeight(c);
	} else iconR.width = iconR.height = 0;
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		var textS = org_aswing_AsWingUtils.inter_computeStringSize(f,text);
		textR.width = textS.width;
		textR.height = textS.height;
	}
	var gap;
	if(textIsEmpty || icon == null) gap = 0; else gap = textIconGap;
	if(textIsEmpty != true) {
		var availTextWidth;
		if(horizontalTextPosition == 0) availTextWidth = viewR.width; else availTextWidth = viewR.width - (iconR.width + gap);
		if(textR.width > availTextWidth) text = org_aswing_AsWingUtils.layoutTextWidth(text,textR,availTextWidth,f);
	}
	if(verticalTextPosition == 1) {
		if(horizontalTextPosition != 0) textR.y = 0; else textR.y = -(textR.height + gap | 0);
	} else if(verticalTextPosition == 0) textR.y = iconR.height / 2 - textR.height / 2 | 0; else if(horizontalTextPosition != 0) textR.y = iconR.height - textR.height | 0; else textR.y = iconR.height + gap | 0;
	if(horizontalTextPosition == 2) textR.x = -(textR.width + gap | 0); else if(horizontalTextPosition == 0) textR.x = iconR.width / 2 - textR.width / 2 | 0; else textR.x = iconR.width + gap | 0;
	var labelR_x = Math.min(iconR.x,textR.x);
	var labelR_width = Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;
	var labelR_y = Math.min(iconR.y,textR.y);
	var labelR_height = Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;
	var dx = 0;
	var dy = 0;
	if(verticalAlignment == 1) dy = viewR.y - labelR_y; else if(verticalAlignment == 0) dy = viewR.y + viewR.height / 2 - (labelR_y + labelR_height / 2); else dy = viewR.y + viewR.height - (labelR_y + labelR_height);
	if(horizontalAlignment == 2) dx = viewR.x - labelR_x; else if(horizontalAlignment == 4) dx = viewR.x + viewR.width - (labelR_x + labelR_width); else dx = viewR.x + viewR.width / 2 - (labelR_x + labelR_width / 2);
	textR.x += dx | 0;
	textR.y += dy | 0;
	iconR.x += dx | 0;
	iconR.y += dy | 0;
	return text;
};
org_aswing_AsWingUtils.layoutCompoundMultilineLabel = function(c,f,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap) {
	if(icon != null) {
		iconR.width = icon.getIconWidth(c);
		iconR.height = icon.getIconHeight(c);
	} else iconR.width = iconR.height = 0;
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		var textS = org_aswing_AsWingUtils.inter_computeStringSize(f,text);
		textR.width = textS.width;
		textR.height = textS.height;
	}
	var gap;
	if(textIsEmpty || icon == null) gap = 0; else gap = textIconGap;
	if(textIsEmpty != true) {
		var availTextWidth;
		var availTextHeight;
		if(horizontalTextPosition == 0) {
			availTextWidth = viewR.width;
			availTextHeight = viewR.height - (iconR.height + gap);
		} else {
			availTextWidth = viewR.width - (iconR.width + gap);
			availTextHeight = viewR.height;
		}
		textR.width = Math.ceil(availTextWidth);
		textR.height = Math.ceil(availTextHeight);
		text = org_aswing_AsWingUtils.layoutTextByRectangle(text,textR,f);
	}
	if(verticalTextPosition == 1) {
		if(horizontalTextPosition != 0) textR.y = 0; else textR.y = -(textR.height + gap | 0);
	} else if(verticalTextPosition == 0) textR.y = iconR.height / 2 - textR.height / 2 | 0; else if(horizontalTextPosition != 0) textR.y = iconR.height - textR.height | 0; else textR.y = iconR.height + gap | 0;
	if(horizontalTextPosition == 2) textR.x = -(textR.width + gap | 0); else if(horizontalTextPosition == 0) textR.x = iconR.width / 2 - textR.width / 2 | 0; else textR.x = iconR.width + gap | 0;
	var labelR_x = Math.min(iconR.x,textR.x);
	var labelR_width = Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;
	var labelR_y = Math.min(iconR.y,textR.y);
	var labelR_height = Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;
	var dx = 0;
	var dy = 0;
	if(verticalAlignment == 1) dy = viewR.y - labelR_y; else if(verticalAlignment == 0) dy = viewR.y + viewR.height / 2 - (labelR_y + labelR_height / 2); else dy = viewR.y + viewR.height - (labelR_y + labelR_height);
	if(horizontalAlignment == 2) dx = viewR.x - labelR_x; else if(horizontalAlignment == 4) dx = viewR.x + viewR.width - (labelR_x + labelR_width); else dx = viewR.x + viewR.width / 2 - (labelR_x + labelR_width / 2);
	textR.x += dx | 0;
	textR.y += dy | 0;
	iconR.x += dx | 0;
	iconR.y += dy | 0;
	return text;
};
org_aswing_AsWingUtils.inter_computeStringSize = function(font,str) {
	if(null == org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL) {
		org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL = new openfl_text_TextField();
		org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL.set_type(openfl_text_TextFieldType.DYNAMIC);
	}
	font.apply(org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL);
	org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL.set_text(str);
	return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL.get_width()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL.get_height()));
};
org_aswing_AsWingUtils.inter_computeStringWidth = function(font,str) {
	if(org_aswing_AsWingUtils.TEXT_FONT != font) {
		font.apply(org_aswing_AsWingUtils.TEXT_FIELD);
		org_aswing_AsWingUtils.TEXT_FONT = font;
	}
	org_aswing_AsWingUtils.TEXT_FIELD.set_text(str);
	return org_aswing_AsWingUtils.TEXT_FIELD.get_textWidth();
};
org_aswing_AsWingUtils.computeStringSize = function(tf,str,includeGutters,textField) {
	if(includeGutters == null) includeGutters = true;
	if(null == org_aswing_AsWingUtils.TEXT_FIELD_EXT) {
		org_aswing_AsWingUtils.TEXT_FIELD_EXT = new openfl_text_TextField();
		org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_type(openfl_text_TextFieldType.DYNAMIC);
	}
	org_aswing_AsWingUtils.TEXT_FIELD_EXT.setTextFormat(tf);
	org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_text(str);
	if(includeGutters) {
		return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_width()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_height()));
		return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textHeight()));
	} else return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textHeight()));
};
org_aswing_AsWingUtils.computeStringSizeWithFont = function(font,str,includeGutters) {
	if(includeGutters == null) includeGutters = true;
	org_aswing_AsWingUtils.TEXT_FIELD_EXT = new openfl_text_TextField();
	org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_type(openfl_text_TextFieldType.DYNAMIC);
	org_aswing_AsWingUtils.TEXT_FIELD_EXT.set_text(str);
	font.apply(org_aswing_AsWingUtils.TEXT_FIELD_EXT);
	if(includeGutters) return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_width()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_height())); else return new org_aswing_geom_IntDimension(Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_EXT.get_textHeight()));
};
org_aswing_AsWingUtils.computeMultilineStringHeightWithFont = function(font,str,width,includeGutters) {
	if(includeGutters == null) includeGutters = true;
	if(null == org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE) {
		org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE = new openfl_text_TextField();
		org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.set_type(openfl_text_TextFieldType.DYNAMIC);
		org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.set_wordWrap(true);
		org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.multiline = true;
	}
	org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.set_text(str);
	org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.set_width(width);
	font.apply(org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE);
	if(includeGutters) return Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.get_height()); else return Math.ceil(org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE.get_textHeight());
};
org_aswing_AsWingUtils.layoutTextWidth = function(text,textR,availTextWidth,font) {
	if(textR.width <= availTextWidth) return text;
	var clipString = "...";
	var totalWidth = Math.round(org_aswing_AsWingUtils.inter_computeStringWidth(font,clipString));
	if(totalWidth > availTextWidth) {
		totalWidth = Math.round(org_aswing_AsWingUtils.inter_computeStringWidth(font,".."));
		if(totalWidth > availTextWidth) {
			text = ".";
			textR.width = Math.round(org_aswing_AsWingUtils.inter_computeStringWidth(font,"."));
			if(textR.width > availTextWidth) {
				textR.width = 0;
				text = "";
			}
		} else {
			text = "..";
			textR.width = totalWidth;
		}
		return text;
	} else {
		var lastWidth = totalWidth;
		var num = text.length;
		var li = 0;
		var ri = num;
		while(li < ri) {
			var i = li + (ri - li) / 2 | 0;
			var subText = HxOverrides.substr(text,0,i);
			var length = Std["int"](Math.ceil(lastWidth + org_aswing_AsWingUtils.inter_computeStringWidth(font,subText)));
			if(li == i - 1 && li > 0) {
				if(length > availTextWidth) {
					subText = HxOverrides.substr(text,0,li);
					textR.width = Std["int"](Math.ceil(lastWidth + org_aswing_AsWingUtils.inter_computeStringWidth(font,HxOverrides.substr(text,0,li))));
				} else textR.width = length | 0;
				return subText + clipString;
			} else if(i <= 1) {
				if(length <= availTextWidth) {
					textR.width = length;
					return subText + clipString;
				} else {
					textR.width = lastWidth | 0;
					return clipString;
				}
			}
			if(length < availTextWidth) li = i; else if(length > availTextWidth) ri = i; else {
				text = subText + clipString;
				textR.width = length;
				return text;
			}
		}
		textR.width = lastWidth | 0;
		return "";
	}
};
org_aswing_AsWingUtils.layoutTextByRectangle = function(text,textR,font) {
	var w = textR.width;
	var h = org_aswing_AsWingUtils.computeMultilineStringHeightWithFont(font,text,w);
	if(h < textR.height) textR.height = h;
	var l = 0;
	var r = w;
	while(l < r) {
		w = Math.ceil((l + r) / 2);
		if(org_aswing_AsWingUtils.computeMultilineStringHeightWithFont(font,text,w) > h) l = w + 1; else r = w - 1;
	}
	while(org_aswing_AsWingUtils.computeMultilineStringHeightWithFont(font,text,w) > h) w += 2;
	if(w < h) w = h;
	if(w < textR.width) textR.width = w;
	return text;
};
org_aswing_AsWingUtils.layoutText = function(f,text,verticalAlignment,horizontalAlignment,viewR,textR) {
	var textFieldSize = org_aswing_AsWingUtils.inter_computeStringSize(f,text);
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		textR.width = Math.ceil(textFieldSize.width);
		textR.height = Math.ceil(textFieldSize.height);
	}
	if(textIsEmpty != true) {
		var availTextWidth = viewR.width;
		if(textR.width > availTextWidth) text = org_aswing_AsWingUtils.layoutTextWidth(text,textR,availTextWidth,f);
	}
	if(horizontalAlignment == 0) textR.x = viewR.x + (viewR.width - textR.width) / 2 | 0; else if(horizontalAlignment == 4) textR.x = viewR.x + (viewR.width - textR.width) | 0; else textR.x = viewR.x;
	if(verticalAlignment == 0) textR.y = viewR.y + (viewR.height - textR.height) / 2 | 0; else if(verticalAlignment == 3) textR.y = viewR.y + (viewR.height - textR.height) | 0; else textR.y = viewR.y;
	return text;
};
org_aswing_AsWingUtils.createPaneToHold = function(com,layout,constraints) {
	var p = new org_aswing_JPanel(layout);
	p.setOpaque(false);
	p.append(com,constraints);
	return p;
};
org_aswing_AsWingUtils.getPopupAncestor = function(c) {
	while(c != null) {
		if(js_Boot.__instanceof(c,org_aswing_JPopup)) return js_Boot.__instanceof(c,org_aswing_JPopup)?c:null;
		c = c.getParent();
	}
	return null;
};
org_aswing_AsWingUtils.getOwnerAncestor = function(c) {
	if(c == null) return null;
	var popup = org_aswing_AsWingUtils.getPopupAncestor(c);
	if(popup == null) return org_aswing_AsWingManager.getRoot();
	return popup;
};
org_aswing_AsWingUtils.getOwnerComponent = function(dis) {
	while(dis != null && !js_Boot.__instanceof(dis,org_aswing_Component)) dis = dis.parent;
	return js_Boot.__instanceof(dis,org_aswing_Component)?dis:null;
};
org_aswing_AsWingUtils.updateAllComponentUIInMemory = function() {
};
org_aswing_AsWingUtils.updateAllComponentUI = function(stage) {
	if(stage == null) stage = org_aswing_AsWingManager.getStage();
	if(org_aswing_AsWingManager.isStageInited()) org_aswing_AsWingUtils.updateChildrenUI(stage);
};
org_aswing_AsWingUtils.updateComponentTreeUI = function(c) {
	org_aswing_AsWingUtils.updateChildrenUI(org_aswing_AsWingUtils.getOwnerAncestor(c));
};
org_aswing_AsWingUtils.updateChildrenUI = function(dis) {
	if(dis == null) return;
	var c;
	c = js_Boot.__instanceof(dis,org_aswing_Component)?dis:null;
	if(c != null) {
		if(c.isUIElement()) return;
		c.updateUI();
	}
	if(js_Boot.__instanceof(dis,openfl_display_DisplayObjectContainer)) {
		var con;
		con = js_Boot.__instanceof(dis,openfl_display_DisplayObjectContainer)?dis:null;
		var _g1 = 0;
		var _g = con.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			org_aswing_AsWingUtils.updateChildrenUI(con.getChildAt(i));
		}
	}
};
var org_aswing_EmptyLayout = function() {
};
$hxClasses["org.aswing.EmptyLayout"] = org_aswing_EmptyLayout;
org_aswing_EmptyLayout.__name__ = ["org","aswing","EmptyLayout"];
org_aswing_EmptyLayout.__interfaces__ = [org_aswing_LayoutManager];
org_aswing_EmptyLayout.prototype = {
	addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		return target.getSize();
	}
	,minimumLayoutSize: function(target) {
		return new org_aswing_geom_IntDimension(0,0);
	}
	,maximumLayoutSize: function(target) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,__class__: org_aswing_EmptyLayout
};
var org_aswing_BorderLayout = function(hgap,vgap) {
	if(vgap == null) vgap = 0;
	if(hgap == null) hgap = 0;
	this.hgap = hgap;
	this.vgap = vgap;
	this.defaultConstraints = "Center";
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.BorderLayout"] = org_aswing_BorderLayout;
org_aswing_BorderLayout.__name__ = ["org","aswing","BorderLayout"];
org_aswing_BorderLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_BorderLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	setDefaultConstraints: function(constraints) {
		this.defaultConstraints = constraints.toString();
	}
	,getHgap: function() {
		return this.hgap;
	}
	,setHgap: function(hgap) {
		this.hgap = hgap;
	}
	,getVgap: function() {
		return this.vgap;
	}
	,setVgap: function(vgap) {
		this.vgap = vgap;
	}
	,addLayoutComponent: function(comp,constraints) {
		var name;
		if(constraints != null) name = constraints.toString(); else name = null;
		this.addLayoutComponentByAlign(name,comp);
	}
	,addLayoutComponentByAlign: function(name,comp) {
		if(name == null) name = this.defaultConstraints;
		if("Center" == name) this.center = comp; else if("North" == name) this.north = comp; else if("South" == name) this.south = comp; else if("East" == name) this.east = comp; else if("West" == name) this.west = comp; else if("First" == name) this.firstLine = comp; else if("Last" == name) this.lastLine = comp; else if("Before" == name) this.firstItem = comp; else if("After" == name) this.lastItem = comp; else this.center = comp;
	}
	,removeLayoutComponent: function(comp) {
		if(comp == this.center) this.center = null; else if(comp == this.north) this.north = null; else if(comp == this.south) this.south = null; else if(comp == this.east) this.east = null; else if(comp == this.west) this.west = null;
		if(comp == this.firstLine) this.firstLine = null; else if(comp == this.lastLine) this.lastLine = null; else if(comp == this.firstItem) this.firstItem = null; else if(comp == this.lastItem) this.lastItem = null;
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,preferredLayoutSize: function(target) {
		var dim = new org_aswing_geom_IntDimension(0,0);
		var ltr = true;
		var c = null;
		var d;
		if((c = this.getChild("East",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width + this.hgap;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("West",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width + this.hgap;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("Center",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("North",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width = Std["int"](Math.max(d.width,dim.width));
			dim.height += d.height + this.vgap;
		}
		if((c = this.getChild("South",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width = Std["int"](Math.max(d.width,dim.width));
			dim.height += d.height + this.vgap;
		}
		var insets = target.getInsets();
		dim.width += insets.left + insets.right;
		dim.height += insets.top + insets.bottom;
		return dim;
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,layoutContainer: function(target) {
		var td = target.getSize();
		var insets = target.getInsets();
		var top = insets.top;
		var bottom = td.height - insets.bottom;
		var left = insets.left;
		var right = td.width - insets.right;
		var ltr = true;
		var c = null;
		var d;
		if((c = this.getChild("North",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org_aswing_geom_IntRectangle(left,top,right - left,d.height));
			top += d.height + this.vgap;
		}
		if((c = this.getChild("South",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org_aswing_geom_IntRectangle(left,bottom - d.height,right - left,d.height));
			bottom -= d.height + this.vgap;
		}
		if((c = this.getChild("East",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org_aswing_geom_IntRectangle(right - d.width,top,d.width,bottom - top));
			right -= d.width + this.hgap;
		}
		if((c = this.getChild("West",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org_aswing_geom_IntRectangle(left,top,d.width,bottom - top));
			left += d.width + this.hgap;
		}
		if((c = this.getChild("Center",ltr)) != null) c.setBounds(new org_aswing_geom_IntRectangle(left,top,right - left,bottom - top));
	}
	,getChild: function(key,ltr) {
		var result = null;
		if(key == "North") if(this.firstLine != null) result = this.firstLine; else result = this.north; else if(key == "South") if(this.lastLine != null) result = this.lastLine; else result = this.south; else if(key == "West") {
			if(ltr) result = this.firstItem; else result = this.lastItem;
			if(result == null) result = this.west;
		} else if(key == "East") {
			if(ltr) result = this.lastItem; else result = this.firstItem;
			if(result == null) result = this.east;
		} else if(key == "Center") result = this.center;
		if(result != null && !result.isVisible()) result = null;
		return result;
	}
	,toString: function() {
		return "BorderLayout[hgap=" + this.hgap + ",vgap=" + this.vgap + "]";
	}
	,__class__: org_aswing_BorderLayout
});
var org_aswing_BoundedRangeModel = function() { };
$hxClasses["org.aswing.BoundedRangeModel"] = org_aswing_BoundedRangeModel;
org_aswing_BoundedRangeModel.__name__ = ["org","aswing","BoundedRangeModel"];
org_aswing_BoundedRangeModel.prototype = {
	__class__: org_aswing_BoundedRangeModel
};
var org_aswing_BoxLayout = function(axis,gap) {
	if(gap == null) gap = 0;
	if(axis == null) axis = 0;
	this.setAxis(axis);
	this.setGap(gap);
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.BoxLayout"] = org_aswing_BoxLayout;
org_aswing_BoxLayout.__name__ = ["org","aswing","BoxLayout"];
org_aswing_BoxLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_BoxLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	setAxis: function(axis) {
		if(axis == null) axis = 0;
		this.axis = axis;
	}
	,getAxis: function() {
		return this.axis;
	}
	,setGap: function(gap) {
		if(gap == null) gap = 0;
		this.gap = gap;
	}
	,getGap: function() {
		return this.gap;
	}
	,preferredLayoutSize: function(target) {
		return this.getCommonLayoutSize(target,false);
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return this.getCommonLayoutSize(target,true);
	}
	,getCommonLayoutSize: function(target,isMax) {
		var count = target.getComponentCount();
		var insets = target.getInsets();
		var width = 0;
		var height = 0;
		var amount = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) {
				var size;
				if(isMax) size = c.getMaximumSize(); else size = c.getPreferredSize();
				width = Std["int"](Math.max(width,size.width));
				height = Std["int"](Math.max(height,size.height));
				amount++;
			}
		}
		if(this.axis == 1) {
			height = height * amount;
			if(amount > 0) height += (amount - 1) * this.gap;
		} else {
			width = width * amount;
			if(amount > 0) width += (amount - 1) * this.gap;
		}
		var dim = new org_aswing_geom_IntDimension(width,height);
		return insets.getOutsideSize(dim);
	}
	,layoutContainer: function(target) {
		var count = target.getComponentCount();
		var amount = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) amount++;
		}
		var size = target.getSize();
		var insets = target.getInsets();
		var rd = insets.getInsideBounds(size.getBounds());
		var ch;
		var cw;
		if(this.axis == 1) {
			ch = Math.floor((rd.height - (amount - 1) * this.gap) / amount);
			cw = rd.width;
		} else {
			ch = rd.height;
			cw = Math.floor((rd.width - (amount - 1) * this.gap) / amount);
		}
		var x = rd.x;
		var y = rd.y;
		var xAdd;
		if(this.axis == 1) xAdd = 0; else xAdd = cw + this.gap;
		var yAdd;
		if(this.axis == 1) yAdd = ch + this.gap; else yAdd = 0;
		var _g1 = 0;
		while(_g1 < count) {
			var ii = _g1++;
			var comp = target.getComponent(ii);
			if(comp.isVisible()) {
				comp.setBounds(new org_aswing_geom_IntRectangle(x,y,cw,ch));
				x += xAdd;
				y += yAdd;
			}
		}
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,__class__: org_aswing_BoxLayout
});
var org_aswing_ButtonGroup = function() {
	this.selection = null;
	this.buttons = [];
};
$hxClasses["org.aswing.ButtonGroup"] = org_aswing_ButtonGroup;
org_aswing_ButtonGroup.__name__ = ["org","aswing","ButtonGroup"];
org_aswing_ButtonGroup.groupButtons = function(buttons) {
	var g = new org_aswing_ButtonGroup();
	var _g = 0;
	while(_g < buttons.length) {
		var i = buttons[_g];
		++_g;
		g.append(i);
	}
	return g;
};
org_aswing_ButtonGroup.prototype = {
	append: function(b) {
		if(b == null) return;
		this.buttons.push(b);
		if(b.isSelected()) {
			if(this.selection == null) this.selection = b.getModel(); else b.setSelected(false);
		}
		b.getModel().setGroup(this);
	}
	,appendAll: function(buttons) {
		var _g = 0;
		while(_g < buttons.length) {
			var i = buttons[_g];
			++_g;
			this.append(i);
		}
	}
	,remove: function(b) {
		if(b == null) return;
		org_aswing_util_ArrayUtils.removeFromArray(this.buttons,b);
		if(b.getModel() == this.selection) this.selection = null;
		b.getModel().setGroup(null);
	}
	,contains: function(b) {
		var _g1 = 0;
		var _g = this.buttons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.buttons[i] == b) return true;
		}
		return false;
	}
	,getElements: function() {
		return org_aswing_util_ArrayUtils.cloneArray(this.buttons);
	}
	,getSelection: function() {
		return this.selection;
	}
	,getSelectedIndex: function() {
		var _g1 = 0;
		var _g = this.buttons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ab = org_aswing_AsWingUtils["as"](this.buttons[i],org_aswing_AbstractButton);
			if(ab.isSelected()) return i;
		}
		return -1;
	}
	,getSelectedButton: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.isSelected()) return b;
		}
		return null;
	}
	,setSelected: function(m,b) {
		if(b && m != null && m != this.selection) {
			var oldSelection = this.selection;
			this.selection = m;
			if(oldSelection != null) oldSelection.setSelected(false);
			m.setSelected(true);
		} else if(!b && m != null && this.allowUncheck) this.selection = null;
	}
	,isSelected: function(m) {
		return m == this.selection;
	}
	,getButtonCount: function() {
		return this.buttons.length;
	}
	,setAllowUncheck: function(allowUncheck) {
		this.allowUncheck = allowUncheck;
	}
	,__class__: org_aswing_ButtonGroup
};
var org_aswing_ButtonModel = function() { };
$hxClasses["org.aswing.ButtonModel"] = org_aswing_ButtonModel;
org_aswing_ButtonModel.__name__ = ["org","aswing","ButtonModel"];
org_aswing_ButtonModel.prototype = {
	__class__: org_aswing_ButtonModel
};
var org_aswing_CellPane = function() {
	org_aswing_Container.call(this);
};
$hxClasses["org.aswing.CellPane"] = org_aswing_CellPane;
org_aswing_CellPane.__name__ = ["org","aswing","CellPane"];
org_aswing_CellPane.__super__ = org_aswing_Container;
org_aswing_CellPane.prototype = $extend(org_aswing_Container.prototype,{
	revalidate: function() {
		this.valid = true;
	}
	,invalidate: function() {
		this.valid = true;
	}
	,invalidateTree: function() {
		this.valid = true;
	}
	,validate: function() {
		this.valid = true;
	}
	,__class__: org_aswing_CellPane
});
var org_aswing_CenterLayout = function() {
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.CenterLayout"] = org_aswing_CenterLayout;
org_aswing_CenterLayout.__name__ = ["org","aswing","CenterLayout"];
org_aswing_CenterLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_CenterLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	preferredLayoutSize: function(target) {
		if(target.getComponentCount() > 0) return target.getInsets().getOutsideSize(target.getComponent(0).getPreferredSize()); else return target.getInsets().getOutsideSize();
	}
	,layoutContainer: function(target) {
		if(target.getComponentCount() > 0) {
			var size = target.getSize();
			var insets = target.getInsets();
			var rd = insets.getInsideBounds(size.getBounds());
			var c = target.getComponent(0);
			var cd = rd.clone();
			var preferSize = c.getPreferredSize();
			cd.setSize(preferSize);
			if(rd.width > preferSize.width) cd.x += (rd.width - preferSize.width) / 2 | 0;
			if(rd.height > preferSize.height) cd.y += (rd.height - preferSize.height) / 2 | 0;
			cd.x = Math.round(cd.x);
			cd.y = Math.round(cd.y);
			c.setBounds(cd);
		}
	}
	,__class__: org_aswing_CenterLayout
});
var org_aswing_ComboBoxEditor = function() { };
$hxClasses["org.aswing.ComboBoxEditor"] = org_aswing_ComboBoxEditor;
org_aswing_ComboBoxEditor.__name__ = ["org","aswing","ComboBoxEditor"];
org_aswing_ComboBoxEditor.prototype = {
	__class__: org_aswing_ComboBoxEditor
};
var org_aswing_FocusTraversalPolicy = function() { };
$hxClasses["org.aswing.FocusTraversalPolicy"] = org_aswing_FocusTraversalPolicy;
org_aswing_FocusTraversalPolicy.__name__ = ["org","aswing","FocusTraversalPolicy"];
org_aswing_FocusTraversalPolicy.prototype = {
	__class__: org_aswing_FocusTraversalPolicy
};
var org_aswing_ContainerOrderFocusTraversalPolicy = function() {
};
$hxClasses["org.aswing.ContainerOrderFocusTraversalPolicy"] = org_aswing_ContainerOrderFocusTraversalPolicy;
org_aswing_ContainerOrderFocusTraversalPolicy.__name__ = ["org","aswing","ContainerOrderFocusTraversalPolicy"];
org_aswing_ContainerOrderFocusTraversalPolicy.__interfaces__ = [org_aswing_FocusTraversalPolicy];
org_aswing_ContainerOrderFocusTraversalPolicy.prototype = {
	getComponentAfter: function(c) {
		return this.getComponentAfterImp(c,true);
	}
	,getComponentAfterImp: function(c,deepIn) {
		if(deepIn == null) deepIn = true;
		if(c == null) return null;
		if(js_Boot.__instanceof(c,org_aswing_Container) && deepIn) {
			var fc = this.getFirstComponent(js_Boot.__instanceof(c,org_aswing_Container)?c:null);
			if(fc != null) return fc;
		}
		var container = c.getParent();
		if(container == null) return this.getFirstComponent(js_Boot.__instanceof(c,org_aswing_Container)?c:null);
		var index = container.getIndex(c);
		var n = container.getComponentCount();
		if(index >= 0) while(++index < n) {
			var nc = this.getFocusableComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		return this.getComponentAfterImp(container,false);
	}
	,getComponentBefore: function(c) {
		return this.getComponentBeforeImp(c);
	}
	,getComponentBeforeImp: function(c) {
		if(c == null) return null;
		var container = c.getParent();
		if(container == null) return this.getLastComponent(js_Boot.__instanceof(c,org_aswing_Container)?c:null);
		var index = container.getIndex(c);
		while(--index >= 0) {
			var nc = this.getLastComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		if(this.accept(container)) return container;
		return this.getComponentBeforeImp(container);
	}
	,getDefaultComponent: function(container) {
		return this.getFirstComponent(container);
	}
	,getFirstComponent: function(container) {
		if(container == null) return null;
		var index = -1;
		var n = container.getComponentCount();
		while(++index < n) {
			var nc = this.getFocusableComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		return null;
	}
	,getLastComponent: function(c) {
		var container;
		container = js_Boot.__instanceof(c,org_aswing_Container)?c:null;
		if(container == null) {
			if(this.accept(c)) return c; else return null;
		}
		var index = container.getComponentCount();
		while(--index >= 0) {
			var theC = container.getComponent(index);
			if(this.isLeaf(theC)) {
				if(this.accept(theC)) return theC;
			}
			var nc = this.getLastComponent(js_Boot.__instanceof(theC,org_aswing_Container)?theC:null);
			if(nc != null) return nc;
		}
		if(this.accept(container)) return container;
		return null;
	}
	,isLeaf: function(c) {
		if(js_Boot.__instanceof(c,org_aswing_Container)) {
			var con;
			con = js_Boot.__instanceof(c,org_aswing_Container)?c:null;
			return con.getComponentCount() == 0;
		}
		return true;
	}
	,accept: function(c) {
		return c != null && c.isShowing() && c.isFocusable() && c.isEnabled();
	}
	,getFocusableComponent: function(c) {
		if(c.isShowing() && c.isEnabled()) {
			if(c.isFocusable()) return c; else if(js_Boot.__instanceof(c,org_aswing_Container)) {
				var con;
				con = js_Boot.__instanceof(c,org_aswing_Container)?c:null;
				var conDefault = con.getFocusTraversalPolicy().getDefaultComponent(con);
				if(conDefault != null) return conDefault;
			}
		}
		return null;
	}
	,__class__: org_aswing_ContainerOrderFocusTraversalPolicy
};
var org_aswing_Cursor = function() { };
$hxClasses["org.aswing.Cursor"] = org_aswing_Cursor;
org_aswing_Cursor.__name__ = ["org","aswing","Cursor"];
org_aswing_Cursor.createCursor = function(type) {
	var cursor = org_aswing_AsWingUtils["as"](org_aswing_UIManager.getInstance(type),openfl_display_DisplayObject);
	if(cursor == null) return null; else if(js_Boot.__instanceof(cursor,openfl_display_Bitmap)) {
		var sp = org_aswing_AsWingUtils.createSprite(null,"bmCursorAdap");
		sp.addChild(cursor);
		cursor.set_x(-cursor.get_width() / 2);
		cursor.set_y(-cursor.get_height() / 2);
		return sp;
	} else return cursor;
};
var org_aswing_util_WeakMap = function() {
	this.hashKeys = new haxe_ds_IntMap();
	this.hashValues = new haxe_ds_IntMap();
	this.length = 0;
};
$hxClasses["org.aswing.util.WeakMap"] = org_aswing_util_WeakMap;
org_aswing_util_WeakMap.__name__ = ["org","aswing","util","WeakMap"];
org_aswing_util_WeakMap.prototype = {
	exists: function(key) {
		return this.hashValues.exists((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
				if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)));
	}
	,get: function(key) {
		return this.hashValues.get((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
				if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)));
	}
	,getID: function(key) {
		if(key.___id___ == null) {
			key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		return key.___id___;
	}
	,iterator: function() {
		return this.hashValues.iterator();
	}
	,keys: function() {
		return this.hashKeys.iterator();
	}
	,remove: function(key) {
		var id;
		if(key.___id___ == null) {
			key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		id = key.___id___;
		this.hashKeys.remove(id);
		this.hashValues.remove(id);
	}
	,set: function(key,value) {
		var id;
		if(key.___id___ == null) {
			key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		id = key.___id___;
		this.hashKeys.h[id] = key;
		this.hashValues.h[id] = value;
	}
	,size: function() {
		return this.length;
	}
	,isEmpty: function() {
		return this.length == 0;
	}
	,eachKey: function(func) {
		var $it0 = this.hashKeys.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			func(i);
		}
	}
	,eachValue: function(func) {
		var $it0 = this.hashValues.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			func(i);
		}
	}
	,containsValue: function(value) {
		var itr = this.hashValues.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			if(i == value) return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.exists(key);
	}
	,getValue: function(key) {
		return this.get(key);
	}
	,put: function(key,value) {
		if(!this.hashValues.exists((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org_aswing_util_WeakMap.nextObjectID++;
				if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)))) this.length++;
		this.set(key,value);
		return value;
	}
	,clear: function() {
		var itr = this.hashKeys.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			this.remove(i);
		}
	}
	,clone: function() {
		var temp = new org_aswing_util_WeakMap();
		var itr = this.hashKeys.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			temp.put(i,this.hashValues.get((function($this) {
				var $r;
				if(i.___id___ == null) {
					i.___id___ = org_aswing_util_WeakMap.nextObjectID++;
					if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
				}
				$r = i.___id___;
				return $r;
			}(this))));
		}
		return temp;
	}
	,__class__: org_aswing_util_WeakMap
};
var org_aswing_CursorManager = function(cursorRoot) {
	this.root = null;
	this.cursorHolder = null;
	this.currentCursor = null;
	this.setCursorContainerRoot(cursorRoot);
	this.tiggerCursorMap = new haxe_ds_IntMap();
};
$hxClasses["org.aswing.CursorManager"] = org_aswing_CursorManager;
org_aswing_CursorManager.__name__ = ["org","aswing","CursorManager"];
org_aswing_CursorManager.getManager = function(stage) {
	if(stage == null) stage = org_aswing_AsWingManager.getStage();
	if(stage == null) return null;
	var manager = org_aswing_CursorManager.managers.hashValues.get((function($this) {
		var $r;
		if(stage.___id___ == null) {
			stage.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		$r = stage.___id___;
		return $r;
	}(this)));
	if(manager == null) {
		manager = new org_aswing_CursorManager(stage);
		org_aswing_CursorManager.managers.set(stage,manager);
	}
	return manager;
};
org_aswing_CursorManager.prototype = {
	setCursorContainerRoot: function(theRoot) {
		if(theRoot != this.root) {
			if(this.root != null) this.root.removeEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.__referenceEvent));
			this.root = theRoot;
			this.root.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.__referenceEvent));
			if(this.cursorHolder != null && this.cursorHolder.parent != this.root) this.root.addChild(this.cursorHolder);
		}
	}
	,__referenceEvent: function(e) {
	}
	,getCursorContainerRoot: function() {
		return this.root;
	}
	,showCustomCursor: function(cursor,hideSystemCursor) {
		if(hideSystemCursor == null) hideSystemCursor = true;
		if(cursor == this.currentCursor) return;
		var ro = this.getCursorContainerRoot();
		if(this.cursorHolder == null) {
			if(ro != null) {
				this.cursorHolder = new openfl_display_Sprite();
				this.cursorHolder.mouseEnabled = false;
				this.cursorHolder.mouseChildren = false;
				ro.addChild(this.cursorHolder);
			}
		}
		if(this.cursorHolder != null) {
			if(this.currentCursor != cursor) {
				if(this.currentCursor != null) this.cursorHolder.removeChild(this.currentCursor);
				this.currentCursor = cursor;
				this.cursorHolder.addChild(this.currentCursor);
			}
			org_aswing_util_DepthManager.bringToTop(this.cursorHolder);
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove),false,0,false);
			this.__mouseMove(null);
		}
	}
	,__mouseMove: function(e) {
		this.cursorHolder.set_x(this.cursorHolder.parent.get_mouseX());
		this.cursorHolder.set_y(this.cursorHolder.parent.get_mouseY());
		org_aswing_util_DepthManager.bringToTop(this.cursorHolder);
	}
	,hideCustomCursor: function(cursor) {
		if(cursor != this.currentCursor) return;
		if(this.cursorHolder != null) {
			if(this.currentCursor != null) this.cursorHolder.removeChild(this.currentCursor);
		}
		this.currentCursor = null;
		var ro = this.getCursorContainerRoot();
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove));
	}
	,setCursor: function(trigger,cursor) {
		var key = trigger.getAwmlIndex();
		this.tiggerCursorMap.h[key] = cursor;
		if(cursor != null) {
			trigger.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__triggerOver),false,0,true);
			trigger.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__triggerOut),false,0,true);
			trigger.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__triggerUp),false,0,true);
		} else {
			trigger.removeEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__triggerOver),false);
			trigger.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__triggerOut),false);
			trigger.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__triggerUp),false);
			var key1 = trigger.getAwmlIndex();
			this.tiggerCursorMap.remove(key1);
		}
	}
	,__triggerOver: function(e) {
		var trigger = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component);
		var cursor = org_aswing_AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.h[key];
			return $r;
		}(this)),openfl_display_DisplayObject);
		if(cursor != null && !e.buttonDown) this.showCustomCursor(cursor);
	}
	,__triggerOut: function(e) {
		var trigger = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component);
		var cursor = org_aswing_AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.h[key];
			return $r;
		}(this)),openfl_display_DisplayObject);
		if(cursor != null) this.hideCustomCursor(cursor);
	}
	,__triggerUp: function(e) {
		var trigger = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component);
		var cursor = org_aswing_AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.h[key];
			return $r;
		}(this)),openfl_display_DisplayObject);
		if(cursor != null && trigger.hitTestPoint(e.stageX,e.stageY,true)) this.showCustomCursor(cursor);
	}
	,__class__: org_aswing_CursorManager
};
var org_aswing_DefaultBoundedRangeModel = function(value,extent,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(extent == null) extent = 0;
	if(value == null) value = 0;
	this.isAdjusting = false;
	openfl_events_EventDispatcher.call(this);
	if(max >= min && value >= min && value + extent >= value && value + extent <= max) {
		this.value = value;
		this.extent = extent;
		this.min = min;
		this.max = max;
	} else throw new js__$Boot_HaxeError(new org_aswing_error_Error("invalid range properties"));
};
$hxClasses["org.aswing.DefaultBoundedRangeModel"] = org_aswing_DefaultBoundedRangeModel;
org_aswing_DefaultBoundedRangeModel.__name__ = ["org","aswing","DefaultBoundedRangeModel"];
org_aswing_DefaultBoundedRangeModel.__interfaces__ = [org_aswing_BoundedRangeModel];
org_aswing_DefaultBoundedRangeModel.__super__ = openfl_events_EventDispatcher;
org_aswing_DefaultBoundedRangeModel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getValue: function() {
		return this.value;
	}
	,getExtent: function() {
		return this.extent;
	}
	,getMinimum: function() {
		return this.min;
	}
	,getMaximum: function() {
		return this.max;
	}
	,setValue: function(n,programmatic) {
		if(programmatic == null) programmatic = true;
		n = Std["int"](Math.min(n,this.max - this.extent));
		var newValue = Std["int"](Math.max(n,this.min));
		this.setRangeProperties(newValue,this.extent,this.min,this.max,this.isAdjusting,programmatic);
	}
	,setExtent: function(n) {
		var newExtent = Std["int"](Math.max(0,n));
		if(this.value + newExtent > this.max) newExtent = this.max - this.value;
		this.setRangeProperties(this.value,newExtent,this.min,this.max,this.isAdjusting);
	}
	,setMinimum: function(n) {
		var newMax = Std["int"](Math.max(n,this.max));
		var newValue = Std["int"](Math.max(n,this.value));
		var newExtent = Std["int"](Math.min(newMax - newValue,this.extent));
		this.setRangeProperties(newValue,newExtent,n,newMax,this.isAdjusting);
	}
	,setMaximum: function(n) {
		var newMin = Std["int"](Math.min(n,this.min));
		var newExtent = Std["int"](Math.min(n - newMin,this.extent));
		var newValue = Std["int"](Math.min(n - newExtent,this.value));
		this.setRangeProperties(newValue,newExtent,newMin,n,this.isAdjusting);
	}
	,setValueIsAdjusting: function(b) {
		this.setRangeProperties(this.value,this.extent,this.min,this.max,b,false);
	}
	,getValueIsAdjusting: function() {
		return this.isAdjusting;
	}
	,setRangeProperties: function(newValue,newExtent,newMin,newMax,adjusting,programmatic) {
		if(programmatic == null) programmatic = true;
		if(newMin > newMax) newMin = newMax;
		if(newValue > newMax) newMax = newValue;
		if(newValue < newMin) newMin = newValue;
		if(newExtent + newValue > newMax) newExtent = newMax - newValue;
		if(newExtent < 0) newExtent = 0;
		var isChange = newValue != this.value || newExtent != this.extent || newMin != this.min || newMax != this.max || adjusting != this.isAdjusting;
		if(isChange) {
			this.value = newValue;
			this.extent = newExtent;
			this.min = newMin;
			this.max = newMax;
			this.isAdjusting = adjusting;
			this.fireStateChanged(programmatic);
		}
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireStateChanged: function(programmatic) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,toString: function() {
		var modelString = "value=" + this.getValue() + ", " + "extent=" + this.getExtent() + ", " + "min=" + this.getMinimum() + ", " + "max=" + this.getMaximum() + ", " + "adj=" + Std.string(this.getValueIsAdjusting());
		return "DefaultBoundedRangeModel" + "[" + modelString + "]";
	}
	,__class__: org_aswing_DefaultBoundedRangeModel
});
var org_aswing_DefaultButtonModel = function() {
	openfl_events_EventDispatcher.call(this);
	this.enabled = true;
	this.rollOver = false;
	this.armed = false;
	this.pressed = false;
	this.selected = false;
};
$hxClasses["org.aswing.DefaultButtonModel"] = org_aswing_DefaultButtonModel;
org_aswing_DefaultButtonModel.__name__ = ["org","aswing","DefaultButtonModel"];
org_aswing_DefaultButtonModel.__interfaces__ = [org_aswing_ButtonModel];
org_aswing_DefaultButtonModel.__super__ = openfl_events_EventDispatcher;
org_aswing_DefaultButtonModel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	isArmed: function() {
		return this.armed;
	}
	,isRollOver: function() {
		return this.rollOver;
	}
	,isSelected: function() {
		return this.selected;
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,isPressed: function() {
		return this.pressed;
	}
	,setEnabled: function(b) {
		if(this.isEnabled() == b) return;
		this.enabled = b;
		if(b != true) {
			this.pressed = false;
			this.armed = false;
		}
		this.fireStateChanged();
	}
	,setPressed: function(b) {
		if(this.isPressed() == b || !this.isEnabled()) return;
		this.pressed = b;
		if(!this.isPressed() && this.isArmed()) this.fireActionEvent();
		this.fireStateChanged();
	}
	,setRollOver: function(b) {
		if(this.isRollOver() == b || !this.isEnabled()) return;
		this.rollOver = b;
		this.fireStateChanged();
	}
	,setArmed: function(b) {
		if(this.isArmed() == b || !this.isEnabled()) return;
		this.armed = b;
		this.fireStateChanged();
	}
	,setSelected: function(b) {
		if(this.isSelected() == b) return;
		this.selected = b;
		this.fireStateChanged();
		this.fireSelectionChanged();
	}
	,setGroup: function(group) {
		this.group = group;
	}
	,getGroup: function() {
		return this.group;
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireActionEvent: function() {
		this.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,fireStateChanged: function() {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged"));
	}
	,fireSelectionChanged: function() {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("selectionChanged"));
	}
	,__class__: org_aswing_DefaultButtonModel
});
var org_aswing_DefaultCheckBoxCellEditor = function() {
	org_aswing_AbstractCellEditor.call(this);
	this.setClickCountToStart(1);
};
$hxClasses["org.aswing.DefaultCheckBoxCellEditor"] = org_aswing_DefaultCheckBoxCellEditor;
org_aswing_DefaultCheckBoxCellEditor.__name__ = ["org","aswing","DefaultCheckBoxCellEditor"];
org_aswing_DefaultCheckBoxCellEditor.__super__ = org_aswing_AbstractCellEditor;
org_aswing_DefaultCheckBoxCellEditor.prototype = $extend(org_aswing_AbstractCellEditor.prototype,{
	getCheckBox: function() {
		if(this.checkBox == null) this.checkBox = new org_aswing_JCheckBox();
		return this.checkBox;
	}
	,getEditorComponent: function() {
		return this.getCheckBox();
	}
	,getCellEditorValue: function() {
		return this.getCheckBox().isSelected();
	}
	,setCellEditorValue: function(value) {
		var selected = false;
		if(value == true) selected = true;
		if(typeof(value) == "string") {
			var va;
			va = typeof(value) == "string"?value:null;
			if(va.toLowerCase() == "true") selected = true;
		}
		this.getCheckBox().setSelected(selected);
	}
	,toString: function() {
		return "DefaultCheckBoxCellEditor[]";
	}
	,__class__: org_aswing_DefaultCheckBoxCellEditor
});
var org_aswing_DefaultComboBoxEditor = function() {
	this.lostingFocus = false;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultComboBoxEditor"] = org_aswing_DefaultComboBoxEditor;
org_aswing_DefaultComboBoxEditor.__name__ = ["org","aswing","DefaultComboBoxEditor"];
org_aswing_DefaultComboBoxEditor.__interfaces__ = [org_aswing_ComboBoxEditor];
org_aswing_DefaultComboBoxEditor.__super__ = openfl_events_EventDispatcher;
org_aswing_DefaultComboBoxEditor.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	selectAll: function() {
		if(this.getTextField().isEditable() && !this.lostingFocus) {
		}
	}
	,setValue: function(value) {
		this.value = value;
		if(value == null) this.getTextField().setText(""); else this.getTextField().setText(Std.string(value) + "");
		this.valueText = this.getTextField().getText();
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,getValue: function() {
		return this.value;
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener,false);
	}
	,setEditable: function(b) {
		this.getTextField().setEditable(b);
		this.getTextField().setEnabled(b);
	}
	,getEditorComponent: function() {
		return this.getTextField();
	}
	,isEditable: function() {
		return this.getTextField().isEditable();
	}
	,toString: function() {
		return "DefaultComboBoxEditor[]";
	}
	,createTextField: function() {
		var tf = new org_aswing_JTextField("",1);
		tf.setBorder(null);
		tf.setOpaque(false);
		tf.setFocusable(false);
		tf.setBackgroundDecorator(null);
		return tf;
	}
	,getTextField: function() {
		if(this.textField == null) {
			this.textField = this.createTextField();
			this.initHandler();
		}
		return this.textField;
	}
	,initHandler: function() {
		this.getTextField().getTextField().addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__textKeyDown));
		this.getTextField().getTextField().addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.__grapValueFormText));
	}
	,__grapValueFormText: function(e) {
		if(this.grapValueFormText()) {
			this.lostingFocus = true;
			this.dispatchEvent(new org_aswing_event_AWEvent("act"));
			this.lostingFocus = false;
		}
	}
	,grapValueFormText: function() {
		if(this.getTextField().isEditable() && this.valueText != this.getTextField().getText()) {
			this.value = this.getTextField().getText();
			return true;
		}
		return false;
	}
	,__textKeyDown: function(e) {
		if(this.getTextField().isEditable() && (e.keyCode | 0) == org_aswing_AWKeyboard.ENTER) {
			this.grapValueFormText();
			this.dispatchEvent(new org_aswing_event_AWEvent("act"));
		}
	}
	,__class__: org_aswing_DefaultComboBoxEditor
});
var org_aswing_ListSelectionModel = function() { };
$hxClasses["org.aswing.ListSelectionModel"] = org_aswing_ListSelectionModel;
org_aswing_ListSelectionModel.__name__ = ["org","aswing","ListSelectionModel"];
org_aswing_ListSelectionModel.prototype = {
	__class__: org_aswing_ListSelectionModel
};
var org_aswing_DefaultListSelectionModel = function() {
	this.value = [];
	this.minIndex = org_aswing_DefaultListSelectionModel.MAX;
	this.maxIndex = org_aswing_DefaultListSelectionModel.MIN;
	this.anchorIndex = -1;
	this.leadIndex = -1;
	this.selectionMode = 1;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultListSelectionModel"] = org_aswing_DefaultListSelectionModel;
org_aswing_DefaultListSelectionModel.__name__ = ["org","aswing","DefaultListSelectionModel"];
org_aswing_DefaultListSelectionModel.__interfaces__ = [org_aswing_ListSelectionModel];
org_aswing_DefaultListSelectionModel.__super__ = openfl_events_EventDispatcher;
org_aswing_DefaultListSelectionModel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) {
			this.clearSelection(programmatic);
			return;
		}
		if(this.getSelectionMode() == 0) index0 = index1;
		var i;
		this.updateLeadAnchorIndices(index0,index1);
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		var changed = false;
		if(min == this.minIndex && max == this.maxIndex) {
			var _g1 = min;
			var _g = max + 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				if(this.value[i1] != true) {
					changed = true;
					break;
				}
			}
		} else changed = true;
		if(changed) {
			this.minIndex = min;
			this.maxIndex = max;
			this.clearSelectionImp();
			var _g11 = this.minIndex;
			var _g2 = this.maxIndex + 1;
			while(_g11 < _g2) {
				var i2 = _g11++;
				this.value[i2] = true;
			}
			this.fireListSelectionEvent(min,max,programmatic);
		}
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) return;
		if(this.getSelectionMode() == 0) {
			this.setSelectionInterval(index0,index1);
			return;
		}
		this.updateLeadAnchorIndices(index0,index1);
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		var changed = false;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.value[i] != true) {
				this.value[i] = true;
				changed = true;
			}
		}
		this.minIndex = Std["int"](Math.min(min,this.minIndex));
		this.maxIndex = Std["int"](Math.max(max,this.maxIndex));
		if(changed) this.fireListSelectionEvent(min,max,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) return;
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		min = Std["int"](Math.max(min,this.minIndex));
		max = Std["int"](Math.min(max,this.maxIndex));
		if(min > max) return;
		this.updateLeadAnchorIndices(index0,index1);
		if(min == this.minIndex && max == this.maxIndex) {
			this.clearSelection();
			return;
		} else if(min > this.minIndex && max < this.maxIndex) {
		} else if(min > this.minIndex && max == this.maxIndex) this.maxIndex = min - 1; else this.minIndex = max + 1;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			this.value[i] = null;
		}
		this.fireListSelectionEvent(min,max,programmatic);
	}
	,getMinSelectionIndex: function() {
		if(this.isSelectionEmpty()) return -1; else return this.minIndex;
	}
	,getMaxSelectionIndex: function() {
		return this.maxIndex;
	}
	,isSelectedIndex: function(index) {
		return this.value[index] == true;
	}
	,updateLeadAnchorIndices: function(anchor,lead) {
		this.anchorIndex = anchor;
		this.leadIndex = lead;
	}
	,getAnchorSelectionIndex: function() {
		return this.anchorIndex;
	}
	,setAnchorSelectionIndex: function(index) {
		this.anchorIndex = index;
	}
	,getLeadSelectionIndex: function() {
		return this.leadIndex;
	}
	,setLeadSelectionIndex: function(index) {
		this.leadIndex = index;
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this.isSelectionEmpty()) {
			var max = this.maxIndex;
			this.minIndex = org_aswing_DefaultListSelectionModel.MAX;
			this.maxIndex = org_aswing_DefaultListSelectionModel.MIN;
			this.clearSelectionImp();
			this.fireListSelectionEvent(0,max,programmatic);
		}
	}
	,clearSelectionImp: function() {
		this.value = [];
	}
	,isSelectionEmpty: function() {
		return this.minIndex > this.maxIndex;
	}
	,insertIndexInterval: function(index,length,before,programmatic) {
		if(programmatic == null) programmatic = true;
		var insMinIndex;
		if(before) insMinIndex = index; else insMinIndex = index + 1;
		var insMaxIndex = insMinIndex + length - 1;
		var needInstertArray = false;
		if(this.isSelectionEmpty()) {
		} else if(this.minIndex >= insMinIndex) {
			this.minIndex += length;
			this.maxIndex += length;
			needInstertArray = true;
		} else if(this.maxIndex < insMinIndex) {
		} else if(insMinIndex > this.minIndex && insMinIndex <= this.maxIndex) {
			this.maxIndex += length;
			needInstertArray = true;
		}
		if(needInstertArray) {
			if(insMinIndex == 0) this.value = [].concat(this.value); else {
				var right = this.value.splice(insMinIndex,this.value.length - insMinIndex);
				this.value = this.value.concat([]).concat(right);
			}
		}
		var leadIn = this.leadIndex;
		if(leadIn > index || before && leadIn == index) leadIn = this.leadIndex + length;
		var anchorIn = this.anchorIndex;
		if(anchorIn > index || before && anchorIn == index) anchorIn = this.anchorIndex + length;
		if(leadIn != this.leadIndex || anchorIn != this.anchorIndex) this.updateLeadAnchorIndices(anchorIn,leadIn);
		if(needInstertArray) this.fireListSelectionEvent(insMinIndex,insMaxIndex + length,programmatic);
	}
	,removeIndexInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var rmMinIndex = Std["int"](Math.min(index0,index1));
		var rmMaxIndex = Std["int"](Math.max(index0,index1));
		var gapLength = rmMaxIndex - rmMinIndex + 1;
		var needFireEvent = true;
		var i;
		if(this.isSelectionEmpty()) needFireEvent = false; else if(this.minIndex >= rmMinIndex && this.maxIndex <= rmMaxIndex) {
			this.minIndex = org_aswing_DefaultListSelectionModel.MAX;
			this.maxIndex = org_aswing_DefaultListSelectionModel.MIN;
			this.clearSelectionImp();
		} else if(this.maxIndex < rmMinIndex) this.value.splice(rmMinIndex,gapLength); else if(this.minIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.minIndex -= gapLength;
			this.maxIndex -= gapLength;
		} else if(this.minIndex < rmMinIndex && this.maxIndex >= rmMinIndex && this.maxIndex <= rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			var _g = this.minIndex;
			while(_g < rmMinIndex) {
				var i1 = _g++;
				this.maxIndex = i1;
				if(this.value[i1] == true) break;
			}
		} else if(this.minIndex >= rmMinIndex && this.maxIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.maxIndex -= gapLength;
			var _g1 = rmMinIndex - 1;
			var _g2 = this.maxIndex + 1;
			while(_g1 < _g2) {
				var i2 = _g1++;
				this.minIndex = i2;
				if(this.value[i2] == true) break;
			}
		} else if(this.minIndex < rmMinIndex && this.maxIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.maxIndex -= gapLength;
		} else needFireEvent = false;
		var leadIn = this.leadIndex;
		if(leadIn == 0 && rmMinIndex == 0) {
		} else if(leadIn > rmMaxIndex) leadIn = this.leadIndex - gapLength; else if(leadIn >= rmMinIndex) leadIn = rmMinIndex - 1;
		var anchorIn = this.anchorIndex;
		if(anchorIn == 0 && rmMinIndex == 0) {
		} else if(anchorIn > rmMaxIndex) anchorIn = this.anchorIndex - gapLength; else if(anchorIn >= rmMinIndex) anchorIn = rmMinIndex - 1;
		if(leadIn != this.leadIndex || anchorIn != this.anchorIndex) this.updateLeadAnchorIndices(anchorIn,leadIn);
		if(needFireEvent) this.fireListSelectionEvent(rmMinIndex,rmMaxIndex + gapLength,programmatic);
	}
	,setSelectionMode: function(selectionMode) {
		this.selectionMode = selectionMode;
	}
	,getSelectionMode: function() {
		return this.selectionMode;
	}
	,addListSelectionListener: function(listener) {
		this.addEventListener("listSelectionChanged",listener);
	}
	,removeListSelectionListener: function(listener) {
		this.removeEventListener("listSelectionChanged",listener);
	}
	,fireListSelectionEvent: function(firstIndex,lastIndex,programmatic) {
		this.dispatchEvent(new org_aswing_event_SelectionEvent("listSelectionChanged",firstIndex,lastIndex,programmatic));
	}
	,toString: function() {
		return "DefaultListSelectionModel[]";
	}
	,__class__: org_aswing_DefaultListSelectionModel
});
var org_aswing_DefaultTextFieldCellEditor = function() {
	org_aswing_AbstractCellEditor.call(this);
	this.setClickCountToStart(2);
};
$hxClasses["org.aswing.DefaultTextFieldCellEditor"] = org_aswing_DefaultTextFieldCellEditor;
org_aswing_DefaultTextFieldCellEditor.__name__ = ["org","aswing","DefaultTextFieldCellEditor"];
org_aswing_DefaultTextFieldCellEditor.__super__ = org_aswing_AbstractCellEditor;
org_aswing_DefaultTextFieldCellEditor.prototype = $extend(org_aswing_AbstractCellEditor.prototype,{
	getTextField: function() {
		if(this.textField == null) this.textField = new org_aswing_JTextField();
		return this.textField;
	}
	,getRestrict: function() {
		return null;
	}
	,transforValueFromText: function(text) {
		return text;
	}
	,getEditorComponent: function() {
		return this.getTextField();
	}
	,getCellEditorValue: function() {
		return this.transforValueFromText(this.getTextField().getText());
	}
	,setCellEditorValue: function(value) {
		this.getTextField().setText(Std.string(value) + "");
	}
	,toString: function() {
		return "DefaultTextFieldCellEditor[]";
	}
	,__class__: org_aswing_DefaultTextFieldCellEditor
});
var org_aswing_DefaultNumberTextFieldCellEditor = function() {
	org_aswing_DefaultTextFieldCellEditor.call(this);
};
$hxClasses["org.aswing.DefaultNumberTextFieldCellEditor"] = org_aswing_DefaultNumberTextFieldCellEditor;
org_aswing_DefaultNumberTextFieldCellEditor.__name__ = ["org","aswing","DefaultNumberTextFieldCellEditor"];
org_aswing_DefaultNumberTextFieldCellEditor.__super__ = org_aswing_DefaultTextFieldCellEditor;
org_aswing_DefaultNumberTextFieldCellEditor.prototype = $extend(org_aswing_DefaultTextFieldCellEditor.prototype,{
	getRestrict: function() {
		return "-0123456789.E";
	}
	,transforValueFromText: function(text) {
		return parseFloat(text);
	}
	,__class__: org_aswing_DefaultNumberTextFieldCellEditor
});
var org_aswing_SingleSelectionModel = function() { };
$hxClasses["org.aswing.SingleSelectionModel"] = org_aswing_SingleSelectionModel;
org_aswing_SingleSelectionModel.__name__ = ["org","aswing","SingleSelectionModel"];
org_aswing_SingleSelectionModel.prototype = {
	__class__: org_aswing_SingleSelectionModel
};
var org_aswing_DefaultSingleSelectionModel = function() {
	this.index = -1;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultSingleSelectionModel"] = org_aswing_DefaultSingleSelectionModel;
org_aswing_DefaultSingleSelectionModel.__name__ = ["org","aswing","DefaultSingleSelectionModel"];
org_aswing_DefaultSingleSelectionModel.__interfaces__ = [org_aswing_SingleSelectionModel];
org_aswing_DefaultSingleSelectionModel.__super__ = openfl_events_EventDispatcher;
org_aswing_DefaultSingleSelectionModel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getSelectedIndex: function() {
		return this.index;
	}
	,setSelectedIndex: function(index,programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.index != index) {
			this.index = index;
			this.fireChangeEvent(programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectedIndex(-1,programmatic);
	}
	,isSelected: function() {
		return this.getSelectedIndex() != -1;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority,useWeakReference);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireChangeEvent: function(programmatic) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,__class__: org_aswing_DefaultSingleSelectionModel
});
var org_aswing_EditableComponent = function() { };
$hxClasses["org.aswing.EditableComponent"] = org_aswing_EditableComponent;
org_aswing_EditableComponent.__name__ = ["org","aswing","EditableComponent"];
org_aswing_EditableComponent.prototype = {
	__class__: org_aswing_EditableComponent
};
var org_aswing_FlowLayout = function(align,hgap,vgap,margin) {
	if(margin == null) margin = true;
	if(vgap == null) vgap = 5;
	if(hgap == null) hgap = 5;
	if(align == null) align = 2;
	this.margin = margin;
	this.hgap = hgap;
	this.vgap = vgap;
	this.setAlignment(align);
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.FlowLayout"] = org_aswing_FlowLayout;
org_aswing_FlowLayout.__name__ = ["org","aswing","FlowLayout"];
org_aswing_FlowLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_FlowLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	setMargin: function(b) {
		this.margin = b;
	}
	,isMargin: function() {
		return this.margin;
	}
	,getAlignment: function() {
		return this.align;
	}
	,setAlignment: function(align) {
		this.align = align;
	}
	,getHgap: function() {
		return this.hgap;
	}
	,setHgap: function(hgap) {
		this.hgap = hgap;
	}
	,getVgap: function() {
		return this.vgap;
	}
	,setVgap: function(vgap) {
		this.vgap = vgap;
	}
	,preferredLayoutSize: function(target) {
		var dim = new org_aswing_geom_IntDimension(0,0);
		var nmembers = target.getComponentCount();
		var counted = 0;
		var _g = 0;
		while(_g < nmembers) {
			var i = _g++;
			var m = target.getComponent(i);
			if(m.isVisible()) {
				var d = m.getPreferredSize();
				dim.height = Std["int"](Math.max(dim.height,d.height));
				if(counted > 0) dim.width += this.hgap;
				dim.width += d.width;
				counted++;
			}
		}
		var insets = target.getInsets();
		dim.width += insets.left + insets.right;
		dim.height += insets.top + insets.bottom;
		if(this.margin) {
			dim.width += this.hgap * 2;
			dim.height += this.vgap * 2;
		}
		return dim;
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,moveComponents: function(target,x,y,width,height,rowStart,rowEnd) {
		var _g = this.align;
		switch(_g) {
		case 2:
			x += 0;
			break;
		case 0:
			x += width / 2 | 0;
			break;
		case 4:
			x += width;
			break;
		}
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var i = _g1++;
			var m = target.getComponent(i);
			var d = m.getSize();
			if(m.isVisible()) {
				m.setLocation(new org_aswing_geom_IntPoint(x,(function($this) {
					var $r;
					var _g11 = $this.verticalAlign;
					$r = (function($this) {
						var $r;
						switch(_g11) {
						case 1:
							$r = y;
							break;
						case 0:
							$r = y + (height - d.height) / 2 | 0;
							break;
						case 3:
							$r = y + height - d.height;
							break;
						default:
							$r = y + (height - d.height) / 2 | 0;
						}
						return $r;
					}($this));
					return $r;
				}(this))));
				x += d.width + this.hgap;
			}
		}
	}
	,layoutContainer: function(target) {
		var insets = target.getInsets();
		var td = target.getSize();
		var marginW;
		marginW = (this.margin?this.hgap * 2:0) | 0;
		var maxwidth = td.width - (insets.left + insets.right + marginW);
		var nmembers = target.getComponentCount();
		var x = 0;
		var y;
		y = insets.top + (this.margin?this.vgap:0);
		var rowh = 0;
		var start = 0;
		var _g = 0;
		while(_g < nmembers) {
			var i = _g++;
			var m = target.getComponent(i);
			if(m.isVisible()) {
				var d = m.getPreferredSize();
				m.setSize(d);
				if(x == 0 || x + d.width <= maxwidth) {
					if(x > 0) x += this.hgap;
					x += d.width;
					rowh = Std["int"](Math.max(rowh,d.height));
				} else {
					this.moveComponents(target,insets.left + (this.margin?this.hgap:0),y,maxwidth - x,rowh,start,i);
					x = d.width;
					y += this.vgap + rowh;
					rowh = d.height;
					start = i;
				}
			}
		}
		this.moveComponents(target,insets.left + (this.margin?this.hgap:0),y,maxwidth - x,rowh,start,nmembers);
	}
	,toString: function() {
		var str = "";
		var _g = this.align;
		switch(_g) {
		case 2:
			str = ",align=left";
			break;
		case 0:
			str = ",align=center";
			break;
		case 4:
			str = ",align=right";
			break;
		}
		return "FlowLayout[hgap=" + this.hgap + ",vgap=" + this.vgap + str + "]";
	}
	,__class__: org_aswing_FlowLayout
});
var org_aswing_FocusManager = function(theStage) {
	this.traversalEnabled = true;
	this.traversalDefault = true;
	this.traversing = false;
	this.inited = false;
	this.defaultPolicy = new org_aswing_ContainerOrderFocusTraversalPolicy();
	this.popups = new org_aswing_util_ArrayList();
	this.init(theStage);
};
$hxClasses["org.aswing.FocusManager"] = org_aswing_FocusManager;
org_aswing_FocusManager.__name__ = ["org","aswing","FocusManager"];
org_aswing_FocusManager.getManager = function(theStage) {
	if(theStage == null) return null;
	var manager = org_aswing_FocusManager.managers.hashValues.get((function($this) {
		var $r;
		if(theStage.___id___ == null) {
			theStage.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		$r = theStage.___id___;
		return $r;
	}(this)));
	if(manager == null) {
		manager = new org_aswing_FocusManager(theStage);
		org_aswing_FocusManager.managers.set(theStage,manager);
	}
	manager.init(theStage);
	return manager;
};
org_aswing_FocusManager.setManager = function(theStage,newManager) {
	if(theStage == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("theStage can't be null!"));
	if(newManager == null) newManager = new org_aswing_FocusManager(theStage);
	var oldManager = org_aswing_FocusManager.managers.hashValues.get((function($this) {
		var $r;
		if(theStage.___id___ == null) {
			theStage.___id___ = org_aswing_util_WeakMap.nextObjectID++;
			if(org_aswing_util_WeakMap.nextObjectID == 2147483647) org_aswing_util_WeakMap.nextObjectID = 0;
		}
		$r = theStage.___id___;
		return $r;
	}(this)));
	if(oldManager != newManager) {
		if(oldManager != null) oldManager.uninit();
		org_aswing_FocusManager.managers.set(theStage,newManager);
	}
};
org_aswing_FocusManager.setDefaultTraversalEnabled = function(b) {
	org_aswing_FocusManager.defaultTraversalEnabled = b;
};
org_aswing_FocusManager.isDefaultTraversalEnabled = function() {
	return org_aswing_FocusManager.defaultTraversalEnabled;
};
org_aswing_FocusManager.prototype = {
	__referenceEvent: function(e) {
	}
	,init: function(theStage) {
		if(this.inited != true) {
			this.stage = theStage;
			this.inited = true;
			this.stage.addEventListener(openfl_events_FocusEvent.KEY_FOCUS_CHANGE,$bind(this,this.__onKeyFocusChange),false,0,false);
			this.stage.addEventListener(openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE,$bind(this,this.__onMouseFocusChange),false,0,false);
			this.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false,0,false);
			this.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false,0,false);
			this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDown),false,0,false);
			this.focusRect = new openfl_display_Sprite();
			this.focusRect.mouseEnabled = false;
			this.focusRect.set_visible(false);
			this.stage.addChild(this.focusRect);
			this.stage.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.__referenceEvent));
		}
	}
	,getPopupsVector: function() {
		return this.popups;
	}
	,moveFocusRectUpperTo: function(c) {
		if(this.focusPaintedComponent != c) {
			if(this.focusPaintedComponent != null) this.removeistenerToFocusPaintedComponent();
			this.focusPaintedComponent = c;
			this.addListenerToFocusPaintedComponent();
		}
		org_aswing_util_DepthManager.bringToTop(this.focusRect);
		var p = c.localToGlobal(new openfl_geom_Point(0,0));
		this.focusRect.set_x(p.x);
		this.focusRect.set_y(p.y);
		return this.focusRect;
	}
	,addListenerToFocusPaintedComponent: function() {
		this.focusPaintedComponent.addEventListener("moved",$bind(this,this.__focusPaintedComMoved));
		this.focusPaintedComponent.addEventListener("resized",$bind(this,this.__focusPaintedComResized));
		this.focusPaintedComponent.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__focusPaintedComRemoved));
	}
	,removeistenerToFocusPaintedComponent: function() {
		if(this.focusPaintedComponent != null) {
			this.focusPaintedComponent.removeEventListener("moved",$bind(this,this.__focusPaintedComMoved));
			this.focusPaintedComponent.removeEventListener("resized",$bind(this,this.__focusPaintedComResized));
			this.focusPaintedComponent.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__focusPaintedComRemoved));
			this.focusPaintedComponent = null;
		}
	}
	,__focusPaintedComRemoved: function(e) {
		if(null == this.focusRect) return;
		this.focusRect.get_graphics().clear();
		this.removeistenerToFocusPaintedComponent();
	}
	,__focusPaintedComMoved: function(e) {
		if(null == this.focusRect) return;
		if(this.focusRect.get_visible()) {
			var dx = e.getNewLocation().x - e.getOldLocation().x;
			var dy = e.getNewLocation().y - e.getOldLocation().y;
			var _g = this.focusRect;
			_g.set_x(_g.get_x() + dx);
			var _g1 = this.focusRect;
			_g1.set_y(_g1.get_y() + dy);
		}
	}
	,__focusPaintedComResized: function(e) {
		if(null == this.focusRect) return;
		if(this.focusRect.get_visible()) this.focusPaintedComponent.paintFocusRect(true);
	}
	,uninit: function() {
		if(this.stage != null) {
			this.stage.removeEventListener(openfl_events_FocusEvent.KEY_FOCUS_CHANGE,$bind(this,this.__onKeyFocusChange),false);
			this.stage.removeEventListener(openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE,$bind(this,this.__onMouseFocusChange),false);
			this.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false);
			this.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false);
			this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDown),false);
			this.stage = null;
			this.focusOwner = null;
			this.activeWindow = null;
			this.defaultPolicy = null;
			this.focusPaintedComponent = null;
			if(this.focusRect.parent != null) this.focusRect.parent.removeChild(this.focusRect);
			this.focusRect = null;
			this.inited = false;
			this.oldFocusOwner = null;
			this.traversing = false;
		}
	}
	,__onMouseDown: function(e) {
		this.setTraversing(false);
	}
	,__onMouseFocusChange: function(e) {
		if(this.focusOwner != null) {
			var tar = org_aswing_AsWingUtils["as"](e.relatedObject,openfl_display_InteractiveObject);
			var is_tar = false;
			if(js_Boot.__instanceof(tar,org_aswing_Component)) {
				var tc;
				tc = js_Boot.__instanceof(tar,org_aswing_Component)?tar:null;
				is_tar = !tc.isFocusable();
			}
		}
	}
	,__onKeyFocusChange: function(e) {
		if(!this.isTraversalEnabled()) return;
		if(this.focusOwner != null) {
		}
		if((e.keyCode | 0) != org_aswing_AWKeyboard.TAB) return;
		this.setTraversing(true);
		if(e.shiftKey) this.focusPrevious(); else this.focusNext();
	}
	,__onKeyDown: function(e) {
		if(this.focusOwner != null) this.focusOwner.fireFocusKeyDownEvent(e);
	}
	,__onKeyUp: function(e) {
		if(this.focusOwner != null) this.focusOwner.fireFocusKeyUpEvent(e);
	}
	,isTraversing: function() {
		return this.traversing;
	}
	,setTraversing: function(b) {
		this.traversing = b;
		this.focusRect.set_visible(b);
		if(b != true) {
			this.focusRect.get_graphics().clear();
			this.removeistenerToFocusPaintedComponent();
		}
	}
	,setTraversalEnabled: function(b) {
		this.traversalEnabled = b;
		this.setTraversalAsDefault(false);
	}
	,isTraversalEnabled: function() {
		return this.traversalEnabled;
	}
	,setTraversalAsDefault: function(b) {
		this.traversalDefault = b;
	}
	,isTraversalAsDefault: function() {
		return this.traversalDefault;
	}
	,getPreviousFocusedComponent: function() {
		return this.oldFocusOwner;
	}
	,getFocusOwner: function() {
		return this.focusOwner;
	}
	,setFocusOwner: function(newFocusOwner) {
		if(this.focusOwner != newFocusOwner) {
			this.oldFocusOwner = this.focusOwner;
			this.focusOwner = newFocusOwner;
		}
	}
	,getActiveWindow: function() {
		return this.activeWindow;
	}
	,setActiveWindow: function(newActiveWindow) {
		this.activeWindow = newActiveWindow;
	}
	,focusNextOfComponent: function(aComponent) {
		if(aComponent != null) aComponent.transferFocus();
	}
	,focusPreviousOfComponent: function(aComponent) {
		if(aComponent != null) aComponent.transferFocusBackward();
	}
	,focusNext: function() {
		this.focusNextOfComponent(this.getFocusOwner());
	}
	,focusPrevious: function() {
		this.focusPreviousOfComponent(this.getFocusOwner());
	}
	,getDefaultFocusTraversalPolicy: function() {
		return this.defaultPolicy;
	}
	,setDefaultFocusTraversalPolicy: function(newDefaultPolicy) {
		if(newDefaultPolicy != null) this.defaultPolicy = newDefaultPolicy;
	}
	,__class__: org_aswing_FocusManager
};
var org_aswing_FrameTitleBar = function() { };
$hxClasses["org.aswing.FrameTitleBar"] = org_aswing_FrameTitleBar;
org_aswing_FrameTitleBar.__name__ = ["org","aswing","FrameTitleBar"];
org_aswing_FrameTitleBar.prototype = {
	__class__: org_aswing_FrameTitleBar
};
var org_aswing_FrameTitleBarLayout = function(minWidth,height) {
	if(height == null) height = 20;
	if(minWidth == null) minWidth = 50;
	org_aswing_BorderLayout.call(this);
	this.minSize = new org_aswing_geom_IntDimension(minWidth,height);
};
$hxClasses["org.aswing.FrameTitleBarLayout"] = org_aswing_FrameTitleBarLayout;
org_aswing_FrameTitleBarLayout.__name__ = ["org","aswing","FrameTitleBarLayout"];
org_aswing_FrameTitleBarLayout.__super__ = org_aswing_BorderLayout;
org_aswing_FrameTitleBarLayout.prototype = $extend(org_aswing_BorderLayout.prototype,{
	countMinSize: function(target) {
		var bar;
		bar = js_Boot.__instanceof(target,org_aswing_FrameTitleBar)?target:null;
		this.minSize.height = bar.getMinimizeHeight();
	}
	,minimumLayoutSize: function(target) {
		this.countMinSize(target);
		return this.preferredLayoutSize(target);
	}
	,preferredLayoutSize: function(target) {
		this.countMinSize(target);
		var size = org_aswing_BorderLayout.prototype.preferredLayoutSize.call(this,target);
		var bar;
		bar = js_Boot.__instanceof(target,org_aswing_FrameTitleBar)?target:null;
		var label = bar.getLabel();
		if(label != null && label.isVisible()) size.width -= Std["int"](Math.max(0,label.getPreferredWidth() - 60));
		size.width = Std["int"](Math.max(this.minSize.width,size.width));
		size.height = Std["int"](Math.max(this.minSize.height,size.height));
		return size;
	}
	,__class__: org_aswing_FrameTitleBarLayout
});
var org_aswing_Insets = function(top,left,bottom,right) {
	if(right == null) right = 0;
	if(bottom == null) bottom = 0;
	if(left == null) left = 0;
	if(top == null) top = 0;
	this.bottom = 0;
	this.top = 0;
	this.left = 0;
	this.right = 0;
	this.top = top;
	this.left = left;
	this.bottom = bottom;
	this.right = right;
};
$hxClasses["org.aswing.Insets"] = org_aswing_Insets;
org_aswing_Insets.__name__ = ["org","aswing","Insets"];
org_aswing_Insets.createIdentic = function(edge) {
	return new org_aswing_Insets(edge,edge,edge,edge);
};
org_aswing_Insets.prototype = {
	addInsets: function(insets) {
		this.top += insets.top;
		this.left += insets.left;
		this.bottom += insets.bottom;
		this.right += insets.right;
		return this;
	}
	,getMarginWidth: function() {
		return this.left + this.right;
	}
	,getMarginHeight: function() {
		return this.top + this.bottom;
	}
	,getInsideBounds: function(bounds) {
		var r;
		if(null != bounds) r = bounds.clone(); else r = new org_aswing_geom_IntRectangle();
		r.x += this.left;
		r.y += this.top;
		r.width -= this.left + this.right;
		r.height -= this.top + this.bottom;
		return r;
	}
	,getOutsideBounds: function(bounds) {
		var r = bounds.clone();
		r.x -= this.left;
		r.y -= this.top;
		r.width += this.left + this.right;
		r.height += this.top + this.bottom;
		return r;
	}
	,getOutsideSize: function(size) {
		if(size == null) size = new org_aswing_geom_IntDimension();
		var s = size.clone();
		s.width += this.left + this.right;
		s.height += this.top + this.bottom;
		return s;
	}
	,getInsideSize: function(size) {
		if(size == null) size = new org_aswing_geom_IntDimension();
		var s = size.clone();
		s.width -= this.left + this.right;
		s.height -= this.top + this.bottom;
		return s;
	}
	,equals: function(o) {
		var i;
		i = js_Boot.__instanceof(o,org_aswing_Insets)?o:null;
		if(i == null) return false; else return i.bottom == this.bottom && i.left == this.left && i.right == this.right && i.top == this.top;
	}
	,clone: function() {
		return new org_aswing_Insets(this.top,this.left,this.bottom,this.right);
	}
	,toString: function() {
		return "Insets(top:" + this.top + ", left:" + this.left + ", bottom:" + this.bottom + ", right:" + this.right + ")";
	}
	,__class__: org_aswing_Insets
};
var org_aswing_JAccordion = function() {
	org_aswing_AbstractTabbedPane.call(this);
	this.setName("JAccordion");
	this.updateUI();
};
$hxClasses["org.aswing.JAccordion"] = org_aswing_JAccordion;
org_aswing_JAccordion.__name__ = ["org","aswing","JAccordion"];
org_aswing_JAccordion.__super__ = org_aswing_AbstractTabbedPane;
org_aswing_JAccordion.prototype = $extend(org_aswing_AbstractTabbedPane.prototype,{
	updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicAccordionUI;
	}
	,getUIClassID: function() {
		return "AccordionUI";
	}
	,setLayout: function(layout) {
		if(js_Boot.__instanceof(layout,org_aswing_plaf_ComponentUI)) org_aswing_AbstractTabbedPane.prototype.setLayout.call(this,layout); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Cannot set non-AccordionUI layout to JAccordion!"));
	}
	,insertTab: function(i,com,title,icon,tip) {
		if(title == null) title = "";
		var item = com;
		if(null != this.itemContainerClass) {
			var container = org_aswing_AsWingUtils["as"](Type.createInstance(this.itemContainerClass,[]),org_aswing_JPanel);
			if(null != container) {
				container.append(item);
				item = container;
			}
		}
		org_aswing_AbstractTabbedPane.prototype.insertTab.call(this,i,item,title,icon,tip);
	}
	,__class__: org_aswing_JAccordion
});
var org_aswing_Orientable = function() { };
$hxClasses["org.aswing.Orientable"] = org_aswing_Orientable;
org_aswing_Orientable.__name__ = ["org","aswing","Orientable"];
org_aswing_Orientable.prototype = {
	__class__: org_aswing_Orientable
};
var org_aswing_JAdjuster = function(columns,orientation) {
	if(orientation == null) orientation = 1;
	if(columns == null) columns = 3;
	org_aswing_Component.call(this);
	this.setColumns(columns);
	this.setOrientation(orientation);
	this._editable = true;
	this._valueTranslator = org_aswing_JAdjuster.DEFAULT_VALUE_TRANSLATOR;
	this._valueParser = org_aswing_JAdjuster.DEFAULT_VALUE_PARSER;
	this.setModel(new org_aswing_DefaultBoundedRangeModel(50,0,0,100));
	this.updateUI();
};
$hxClasses["org.aswing.JAdjuster"] = org_aswing_JAdjuster;
org_aswing_JAdjuster.__name__ = ["org","aswing","JAdjuster"];
org_aswing_JAdjuster.__interfaces__ = [org_aswing_EditableComponent,org_aswing_Orientable];
org_aswing_JAdjuster.DEFAULT_VALUE_TRANSLATOR = function(value) {
	return value + "";
};
org_aswing_JAdjuster.DEFAULT_VALUE_PARSER = function(text) {
	var value = Std.parseInt(text);
	if(value == 0) value = 0;
	return value;
};
org_aswing_JAdjuster.__super__ = org_aswing_Component;
org_aswing_JAdjuster.prototype = $extend(org_aswing_Component.prototype,{
	get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_orientation: function() {
		return this.getOrientation();
	}
	,set_orientation: function(v) {
		this.setOrientation(v);
		return v;
	}
	,get_value: function() {
		return this.getValue();
	}
	,set_value: function(v) {
		var __oldValue__ = this.get_value();
		if(v == __oldValue__) return __oldValue__;
		this.setValue(v);
		this.__fieldBindings__.dispatch("value",__oldValue__,this.get_value());
		return v;
	}
	,get_extent: function() {
		return this.getExtent();
	}
	,set_extent: function(v) {
		this.setExtent(v);
		return v;
	}
	,get_minimum: function() {
		return this.getMinimum();
	}
	,set_minimum: function(v) {
		this.setMinimum(v);
		return v;
	}
	,get_maximum: function() {
		return this.getMaximum();
	}
	,set_maximum: function(v) {
		this.setMaximum(v);
		return v;
	}
	,get_isAdjusting: function() {
		return this.getValueIsAdjusting();
	}
	,get_columns: function() {
		return this.getColumns();
	}
	,set_columns: function(v) {
		this.setColumns(v);
		return v;
	}
	,get_editable: function() {
		return this.isEditable();
	}
	,set_editable: function(v) {
		this.setEditable(v);
		return v;
	}
	,get_valueTranslator: function() {
		return this.getValueTranslator();
	}
	,set_valueTranslator: function(v) {
		this.setValueTranslator(v);
		return v;
	}
	,get_valueParser: function() {
		return this.getValueParser();
	}
	,set_valueParser: function(v) {
		this.setValueParser(v);
		return v;
	}
	,get_stepSize: function() {
		var fui = org_aswing_AsWingUtils["as"](this.get_ui(),jive_plaf_flat_FlatAdjusterUI);
		if(null != fui) return fui.getUnitIncrement(); else return 0;
	}
	,set_stepSize: function(v) {
		var fui = org_aswing_AsWingUtils["as"](this.get_ui(),jive_plaf_flat_FlatAdjusterUI);
		if(null != fui) fui.setUnitIncrement(v);
		return v;
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_AdjusterUI)) org_aswing_Component.prototype.setUI.call(this,newUI); else throw new js__$Boot_HaxeError(new openfl_errors_Error("JComboBox ui should implemented ComboBoxUI interface!"));
	}
	,getAdjusterUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_AdjusterUI);
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicAdjusterUI;
	}
	,getUIClassID: function() {
		return "AdjusterUI";
	}
	,setColumns: function(columns) {
		if(columns < 0) columns = 0;
		if(this._columns != columns) {
			this._columns = columns;
			if(this.getInputText() != null) this.getInputText().setColumns(columns);
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this._columns;
	}
	,getOrientation: function() {
		return this._orientation;
	}
	,setOrientation: function(orientation) {
		this._orientation = orientation;
		if(this.getPopupSlider() != null) this.getPopupSlider().setOrientation(orientation);
	}
	,getModel: function() {
		return this._model;
	}
	,setModel: function(newModel) {
		if(this._model != null) this._model.removeStateListener($bind(this,this.__onModelStateChanged));
		this._model = newModel;
		if(this._model != null) {
			this._model.addStateListener($bind(this,this.__onModelStateChanged));
			if(this._ui != null) this.getPopupSlider().setModel(this._model);
		}
	}
	,__onModelStateChanged: function(event) {
		if(!this.get_isAdjusting()) this.__fieldBindings__.dispatch("value",null,null);
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,getPopupSlider: function() {
		if(this.getAdjusterUI() == null) return null;
		return this.getAdjusterUI().getPopupSlider();
	}
	,getInputText: function() {
		if(this.getAdjusterUI() == null) return null;
		return this.getAdjusterUI().getInputText();
	}
	,setValueTranslator: function(translator) {
		if(this._valueTranslator != translator) {
			this._valueTranslator = translator;
			this.repaint();
		}
	}
	,getValueTranslator: function() {
		return this._valueTranslator;
	}
	,setValueParser: function(parser) {
		if(this._valueParser != parser) {
			this._valueParser = parser;
			this.repaint();
		}
	}
	,getValueParser: function() {
		return this._valueParser;
	}
	,setEditable: function(b) {
		if(this._editable != b) {
			this._editable = b;
			this.repaint();
			this.revalidate();
		}
	}
	,isEditable: function() {
		return this._editable;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value) {
		var m = this.getModel();
		m.setValue(value);
	}
	,getExtent: function() {
		return this.getModel().getExtent();
	}
	,setExtent: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax) {
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting());
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__class__: org_aswing_JAdjuster
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_stepSize:"set_stepSize",get_stepSize:"get_stepSize",set_valueParser:"set_valueParser",get_valueParser:"get_valueParser",set_valueTranslator:"set_valueTranslator",get_valueTranslator:"get_valueTranslator",set_editable:"set_editable",get_editable:"get_editable",set_columns:"set_columns",get_columns:"get_columns",get_isAdjusting:"get_isAdjusting",set_maximum:"set_maximum",get_maximum:"get_maximum",set_minimum:"set_minimum",get_minimum:"get_minimum",set_extent:"set_extent",get_extent:"get_extent",set_value:"set_value",get_value:"get_value",set_orientation:"set_orientation",get_orientation:"get_orientation",set_model:"set_model",get_model:"get_model"})
});
var org_aswing_JToggleButton = function(text,icon) {
	if(text == null) text = "";
	org_aswing_AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JToggleButton");
	this.setModel(new org_aswing_ToggleButtonModel());
};
$hxClasses["org.aswing.JToggleButton"] = org_aswing_JToggleButton;
org_aswing_JToggleButton.__name__ = ["org","aswing","JToggleButton"];
org_aswing_JToggleButton.__super__ = org_aswing_AbstractButton;
org_aswing_JToggleButton.prototype = $extend(org_aswing_AbstractButton.prototype,{
	updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicToggleButtonUI;
	}
	,getUIClassID: function() {
		return "ToggleButtonUI";
	}
	,calculateTargetBackgroundTransitionFactor: function() {
		if(this.get_model().isPressed() || this.get_model().isSelected()) return -1.0; else if(this.get_model().isRollOver()) return 1.0; else return 0.0;
	}
	,__class__: org_aswing_JToggleButton
});
var org_aswing_JCheckBox = function(text,icon) {
	if(text == null) text = "";
	org_aswing_JToggleButton.call(this,text,icon);
	this.setName("JCheckBox");
};
$hxClasses["org.aswing.JCheckBox"] = org_aswing_JCheckBox;
org_aswing_JCheckBox.__name__ = ["org","aswing","JCheckBox"];
org_aswing_JCheckBox.__super__ = org_aswing_JToggleButton;
org_aswing_JCheckBox.prototype = $extend(org_aswing_JToggleButton.prototype,{
	getUIClassID: function() {
		return "CheckBoxUI";
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicCheckBoxUI;
	}
	,__class__: org_aswing_JCheckBox
});
var org_aswing_JComboBox = function(listData) {
	var _g = this;
	org_aswing_Component.call(this);
	this.setName("JComboBox");
	this._maximumRowCount = 7;
	this._editable = false;
	this.setEditor(new org_aswing_DefaultComboBoxEditor());
	if(listData != null) {
		if((listData instanceof Array) && listData.__enum__ == null) this.setListData((listData instanceof Array) && listData.__enum__ == null?listData:null); else if(js_Boot.__instanceof(listData,org_aswing_ListModel)) this.setModel(js_Boot.__instanceof(listData,org_aswing_ListModel)?listData:null); else this.setListData([]);
	}
	this.updateUI();
	this.addEventListener("focusGained",function(e) {
		_g.doFocusTransition();
	});
	this.addEventListener("focusLost",function(e1) {
		_g.doFocusTransition();
	});
};
$hxClasses["org.aswing.JComboBox"] = org_aswing_JComboBox;
org_aswing_JComboBox.__name__ = ["org","aswing","JComboBox"];
org_aswing_JComboBox.__interfaces__ = [org_aswing_EditableComponent];
org_aswing_JComboBox.__super__ = org_aswing_Component;
org_aswing_JComboBox.prototype = $extend(org_aswing_Component.prototype,{
	get_editable: function() {
		return this.isEditable();
	}
	,set_editable: function(v) {
		this.setEditable(v);
		return v;
	}
	,get_maximumRowCount: function() {
		return this.getMaximumRowCount();
	}
	,set_maximumRowCount: function(v) {
		this.setMaximumRowCount(v);
		return v;
	}
	,get_editor: function() {
		return this.getEditor();
	}
	,set_editor: function(v) {
		this.setEditor(v);
		return v;
	}
	,get_popupList: function() {
		return this.getPopupList();
	}
	,get_listCellFactory: function() {
		return this.getListCellFactory();
	}
	,set_listCellFactory: function(v) {
		this.setListCellFactory(v);
		return v;
	}
	,get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_popupVisible: function() {
		return this.isPopupVisible();
	}
	,set_popupVisible: function(v) {
		this.setPopupVisible(v);
		return v;
	}
	,get_selectedItem: function() {
		return this.getSelectedItem();
	}
	,set_selectedItem: function(v) {
		var __oldValue__ = this.get_selectedItem();
		if(v == __oldValue__) return __oldValue__;
		this.setSelectedItem(v);
		this.__fieldBindings__.dispatch("selectedItem",__oldValue__,this.get_selectedItem());
		return v;
	}
	,get_selectedIndex: function() {
		return this.getSelectedIndex();
	}
	,set_selectedIndex: function(v) {
		var __oldValue__ = this.get_selectedIndex();
		if(v == __oldValue__) return __oldValue__;
		this.setSelectedIndex(v);
		this.__fieldBindings__.dispatch("selectedIndex",__oldValue__,this.get_selectedIndex());
		return v;
	}
	,get_length: function() {
		return this.getItemCount();
	}
	,get_notEditableForeground: function() {
		return this._notEditableForeground;
	}
	,set_notEditableForeground: function(v) {
		this._notEditableForeground = v;
		this.updateEditorComponentColors();
		return v;
	}
	,get_notEditableBackground: function() {
		return this._notEditableBackground;
	}
	,set_notEditableBackground: function(v) {
		this._notEditableBackground = v;
		this.updateEditorComponentColors();
		return v;
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_ComboBoxUI)) {
			org_aswing_Component.prototype.setUI.call(this,newUI);
			this.getEditor().getEditorComponent().setFont(this.getFont());
			this.updateEditorComponentColors();
		} else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JComboBox ui should implemented ComboBoxUI interface!"));
	}
	,updateUI: function() {
		this.getPopupList().updateUI();
		this._editor.getEditorComponent().updateUI();
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicComboBoxUI;
	}
	,getUIClassID: function() {
		return "ComboBoxUI";
	}
	,getComboBoxUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_ComboBoxUI);
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener,false);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,getPopupList: function() {
		if(this._popupList == null) {
			this._popupList = new org_aswing_JList(null,new jive_plaf_flat_FlatComboBoxListCellFactory());
			this._popupList.setSelectionMode(0);
		}
		return this._popupList;
	}
	,setMaximumRowCount: function(count) {
		this._maximumRowCount = count;
	}
	,getMaximumRowCount: function() {
		return this._maximumRowCount;
	}
	,getListCellFactory: function() {
		return this.getPopupList().getCellFactory();
	}
	,setListCellFactory: function(newFactory) {
		this.getPopupList().setCellFactory(newFactory);
	}
	,setEditor: function(anEditor) {
		if(anEditor == null) return;
		var oldEditor = this._editor;
		if(oldEditor != null) {
			oldEditor.removeActionListener($bind(this,this.__editorActed));
			oldEditor.getEditorComponent().removeFromContainer();
		}
		this._editor = anEditor;
		this._editor.setEditable(this.isEditable());
		this.addChild(this._editor.getEditorComponent());
		if(this._ui != null) {
			this._editor.getEditorComponent().setFont(this.getFont());
			this.updateEditorComponentColors();
		}
		this._editor.addActionListener($bind(this,this.__editorActed));
		this.revalidate();
	}
	,getEditor: function() {
		return this._editor;
	}
	,getInternalFocusObject: function() {
		if(this.isEditable()) return this.getEditor().getEditorComponent().getInternalFocusObject(); else return this;
	}
	,setFont: function(newFont) {
		org_aswing_Component.prototype.setFont.call(this,newFont);
		this.getPopupList().setFont(newFont);
		this.getEditor().getEditorComponent().setFont(newFont);
	}
	,setForeground: function(c) {
		org_aswing_Component.prototype.setForeground.call(this,c);
		this.updateEditorComponentColors();
	}
	,setBackground: function(c) {
		org_aswing_Component.prototype.setBackground.call(this,c);
		this.updateEditorComponentColors();
	}
	,setEditable: function(b) {
		if(this._editable != b) {
			this._editable = b;
			this.getEditor().setEditable(b);
			if(this.isFocusable() && this.isFocusOwner() && this.stage != null) {
				if(this.stage.get_focus() != this.getInternalFocusObject()) this.stage.set_focus(this.getInternalFocusObject());
			}
			this.updateEditorComponentColors();
		}
	}
	,isEditable: function() {
		return this._editable;
	}
	,setEnabled: function(b) {
		org_aswing_Component.prototype.setEnabled.call(this,b);
		this.updateEditorComponentColors();
		if(!b && this.isPopupVisible()) this.setPopupVisible(false);
		this.getEditor().setEditable(b && this.isEditable());
	}
	,setListData: function(ld) {
		this.getPopupList().setListData(ld);
	}
	,setModel: function(m) {
		if(m != null) this.getPopupList().setModel(m);
	}
	,getModel: function() {
		return this.getPopupList().getModel();
	}
	,showPopup: function() {
		this.setPopupVisible(true);
	}
	,hidePopup: function() {
		this.setPopupVisible(false);
	}
	,setPopupVisible: function(v) {
		this.getComboBoxUI().setPopupVisible(this,v);
	}
	,isPopupVisible: function() {
		return this.getComboBoxUI().isPopupVisible(this);
	}
	,setSelectedItem: function(item,programmatic) {
		if(programmatic == null) programmatic = true;
		var fireChanged = false;
		if(item != this.getSelectedItem()) fireChanged = true;
		this.getEditor().setValue(item);
		var index = this.indexInModel(item);
		if(index >= 0) {
			if(this.getPopupList().getSelectedIndex() != index) {
				this.getPopupList().setSelectedIndex(index,programmatic);
				fireChanged = false;
			}
			this.getPopupList().ensureIndexIsVisible(index);
		}
		if(this.isFocusOwner()) this.getEditor().selectAll();
		this.__fieldBindings__.dispatch("selectedItem",null,null);
		this.__fieldBindings__.dispatch("selectedIndex",null,null);
		this.dispatchEvent(new org_aswing_event_AWEvent("act"));
		if(fireChanged) this.dispatchEvent(new org_aswing_event_InteractiveEvent("selectionChanged",programmatic));
	}
	,getSelectedItem: function() {
		return this.getEditor().getValue();
	}
	,setSelectedIndex: function(anIndex,programmatic) {
		if(programmatic == null) programmatic = true;
		var size = this.getModel().getSize();
		if(anIndex < 0 || anIndex >= size) {
			if(this.getSelectedItem() != null) {
				this.getEditor().setValue(null);
				this.getPopupList().clearSelection();
			}
		} else {
			this.getEditor().setValue(this.getModel().getElementAt(anIndex));
			this.getPopupList().setSelectedIndex(anIndex,programmatic);
			this.getPopupList().ensureIndexIsVisible(anIndex);
		}
		this.__fieldBindings__.dispatch("selectedIndex",null,null);
		this.__fieldBindings__.dispatch("selectedItem",null,null);
		this.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,getSelectedIndex: function() {
		return this.indexInModel(this.getEditor().getValue());
	}
	,getItemCount: function() {
		return this.getModel().getSize();
	}
	,getItemAt: function(index) {
		return this.getModel().getElementAt(index);
	}
	,__editorActed: function(e) {
		if(!this.isPopupVisible()) this.setSelectedItem(this.getEditor().getValue());
	}
	,indexInModel: function(value) {
		var model = this.getModel();
		var n = model.getSize();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(model.getElementAt(i) == value) return i;
		}
		return -1;
	}
	,updateEditorComponentColors: function() {
		if(!this.get_editable() && this.get_enabled()) {
			this.get_editor().getEditorComponent().set_background(this.get_notEditableBackground());
			this.get_editor().getEditorComponent().set_foreground(this.get_notEditableForeground());
		} else {
			this.get_editor().getEditorComponent().set_background(this.get_background());
			this.get_editor().getEditorComponent().set_foreground(this.get_foreground());
		}
	}
	,__class__: org_aswing_JComboBox
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_notEditableBackground:"set_notEditableBackground",get_notEditableBackground:"get_notEditableBackground",set_notEditableForeground:"set_notEditableForeground",get_notEditableForeground:"get_notEditableForeground",get_length:"get_length",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_popupVisible:"set_popupVisible",get_popupVisible:"get_popupVisible",set_model:"set_model",get_model:"get_model",set_listCellFactory:"set_listCellFactory",get_listCellFactory:"get_listCellFactory",get_popupList:"get_popupList",set_editor:"set_editor",get_editor:"get_editor",set_maximumRowCount:"set_maximumRowCount",get_maximumRowCount:"get_maximumRowCount",set_editable:"set_editable",get_editable:"get_editable"})
});
var org_aswing_JFrame = function(owner,title,modal) {
	if(modal == null) modal = false;
	if(title == null) title = "";
	org_aswing_JWindow.call(this,owner,modal);
	this.setClipMasked(true);
	this._title = title;
	this.state = 0;
	this._defaultCloseOperation = 2;
	this._dragable = true;
	this._resizable = true;
	this._closable = true;
	this._icon = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
	this.lastNormalStateBounds = new org_aswing_geom_IntRectangle(0,0,200,100);
	this.setName("JFrame");
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__frameAddedToStage));
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__frameRemovedFromStage));
	this.addEventListener("moved",$bind(this,this.__frameMoved),false,0,false);
	this.updateUI();
	this.setTitleBar(new org_aswing_JFrameTitleBar());
};
$hxClasses["org.aswing.JFrame"] = org_aswing_JFrame;
org_aswing_JFrame.__name__ = ["org","aswing","JFrame"];
org_aswing_JFrame.__super__ = org_aswing_JWindow;
org_aswing_JFrame.prototype = $extend(org_aswing_JWindow.prototype,{
	get_titleBar: function() {
		return this.getTitleBar();
	}
	,set_titleBar: function(v) {
		this.setTitleBar(v);
		return v;
	}
	,get_title: function() {
		return this.getTitle();
	}
	,set_title: function(v) {
		this.setTitle(v);
		return v;
	}
	,get_icon: function() {
		return this.getIcon();
	}
	,set_icon: function(v) {
		this.setIcon(v);
		return v;
	}
	,get_defaultCloseOperation: function() {
		return this.getDefaultCloseOperation();
	}
	,set_defaultCloseOperation: function(v) {
		this.setDefaultCloseOperation(v);
		return v;
	}
	,get_dragable: function() {
		return this.isDragable();
	}
	,set_dragable: function(v) {
		this.setDragable(v);
		return v;
	}
	,get_resizable: function() {
		return this.isResizable();
	}
	,set_resizable: function(v) {
		this.setResizable(v);
		return v;
	}
	,get_closable: function() {
		return this.isClosable();
	}
	,set_closable: function(v) {
		this.setClosable(v);
		return v;
	}
	,get_dragDirectly: function() {
		return this.isDragDirectly();
	}
	,set_dragDirectly: function(v) {
		this.setDragDirectly(v);
		return v;
	}
	,get_dragDirectlySet: function() {
		return this.isDragDirectlySet();
	}
	,set_dragDirectlySet: function(v) {
		this.setDragDirectlySet(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicFrameUI;
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_FrameUI)) org_aswing_JWindow.prototype.setUI.call(this,newUI); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JFrame just accept FrameUI instance!!!"));
	}
	,getTitleBar: function() {
		return this._titleBar;
	}
	,setTitleBar: function(t) {
		if(this._titleBar != t) {
			var old = this._titleBar;
			if(this._titleBar != null) {
				this._titleBar.setFrame(null);
				this.remove(this._titleBar.getSelf());
			}
			this._titleBar = t;
			if(this._titleBar != null) {
				this._titleBar.setText(this.getTitle());
				this._titleBar.setIcon(this.getIcon());
				this.insert(0,this._titleBar.getSelf(),"Title");
				this._titleBar.setFrame(this);
			}
			this.dispatchEvent(new org_aswing_event_PropertyChangeEvent("titleBar",old,t));
		}
	}
	,getFrameUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_FrameUI);
	}
	,getUIClassID: function() {
		return "FrameUI";
	}
	,setTitle: function(t) {
		if(this._title != t) {
			this._title = t;
			if(this.getTitleBar() != null) this.getTitleBar().setText(t);
			this.repaint();
			this.revalidate();
		}
	}
	,getTitle: function() {
		return this._title;
	}
	,setIcon: function(ico) {
		if(this._icon != ico) {
			this._icon = ico;
			if(this.getTitleBar() != null) this.getTitleBar().setIcon(ico);
			this.repaint();
			this.revalidate();
		}
	}
	,getIcon: function() {
		return this._icon;
	}
	,setResizable: function(b) {
		if(this._resizable != b) {
			this._resizable = b;
			this.getResizer().setEnabled(b);
			this.repaint();
			this.dispatchEvent(new org_aswing_event_FrameEvent("frameAbilityChanged",true));
		}
	}
	,isResizable: function() {
		return this._resizable;
	}
	,setDragable: function(b) {
		if(this._dragable != b) {
			this._dragable = b;
			this.repaint();
			this.revalidate();
			this.dispatchEvent(new org_aswing_event_FrameEvent("frameAbilityChanged",true));
		}
	}
	,isDragable: function() {
		return this._dragable;
	}
	,setClosable: function(b) {
		if(this._closable != b) {
			this._closable = b;
			this.repaint();
			this.dispatchEvent(new org_aswing_event_FrameEvent("frameAbilityChanged",true));
		}
	}
	,isClosable: function() {
		return this._closable;
	}
	,pack: function() {
		if(this.getState() == 0) org_aswing_JWindow.prototype.pack.call(this);
	}
	,getMaximizedBounds: function() {
		if(this.maximizedBounds == null) {
			var b = org_aswing_AsWingUtils.getVisibleMaximizedBounds(this.parent);
			return this.getInsets().getOutsideBounds(b);
		} else return this.maximizedBounds.clone();
	}
	,setMaximizedBounds: function(b) {
		if(b != null) {
			this.maximizedBounds = b.clone();
			this.revalidate();
		} else this.maximizedBounds = null;
	}
	,setDefaultCloseOperation: function(operation) {
		if(operation != 0 && operation != 1 && operation != 2) operation = 2;
		this._defaultCloseOperation = operation;
	}
	,getDefaultCloseOperation: function() {
		return this._defaultCloseOperation;
	}
	,setState: function(s,programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.state != s) {
			if(this.state == 0) this.lastNormalStateBounds.setRect(this.getComBounds());
			this.state = s;
			this.fireStateChanged();
			if(this.state == 2) this.precessIconified(programmatic); else if((this.state & 4) == 4 || (this.state & 8) == 8) this.precessMaximized(programmatic); else this.precessRestored(programmatic);
			this.doStateChange();
		}
	}
	,isMaximized: function() {
		return (this.state & 4) == 4 || (this.state & 8) == 8;
	}
	,doStateChange: function() {
		if(this.state == 2) {
			var iconifiedSize = new org_aswing_geom_IntDimension(60,20);
			if(this._titleBar != null) iconifiedSize = this._titleBar.getSelf().getMinimumSize();
			this.setSize(this.getInsets().getOutsideSize(iconifiedSize));
			var frameMaxBounds = this.getMaximizedBounds();
			if(this.get_x() < frameMaxBounds.x) this.set_x(frameMaxBounds.x);
		} else if(this.state == 0) this.setBounds(this.lastNormalStateBounds); else this.setSizeToFixMaxmimized();
		if(this.getResizer() != null) this.getResizer().setEnabled(this.isResizable() && this.state == 0);
		this.revalidateIfNecessary();
	}
	,__frameMoved: function(e) {
		if(this.state == 2) this.lastNormalStateBounds.setLocation(e.getNewLocation());
	}
	,__frameAddedToStage: function(e) {
		org_aswing_AsWingManager.getStage().addEventListener(openfl_events_Event.RESIZE,$bind(this,this.__frameStageResized),false,0,false);
	}
	,__frameRemovedFromStage: function(e) {
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_Event.RESIZE,$bind(this,this.__frameStageResized));
	}
	,__frameStageResized: function(e) {
		if(this.stage == null || org_aswing_AsWingManager.getStage().scaleMode != openfl_display_StageScaleMode.NO_SCALE) return;
		if(this.isMaximized()) {
			this.setSizeToFixMaxmimized();
			this.revalidateIfNecessary();
		}
	}
	,setSizeToFixMaxmimized: function() {
		var maxBounds = this.getMaximizedBounds();
		var b = this.getComBounds();
		if((this.state & 4) == 4) {
			b.x = maxBounds.x;
			b.width = maxBounds.width;
		}
		if((this.state & 8) == 8) {
			b.y = maxBounds.y;
			b.height = maxBounds.height;
		}
		this.setBounds(b);
	}
	,precessIconified: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org_aswing_event_FrameEvent("frameIconified",programmatic));
	}
	,precessRestored: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org_aswing_event_FrameEvent("frameRestored",programmatic));
	}
	,precessMaximized: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org_aswing_event_FrameEvent("frameMaximized",programmatic));
	}
	,doSubPopusVisible: function() {
		var owneds = this.getOwnedEquipedPopups();
		var _g1 = 0;
		var _g = owneds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var pop = owneds[i];
			pop.getGroundContainer().set_visible(pop.shouldGroundVisible());
		}
	}
	,shouldOwnedPopupGroundVisible: function(popup) {
		if(this.getState() == 2) return false;
		return org_aswing_JWindow.prototype.shouldOwnedPopupGroundVisible.call(this,popup);
	}
	,getState: function() {
		return this.state;
	}
	,setResizer: function(r) {
		if(r != this.resizer) {
			this.resizer = r;
			if(this.resizerController == null) this.resizerController = org_aswing_resizer_ResizerController.create(this,r); else this.resizerController.setResizer(this.resizer);
			this.resizerController.setResizable(this.isResizable());
		}
	}
	,getResizer: function() {
		return this.resizer;
	}
	,setResizeDirectly: function(b) {
		if(this.resizerController != null) this.resizerController.setResizeDirectly(b);
	}
	,isResizeDirectly: function() {
		if(this.resizerController != null) return this.resizer.isResizeDirectly(); else return false;
	}
	,setDragDirectly: function(b) {
		this._dragDirectly = b;
		this.setDragDirectlySet(true);
	}
	,isDragDirectly: function() {
		return this._dragDirectly;
	}
	,setDragDirectlySet: function(b) {
		this._dragDirectlySet = b;
	}
	,isDragDirectlySet: function() {
		return this._dragDirectlySet;
	}
	,closeReleased: function() {
		this.dispatchEvent(new org_aswing_event_FrameEvent("frameClosing",false));
		this.tryToClose();
	}
	,tryToClose: function() {
		if(this._defaultCloseOperation == 1) this.hide(); else if(this._defaultCloseOperation == 2) this.dispose();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,initModalMC: function() {
		org_aswing_JWindow.prototype.initModalMC.call(this);
		this.getModalMC().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__flashModelFrame));
	}
	,__flashModelFrame: function(e) {
		if(this.getFrameUI() != null) this.getFrameUI().flashModalFrame();
	}
	,__class__: org_aswing_JFrame
	,__properties__: $extend(org_aswing_JWindow.prototype.__properties__,{set_dragDirectlySet:"set_dragDirectlySet",get_dragDirectlySet:"get_dragDirectlySet",set_dragDirectly:"set_dragDirectly",get_dragDirectly:"get_dragDirectly",set_closable:"set_closable",get_closable:"get_closable",set_resizable:"set_resizable",get_resizable:"get_resizable",set_dragable:"set_dragable",get_dragable:"get_dragable",set_defaultCloseOperation:"set_defaultCloseOperation",get_defaultCloseOperation:"get_defaultCloseOperation",set_icon:"set_icon",get_icon:"get_icon",set_title:"set_title",get_title:"get_title",set_titleBar:"set_titleBar",get_titleBar:"get_titleBar"})
});
var org_aswing_JFrameTitleBar = function() {
	org_aswing_Container.call(this);
	this.setClipMasked(true);
	this._titleEnabled = true;
	this._minimizeHeight = 22;
	this.setLayout(new org_aswing_FrameTitleBarLayout());
	this.buttonPane = new org_aswing_Container();
	this.buttonPane.setCachePreferSizes(false);
	this.buttonPaneLayout = new org_aswing_SoftBoxLayout(0,0);
	this.buttonPane.setLayout(this.buttonPaneLayout);
	var labelPane = new org_aswing_Container();
	labelPane.setLayout(new org_aswing_BorderLayout());
	this.titleLabel = new org_aswing_JLabel();
	this.titleLabel.setHorizontalAlignment(2);
	this.titleLabel.setVerticalAlignment(0);
	this.titleLabel.setUIElement(true);
	labelPane.setUIElement(true);
	labelPane.append(this.titleLabel,"Center");
	labelPane.mouseEnabled = false;
	labelPane.mouseChildren = false;
	this.append(labelPane,"Center");
	var btnpP = new org_aswing_Container();
	btnpP.setLayout(new org_aswing_CenterLayout());
	btnpP.append(this.buttonPane);
	this.append(btnpP,"East");
	this.setIconifiedButton(this.createIconifiedButton());
	this.setMaximizeButton(this.createMaximizeButton());
	this.setRestoreButton(this.createRestoreButton());
	this.setCloseButton(this.createCloseButton());
	this.setMaximizeButtonVisible(false);
	this.buttonPane.appendAll([this._iconifiedButton,this._restoreButton,this._maximizeButton,this._closeButton]);
	this.buttonPane.setUIElement(true);
	this.updateUI();
};
$hxClasses["org.aswing.JFrameTitleBar"] = org_aswing_JFrameTitleBar;
org_aswing_JFrameTitleBar.__name__ = ["org","aswing","JFrameTitleBar"];
org_aswing_JFrameTitleBar.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_FrameTitleBar];
org_aswing_JFrameTitleBar.__super__ = org_aswing_Container;
org_aswing_JFrameTitleBar.prototype = $extend(org_aswing_Container.prototype,{
	get_iconifiedButton: function() {
		return this.getIconifiedButton();
	}
	,set_iconifiedButton: function(v) {
		this.setIconifiedButton(v);
		return v;
	}
	,get_maximizeButton: function() {
		return this.getMaximizeButton();
	}
	,set_maximizeButton: function(v) {
		this.setMaximizeButton(v);
		return v;
	}
	,get_restoreButton: function() {
		return this.getRestoreButton();
	}
	,set_restoreButton: function(v) {
		this.setRestoreButton(v);
		return v;
	}
	,get_closeButton: function() {
		return this.getCloseButton();
	}
	,set_closeButton: function(v) {
		this.setCloseButton(v);
		return v;
	}
	,get_icon: function() {
		return this.getIcon();
	}
	,set_icon: function(v) {
		this.setIcon(v);
		return v;
	}
	,get_text: function() {
		return this.getText();
	}
	,set_text: function(v) {
		this.setText(v);
		return v;
	}
	,get_titleEnabled: function() {
		return this.isTitleEnabled();
	}
	,set_titleEnabled: function(v) {
		this.setTitleEnabled(v);
		return v;
	}
	,get_minimizeHeight: function() {
		return this.getMinimizeHeight();
	}
	,set_minimizeHeight: function(v) {
		this.setMinimizeHeight(v);
		return v;
	}
	,get_owner: function() {
		return this.getFrame();
	}
	,set_owner: function(v) {
		this.setFrame(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicFrameTitleBarUI;
	}
	,createPureButton: function() {
		var b = new org_aswing_JButton();
		b.setBackgroundDecorator(null);
		b.setMargin(new org_aswing_Insets());
		b.setStyleTune(null);
		b.setBackground(null);
		b.setForeground(null);
		b.setMideground(null);
		b.setStyleProxy(this);
		return b;
	}
	,createIconifiedButton: function() {
		return this.createPureButton();
	}
	,createMaximizeButton: function() {
		return this.createPureButton();
	}
	,createRestoreButton: function() {
		return this.createPureButton();
	}
	,createCloseButton: function() {
		return this.createPureButton();
	}
	,setButtonIconGap: function(gap) {
		this.buttonPaneLayout.setGap(gap);
	}
	,getSelf: function() {
		return this;
	}
	,setFrame: function(f) {
		if(this._owner != null) {
			this._owner.removeEventListener("frameAbilityChanged",$bind(this,this.__frameAbilityChanged));
			this._owner.removeEventListener("stateChanged",$bind(this,this.__stateChanged));
			this._owner.removeEventListener("windowActived",$bind(this,this.__activeChange));
			this._owner.removeEventListener("windowDeactived",$bind(this,this.__activeChange));
		}
		this._owner = f;
		this.frame = js_Boot.__instanceof(f,org_aswing_JFrame)?f:null;
		if(this._owner != null) {
			this._owner.addEventListener("frameAbilityChanged",$bind(this,this.__frameAbilityChanged),false,0,false);
			this._owner.addEventListener("stateChanged",$bind(this,this.__stateChanged),false,0,false);
			this._owner.addEventListener("windowActived",$bind(this,this.__activeChange),false,0,false);
			this._owner.addEventListener("windowDeactived",$bind(this,this.__activeChange),false,0,false);
		}
		this.__stateChanged(null);
		this.repaint();
	}
	,getFrame: function() {
		return this._owner;
	}
	,setTitleEnabled: function(b) {
		this._titleEnabled = b;
	}
	,isTitleEnabled: function() {
		return this._titleEnabled;
	}
	,setMinimizeHeight: function(h) {
		this._minimizeHeight = h;
	}
	,getMinimizeHeight: function() {
		return this._minimizeHeight;
	}
	,addExtraControl: function(c,position) {
		if(position == 2) this.buttonPane.insert(0,c); else this.buttonPane.append(c);
	}
	,removeExtraControl: function(c) {
		return this.buttonPane.remove(c);
	}
	,getLabel: function() {
		return this.titleLabel;
	}
	,setIcon: function(i) {
		this._icon = i;
		if(this.titleLabel != null) this.titleLabel.setIcon(i);
	}
	,getIcon: function() {
		return this._icon;
	}
	,setText: function(t) {
		this._text = t;
		if(this.titleLabel != null) this.titleLabel.setText(t);
	}
	,getText: function() {
		return this._text;
	}
	,isActive: function() {
		if(this._owner != null) return this._owner.isActive();
		return true;
	}
	,setIconifiedButton: function(b) {
		if(this._iconifiedButton != b) {
			var index = -1;
			if(this._iconifiedButton != null) {
				index = this.buttonPane.getIndex(this._iconifiedButton);
				this.buttonPane.removeAt(index);
				this._iconifiedButton.removeActionListener($bind(this,this.__iconifiedPressed));
			}
			this._iconifiedButton = b;
			if(this._iconifiedButton != null) {
				this.buttonPane.insert(index,this._iconifiedButton);
				this._iconifiedButton.addActionListener($bind(this,this.__iconifiedPressed));
			}
		}
	}
	,setMaximizeButton: function(b) {
		if(this._maximizeButton != b) {
			var index = -1;
			if(this._maximizeButton != null) {
				index = this.buttonPane.getIndex(this._maximizeButton);
				this.buttonPane.removeAt(index);
				this._maximizeButton.removeActionListener($bind(this,this.__maximizePressed));
			}
			this._maximizeButton = b;
			if(this._maximizeButton != null) {
				this.buttonPane.insert(index,this._maximizeButton);
				this._maximizeButton.addActionListener($bind(this,this.__maximizePressed));
			}
		}
	}
	,setRestoreButton: function(b) {
		if(this._restoreButton != b) {
			var index = -1;
			if(this._restoreButton != null) {
				index = this.buttonPane.getIndex(this._restoreButton);
				this.buttonPane.removeAt(index);
				this._restoreButton.removeActionListener($bind(this,this.__restorePressed));
			}
			this._restoreButton = b;
			if(this._restoreButton != null) {
				this.buttonPane.insert(index,this._restoreButton);
				this._restoreButton.addActionListener($bind(this,this.__restorePressed));
			}
		}
	}
	,setCloseButton: function(b) {
		if(this._closeButton != b) {
			var index = -1;
			if(this._closeButton != null) {
				index = this.buttonPane.getIndex(this._closeButton);
				this.buttonPane.removeAt(index);
				this._closeButton.removeActionListener($bind(this,this.__closePressed));
			}
			this._closeButton = b;
			if(this._closeButton != null) {
				this.buttonPane.insert(index,this._closeButton);
				this._closeButton.addActionListener($bind(this,this.__closePressed));
			}
		}
	}
	,getIconifiedButton: function() {
		return this._iconifiedButton;
	}
	,getMaximizeButton: function() {
		return this._maximizeButton;
	}
	,getRestoreButton: function() {
		return this._restoreButton;
	}
	,getCloseButton: function() {
		return this._closeButton;
	}
	,setIconifiedButtonVisible: function(b) {
		if(this.getIconifiedButton() != null) this.getIconifiedButton().setVisible(b);
	}
	,setMaximizeButtonVisible: function(b) {
		if(this.getMaximizeButton() != null) this.getMaximizeButton().setVisible(b);
	}
	,setRestoreButtonVisible: function(b) {
		if(this.getRestoreButton() != null) this.getRestoreButton().setVisible(b);
	}
	,setCloseButtonVisible: function(b) {
		if(this.getCloseButton() != null) this.getCloseButton().setVisible(b);
	}
	,__iconifiedPressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(2,false);
	}
	,__maximizePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(12,false);
	}
	,__restorePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(0,false);
	}
	,__closePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.closeReleased();
	}
	,__activeChange: function(e) {
		this.repaint();
	}
	,__frameAbilityChanged: function(e) {
		this.__stateChanged(null);
	}
	,__stateChanged: function(e) {
		if(this.frame == null) return;
		var state = this.frame.getState();
		if(state != 2 && state != 0 && state != 4 && state != 8 && state != 12) state = 0;
		if(state == 2) {
			this.setIconifiedButtonVisible(false);
			this.setMaximizeButtonVisible(false);
			this.setRestoreButtonVisible(true);
			this.setCloseButtonVisible(this.frame.isClosable());
		} else if(state == 0) {
			this.setIconifiedButtonVisible(this.frame.isResizable());
			this.setRestoreButtonVisible(false);
			this.setMaximizeButtonVisible(this.frame.isResizable());
			this.setCloseButtonVisible(this.frame.isClosable());
		} else {
			this.setIconifiedButtonVisible(this.frame.isResizable());
			this.setRestoreButtonVisible(this.frame.isResizable());
			this.setMaximizeButtonVisible(false);
			this.setCloseButtonVisible(this.frame.isClosable());
		}
		this.revalidateIfNecessary();
	}
	,__class__: org_aswing_JFrameTitleBar
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_owner:"set_owner",get_owner:"get_owner",set_minimizeHeight:"set_minimizeHeight",get_minimizeHeight:"get_minimizeHeight",set_titleEnabled:"set_titleEnabled",get_titleEnabled:"get_titleEnabled",set_text:"set_text",get_text:"get_text",set_icon:"set_icon",get_icon:"get_icon",set_closeButton:"set_closeButton",get_closeButton:"get_closeButton",set_restoreButton:"set_restoreButton",get_restoreButton:"get_restoreButton",set_maximizeButton:"set_maximizeButton",get_maximizeButton:"get_maximizeButton",set_iconifiedButton:"set_iconifiedButton",get_iconifiedButton:"get_iconifiedButton"})
});
var org_aswing_JLabel = function(text,icon,horizontalAlignment) {
	if(horizontalAlignment == null) horizontalAlignment = 0;
	if(text == null) text = "";
	this._textFilters = null;
	org_aswing_Component.call(this);
	this.setClipMasked(true);
	this.setName("JLabel");
	this._verticalAlignment = 0;
	this._verticalTextPosition = 0;
	this._horizontalTextPosition = 4;
	this.set_text(text);
	this._icon = icon;
	this.installIcon(icon);
	this._horizontalAlignment = horizontalAlignment;
	this._iconTextGap = 4;
	this._selectable = false;
	this.readyToPaint = true;
	this.updateUI();
};
$hxClasses["org.aswing.JLabel"] = org_aswing_JLabel;
org_aswing_JLabel.__name__ = ["org","aswing","JLabel"];
org_aswing_JLabel.__super__ = org_aswing_Component;
org_aswing_JLabel.prototype = $extend(org_aswing_Component.prototype,{
	get_icon: function() {
		return this.getIcon();
	}
	,set_icon: function(v) {
		this.setIcon(v);
		return v;
	}
	,get_text: function() {
		return this.getText();
	}
	,set_text: function(text) {
		this.setText(text);
		return text;
	}
	,get_disabledIcon: function() {
		return this.getDisabledIcon();
	}
	,set_disabledIcon: function(v) {
		this.setDisabledIcon(v);
		return v;
	}
	,get_verticalAlignment: function() {
		return Std["int"](this.getVerticalAlignment());
	}
	,set_verticalAlignment: function(v) {
		this.setVerticalAlignment(v);
		return v;
	}
	,get_horizontalAlignment: function() {
		return Std["int"](this.getHorizontalAlignment());
	}
	,set_horizontalAlignment: function(v) {
		this.setHorizontalAlignment(v);
		return v;
	}
	,get_verticalTextPosition: function() {
		return Std["int"](this.getVerticalTextPosition());
	}
	,set_verticalTextPosition: function(v) {
		this.setVerticalTextPosition(v);
		return v;
	}
	,get_horizontalTextPosition: function() {
		return Std["int"](this.getHorizontalTextPosition());
	}
	,set_horizontalTextPosition: function(v) {
		this.setHorizontalTextPosition(v);
		return v;
	}
	,get_iconTextGap: function() {
		return Std["int"](this.getIconTextGap());
	}
	,set_iconTextGap: function(v) {
		this.setIconTextGap(v);
		return v;
	}
	,get_selectable: function() {
		return this.isSelectable();
	}
	,set_selectable: function(v) {
		this.setSelectable(v);
		return v;
	}
	,get_textFilters: function() {
		return this.getTextFilters();
	}
	,set_textFilters: function(v) {
		this.setTextFilters(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicLabelUI;
	}
	,getUIClassID: function() {
		return "LabelUI";
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this) != null) this.addChild(icon.getDisplay(this));
	}
	,uninstallIcon: function(icon) {
		var iconDis;
		if(icon == null) iconDis = null; else iconDis = icon.getDisplay(this);
		if(iconDis != null && this.isChild(iconDis)) this.removeChild(icon.getDisplay(this));
	}
	,setText: function(text) {
		if(this._text != text) {
			this._text = text;
			this.repaintAndRevalidate();
		}
	}
	,getText: function() {
		return this._text;
	}
	,setSelectable: function(b) {
		this._selectable = b;
		this.repaint();
	}
	,isSelectable: function() {
		return this._selectable;
	}
	,setTextFilters: function(fs) {
		this._textFilters = fs;
		this.repaint();
	}
	,getTextFilters: function() {
		return this._textFilters;
	}
	,setIcon: function(icon) {
		if(this._icon != icon) {
			this.uninstallIcon(this._icon);
			this._icon = icon;
			this.installIcon(this._icon);
			this.repaintAndRevalidate();
		}
	}
	,getIcon: function() {
		return this._icon;
	}
	,getDisabledIcon: function() {
		if(this._disabledIcon == null) {
			if(this._icon != null) {
			}
		}
		return this._disabledIcon;
	}
	,setDisabledIcon: function(disabledIcon) {
		var oldValue = this._disabledIcon;
		this._disabledIcon = disabledIcon;
		if(disabledIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledIcon);
			if(!this.isEnabled()) this.repaintAndRevalidate();
		}
	}
	,getVerticalAlignment: function() {
		return this._verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this._verticalAlignment) return; else {
			this._verticalAlignment = alignment | 0;
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this._horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this._horizontalAlignment) return; else {
			this._horizontalAlignment = alignment | 0;
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this._verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this._verticalTextPosition) return; else {
			this._verticalTextPosition = textPosition | 0;
			this.repaint();
			this.revalidate();
		}
	}
	,getHorizontalTextPosition: function() {
		return this._horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this._horizontalTextPosition) return; else {
			this._horizontalTextPosition = textPosition | 0;
			this.repaintAndRevalidate();
		}
	}
	,getIconTextGap: function() {
		return this._iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this._iconTextGap;
		this._iconTextGap = iconTextGap | 0;
		if(iconTextGap != oldValue) this.repaintAndRevalidate();
	}
	,__class__: org_aswing_JLabel
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_textFilters:"set_textFilters",get_textFilters:"get_textFilters",set_selectable:"set_selectable",get_selectable:"get_selectable",set_iconTextGap:"set_iconTextGap",get_iconTextGap:"get_iconTextGap",set_horizontalTextPosition:"set_horizontalTextPosition",get_horizontalTextPosition:"get_horizontalTextPosition",set_verticalTextPosition:"set_verticalTextPosition",get_verticalTextPosition:"get_verticalTextPosition",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_disabledIcon:"set_disabledIcon",get_disabledIcon:"get_disabledIcon",set_text:"set_text",get_text:"get_text",set_icon:"set_icon",get_icon:"get_icon"})
});
var org_aswing_event_ListDataListener = function() { };
$hxClasses["org.aswing.event.ListDataListener"] = org_aswing_event_ListDataListener;
org_aswing_event_ListDataListener.__name__ = ["org","aswing","event","ListDataListener"];
org_aswing_event_ListDataListener.prototype = {
	__class__: org_aswing_event_ListDataListener
};
var org_aswing_Viewportable = function() { };
$hxClasses["org.aswing.Viewportable"] = org_aswing_Viewportable;
org_aswing_Viewportable.__name__ = ["org","aswing","Viewportable"];
org_aswing_Viewportable.prototype = {
	__class__: org_aswing_Viewportable
};
var org_aswing_JList = function(listData,cellFactory) {
	this.firstVisibleIndexOffset = 0;
	this.lastVisibleIndexOffset = 0;
	org_aswing_Container.call(this);
	this.setName("JList");
	this._layout = this;
	this.cellPane = new org_aswing_CellPane();
	this.append(this.cellPane);
	this.viewPosition = new org_aswing_geom_IntPoint(0,0);
	this.setSelectionModel(new org_aswing_DefaultListSelectionModel());
	this.firstVisibleIndex = 0;
	this.lastVisibleIndex = -1;
	this.firstVisibleIndexOffset = 0;
	this.lastVisibleIndexOffset = 0;
	this._visibleRowCount = -1;
	this._visibleCellWidth = -1;
	this._preferredWidthWhenNoCount = 20;
	this.verticalUnitIncrement = -2147483648;
	this.verticalBlockIncrement = -2147483648;
	this.horizontalUnitIncrement = -2147483648;
	this.horizontalBlockIncrement = -2147483648;
	this.tracksWidth = false;
	this.viewWidth = 0;
	this.viewHeight = 0;
	this.maxWidthCell = null;
	this.cellPrefferSizes = new haxe_ds_IntMap();
	this.comToCellMap = new haxe_ds_IntMap();
	this.cells = new org_aswing_util_ArrayList();
	this._model = null;
	this.autoDragAndDropType = 0;
	if(cellFactory == null) this._cellFactory = new jive_plaf_flat_FlatListCellFactory(true); else this._cellFactory = cellFactory;
	if(listData == null) this.setModel(new org_aswing_VectorListModel()); else if((listData instanceof Array) && listData.__enum__ == null) this.setListData((listData instanceof Array) && listData.__enum__ == null?listData:null); else if(js_Boot.__instanceof(listData,org_aswing_ListModel)) this.setModel(js_Boot.__instanceof(listData,org_aswing_ListModel)?listData:null);
	this.updateUI();
	this.gestureManager = new jive_events_GestureManager(this,0);
	this.addEventListener(jive_events_TransformGestureEvent.GESTURE_PAN,$bind(this,this.onPan));
};
$hxClasses["org.aswing.JList"] = org_aswing_JList;
org_aswing_JList.__name__ = ["org","aswing","JList"];
org_aswing_JList.__interfaces__ = [org_aswing_event_ListDataListener,org_aswing_Viewportable,org_aswing_LayoutManager];
org_aswing_JList.__super__ = org_aswing_Container;
org_aswing_JList.prototype = $extend(org_aswing_Container.prototype,{
	get_visibleRowCount: function() {
		return this.getVisibleRowCount();
	}
	,set_visibleRowCount: function(v) {
		this.setVisibleRowCount(v);
		return v;
	}
	,get_visibleCellWidth: function() {
		return this.getVisibleCellWidth();
	}
	,set_visibleCellWidth: function(v) {
		this.setVisibleCellWidth(v);
		return v;
	}
	,get_preferredWidthWhenNoCount: function() {
		return this.getPreferredCellWidthWhenNoCount();
	}
	,set_preferredWidthWhenNoCount: function(v) {
		this.setPreferredCellWidthWhenNoCount(v);
		return v;
	}
	,get_fitWidth: function() {
		return this.isTracksWidth();
	}
	,set_fitWidth: function(v) {
		this.setTracksWidth(v);
		return v;
	}
	,get_selectionForeground: function() {
		return this.getSelectionForeground();
	}
	,set_selectionForeground: function(v) {
		this.setSelectionForeground(v);
		return v;
	}
	,get_selectionBackground: function() {
		return this.getSelectionBackground();
	}
	,set_selectionBackground: function(v) {
		this.setSelectionBackground(v);
		return v;
	}
	,get_cellFactory: function() {
		return this.getCellFactory();
	}
	,set_cellFactory: function(v) {
		this.setCellFactory(v);
		return v;
	}
	,get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_selectionModel: function() {
		return this.getSelectionModel();
	}
	,set_selectionModel: function(v) {
		this.setSelectionModel(v);
		return v;
	}
	,get_selectionMode: function() {
		return this.getSelectionMode();
	}
	,set_selectionMode: function(v) {
		this.setSelectionMode(v);
		return v;
	}
	,get_selectedIndex: function() {
		return this.getSelectedIndex();
	}
	,set_selectedIndex: function(v) {
		var __oldValue__ = this.get_selectedIndex();
		if(v == __oldValue__) return __oldValue__;
		this.setSelectedIndex(v);
		this.__fieldBindings__.dispatch("selectedIndex",__oldValue__,this.get_selectedIndex());
		return v;
	}
	,updateUI: function() {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org_aswing_AsWingUtils["as"](this.cells.get(i),org_aswing_ListCell);
			cell.getCellComponent().updateUI();
		}
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicListUI;
	}
	,getUIClassID: function() {
		return "ListUI";
	}
	,setLayout: function(layout) {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("Can not set layout to JList, its layout is itself!"));
	}
	,setListData: function(ld) {
		var m = new org_aswing_VectorListModel(ld);
		this.setModel(m);
	}
	,setModel: function(m) {
		if(m != this._model) {
			if(this._model != null) this._model.removeListDataListener(this);
			this._model = m;
			this._model.addListDataListener(this);
			this.updateListView();
		}
	}
	,getModel: function() {
		return this._model;
	}
	,setSelectionModel: function(m) {
		if(m != this._selectionModel) {
			if(this._selectionModel != null) this._selectionModel.removeListSelectionListener($bind(this,this.__selectionListener));
			this._selectionModel = m;
			this._selectionModel.addListSelectionListener($bind(this,this.__selectionListener));
		}
	}
	,getSelectionModel: function() {
		return this._selectionModel;
	}
	,getCellFactory: function() {
		return this._cellFactory;
	}
	,setCellFactory: function(newFactory) {
		this._cellFactory = newFactory;
		this.removeAllCells();
		this.updateListView();
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("listSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("listSelectionChanged",listener);
	}
	,getPreferredCellWidthWhenNoCount: function() {
		return this._preferredWidthWhenNoCount;
	}
	,setPreferredCellWidthWhenNoCount: function(preferredWidthWhenNoCount) {
		this._preferredWidthWhenNoCount = preferredWidthWhenNoCount;
	}
	,updateListView: function() {
		this.createCells();
		this.validateCells();
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().clearSelection(programmatic);
	}
	,setSelectionMode: function(sm) {
		this.getSelectionModel().setSelectionMode(sm);
	}
	,getSelectionMode: function() {
		return this.getSelectionModel().getSelectionMode();
	}
	,getSelectionForeground: function() {
		return this._selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this._selectionForeground;
		this._selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.validateCells();
		}
	}
	,getSelectionBackground: function() {
		return this._selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this._selectionBackground;
		this._selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.validateCells();
		}
	}
	,getAnchorSelectionIndex: function() {
		return this.getSelectionModel().getAnchorSelectionIndex();
	}
	,getLeadSelectionIndex: function() {
		return this.getSelectionModel().getLeadSelectionIndex();
	}
	,setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionInterval(index0,index1,programmatic);
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionInterval(index0,index1,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionInterval(index0,index1,programmatic);
	}
	,selectAll: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectionInterval(0,this.getModel().getSize() - 1,programmatic);
	}
	,getSelectedIndex: function() {
		return this.getSelectionModel().getMinSelectionIndex();
	}
	,isSelectionEmpty: function() {
		return this.getSelectionModel().isSelectionEmpty();
	}
	,getSelectedIndices: function() {
		var indices = [];
		var sm = this.getSelectionModel();
		var min = sm.getMinSelectionIndex();
		var max = sm.getMaxSelectionIndex();
		if(min < 0 || max < 0 || this.isSelectionEmpty()) return indices;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(sm.isSelectedIndex(i)) indices.push(i);
		}
		return indices;
	}
	,isSelectedIndex: function(index) {
		return this.getSelectionModel().isSelectedIndex(index);
	}
	,getSelectedValue: function() {
		var i = this.getSelectedIndex();
		if(i < 0) return null; else return this._model.getElementAt(i);
	}
	,getSelectedValues: function() {
		var values = [];
		var sm = this.getSelectionModel();
		var min = sm.getMinSelectionIndex();
		var max = sm.getMaxSelectionIndex();
		if(min < 0 || max < 0 || this.isSelectionEmpty()) return values;
		var vm = this.getModel();
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(sm.isSelectedIndex(i)) values.push(vm.getElementAt(i));
		}
		return values;
	}
	,setSelectedIndex: function(index,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index >= this.getModel().getSize()) return;
		this.getSelectionModel().setSelectionInterval(index,index,programmatic);
	}
	,setSelectedIndices: function(indices,programmatic) {
		if(programmatic == null) programmatic = true;
		var sm = this.getSelectionModel();
		sm.clearSelection();
		var size = this.getModel().getSize();
		var _g1 = 0;
		var _g = indices.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(indices[i] < size) sm.addSelectionInterval(indices[i],indices[i],programmatic);
		}
	}
	,setSelectedValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var n = this._model.getSize();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(this._model.getElementAt(i) == value) {
				this.setSelectedIndex(i,programmatic);
				return;
			}
		}
		this.setSelectedIndex(-1,programmatic);
	}
	,setSelectedValues: function(values,programmatic) {
		if(programmatic == null) programmatic = true;
		var sm = this.getSelectionModel();
		sm.clearSelection();
		var size = this.getModel().getSize();
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < size) {
				var j = _g2++;
				if(values[i] == this.getModel().getElementAt(j)) {
					sm.addSelectionInterval(j,j,programmatic);
					break;
				}
			}
		}
	}
	,ensureIndexIsVisible: function(index) {
		if(index <= this.getFirstVisibleIndex()) this.setFirstVisibleIndex(index); else if(index >= this.getLastVisibleIndex()) this.setLastVisibleIndex(index);
	}
	,getFirstVisibleIndex: function() {
		return this.firstVisibleIndex;
	}
	,setFirstVisibleIndex: function(index) {
		var factory = this.getCellFactory();
		var p = this.getViewPosition();
		if(factory.isAllCellHasSameHeight() || factory.isShareCells()) p.y = index * factory.getCellHeight(); else {
			var num = Std["int"](Math.min(this.cells.getSize() - 1,index));
			var y = 0;
			var _g = 0;
			while(_g < num) {
				var i = _g++;
				var cell = org_aswing_AsWingUtils["as"](this.cells.get(i),org_aswing_ListCell);
				var s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					haxe_Log.trace("Warnning : cell size not cached index = " + i + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 933, className : "org.aswing.JList", methodName : "setFirstVisibleIndex"});
				}
				y += s.height;
			}
			p.y = y;
		}
		p.y = Std["int"](Math.max(0,Math.min(this.getViewMaxPos().y,p.y)));
		this.setViewPosition(p);
	}
	,getLastVisibleIndex: function() {
		return this.lastVisibleIndex;
	}
	,setLastVisibleIndex: function(index) {
		var factory = this.getCellFactory();
		var p = this.getViewPosition();
		if(factory.isAllCellHasSameHeight() || factory.isShareCells()) p.y = (index + 1) * factory.getCellHeight() - this.getExtentSize().height; else {
			var num = Std["int"](Math.min(this.cells.getSize(),index + 2));
			var y = 0;
			var _g = 0;
			while(_g < num) {
				var i = _g++;
				var cell = org_aswing_AsWingUtils["as"](this.cells.get(i),org_aswing_ListCell);
				var s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					haxe_Log.trace("Warnning : cell size not cached index = " + i + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 967, className : "org.aswing.JList", methodName : "setLastVisibleIndex"});
				}
				y += s.height;
			}
			p.y = y - this.getExtentSize().height;
		}
		p.y = Std["int"](Math.max(0,Math.min(this.getViewMaxPos().y,p.y)));
		this.setViewPosition(p);
	}
	,getVisibleRowCount: function() {
		return this._visibleRowCount;
	}
	,setVisibleRowCount: function(c) {
		if(c != this._visibleRowCount) {
			this._visibleRowCount = c;
			this.revalidate();
		}
	}
	,getVisibleCellWidth: function() {
		return this._visibleCellWidth;
	}
	,setVisibleCellWidth: function(w) {
		if(w != this._visibleCellWidth) {
			this._visibleCellWidth = w;
			this.revalidate();
		}
	}
	,setTracksWidth: function(b) {
		if(b != this.tracksWidth) this.tracksWidth = b;
	}
	,isTracksWidth: function() {
		return this.tracksWidth;
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,0));
	}
	,setEnabled: function(b) {
		org_aswing_Container.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,getAutoDragAndDropType: function() {
		return this.autoDragAndDropType;
	}
	,isAutoDragAndDropAllown: function() {
		return this.autoDragAndDropType == 1 || this.autoDragAndDropType == 2;
	}
	,isAutoDnDInitiatorAllown: function() {
		if(!this.isAutoDragAndDropAllown()) return false;
		if(!this.isMutableModel()) return this.autoDragAndDropType == 2; else return true;
	}
	,isAutoDnDDropTargetAllown: function() {
		return this.isAutoDragAndDropAllown() && this.isMutableModel();
	}
	,addCellToContainer: function(cell) {
		cell.getCellComponent().setFocusable(false);
		this.cellPane.append(cell.getCellComponent());
		this.comToCellMap.set(cell.getCellComponent().getAwmlIndex(),cell);
		this.addHandlersToCell(cell.getCellComponent());
	}
	,removeCellFromeContainer: function(cell) {
		cell.getCellComponent().removeFromContainer();
		this.comToCellMap.remove(cell.getCellComponent().getAwmlIndex());
		this.removeHandlersFromCell(cell.getCellComponent());
	}
	,checkCreateCellsWhenShareCells: function() {
		this.createCellsWhenShareCells();
	}
	,createCellsWhenShareCells: function() {
		var ih = this.getCellFactory().getCellHeight();
		var needNum = Math.floor(this.getExtentSize().height / ih) + 2;
		this.viewWidth = this.getPreferredCellWidthWhenNoCount();
		this.viewHeight = this.getModel().getSize() * ih;
		if(this.cells.getSize() == needNum) return;
		var i;
		var cell;
		if(this.cells.getSize() < needNum) {
			var addNum = needNum - this.cells.getSize();
			var _g = 0;
			while(_g < addNum) {
				var i1 = _g++;
				cell = this.createNewCell();
				this.addCellToContainer(cell);
				this.cells.append(cell);
			}
		} else if(this.cells.getSize() > needNum) {
			var removeIndex = needNum;
			var removed = this.cells.removeRange(removeIndex,this.cells.getSize() - 1);
			var _g1 = 0;
			var _g2 = removed.length;
			while(_g1 < _g2) {
				var i2 = _g1++;
				cell = org_aswing_AsWingUtils["as"](removed[i2],org_aswing_ListCell);
				this.removeCellFromeContainer(cell);
			}
		}
	}
	,createCellsWhenNotShareCells: function() {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = 0;
		var h = 0;
		var sameHeight = factory.isAllCellHasSameHeight();
		var mSize = m.getSize();
		var cSize = this.cells.getSize();
		this.cellPrefferSizes = new haxe_ds_IntMap();
		var n = Std["int"](Math.min(mSize,cSize));
		var i;
		var cell;
		var s;
		var _g = 0;
		while(_g < n) {
			var i1 = _g++;
			cell = org_aswing_AsWingUtils["as"](this.cells.get(i1),org_aswing_ListCell);
			cell.setCellValue(m.getElementAt(i1));
			s = cell.getCellComponent().getPreferredSize();
			this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
			if(s.width > w) {
				w = s.width;
				this.maxWidthCell = cell;
			}
			if(sameHeight != true) h += s.height;
		}
		if(mSize > cSize) {
			var _g1 = cSize;
			while(_g1 < mSize) {
				var i2 = _g1++;
				cell = this.createNewCell();
				this.cells.append(cell);
				cell.setCellValue(m.getElementAt(i2));
				this.addCellToContainer(cell);
				s = cell.getCellComponent().getPreferredSize();
				this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
				if(s.width > w) {
					w = s.width;
					this.maxWidthCell = cell;
				}
				if(sameHeight != true) h += s.height;
			}
		} else if(mSize < cSize) {
			var removed = this.cells.removeRange(mSize,cSize - 1);
			var _g11 = 0;
			var _g2 = removed.length;
			while(_g11 < _g2) {
				var i3 = _g11++;
				cell = org_aswing_AsWingUtils["as"](removed[i3],org_aswing_ListCell);
				this.removeCellFromeContainer(cell);
				this.cellPrefferSizes.remove(cell.getCellComponent().getAwmlIndex());
			}
		}
		if(sameHeight) h = m.getSize() * factory.getCellHeight();
		this.viewWidth = w;
		this.viewHeight = h;
	}
	,createNewCell: function() {
		return this.getCellFactory().createNewCell();
	}
	,createCells: function() {
		if(this.getCellFactory().isShareCells()) this.createCellsWhenShareCells(); else this.createCellsWhenNotShareCells();
	}
	,removeAllCells: function() {
		var _g1 = 0;
		var _g = this.cells.getSize();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = this.cells.get(i);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells.clear();
	}
	,validateCells: function() {
		this.revalidate();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement != -2147483648) return this.verticalUnitIncrement; else if(this.getCellFactory().isAllCellHasSameHeight()) return this.getCellFactory().getCellHeight(); else return 18;
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement != -2147483648) return this.verticalBlockIncrement; else if(this.getCellFactory().isAllCellHasSameHeight()) return this.getExtentSize().height - this.getCellFactory().getCellHeight(); else return this.getExtentSize().height - 10;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement == -2147483648) return 1; else return this.horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement == -2147483648) return this.getExtentSize().width - 1; else return this.horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		var w;
		if(this.isTracksWidth()) w = this.getExtentSize().width; else w = this.viewWidth;
		return new org_aswing_geom_IntDimension(w,this.viewHeight);
	}
	,getViewPosition: function() {
		return new org_aswing_geom_IntPoint(this.viewPosition.x,this.viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!this.viewPosition.equals(p)) {
			this.viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
			this.valid = false;
			org_aswing_RepaintManager.getInstance().addInvalidRootComponent(this);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org_aswing_geom_IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org_aswing_geom_IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,getViewportPane: function() {
		return this;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		var viewSize = this.getViewSize();
		var rowCount = this.getVisibleRowCount();
		if(rowCount > 0) {
			var rowHeight = 20;
			if(this.getCellFactory().isAllCellHasSameHeight()) rowHeight = this.getCellFactory().getCellHeight();
			viewSize.height = rowCount * rowHeight;
		}
		var cellWidth = this.getVisibleCellWidth();
		if(cellWidth > 0) viewSize.width = cellWidth;
		return this.getInsets().getOutsideSize(viewSize);
	}
	,minimumLayoutSize: function(target) {
		return this.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		var factory = this.getCellFactory();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		this.cellPane.setComBounds(ir);
		if(factory.isShareCells()) this.layoutWhenShareCells(); else if(factory.isAllCellHasSameHeight()) this.layoutWhenNotShareCellsAndSameHeight(); else this.layoutWhenNotShareCellsAndNotSameHeight();
	}
	,layoutWhenShareCells: function() {
		this.checkCreateCellsWhenShareCells();
		var factory = this.getCellFactory();
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = ir.width;
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var ih = factory.getCellHeight();
		var startIndex = Math.floor(y / ih);
		var startY = startIndex * ih - y;
		var listSize = m.getSize();
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var cellsSize = this.cells.getSize();
		if(listSize < 0) this.lastVisibleIndex = -1;
		var _g = 0;
		while(_g < cellsSize) {
			var i = _g++;
			var cell = this.cells.get(i);
			var ldIndex = startIndex + i;
			var cellCom = cell.getCellComponent();
			if(ldIndex < listSize) {
				cell.setCellValue(m.getElementAt(ldIndex));
				cellCom.setVisible(true);
				cellCom.setComBoundsXYWH(cx,cy,cellWidth,ih);
				if(cy < maxY) this.lastVisibleIndex = ldIndex;
				cy += ih;
				cell.setListCellStatus(this,this.isSelectedIndex(ldIndex),ldIndex);
			} else cellCom.setVisible(false);
			cellCom.validate();
		}
		this.firstVisibleIndex = startIndex;
	}
	,layoutWhenNotShareCellsAndSameHeight: function() {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = Std["int"](Math.max(ir.width,this.viewWidth));
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var ih = factory.getCellHeight();
		var startIndex = Math.floor(y / ih);
		var listSize = m.getSize();
		var startY = startIndex * ih - y;
		var endIndex = startIndex + Math.ceil((ir.height - (ih + startY)) / ih);
		if(endIndex >= listSize) endIndex = listSize - 1;
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var i;
		var cellCom;
		var _g = Std["int"](Math.max(0,this.firstVisibleIndex + this.firstVisibleIndexOffset));
		while(_g < startIndex) {
			var i1 = _g++;
			cellCom = org_aswing_AsWingUtils["as"](this.cells.get(i1),org_aswing_ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		var rlvi = Std["int"](Math.min(this.lastVisibleIndex + this.lastVisibleIndexOffset,listSize - 1));
		var _g1 = endIndex + 1;
		var _g2 = rlvi + 1;
		while(_g1 < _g2) {
			var i2 = _g1++;
			cellCom = org_aswing_AsWingUtils["as"](this.cells.get(i2),org_aswing_ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		if(endIndex < 0 || startIndex > endIndex) this.lastVisibleIndex = -1;
		var _g11 = startIndex;
		var _g3 = endIndex + 1;
		while(_g11 < _g3) {
			var i3 = _g11++;
			var cell = org_aswing_AsWingUtils["as"](this.cells.get(i3),org_aswing_ListCell);
			cellCom = cell.getCellComponent();
			cellCom.setVisible(true);
			var s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				haxe_Log.trace("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1657, className : "org.aswing.JList", methodName : "layoutWhenNotShareCellsAndSameHeight"});
			}
			var finalWidth = Std["int"](this.isTracksWidth()?ir.width:Math.max(cellWidth,s.width));
			cellCom.setComBoundsXYWH(cx,cy,finalWidth,ih);
			if(cy < maxY) this.lastVisibleIndex = i3;
			cy += ih;
			cell.setListCellStatus(this,this.isSelectedIndex(i3),i3);
			cellCom.validate();
		}
		this.firstVisibleIndex = startIndex;
		this.firstVisibleIndexOffset = this.lastVisibleIndexOffset = 0;
	}
	,getCachedCellPreferSize: function(cell) {
		return org_aswing_AsWingUtils["as"](this.cellPrefferSizes.get(cell.getCellComponent().getAwmlIndex()),org_aswing_geom_IntDimension);
	}
	,layoutWhenNotShareCellsAndNotSameHeight: function() {
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = Std["int"](Math.max(ir.width,this.viewWidth));
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var startIndex = 0;
		var cellsCount = this.cells.getSize();
		var tryY = 0;
		var startY = 0;
		var i;
		var s;
		var cell;
		var _g = 0;
		while(_g < cellsCount) {
			var i1 = _g++;
			cell = org_aswing_AsWingUtils["as"](this.cells.get(i1),org_aswing_ListCell);
			s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				haxe_Log.trace("Warnning : cell size not cached index = " + i1 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1699, className : "org.aswing.JList", methodName : "layoutWhenNotShareCellsAndNotSameHeight"});
			}
			tryY += s.height;
			if(tryY > y) {
				startIndex = i1;
				startY = -(s.height - (tryY - y));
				break;
			}
		}
		var listSize = m.getSize();
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var tempLastVisibleIndex = -1;
		var cellCom;
		var endIndex = startIndex;
		var _g1 = startIndex;
		while(_g1 < cellsCount) {
			var i2 = _g1++;
			cell = org_aswing_AsWingUtils["as"](this.cells.get(i2),org_aswing_ListCell);
			cellCom = cell.getCellComponent();
			s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				haxe_Log.trace("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1723, className : "org.aswing.JList", methodName : "layoutWhenNotShareCellsAndNotSameHeight"});
			}
			cell.setListCellStatus(this,this.isSelectedIndex(i2),i2);
			cellCom.setVisible(true);
			var finalWidth = Std["int"](this.isTracksWidth()?ir.width:Math.max(cellWidth,s.width));
			cellCom.setComBoundsXYWH(cx,cy,finalWidth,s.height);
			cellCom.validate();
			if(cy < maxY) tempLastVisibleIndex = i2;
			cy += s.height;
			endIndex = i2;
			if(cy >= maxY) break;
		}
		var _g2 = Std["int"](Math.max(0,this.firstVisibleIndex + this.firstVisibleIndexOffset));
		while(_g2 < startIndex) {
			var i3 = _g2++;
			cellCom = org_aswing_AsWingUtils["as"](this.cells.get(i3),org_aswing_ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		var rlvi = Std["int"](Math.min(this.lastVisibleIndex + this.lastVisibleIndexOffset,listSize - 1));
		var _g11 = endIndex + 1;
		var _g3 = rlvi + 1;
		while(_g11 < _g3) {
			var i4 = _g11++;
			cellCom = org_aswing_AsWingUtils["as"](this.cells.get(i4),org_aswing_ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		this.lastVisibleIndex = tempLastVisibleIndex;
		this.firstVisibleIndex = startIndex;
		this.firstVisibleIndexOffset = this.lastVisibleIndexOffset = 0;
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,intervalAdded: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i = _g1++;
				var cell = this.createNewCell();
				this.cells.append(cell,i);
				cell.setCellValue(m.getElementAt(i));
				this.addCellToContainer(cell);
				var s = cell.getCellComponent().getPreferredSize();
				cell.getCellComponent().setVisible(false);
				this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
				if(s.width > w) {
					w = s.width;
					this.maxWidthCell = cell;
				}
				w = Std["int"](Math.max(w,s.width));
				if(sameHeight != true) h += s.height;
			}
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(i0 > this.lastVisibleIndex + this.lastVisibleIndexOffset) {
			} else if(i0 >= this.firstVisibleIndex + this.firstVisibleIndexOffset) this.lastVisibleIndexOffset += i1 - i0 + 1; else if(i0 < this.firstVisibleIndex + this.firstVisibleIndexOffset) {
				this.firstVisibleIndexOffset += i1 - i0 + 1;
				this.lastVisibleIndexOffset += i1 - i0 + 1;
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.getSelectionModel().insertIndexInterval(i0,i1 - i0 + 1,true);
		this.revalidate();
	}
	,intervalRemoved: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		var i;
		var s;
		var cell;
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var needRecountWidth = false;
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i2 = _g1++;
				cell = org_aswing_AsWingUtils["as"](this.cells.get(i2),org_aswing_ListCell);
				if(cell == this.maxWidthCell) needRecountWidth = true;
				if(sameHeight != true) {
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						haxe_Log.trace("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1870, className : "org.aswing.JList", methodName : "intervalRemoved"});
					}
					h -= s.height;
				}
				this.removeCellFromeContainer(cell);
				this.cellPrefferSizes.remove(cell.getCellComponent().getAwmlIndex());
			}
			this.cells.removeRange(i0,i1);
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(needRecountWidth) {
				w = 0;
				var _g11 = 0;
				var _g2 = this.cells.getSize();
				while(_g11 < _g2) {
					var i3 = _g11++;
					cell = org_aswing_AsWingUtils["as"](this.cells.get(i3),org_aswing_ListCell);
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						haxe_Log.trace("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1888, className : "org.aswing.JList", methodName : "intervalRemoved"});
					}
					if(s.width > w) {
						w = s.width;
						this.maxWidthCell = cell;
					}
				}
			}
			if(i0 > this.lastVisibleIndex + this.lastVisibleIndexOffset) {
			} else if(i0 >= this.firstVisibleIndex + this.firstVisibleIndexOffset) this.lastVisibleIndexOffset -= i1 - i0 + 1; else if(i0 < this.firstVisibleIndex + this.firstVisibleIndexOffset) {
				this.firstVisibleIndexOffset -= i1 - i0 + 1;
				this.lastVisibleIndexOffset -= i1 - i0 + 1;
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.getSelectionModel().removeIndexInterval(i0,i1);
		this.revalidate();
	}
	,contentsChanged: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		var i;
		var s;
		var cell;
		var ns;
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var needRecountWidth = false;
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i2 = _g1++;
				var newValue = m.getElementAt(i2);
				cell = org_aswing_AsWingUtils["as"](this.cells.get(i2),org_aswing_ListCell);
				s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					haxe_Log.trace("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1941, className : "org.aswing.JList", methodName : "contentsChanged"});
				}
				if(cell == this.maxWidthCell) {
					h -= s.height;
					cell.setCellValue(newValue);
					ns = cell.getCellComponent().getPreferredSize();
					this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),ns);
					if(ns.width < s.width) needRecountWidth = true; else w = ns.width;
					h += ns.height;
				} else {
					h -= s.height;
					cell.setCellValue(newValue);
					ns = cell.getCellComponent().getPreferredSize();
					this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),ns);
					h += ns.height;
					if(needRecountWidth != true) {
						if(ns.width > w) {
							this.maxWidthCell = cell;
							w = ns.width;
						}
					}
				}
			}
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(needRecountWidth || this.maxWidthCell == null) {
				w = 0;
				var _g11 = 0;
				var _g2 = this.cells.getSize();
				while(_g11 < _g2) {
					var i3 = _g11++;
					cell = this.cells.get(i3);
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						haxe_Log.trace("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()),{ fileName : "JList.hx", lineNumber : 1978, className : "org.aswing.JList", methodName : "contentsChanged"});
					}
					if(s.width > w) {
						w = s.width;
						this.maxWidthCell = cell;
					}
				}
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.revalidate();
	}
	,__selectionListener: function(e) {
		this.__fieldBindings__.dispatch("selectedIndex",null,null);
		this.dispatchEvent(new org_aswing_event_SelectionEvent("listSelectionChanged",e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic()));
		this.revalidate();
	}
	,addHandlersToCell: function(cellCom) {
		cellCom.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__onItemClick),false,0,false);
		cellCom.addEventListener(openfl_events_MouseEvent.DOUBLE_CLICK,$bind(this,this.__onItemDoubleClick),false,0,false);
		cellCom.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onItemMouseDown),false,0,false);
		cellCom.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__onItemRollOver),false,0,false);
		cellCom.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__onItemRollOut),false,0,false);
		cellCom.addEventListener("releaseOutSide",$bind(this,this.__onItemReleaseOutSide),false,0,false);
	}
	,removeHandlersFromCell: function(cellCom) {
		cellCom.removeEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__onItemClick));
		cellCom.removeEventListener(openfl_events_MouseEvent.DOUBLE_CLICK,$bind(this,this.__onItemDoubleClick));
		cellCom.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onItemMouseDown));
		cellCom.removeEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__onItemRollOver));
		cellCom.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__onItemRollOut));
		cellCom.removeEventListener("releaseOutSide",$bind(this,this.__onItemReleaseOutSide));
	}
	,createItemEventObj: function(cellCom,type,e) {
		var cell = this.getCellByCellComponent(js_Boot.__instanceof(cellCom,org_aswing_Component)?cellCom:null);
		var cellValue = null;
		if(cell != null) cellValue = cell.getCellValue();
		var event = new org_aswing_event_ListItemEvent(type,cellValue,cell,e);
		return event;
	}
	,getItemIndexByCellComponent: function(item) {
		var cell = this.comToCellMap.get(item.getAwmlIndex());
		return this.getItemIndexByCell(cell);
	}
	,cellsIndexOf: function(cell) {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.cells.get(i).getAwmlIndex() == cell.getAwmlIndex()) return i;
		}
		return -1;
	}
	,getItemIndexByCell: function(cell) {
		var itemIndex;
		if(this.getCellFactory().isShareCells()) itemIndex = this.firstVisibleIndex + this.cellsIndexOf(cell); else itemIndex = this.cellsIndexOf(cell);
		return itemIndex;
	}
	,getCellByCellComponent: function(item) {
		return this.comToCellMap.get(item.getAwmlIndex());
	}
	,getCellByIndex: function(index) {
		if(this.getCellFactory().isShareCells()) return org_aswing_AsWingUtils["as"](this.cells.get(index - this.firstVisibleIndex),org_aswing_ListCell); else return org_aswing_AsWingUtils["as"](this.cells.get(index),org_aswing_ListCell);
	}
	,__onItemMouseDown: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemMouseDown",e));
	}
	,__onItemClick: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemClick",e));
	}
	,__onItemReleaseOutSide: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemReleaseOutSide",e));
	}
	,__onItemRollOver: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemRollOver",e));
	}
	,__onItemRollOut: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemRollOut",e));
	}
	,__onItemDoubleClick: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemDoubleClick",e));
	}
	,isMutableModel: function() {
		return Std["is"](this.getModel(),org_aswing_MutableListModel);
	}
	,onPan: function(e) {
		var pos = this.getViewPosition();
		pos.y -= e.offsetY | 0;
		this.setViewPosition(pos);
	}
	,__class__: org_aswing_JList
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_selectionMode:"set_selectionMode",get_selectionMode:"get_selectionMode",set_selectionModel:"set_selectionModel",get_selectionModel:"get_selectionModel",set_model:"set_model",get_model:"get_model",set_cellFactory:"set_cellFactory",get_cellFactory:"get_cellFactory",set_selectionBackground:"set_selectionBackground",get_selectionBackground:"get_selectionBackground",set_selectionForeground:"set_selectionForeground",get_selectionForeground:"get_selectionForeground",set_fitWidth:"set_fitWidth",get_fitWidth:"get_fitWidth",set_preferredWidthWhenNoCount:"set_preferredWidthWhenNoCount",get_preferredWidthWhenNoCount:"get_preferredWidthWhenNoCount",set_visibleCellWidth:"set_visibleCellWidth",get_visibleCellWidth:"get_visibleCellWidth",set_visibleRowCount:"set_visibleRowCount",get_visibleRowCount:"get_visibleRowCount"})
});
var org_aswing_MenuElement = function() { };
$hxClasses["org.aswing.MenuElement"] = org_aswing_MenuElement;
org_aswing_MenuElement.__name__ = ["org","aswing","MenuElement"];
org_aswing_MenuElement.prototype = {
	__class__: org_aswing_MenuElement
};
var org_aswing_JMenuItem = function(text,icon) {
	if(text == null) text = "";
	org_aswing_AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JMenuItem");
	this.setModel(new org_aswing_DefaultButtonModel());
	this.initFocusability();
	this._menuInUse = false;
	this._accelerator = null;
};
$hxClasses["org.aswing.JMenuItem"] = org_aswing_JMenuItem;
org_aswing_JMenuItem.__name__ = ["org","aswing","JMenuItem"];
org_aswing_JMenuItem.__interfaces__ = [org_aswing_MenuElement];
org_aswing_JMenuItem.__super__ = org_aswing_AbstractButton;
org_aswing_JMenuItem.prototype = $extend(org_aswing_AbstractButton.prototype,{
	get_menuInUse: function() {
		return this.isInUse();
	}
	,set_menuInUse: function(v) {
		this.setInUse(v);
		return v;
	}
	,get_accelerator: function() {
		return this.getAccelerator();
	}
	,set_accelerator: function(v) {
		this.setAccelerator(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicMenuItemUI;
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_MenuElementUI)) org_aswing_AbstractButton.prototype.setUI.call(this,newUI); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JMenuItem just accept MenuElementUI instance!!!"));
	}
	,getMenuElementUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_MenuElementUI);
	}
	,getUIClassID: function() {
		return "MenuItemUI";
	}
	,setAccelerator: function(acc) {
		if(this._accelerator != acc) {
			this._accelerator = acc;
			this.revalidate();
			this.repaint();
		}
	}
	,getAccelerator: function() {
		return this._accelerator;
	}
	,initFocusability: function() {
		this.setFocusable(false);
	}
	,getRootPaneOwner: function() {
		var pp = this;
		do {
			pp = pp.getParent();
			if(js_Boot.__instanceof(pp,org_aswing_JPopupMenu)) pp = (js_Boot.__instanceof(pp,org_aswing_JPopupMenu)?pp:null).getInvoker();
			if(js_Boot.__instanceof(pp,org_aswing_JRootPane)) return js_Boot.__instanceof(pp,org_aswing_JRootPane)?pp:null;
		} while(pp != null);
		return null;
	}
	,inUseChanged: function() {
		var acc = this.getAccelerator();
		if(acc != null) {
			var rOwner = this.getRootPaneOwner();
			if(rOwner == null) {
				throw new js__$Boot_HaxeError(new org_aswing_error_Error("The menu item has accelerator, " + "it or it's popupMenu must be in a JRootPane(or it's subclass)."));
				return;
			}
			var keyMap = rOwner.getKeyMap();
			if(keyMap != null) {
				if(this.isInUse()) keyMap.registerKeyAction(acc,$bind(this,this.__acceleratorAction)); else keyMap.unregisterKeyAction(acc);
			}
		}
	}
	,__acceleratorAction: function() {
		this.doClick();
	}
	,setInUse: function(b) {
		if(this._menuInUse != b) {
			this._menuInUse = b;
			this.inUseChanged();
		}
	}
	,isInUse: function() {
		return this._menuInUse;
	}
	,menuSelectionChanged: function(isIncluded) {
		this.getModel().setRollOver(isIncluded);
	}
	,getSubElements: function() {
		return [];
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,__class__: org_aswing_JMenuItem
	,__properties__: $extend(org_aswing_AbstractButton.prototype.__properties__,{set_accelerator:"set_accelerator",get_accelerator:"get_accelerator",set_menuInUse:"set_menuInUse",get_menuInUse:"get_menuInUse"})
});
var org_aswing_JMenu = function(text,icon) {
	if(text == null) text = "";
	org_aswing_JMenuItem.call(this,text,icon);
	this.setName("JMenu");
	this._delay = 200;
	this._menuInUse = false;
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__menuDestroied));
};
$hxClasses["org.aswing.JMenu"] = org_aswing_JMenu;
org_aswing_JMenu.__name__ = ["org","aswing","JMenu"];
org_aswing_JMenu.__interfaces__ = [org_aswing_MenuElement];
org_aswing_JMenu.__super__ = org_aswing_JMenuItem;
org_aswing_JMenu.prototype = $extend(org_aswing_JMenuItem.prototype,{
	get_delay: function() {
		return this.getDelay();
	}
	,set_delay: function(v) {
		this.setDelay(v);
		return v;
	}
	,get_popupMenuVisible: function() {
		return this.isPopupMenuVisible();
	}
	,set_popupMenuVisible: function(v) {
		this.setPopupMenuVisible(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
		if(this.popupMenu != null) this.popupMenu.updateUI();
	}
	,getUIClassID: function() {
		return "MenuUI";
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicMenuUI;
	}
	,isTopLevelMenu: function() {
		if(!Std["is"](this.getParent(),org_aswing_JPopupMenu)) return true;
		return false;
	}
	,isMenuComponent: function(c) {
		if(c == null) return false;
		if(c == this) return true;
		if(c == this.popupMenu) return true;
		var ncomponents = this.getComponentCount();
		var _g = 0;
		while(_g < ncomponents) {
			var i = _g++;
			var comp = this.getComponent(i);
			if(comp == c) return true;
			if(js_Boot.__instanceof(comp,org_aswing_JMenu)) {
				var subMenu;
				subMenu = js_Boot.__instanceof(comp,org_aswing_JMenu)?comp:null;
				if(subMenu.isMenuComponent(c)) return true;
			}
		}
		return false;
	}
	,getPopupMenu: function() {
		this.ensurePopupMenuCreated();
		return this.popupMenu;
	}
	,addMenuItem: function(s) {
		var mi = new org_aswing_JMenuItem(s);
		this.append(mi);
		return mi;
	}
	,append: function(c) {
		this.getPopupMenu().append(c);
	}
	,insert: function(i,c) {
		this.getPopupMenu().insert(i,c);
	}
	,getComponentCount: function() {
		if(this.popupMenu != null) return this.popupMenu.getComponentCount(); else return 0;
	}
	,getComponent: function(index) {
		if(this.popupMenu != null) return this.popupMenu.getComponent(index); else return null;
	}
	,remove: function(c) {
		if(this.popupMenu != null) return this.popupMenu.remove(c);
		return null;
	}
	,removeAt: function(i) {
		if(this.popupMenu != null) return this.popupMenu.removeAt(i);
		return null;
	}
	,removeAll: function() {
		if(this.popupMenu != null) this.popupMenu.removeAll();
	}
	,getDelay: function() {
		return this._delay;
	}
	,setDelay: function(d) {
		if(d < 0) {
			haxe_Log.trace("/e/Delay must be a positive integer, ignored.",{ fileName : "JMenu.hx", lineNumber : 265, className : "org.aswing.JMenu", methodName : "setDelay"});
			return;
		}
		this._delay = d;
	}
	,isPopupMenuVisible: function() {
		return this.popupMenu != null && this.popupMenu.isVisible();
	}
	,setPopupMenuVisible: function(b) {
		var isVisible = this.isPopupMenuVisible();
		if(b != isVisible && (this.isEnabled() || !b)) {
			this.ensurePopupMenuCreated();
			if(b == true && this.isShowing() && this.popupMenu.getComponentCount() > 0) {
				var p = this.getPopupMenuOrigin();
				this.getPopupMenu().show(this,p.x,p.y);
			} else this.getPopupMenu().setVisible(false);
		}
	}
	,ensurePopupMenuCreated: function() {
		if(this.popupMenu == null) {
			this.popupMenu = new org_aswing_JPopupMenu();
			this.popupMenu.setInvoker(this);
		}
	}
	,getPopupMenuOrigin: function() {
		var p;
		if(Std["is"](this.getParent(),org_aswing_JPopupMenu)) {
			p = new org_aswing_geom_IntPoint(this.getWidth(),0);
			var ofx = this.getUIPropertyNumber("Menu.submenuPopupOffsetX");
			var ofy = this.getUIPropertyNumber("Menu.submenuPopupOffsetY");
			p.x += ofx;
			p.y += ofy;
			if(this.stage != null) {
				var rect = org_aswing_AsWingUtils.getVisibleMaximizedBounds(this);
				var popupSize = this.getPopupMenu().getPreferredSize();
				if(p.x + popupSize.width > rect.x + rect.width) p.x = -ofx - popupSize.width;
				if(p.y + popupSize.height > rect.y + rect.height) p.y = -ofy - popupSize.height + this.getHeight();
			}
		} else {
			p = new org_aswing_geom_IntPoint(0,this.getHeight());
			p.x += this.getUIPropertyNumber("Menu.menuPopupOffsetX");
			p.y += this.getUIPropertyNumber("Menu.menuPopupOffsetY");
		}
		return p;
	}
	,getUIPropertyNumber: function(name) {
		var n = this.getUI().getInt(name);
		return n;
	}
	,__menuDestroied: function(e) {
		if(this.popupMenu != null && this.popupMenu.isVisible()) this.popupMenu.dispose();
	}
	,setInUse: function(b) {
		if(this._menuInUse != b) {
			this._menuInUse = b;
			if(b) this.ensurePopupMenuCreated();
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org_aswing_AsWingUtils["as"](subs[i],org_aswing_MenuElement);
				ele.setInUse(b);
			}
			this.inUseChanged();
		}
	}
	,menuSelectionChanged: function(isIncluded) {
		this.setSelected(isIncluded);
	}
	,getSubElements: function() {
		if(this.popupMenu == null) return []; else return [this.popupMenu];
	}
	,getMenuComponent: function() {
		return this;
	}
	,__class__: org_aswing_JMenu
	,__properties__: $extend(org_aswing_JMenuItem.prototype.__properties__,{set_popupMenuVisible:"set_popupMenuVisible",get_popupMenuVisible:"get_popupMenuVisible",set_delay:"set_delay",get_delay:"get_delay"})
});
var org_aswing_JMenuBar = function() {
	org_aswing_Container.call(this);
	this.setSelectionModel(new org_aswing_DefaultSingleSelectionModel());
	this._layout = new org_aswing_plaf_EmptyLayoutUIResourse();
	this.menuInUse = false;
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__menuBarDestroied));
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__menuBarCreated));
	this.addEventListener("comAdded",$bind(this,this.__menuBarChildAdd));
	this.addEventListener("comRemoved",$bind(this,this.__menuBarChildRemove));
	this.updateUI();
};
$hxClasses["org.aswing.JMenuBar"] = org_aswing_JMenuBar;
org_aswing_JMenuBar.__name__ = ["org","aswing","JMenuBar"];
org_aswing_JMenuBar.__interfaces__ = [org_aswing_MenuElement];
org_aswing_JMenuBar.__super__ = org_aswing_Container;
org_aswing_JMenuBar.prototype = $extend(org_aswing_Container.prototype,{
	updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_MenuElementUI)) org_aswing_Container.prototype.setUI.call(this,newUI); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JMenuBar just accept MenuElementUI instance!!!"));
	}
	,getMenuElementUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_MenuElementUI);
	}
	,getUIClassID: function() {
		return "MenuBarUI";
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicMenuBarUI;
	}
	,addMenu: function(menu) {
		this.append(menu);
		return menu;
	}
	,getMenu: function(index) {
		var com = this.getComponent(index);
		if(js_Boot.__instanceof(com,org_aswing_JMenu)) return js_Boot.__instanceof(com,org_aswing_JMenu)?com:null; else return null;
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,setSelectionModel: function(model) {
		if(null != this.selectionModel) this.selectionModel.removeStateListener($bind(this,this.onSelectedChanged));
		this.selectionModel = model;
		this.selectionModel.addStateListener($bind(this,this.onSelectedChanged));
	}
	,setSelected: function(sel) {
		var model = this.getSelectionModel();
		var index = this.getIndex(sel);
		model.setSelectedIndex(index);
	}
	,isSelected: function() {
		return this.selectionModel.isSelected();
	}
	,onSelectedChanged: function(e) {
	}
	,menuSelectionChanged: function(isIncluded) {
	}
	,__menuBarDestroied: function(e) {
		this.setInUse(false);
	}
	,__menuBarCreated: function(e) {
		this.setInUse(true);
	}
	,__menuBarChildAdd: function(e) {
		if(Std["is"](e.getChild(),org_aswing_MenuElement)) org_aswing_AsWingUtils["as"](e.getChild(),org_aswing_MenuElement).setInUse(this.isInUse());
	}
	,__menuBarChildRemove: function(e) {
		if(Std["is"](e.getChild(),org_aswing_MenuElement)) org_aswing_AsWingUtils["as"](e.getChild(),org_aswing_MenuElement).setInUse(false);
	}
	,getSubElements: function() {
		var arr = [];
		var _g1 = 0;
		var _g = this.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var com = this.getComponent(i);
			if(js_Boot.__instanceof(com,org_aswing_MenuElement)) arr.push(com);
		}
		return arr;
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,setInUse: function(b) {
		if(this.menuInUse != b) {
			this.menuInUse = b;
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org_aswing_AsWingUtils["as"](subs[i],org_aswing_MenuElement);
				ele.setInUse(b);
			}
		}
	}
	,isInUse: function() {
		return this.menuInUse;
	}
	,__class__: org_aswing_JMenuBar
});
var org_aswing_JPopupMenu = function() {
	org_aswing_Container.call(this);
	this.setName("JPopupMenu");
	this._inUse = false;
	this._layout = new org_aswing_plaf_EmptyLayoutUIResourse();
	this.setSelectionModel(new org_aswing_DefaultSingleSelectionModel());
	this.popup = new org_aswing_JPopup();
	this.popup.setLayout(new org_aswing_WindowLayout());
	this.popup.append(this,"Content");
	this.popup.addEventListener("popupOpened",$bind(this,this.__popupShown));
	this.popup.addEventListener("popupClosed",$bind(this,this.__popupClosed));
	this.popup.addEventListener("comAdded",$bind(this,this.__popMenuChildAdd));
	this.popup.addEventListener("comRemoved",$bind(this,this.__popMenuChildRemove));
	this.updateUI();
};
$hxClasses["org.aswing.JPopupMenu"] = org_aswing_JPopupMenu;
org_aswing_JPopupMenu.__name__ = ["org","aswing","JPopupMenu"];
org_aswing_JPopupMenu.__interfaces__ = [org_aswing_MenuElement];
org_aswing_JPopupMenu.__popupMenuMouseDown = function(e) {
	var hittedPopupMenu = false;
	var ps = org_aswing_JPopupMenu.showingMenuPopups;
	var hasPopupWindowShown = ps.length > 0;
	var _g1 = 0;
	var _g = ps.length;
	while(_g1 < _g) {
		var i = _g1++;
		var pp = org_aswing_AsWingUtils["as"](ps[i],org_aswing_JPopup);
		if(pp.hitTestMouse()) {
			hittedPopupMenu = true;
			break;
		}
	}
	if(hasPopupWindowShown && !hittedPopupMenu) org_aswing_MenuSelectionManager.defaultManager().clearSelectedPath(false);
};
org_aswing_JPopupMenu.__super__ = org_aswing_Container;
org_aswing_JPopupMenu.prototype = $extend(org_aswing_Container.prototype,{
	get_invoker: function() {
		return this.getInvoker();
	}
	,set_invoker: function(v) {
		this.setInvoker(v);
		return v;
	}
	,get_inUse: function() {
		return this.isInUse();
	}
	,set_inUse: function(v) {
		this.setInUse(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicPopupMenuUI;
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_MenuElementUI)) org_aswing_Container.prototype.setUI.call(this,newUI); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JPopupMenu just accept MenuElementUI instance!!!"));
	}
	,getMenuElementUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_MenuElementUI);
	}
	,getUIClassID: function() {
		return "PopupMenuUI";
	}
	,addMenuItem: function(s) {
		var mi = new org_aswing_JMenuItem(s);
		this.append(mi);
		return mi;
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,setSelectionModel: function(model) {
		this.selectionModel = model;
	}
	,setSelected: function(sel) {
		var model = this.getSelectionModel();
		var index = this.getIndex(sel);
		model.setSelectedIndex(index);
	}
	,isSelected: function() {
		return this.selectionModel.isSelected();
	}
	,setVisible: function(b) {
		if(b == this.isVisible()) return;
		var owner = org_aswing_AsWingUtils.getOwnerAncestor(this._invoker);
		this.popup.changeOwner(owner);
		if(b) {
			this.popup.setVisible(true);
			if(this.isPopupMenu()) this.setInUse(true);
		} else {
			this.popup.dispose();
			if(this.isPopupMenu()) this.setInUse(false);
		}
		if(b == false) this.getSelectionModel().clearSelection(); else if(this.isPopupMenu()) org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.stage,[this],true);
		if(b) {
			this.popup.setMnemonicTriggerProxy(this.stage);
			this.revalidate();
		} else this.popup.setMnemonicTriggerProxy(null);
	}
	,isVisible: function() {
		return this.popup.isVisible();
	}
	,getInvoker: function() {
		return this._invoker;
	}
	,setInvoker: function(invoker) {
		this._invoker = invoker;
		this.popup.changeOwner(org_aswing_AsWingUtils.getOwnerAncestor(invoker));
	}
	,show: function(invoker,x,y) {
		this.setInvoker(invoker);
		var gp;
		if(invoker != null) {
			gp = invoker.getGlobalLocation();
			if(gp == null) gp = new org_aswing_geom_IntPoint(x,y); else gp.move(x,y);
		} else gp = new org_aswing_geom_IntPoint(x,y);
		this.pack();
		this.setVisible(true);
		this.adjustPopupLocationToFitScreen(gp);
		this.popup.setGlobalLocation(gp);
	}
	,pack: function() {
		this.popup.pack();
	}
	,dispose: function() {
		this.popup.dispose();
		if(this.isPopupMenu()) this.setInUse(false);
	}
	,getRootPopupMenu: function() {
		var mp = this;
		while(mp != null && mp.isPopupMenu() != true && mp.getInvoker() != null && mp.getInvoker().getParent() != null && Std["is"](mp.getInvoker().getParent(),org_aswing_JPopupMenu)) mp = org_aswing_AsWingUtils["as"](mp.getInvoker().getParent(),org_aswing_JPopupMenu);
		return mp;
	}
	,isSubPopupMenu: function(popupMenu) {
		var ncomponents = this.getComponentCount();
		var _g = 0;
		while(_g < ncomponents) {
			var i = _g++;
			var comp = this.getComponent(i);
			if(js_Boot.__instanceof(comp,org_aswing_JMenu)) {
				var menu;
				menu = js_Boot.__instanceof(comp,org_aswing_JMenu)?comp:null;
				var subPopup = menu.getPopupMenu();
				if(subPopup == popupMenu) return true;
				if(subPopup.isSubPopupMenu(popupMenu)) return true;
			}
		}
		return false;
	}
	,isPopupMenu: function() {
		return !js_Boot.__instanceof(this._invoker,org_aswing_JMenu);
	}
	,adjustPopupLocationToFitScreen: function(gp) {
		var globalBounds = org_aswing_AsWingUtils.getVisibleMaximizedBounds(this.popup.parent);
		if(gp.x + this.popup.getWidth() > globalBounds.x + globalBounds.width) gp.x = gp.x - this.popup.getWidth();
		if(gp.x < globalBounds.x) gp.x = globalBounds.x;
		if(gp.y + this.popup.getHeight() > globalBounds.y + globalBounds.height) gp.y = gp.y - this.popup.getHeight();
		if(gp.y < globalBounds.y) gp.y = globalBounds.y;
		return gp;
	}
	,__popMenuChildAdd: function(e) {
		var child = e.getChild();
		if(js_Boot.__instanceof(child,org_aswing_MenuElement)) (js_Boot.__instanceof(child,org_aswing_MenuElement)?child:null).setInUse(this.isInUse());
	}
	,__popMenuChildRemove: function(e) {
		var child = e.getChild();
		if(js_Boot.__instanceof(child,org_aswing_MenuElement)) (js_Boot.__instanceof(child,org_aswing_MenuElement)?child:null).setInUse(false);
	}
	,menuSelectionChanged: function(isIncluded) {
		if(js_Boot.__instanceof(this._invoker,org_aswing_JMenu)) {
			var m = org_aswing_AsWingUtils["as"](this._invoker,org_aswing_JMenu);
			if(isIncluded) m.setPopupMenuVisible(true); else m.setPopupMenuVisible(false);
		}
		if(this.isPopupMenu() && !isIncluded) this.setVisible(false);
	}
	,getSubElements: function() {
		var arr = [];
		var _g1 = 0;
		var _g = this.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var com = this.getComponent(i);
			if(js_Boot.__instanceof(com,org_aswing_MenuElement)) arr.push(com);
		}
		return arr;
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,setInUse: function(b) {
		if(this._inUse != b) {
			this._inUse = b;
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org_aswing_AsWingUtils["as"](subs[i],org_aswing_MenuElement);
				if(ele != null) ele.setInUse(b);
			}
		}
	}
	,isInUse: function() {
		return this._inUse;
	}
	,__popupShown: function(e) {
		var source = org_aswing_AsWingUtils["as"](e.target,org_aswing_JPopup);
		org_aswing_JPopupMenu.showingMenuPopups.push(source);
		org_aswing_AsWingManager.callNextFrame($bind(this,this.__addMouseDownListenerToStage));
	}
	,__addMouseDownListenerToStage: function(e) {
		if(org_aswing_JPopupMenu.showingMenuPopups.length > 0 && !org_aswing_JPopupMenu.popupMenuMouseDownListening && this.stage != null) {
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,org_aswing_JPopupMenu.__popupMenuMouseDown,false,0,true);
			org_aswing_JPopupMenu.popupMenuMouseDownListening = true;
		}
	}
	,__popupClosed: function(e) {
		var source = e.target;
		var x = source;
		HxOverrides.remove(org_aswing_JPopupMenu.showingMenuPopups,x);
		if(org_aswing_JPopupMenu.showingMenuPopups.length == 0 && org_aswing_JPopupMenu.popupMenuMouseDownListening && this.stage != null) {
			org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,org_aswing_JPopupMenu.__popupMenuMouseDown);
			org_aswing_JPopupMenu.popupMenuMouseDownListening = false;
		}
	}
	,__class__: org_aswing_JPopupMenu
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_inUse:"set_inUse",get_inUse:"get_inUse",set_invoker:"set_invoker",get_invoker:"get_invoker"})
});
var org_aswing_JProgressBar = function(orient,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(orient == null) orient = 0;
	org_aswing_Component.call(this);
	this.setName("ProgressBar");
	this._orientation = orient;
	this._model = new org_aswing_DefaultBoundedRangeModel(min,0,min,max);
	this.addListenerToModel();
	this._indeterminate = false;
	this._string = null;
	this._indeterminateDelaySet = false;
	this.indeterminatePaintTimer = new org_aswing_util_Timer(20);
	this.indeterminatePaintTimer.addActionListener($bind(this,this.__indeterminateInterval));
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.__progressAddedToStage));
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__progressRemovedFromStage));
	this.updateUI();
};
$hxClasses["org.aswing.JProgressBar"] = org_aswing_JProgressBar;
org_aswing_JProgressBar.__name__ = ["org","aswing","JProgressBar"];
org_aswing_JProgressBar.__interfaces__ = [org_aswing_Orientable];
org_aswing_JProgressBar.__super__ = org_aswing_Component;
org_aswing_JProgressBar.prototype = $extend(org_aswing_Component.prototype,{
	get_indeterminateDelay: function() {
		return this.getIndeterminateDelay();
	}
	,set_indeterminateDelay: function(v) {
		this.setIndeterminateDelay(v);
		return v;
	}
	,get_indeterminateDelaySet: function() {
		return this.isIndeterminateDelaySet();
	}
	,set_indeterminateDelaySet: function(v) {
		this.setIndeterminateDelaySet(v);
		return v;
	}
	,get_orientation: function() {
		return this.getOrientation();
	}
	,set_orientation: function(v) {
		this.setOrientation(v);
		return v;
	}
	,get_indeterminate: function() {
		return this.isIndeterminate();
	}
	,set_indeterminate: function(v) {
		this.setIndeterminate(v);
		return v;
	}
	,get_string: function() {
		return this.getString();
	}
	,set_string: function(v) {
		this.setString(v);
		return v;
	}
	,get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		var __oldValue__ = this.get_model();
		if(v == __oldValue__) return __oldValue__;
		this.setModel(v);
		this.__fieldBindings__.dispatch("model",__oldValue__,this.get_model());
		return v;
	}
	,get_value: function() {
		return this.getValue();
	}
	,set_value: function(v) {
		var __oldValue__ = this.get_value();
		if(v == __oldValue__) return __oldValue__;
		this.setValue(v);
		this.__fieldBindings__.dispatch("value",__oldValue__,this.get_value());
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicProgressBarUI;
	}
	,getUIClassID: function() {
		return "ProgressBarUI";
	}
	,setIndeterminateDelay: function(delay) {
		this.indeterminatePaintTimer.setDelay(delay);
		this.setIndeterminateDelaySet(true);
	}
	,getIndeterminateDelay: function() {
		return this.indeterminatePaintTimer.getDelay();
	}
	,setIndeterminateDelaySet: function(b) {
		this._indeterminateDelaySet = b;
	}
	,isIndeterminateDelaySet: function() {
		return this._indeterminateDelaySet;
	}
	,getModel: function() {
		return this._model;
	}
	,setModel: function(newModel) {
		if(this._model != null) this._model.removeStateListener($bind(this,this.__onModelStateChanged));
		this._model = newModel;
		if(this._model != null) this.addListenerToModel();
	}
	,getString: function() {
		return this._string;
	}
	,setString: function(s) {
		if(this._string != s) {
			this._string = s;
			this.repaint();
		}
	}
	,getOrientation: function() {
		return this._orientation;
	}
	,setOrientation: function(newOrientation) {
		if(newOrientation != 0 && newOrientation != 1) newOrientation = 0;
		if(this._orientation != newOrientation) {
			this._orientation = newOrientation;
			this.revalidate();
			this.repaint();
		}
	}
	,getPercentComplete: function() {
		var span = this._model.getMaximum() - this._model.getMinimum();
		var currentValue = this._model.getValue();
		var pc = (currentValue - this._model.getMinimum()) / span;
		return pc;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setValue: function(n) {
		this.getModel().setValue(n);
	}
	,setMinimum: function(n) {
		this.getModel().setMinimum(n);
	}
	,setMaximum: function(n) {
		this.getModel().setMaximum(n);
	}
	,setIndeterminate: function(newValue) {
		this._indeterminate = newValue;
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,isIndeterminate: function() {
		return this._indeterminate;
	}
	,addListenerToModel: function() {
		this._model.addStateListener($bind(this,this.__onModelStateChanged));
	}
	,__progressAddedToStage: function(e) {
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,__progressRemovedFromStage: function(e) {
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,__onModelStateChanged: function(event) {
		this.__fieldBindings__.dispatch("model",null,null);
		this.__fieldBindings__.dispatch("value",null,null);
		this.repaint();
	}
	,__indeterminateInterval: function(e) {
		this.repaint();
	}
	,__validateIndeterminateIntervalIfNecessary: function() {
		if(this.isIndeterminate() && this.isOnStage()) {
			if(!this.indeterminatePaintTimer.isRunning()) this.indeterminatePaintTimer.start();
		} else if(this.indeterminatePaintTimer.isRunning()) this.indeterminatePaintTimer.stop();
	}
	,__class__: org_aswing_JProgressBar
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_value:"set_value",get_value:"get_value",set_model:"set_model",get_model:"get_model",set_string:"set_string",get_string:"get_string",set_indeterminate:"set_indeterminate",get_indeterminate:"get_indeterminate",set_orientation:"set_orientation",get_orientation:"get_orientation",set_indeterminateDelaySet:"set_indeterminateDelaySet",get_indeterminateDelaySet:"get_indeterminateDelaySet",set_indeterminateDelay:"set_indeterminateDelay",get_indeterminateDelay:"get_indeterminateDelay"})
});
var org_aswing_JRadioButton = function(text,icon) {
	if(text == null) text = "";
	org_aswing_JToggleButton.call(this,text,icon);
	this.setName("JRadioButton");
};
$hxClasses["org.aswing.JRadioButton"] = org_aswing_JRadioButton;
org_aswing_JRadioButton.__name__ = ["org","aswing","JRadioButton"];
org_aswing_JRadioButton.__super__ = org_aswing_JToggleButton;
org_aswing_JRadioButton.prototype = $extend(org_aswing_JToggleButton.prototype,{
	getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicRadioButtonUI;
	}
	,getUIClassID: function() {
		return "RadioButtonUI";
	}
	,get_groupName: function() {
		return this._groupName;
	}
	,set_groupName: function(v) {
		if(null != this._groupName) org_aswing_JRadioButton.groups.get(this._groupName).remove(this);
		if(null != v) {
			if(!org_aswing_JRadioButton.groups.exists(v)) org_aswing_JRadioButton.groups.set(v,new org_aswing_ButtonGroup());
			org_aswing_JRadioButton.groups.get(v).append(this);
		}
		this._groupName = v;
		return v;
	}
	,__class__: org_aswing_JRadioButton
	,__properties__: $extend(org_aswing_JToggleButton.prototype.__properties__,{set_groupName:"set_groupName",get_groupName:"get_groupName"})
});
var org_aswing_JScrollBar = function(orientation,value,extent,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(extent == null) extent = 10;
	if(value == null) value = 0;
	if(orientation == null) orientation = 1;
	org_aswing_Component.call(this);
	this.setName("JScrollBar");
	this._unitIncrement = 1;
	if(extent == 0) this._blockIncrement = 10; else this._blockIncrement = extent;
	this.setOrientation(orientation);
	this.setModel(new org_aswing_DefaultBoundedRangeModel(value,extent,min,max));
	this.updateUI();
};
$hxClasses["org.aswing.JScrollBar"] = org_aswing_JScrollBar;
org_aswing_JScrollBar.__name__ = ["org","aswing","JScrollBar"];
org_aswing_JScrollBar.__interfaces__ = [org_aswing_Orientable];
org_aswing_JScrollBar.__super__ = org_aswing_Component;
org_aswing_JScrollBar.prototype = $extend(org_aswing_Component.prototype,{
	get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_orientation: function() {
		return this.getOrientation();
	}
	,set_orientation: function(v) {
		this.setOrientation(v);
		return v;
	}
	,get_unitIncrement: function() {
		return this.getUnitIncrement();
	}
	,set_unitIncrement: function(v) {
		this.setUnitIncrement(v);
		return v;
	}
	,get_blockIncrement: function() {
		return this.getBlockIncrement();
	}
	,set_blockIncrement: function(v) {
		this.setBlockIncrement(v);
		return v;
	}
	,get_value: function() {
		return this.getValue();
	}
	,set_value: function(v) {
		var __oldValue__ = this.get_value();
		if(v == __oldValue__) return __oldValue__;
		this.setValue(v);
		this.__fieldBindings__.dispatch("value",__oldValue__,this.get_value());
		return v;
	}
	,get_extent: function() {
		return this.getVisibleAmount();
	}
	,set_extent: function(v) {
		this.setVisibleAmount(v);
		return v;
	}
	,get_minimum: function() {
		return this.getMinimum();
	}
	,set_minimum: function(v) {
		this.setMinimum(v);
		return v;
	}
	,get_maximum: function() {
		return this.getMaximum();
	}
	,set_maximum: function(v) {
		this.setMaximum(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicScrollBarUI;
	}
	,getUIClassID: function() {
		return "ScrollBarUI";
	}
	,getOrientation: function() {
		return this._orientation | 0;
	}
	,setOrientation: function(orientation) {
		var oldValue = this._orientation | 0;
		this._orientation = orientation;
		if(orientation != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,getModel: function() {
		return this._model;
	}
	,setModel: function(newModel) {
		if(this._model != null) this._model.removeStateListener($bind(this,this.__modelStateListener));
		this._model = newModel;
		if(this._model != null) this._model.addStateListener($bind(this,this.__modelStateListener));
	}
	,setUnitIncrement: function(unitIncrement) {
		this._unitIncrement = unitIncrement;
	}
	,getUnitIncrement: function() {
		return this._unitIncrement | 0;
	}
	,setBlockIncrement: function(blockIncrement) {
		this._blockIncrement = blockIncrement;
	}
	,getBlockIncrement: function() {
		return this._blockIncrement | 0;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setValue(value,programmatic);
	}
	,getVisibleAmount: function() {
		return this.getModel().getExtent();
	}
	,setVisibleAmount: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting(),programmatic);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__modelStateListener: function(event) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,setEnabled: function(b) {
		org_aswing_Component.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,__class__: org_aswing_JScrollBar
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_maximum:"set_maximum",get_maximum:"get_maximum",set_minimum:"set_minimum",get_minimum:"get_minimum",set_extent:"set_extent",get_extent:"get_extent",set_value:"set_value",get_value:"get_value",set_blockIncrement:"set_blockIncrement",get_blockIncrement:"get_blockIncrement",set_unitIncrement:"set_unitIncrement",get_unitIncrement:"get_unitIncrement",set_orientation:"set_orientation",get_orientation:"get_orientation",set_model:"set_model",get_model:"get_model"})
});
var org_aswing_JScrollPane = function(viewOrViewport,vsbPolicy,hsbPolicy) {
	if(hsbPolicy == null) hsbPolicy = 0;
	if(vsbPolicy == null) vsbPolicy = 0;
	var _g = this;
	org_aswing_Container.call(this);
	this.setName("JScrollPane");
	this.vsbPolicy = vsbPolicy;
	this.hsbPolicy = hsbPolicy;
	this.setVerticalScrollBar(new org_aswing_JScrollBar(1));
	this.setHorizontalScrollBar(new org_aswing_JScrollBar(0));
	if(viewOrViewport != null) this.setView(viewOrViewport); else this.setViewport(new org_aswing_JViewport());
	this.setLayout(new org_aswing_ScrollPaneLayout());
	this.updateUI();
	this.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,function(e) {
		var _g1 = _g.get_verticalScrollBar();
		_g1.set_value(_g1.get_value() + _g.get_verticalScrollBar().get_unitIncrement() * e.delta);
	});
};
$hxClasses["org.aswing.JScrollPane"] = org_aswing_JScrollPane;
org_aswing_JScrollPane.__name__ = ["org","aswing","JScrollPane"];
org_aswing_JScrollPane.__super__ = org_aswing_Container;
org_aswing_JScrollPane.prototype = $extend(org_aswing_Container.prototype,{
	get_viewport: function() {
		return this.getViewport();
	}
	,set_viewport: function(v) {
		this.setViewport(v);
		return v;
	}
	,get_verticalScrollBar: function() {
		return this.getVerticalScrollBar();
	}
	,set_verticalScrollBar: function(v) {
		this.setVerticalScrollBar(v);
		return v;
	}
	,get_horizontalScrollBar: function() {
		return this.getHorizontalScrollBar();
	}
	,set_horizontalScrollBar: function(v) {
		this.setHorizontalScrollBar(v);
		return v;
	}
	,get_verticalScrollBarPolicy: function() {
		return Std["int"](this.getVerticalScrollBarPolicy());
	}
	,set_verticalScrollBarPolicy: function(v) {
		this.setVerticalScrollBarPolicy(v);
		return v;
	}
	,get_horizontalScrollBarPolicy: function() {
		return Std["int"](this.getHorizontalScrollBarPolicy());
	}
	,set_horizontalScrollBarPolicy: function(v) {
		this.setHorizontalScrollBarPolicy(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicScrollPaneUI;
	}
	,getUIClassID: function() {
		return "ScrollPaneUI";
	}
	,setLayout: function(layout) {
		if(js_Boot.__instanceof(layout,org_aswing_ScrollPaneLayout)) org_aswing_Container.prototype.setLayout.call(this,layout); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Only can set ScrollPaneLayout to JScrollPane"));
	}
	,isValidateRoot: function() {
		return true;
	}
	,setView: function(viewOrViewport) {
		if(js_Boot.__instanceof(viewOrViewport,org_aswing_JList) || js_Boot.__instanceof(viewOrViewport,org_aswing_JTree) || js_Boot.__instanceof(viewOrViewport,org_aswing_JTextArea) || js_Boot.__instanceof(viewOrViewport,org_aswing_JTable)) this.setViewport(js_Boot.__instanceof(viewOrViewport,org_aswing_Viewportable)?viewOrViewport:null); else if(js_Boot.__instanceof(viewOrViewport,org_aswing_Component)) this.setViewportView(js_Boot.__instanceof(viewOrViewport,org_aswing_Component)?viewOrViewport:null); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Only accept Component or Viewportable instance here!"));
	}
	,setViewportView: function(view) {
		var jviewport = org_aswing_AsWingUtils["as"](this.getViewport(),org_aswing_JViewport);
		if(jviewport != null) jviewport.setView(view); else this.setViewport(new org_aswing_JViewport(view));
	}
	,getViewportView: function() {
		var jviewport = org_aswing_AsWingUtils["as"](this.getViewport(),org_aswing_JViewport);
		if(jviewport != null) return jviewport.getView(); else return null;
	}
	,setViewport: function(vp) {
		if(this._viewport != vp) {
			if(this._viewport != null) this.remove(this._viewport.getViewportPane());
			this._viewport = vp;
			if(this._viewport != null) this.insertImp(-1,this._viewport.getViewportPane());
			this.revalidate();
			this.dispatchEvent(new org_aswing_event_ScrollPaneEvent("viewportChanged",true,null,true));
		}
	}
	,getViewport: function() {
		return this._viewport;
	}
	,getVisibleRect: function() {
		return new org_aswing_geom_IntRectangle(this.getHorizontalScrollBar().getValue(),this.getVerticalScrollBar().getValue(),this.getHorizontalScrollBar().getVisibleAmount(),this.getVerticalScrollBar().getVisibleAmount());
	}
	,addAdjustmentListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("scrollbarStateChanged",listener,false,priority);
	}
	,removeAdjustmentListener: function(listener) {
		this.removeEventListener("scrollbarStateChanged",listener);
	}
	,__onBarScroll: function(e) {
		this.dispatchEvent(new org_aswing_event_ScrollPaneEvent("scrollbarStateChanged",e.isProgrammatic(),org_aswing_AsWingUtils["as"](e.target,org_aswing_JScrollBar),false));
	}
	,setHorizontalScrollBar: function(horizontalScrollBar) {
		if(this.hScrollBar != horizontalScrollBar) {
			if(this.hScrollBar != null) {
				this.hScrollBar.removeStateListener($bind(this,this.__onBarScroll));
				this.remove(this.hScrollBar);
			}
			this.hScrollBar = horizontalScrollBar;
			if(this.hScrollBar != null) {
				this.hScrollBar.setName("HorizontalScrollBar");
				this.insertImp(-1,this.hScrollBar);
				this.hScrollBar.addStateListener($bind(this,this.__onBarScroll));
			}
			this.revalidate();
		}
	}
	,getHorizontalScrollBar: function() {
		return this.hScrollBar;
	}
	,setHorizontalScrollBarPolicy: function(policy) {
		this.hsbPolicy = policy | 0;
	}
	,getHorizontalScrollBarPolicy: function() {
		return this.hsbPolicy;
	}
	,setVerticalScrollBar: function(verticalScrollBar) {
		if(this.vScrollBar != verticalScrollBar) {
			if(this.vScrollBar != null) {
				this.vScrollBar.removeStateListener($bind(this,this.__onBarScroll));
				this.remove(this.vScrollBar);
			}
			this.vScrollBar = verticalScrollBar;
			if(this.vScrollBar != null) {
				this.vScrollBar.setName("verticalScrollBar");
				this.insertImp(-1,this.vScrollBar);
				this.vScrollBar.addStateListener($bind(this,this.__onBarScroll));
			}
			this.revalidate();
		}
	}
	,getVerticalScrollBar: function() {
		return this.vScrollBar;
	}
	,setVerticalScrollBarPolicy: function(policy) {
		this.vsbPolicy = policy | 0;
	}
	,getVerticalScrollBarPolicy: function() {
		return this.vsbPolicy;
	}
	,append: function(com,constraints) {
		this.setView(com);
	}
	,insert: function(i,com,constraints) {
		this.setView(com);
	}
	,getFocusTransmit: function() {
		return this.getViewport().getViewportPane();
	}
	,__class__: org_aswing_JScrollPane
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_horizontalScrollBarPolicy:"set_horizontalScrollBarPolicy",get_horizontalScrollBarPolicy:"get_horizontalScrollBarPolicy",set_verticalScrollBarPolicy:"set_verticalScrollBarPolicy",get_verticalScrollBarPolicy:"get_verticalScrollBarPolicy",set_horizontalScrollBar:"set_horizontalScrollBar",get_horizontalScrollBar:"get_horizontalScrollBar",set_verticalScrollBar:"set_verticalScrollBar",get_verticalScrollBar:"get_verticalScrollBar",set_viewport:"set_viewport",get_viewport:"get_viewport"})
});
var org_aswing_JToolTip = function() {
	org_aswing_Container.call(this);
	this.setName("JToolTip");
	this._offsets = new org_aswing_geom_IntPoint(4,20);
	this._offsetsRelatedToMouse = true;
	this._waitThenPopupEnabled = true;
	this.timer = new org_aswing_util_Timer(org_aswing_JToolTip.WAIT_TIME,0);
	this.timer.setInitialDelay(org_aswing_JToolTip.WAIT_TIME);
	this.timer.addActionListener($bind(this,this.__timeOnAction));
	this.mouseEnabled = false;
	this.mouseChildren = false;
	this.updateUI();
};
$hxClasses["org.aswing.JToolTip"] = org_aswing_JToolTip;
org_aswing_JToolTip.__name__ = ["org","aswing","JToolTip"];
org_aswing_JToolTip.__properties__ = {set_defaultRoot:"set_defaultRoot",get_defaultRoot:"get_defaultRoot"}
org_aswing_JToolTip._defaultRoot = null;
org_aswing_JToolTip.get_defaultRoot = function() {
	return org_aswing_JToolTip.getDefaultToolTipContainerRoot();
};
org_aswing_JToolTip.set_defaultRoot = function(v) {
	org_aswing_JToolTip.setDefaultToolTipContainerRoot(v);
	return v;
};
org_aswing_JToolTip.setDefaultToolTipContainerRoot = function(theRoot) {
	if(theRoot != org_aswing_JToolTip._defaultRoot) org_aswing_JToolTip._defaultRoot = theRoot;
};
org_aswing_JToolTip.getDefaultToolTipContainerRoot = function() {
	if(org_aswing_JToolTip._defaultRoot == null) return org_aswing_AsWingManager.getRoot();
	return org_aswing_JToolTip._defaultRoot;
};
org_aswing_JToolTip.__super__ = org_aswing_Container;
org_aswing_JToolTip.prototype = $extend(org_aswing_Container.prototype,{
	get_containerRoot: function() {
		return this.getToolTipContainerRoot();
	}
	,set_containerRoot: function(v) {
		this.setToolTipContainerRoot(v);
		return v;
	}
	,get_text: function() {
		return this.getTipText();
	}
	,set_text: function(v) {
		this.setTipText(v);
		return v;
	}
	,get_targetComponent: function() {
		return this.getTargetComponent();
	}
	,set_targetComponent: function(v) {
		this.setTargetComponent(v);
		return v;
	}
	,get_offsets: function() {
		return this.getOffsets();
	}
	,set_offsets: function(v) {
		this.setOffsets(v);
		return v;
	}
	,get_offsetsRelatedToMouse: function() {
		return this.isOffsetsRelatedToMouse();
	}
	,set_offsetsRelatedToMouse: function(v) {
		this.setOffsetsRelatedToMouse(v);
		return v;
	}
	,get_waitThenPopupEnabled: function() {
		return this.isWaitThenPopupEnabled();
	}
	,set_waitThenPopupEnabled: function(v) {
		this.setWaitThenPopupEnabled(v);
		return v;
	}
	,setToolTipContainerRoot: function(theRoot) {
		if(theRoot != this._containerRoot) this._containerRoot = theRoot;
	}
	,getToolTipContainerRoot: function() {
		if(this._containerRoot == null) {
			var cr = null;
			if(this.getTargetComponent() != null) cr = org_aswing_AsWingUtils["as"](org_aswing_AsWingManager.getStage(),openfl_display_DisplayObjectContainer);
			if(cr == null) cr = org_aswing_JToolTip.getDefaultToolTipContainerRoot();
			return cr;
		}
		return this._containerRoot;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicToolTipUI;
	}
	,getUIClassID: function() {
		return "ToolTipUI";
	}
	,startWaitToPopup: function() {
		if(openfl_Lib.getTimer() - org_aswing_JToolTip.last_tip_dropped_time < org_aswing_JToolTip.FAST_OCCUR_TIME) this.timer.setInitialDelay(org_aswing_JToolTip.FAST_OCCUR_TIME); else this.timer.setInitialDelay(org_aswing_JToolTip.WAIT_TIME);
		this.timer.restart();
		if(this.getTargetComponent() != null) this.getTargetComponent().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved),false,0,false);
	}
	,stopWaitToPopup: function() {
		this.timer.stop();
		if(this.getTargetComponent() != null) this.getTargetComponent().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved));
		org_aswing_JToolTip.last_tip_dropped_time = openfl_Lib.getTimer();
	}
	,setWaitThenPopupEnabled: function(b) {
		this._waitThenPopupEnabled = b;
	}
	,isWaitThenPopupEnabled: function() {
		return this._waitThenPopupEnabled;
	}
	,__compRollOver: function(source) {
		if(source == this._targetComponent && this.isWaitThenPopupEnabled()) this.startWaitToPopup();
	}
	,__compRollOut: function(source) {
		if(source == this._targetComponent && this.isWaitThenPopupEnabled()) this.disposeToolTip();
	}
	,__onMouseMoved: function(e) {
		if(this.timer.isRunning()) this.timer.restart();
	}
	,__timeOnAction: function(e) {
		this.timer.stop();
		this.dispatchEvent(new org_aswing_event_ToolTipEvent("tipShowing"));
		this.disposeToolTip();
		this.viewToolTip();
	}
	,viewToolTip: function() {
		if(this._text == null) return;
		var containerPane = this.getToolTipContainerRoot();
		if(containerPane == null) {
			haxe_Log.trace("getToolTipContainerRoot null",{ fileName : "JToolTip.hx", lineNumber : 270, className : "org.aswing.JToolTip", methodName : "viewToolTip"});
			return;
		}
		containerPane.addChild(this);
		var relatePoint = new org_aswing_geom_IntPoint();
		if(this._offsetsRelatedToMouse) {
			var gp = containerPane.localToGlobal(new openfl_geom_Point(containerPane.get_mouseX(),containerPane.get_mouseY()));
			relatePoint.setWithPoint(gp);
		} else if(this.getTargetComponent() != null) relatePoint.setWithPoint(this.getTargetComponent().localToGlobal(new openfl_geom_Point(0,0)));
		this.moveLocationRelatedTo(relatePoint);
	}
	,moveLocationRelatedTo: function(globalPos) {
		if(!this.isShowing()) return;
		globalPos = globalPos.clone();
		globalPos.move(this._offsets.x,this._offsets.y);
		var viewSize = this.getPreferredSize();
		var visibleBounds = org_aswing_AsWingUtils.getVisibleMaximizedBounds(this.parent);
		if(globalPos.x + viewSize.width > visibleBounds.x + visibleBounds.width) globalPos.x = visibleBounds.x + visibleBounds.width - viewSize.width;
		if(globalPos.y + viewSize.height > visibleBounds.y + visibleBounds.height) globalPos.y = visibleBounds.y + visibleBounds.height - viewSize.height;
		if(globalPos.x < visibleBounds.x) globalPos.x = visibleBounds.x;
		if(globalPos.y < visibleBounds.y) globalPos.y = visibleBounds.y;
		this.setGlobalLocation(globalPos);
		this.setSize(viewSize);
		this.revalidate();
	}
	,showToolTip: function() {
		this.viewToolTip();
	}
	,disposeToolTip: function() {
		this.stopWaitToPopup();
		this.removeFromContainer();
	}
	,setTipText: function(t) {
		if(t != this._text) {
			this._text = t;
			this.dispatchEvent(new org_aswing_event_ToolTipEvent("tipTextChanged"));
			if(t == null) this.disposeToolTip(); else if(this.isShowing()) {
				this.setSize(this.getPreferredSize());
				this.repaint();
				this.revalidate();
			}
		}
	}
	,getTipText: function() {
		return this._text;
	}
	,setTargetComponent: function(c) {
		if(c != this._targetComponent) {
			if(this._targetComponent != null) this.unlistenOwner(this._targetComponent);
			this._targetComponent = c;
			if(this._targetComponent != null) this.listenOwner(this._targetComponent);
		}
	}
	,getTargetComponent: function() {
		return this._targetComponent;
	}
	,setOffsets: function(o) {
		this._offsets.setLocation(o);
	}
	,getOffsets: function() {
		return this._offsets.clone();
	}
	,setOffsetsRelatedToMouse: function(b) {
		this._offsetsRelatedToMouse = b;
	}
	,isOffsetsRelatedToMouse: function() {
		return this._offsetsRelatedToMouse;
	}
	,listenOwner: function(comp,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		comp.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.____compRollOver),false,0,useWeakReference);
		comp.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.____compRollOut),false,0,useWeakReference);
		comp.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.____compRollOut),false,0,useWeakReference);
	}
	,unlistenOwner: function(comp) {
		comp.removeEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.____compRollOver));
		comp.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.____compRollOut));
		comp.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.____compRollOut));
		comp.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved));
	}
	,____compRollOver: function(e) {
		var source = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component);
		this.__compRollOver(source);
	}
	,____compRollOut: function(e) {
		var source = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component);
		this.__compRollOut(source);
	}
	,__class__: org_aswing_JToolTip
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_waitThenPopupEnabled:"set_waitThenPopupEnabled",get_waitThenPopupEnabled:"get_waitThenPopupEnabled",set_offsetsRelatedToMouse:"set_offsetsRelatedToMouse",get_offsetsRelatedToMouse:"get_offsetsRelatedToMouse",set_offsets:"set_offsets",get_offsets:"get_offsets",set_targetComponent:"set_targetComponent",get_targetComponent:"get_targetComponent",set_text:"set_text",get_text:"get_text",set_containerRoot:"set_containerRoot",get_containerRoot:"get_containerRoot"})
});
var org_aswing_JSharedToolTip = function() {
	org_aswing_JToolTip.call(this);
	this.setName("JSharedToolTip");
	this.textMap = new haxe_ds_IntMap();
};
$hxClasses["org.aswing.JSharedToolTip"] = org_aswing_JSharedToolTip;
org_aswing_JSharedToolTip.__name__ = ["org","aswing","JSharedToolTip"];
org_aswing_JSharedToolTip.__properties__ = {set_sharedInstance:"set_sharedInstance",get_sharedInstance:"get_sharedInstance"}
org_aswing_JSharedToolTip._sharedInstance = null;
org_aswing_JSharedToolTip.get_sharedInstance = function() {
	return org_aswing_JSharedToolTip.getSharedInstance();
};
org_aswing_JSharedToolTip.set_sharedInstance = function(q) {
	org_aswing_JSharedToolTip.setSharedInstance(q);
	return q;
};
org_aswing_JSharedToolTip.getSharedInstance = function() {
	if(org_aswing_JSharedToolTip._sharedInstance == null) org_aswing_JSharedToolTip._sharedInstance = new org_aswing_JSharedToolTip();
	return org_aswing_JSharedToolTip._sharedInstance;
};
org_aswing_JSharedToolTip.setSharedInstance = function(ins) {
	if(org_aswing_JSharedToolTip._sharedInstance != null) throw new js__$Boot_HaxeError(new openfl_errors_Error("sharedInstance is already set!")); else org_aswing_JSharedToolTip._sharedInstance = ins;
};
org_aswing_JSharedToolTip.__super__ = org_aswing_JToolTip;
org_aswing_JSharedToolTip.prototype = $extend(org_aswing_JToolTip.prototype,{
	registerComponent: function(c,tipText) {
		this.listenOwner(c,true);
		this.textMap.set(c.getAwmlIndex(),tipText);
		if(this.getTargetComponent() == c) this.setTipText(this.getTargetToolTipText(c));
	}
	,unregisterComponent: function(c) {
		if(!this.textMap.exists(c.getAwmlIndex())) return;
		this.unlistenOwner(c);
		this.textMap.remove(c.getAwmlIndex());
		if(this.getTargetComponent() == c) {
			this.disposeToolTip();
			this.targetedComponent = null;
		}
	}
	,setTargetComponent: function(c) {
		this.registerComponent(c);
	}
	,getTargetComponent: function() {
		return this.targetedComponent;
	}
	,getTargetToolTipText: function(c) {
		if(js_Boot.__instanceof(c,org_aswing_Component)) {
			var co;
			co = js_Boot.__instanceof(c,org_aswing_Component)?c:null;
			return co.getToolTipText();
		} else return this.textMap.get(c.getAwmlIndex());
	}
	,__compRollOver: function(source) {
		var tipText = this.getTargetToolTipText(source);
		if(tipText != null && this.isWaitThenPopupEnabled()) {
			this.targetedComponent = source;
			this.setTipText(tipText);
			this.startWaitToPopup();
		}
	}
	,__compRollOut: function(source) {
		if(source == this.targetedComponent && this.isWaitThenPopupEnabled()) {
			this.disposeToolTip();
			this.targetedComponent = null;
		}
	}
	,__class__: org_aswing_JSharedToolTip
});
var org_aswing_JSlider = function(orientation,min,max,value) {
	if(value == null) value = 50;
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(orientation == null) orientation = 0;
	org_aswing_Component.call(this);
	this.setName("JSlider");
	this._isInverted = false;
	this._majorTickSpacing = 0;
	this._minorTickSpacing = 0;
	this._snapToTicks = false;
	this._paintTrack = true;
	this._paintTicks = false;
	this._showValueTip = false;
	this.setOrientation(orientation);
	this.setModel(new org_aswing_DefaultBoundedRangeModel(value,0,min,max));
	this.updateUI();
};
$hxClasses["org.aswing.JSlider"] = org_aswing_JSlider;
org_aswing_JSlider.__name__ = ["org","aswing","JSlider"];
org_aswing_JSlider.__interfaces__ = [org_aswing_Orientable];
org_aswing_JSlider.__super__ = org_aswing_Component;
org_aswing_JSlider.prototype = $extend(org_aswing_Component.prototype,{
	get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_orientation: function() {
		return this.getOrientation();
	}
	,set_orientation: function(v) {
		this.setOrientation(v);
		return v;
	}
	,get_value: function() {
		return this.getValue();
	}
	,set_value: function(v) {
		var __oldValue__ = this.get_value();
		if(v == __oldValue__) return __oldValue__;
		this.setValue(v);
		this.__fieldBindings__.dispatch("value",__oldValue__,this.get_value());
		return v;
	}
	,get_extent: function() {
		return this.getExtent();
	}
	,set_extent: function(v) {
		this.setExtent(v);
		return v;
	}
	,get_minimum: function() {
		return this.getMinimum();
	}
	,set_minimum: function(v) {
		this.setMinimum(v);
		return v;
	}
	,get_maximum: function() {
		return this.getMaximum();
	}
	,set_maximum: function(v) {
		this.setMaximum(v);
		return v;
	}
	,get_isAdjusting: function() {
		return this.getValueIsAdjusting();
	}
	,get_majorTickSpacing: function() {
		return this.getMajorTickSpacing();
	}
	,set_majorTickSpacing: function(v) {
		this.setMajorTickSpacing(v);
		return v;
	}
	,get_minorTickSpacing: function() {
		return this.getMinorTickSpacing();
	}
	,set_minorTickSpacing: function(v) {
		this.setMinorTickSpacing(v);
		return v;
	}
	,get_isInverted: function() {
		return this.getInverted();
	}
	,set_isInverted: function(v) {
		this.setInverted(v);
		return v;
	}
	,get_snapToTicks: function() {
		return this.getSnapToTicks();
	}
	,set_snapToTicks: function(v) {
		this.setSnapToTicks(v);
		return v;
	}
	,get_paintTrack: function() {
		return this.getPaintTrack();
	}
	,set_paintTrack: function(v) {
		this.setPaintTrack(v);
		return v;
	}
	,get_paintTicks: function() {
		return this.getPaintTicks();
	}
	,set_paintTicks: function(v) {
		this.setPaintTicks(v);
		return v;
	}
	,get_valueTip: function() {
		return this.getValueTip();
	}
	,set_valueTip: function(v) {
		this.setValueTip(v);
		return v;
	}
	,get_showValueTip: function() {
		return this.getShowValueTip();
	}
	,set_showValueTip: function(v) {
		this.setShowValueTip(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicSliderUI;
	}
	,getUIClassID: function() {
		return "SliderUI";
	}
	,getOrientation: function() {
		return this._orientation;
	}
	,setOrientation: function(orientation) {
		var oldValue = this._orientation;
		this._orientation = orientation;
		if(orientation != oldValue) {
			this.repaint();
			this.revalidate();
		}
	}
	,getModel: function() {
		return this._model;
	}
	,setModel: function(newModel) {
		var oldModel = this._model;
		if(oldModel != null) oldModel.removeStateListener($bind(this,this.__onModelStateChanged));
		this._model = newModel;
		if(this._model != null) this._model.addStateListener($bind(this,this.__onModelStateChanged));
	}
	,__onModelStateChanged: function(event) {
		if(!this.get_isAdjusting()) this.__fieldBindings__.dispatch("value",null,null);
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,setEnabled: function(b) {
		org_aswing_Component.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setValue(value,programmatic);
	}
	,getExtent: function() {
		return this.getModel().getExtent();
	}
	,setExtent: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting(),programmatic);
	}
	,getInverted: function() {
		return this._isInverted;
	}
	,setInverted: function(b) {
		if(b != this._isInverted) {
			this._isInverted = b;
			this.repaint();
		}
	}
	,getMajorTickSpacing: function() {
		return this._majorTickSpacing;
	}
	,setMajorTickSpacing: function(n) {
		if(n != this._majorTickSpacing) {
			this._majorTickSpacing = n;
			if(this.getPaintTicks()) this.repaint();
		}
	}
	,getMinorTickSpacing: function() {
		return this._minorTickSpacing;
	}
	,setMinorTickSpacing: function(n) {
		if(this._minorTickSpacing != n) {
			this._minorTickSpacing = n;
			if(this.getPaintTicks()) this.repaint();
		}
	}
	,setSnapToTicks: function(b) {
		if(b != this._snapToTicks) {
			this._snapToTicks = b;
			this.repaint();
		}
	}
	,getSnapToTicks: function() {
		return this._snapToTicks;
	}
	,getPaintTicks: function() {
		return this._paintTicks;
	}
	,setPaintTicks: function(b) {
		if(this._paintTicks != b) {
			this._paintTicks = b;
			this.revalidate();
			this.repaint();
		}
	}
	,getPaintTrack: function() {
		return this._paintTrack;
	}
	,setPaintTrack: function(b) {
		if(this._paintTrack != b) {
			this._paintTrack = b;
			this.repaint();
		}
	}
	,setShowValueTip: function(b) {
		if(this._showValueTip != b) {
			this._showValueTip = b;
			if(this._showValueTip) {
				if(this._valueTip == null) this.createDefaultValueTip();
			} else if(this._valueTip != null && this._valueTip.isShowing()) this._valueTip.disposeToolTip();
		}
	}
	,getShowValueTip: function() {
		if(this._showValueTip && this._valueTip == null) this.createDefaultValueTip();
		return this._showValueTip;
	}
	,getValueTip: function() {
		return this._valueTip;
	}
	,setValueTip: function(valueTip) {
		if(valueTip != null) valueTip.setTargetComponent(this);
		this._valueTip = valueTip;
		if(valueTip == null && this.getShowValueTip()) this.createDefaultValueTip();
	}
	,createDefaultValueTip: function() {
		this._valueTip = new org_aswing_JToolTip();
		this._valueTip.setTargetComponent(this);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__class__: org_aswing_JSlider
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{set_showValueTip:"set_showValueTip",get_showValueTip:"get_showValueTip",set_valueTip:"set_valueTip",get_valueTip:"get_valueTip",set_paintTicks:"set_paintTicks",get_paintTicks:"get_paintTicks",set_paintTrack:"set_paintTrack",get_paintTrack:"get_paintTrack",set_snapToTicks:"set_snapToTicks",get_snapToTicks:"get_snapToTicks",set_isInverted:"set_isInverted",get_isInverted:"get_isInverted",set_minorTickSpacing:"set_minorTickSpacing",get_minorTickSpacing:"get_minorTickSpacing",set_majorTickSpacing:"set_majorTickSpacing",get_majorTickSpacing:"get_majorTickSpacing",get_isAdjusting:"get_isAdjusting",set_maximum:"set_maximum",get_maximum:"get_maximum",set_minimum:"set_minimum",get_minimum:"get_minimum",set_extent:"set_extent",get_extent:"get_extent",set_value:"set_value",get_value:"get_value",set_orientation:"set_orientation",get_orientation:"get_orientation",set_model:"set_model",get_model:"get_model"})
});
var org_aswing_JTabbedPane = function() {
	org_aswing_AbstractTabbedPane.call(this);
	this.setName("JTabbedPane");
	this._tabPlacement = 1;
	this._leadingOffset = 0;
	this.updateUI();
};
$hxClasses["org.aswing.JTabbedPane"] = org_aswing_JTabbedPane;
org_aswing_JTabbedPane.__name__ = ["org","aswing","JTabbedPane"];
org_aswing_JTabbedPane.__super__ = org_aswing_AbstractTabbedPane;
org_aswing_JTabbedPane.prototype = $extend(org_aswing_AbstractTabbedPane.prototype,{
	get_tabPlacement: function() {
		return this.getTabPlacement();
	}
	,set_tabPlacement: function(v) {
		this.setTabPlacement(v);
		return v;
	}
	,get_leadingOffset: function() {
		return this.getLeadingOffset();
	}
	,set_leadingOffset: function(v) {
		this.setLeadingOffset(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTabbedPaneUI;
	}
	,getUIClassID: function() {
		return "TabbedPaneUI";
	}
	,setTabPlacement: function(tabPlacement) {
		if(this._tabPlacement != tabPlacement) {
			this._tabPlacement = tabPlacement;
			this.revalidate();
			this.repaint();
		}
	}
	,getTabPlacement: function() {
		return this._tabPlacement;
	}
	,setLeadingOffset: function(offset) {
		if(this._leadingOffset != offset) {
			this._leadingOffset = offset;
			this.revalidate();
			this.repaint();
		}
	}
	,getLeadingOffset: function() {
		return this._leadingOffset;
	}
	,setLayout: function(layout) {
		if(js_Boot.__instanceof(layout,org_aswing_plaf_ComponentUI)) org_aswing_AbstractTabbedPane.prototype.setLayout.call(this,layout); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Cannot set non-AccordionUI layout to JAccordion!"));
	}
	,setVisibleAt: function(index,visible) {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("Not supported setVisibleAt!"));
	}
	,__class__: org_aswing_JTabbedPane
	,__properties__: $extend(org_aswing_AbstractTabbedPane.prototype.__properties__,{set_leadingOffset:"set_leadingOffset",get_leadingOffset:"get_leadingOffset",set_tabPlacement:"set_tabPlacement",get_tabPlacement:"get_tabPlacement"})
});
var org_aswing_event_CellEditorListener = function() { };
$hxClasses["org.aswing.event.CellEditorListener"] = org_aswing_event_CellEditorListener;
org_aswing_event_CellEditorListener.__name__ = ["org","aswing","event","CellEditorListener"];
org_aswing_event_CellEditorListener.prototype = {
	__class__: org_aswing_event_CellEditorListener
};
var org_aswing_table_TableColumnModelListener = function() { };
$hxClasses["org.aswing.table.TableColumnModelListener"] = org_aswing_table_TableColumnModelListener;
org_aswing_table_TableColumnModelListener.__name__ = ["org","aswing","table","TableColumnModelListener"];
org_aswing_table_TableColumnModelListener.prototype = {
	__class__: org_aswing_table_TableColumnModelListener
};
var org_aswing_event_TableModelListener = function() { };
$hxClasses["org.aswing.event.TableModelListener"] = org_aswing_event_TableModelListener;
org_aswing_event_TableModelListener.__name__ = ["org","aswing","event","TableModelListener"];
org_aswing_event_TableModelListener.prototype = {
	__class__: org_aswing_event_TableModelListener
};
var org_aswing_JTable = function(dm) {
	org_aswing_Container.call(this);
	this.setName("JTable");
	this._verticalUnitIncrement = -2147483647;
	this._verticalBlockIncrement = -2147483647;
	this._horizontalUnitIncrement = -2147483647;
	this._horizontalBlockIncrement = -2147483647;
	this.initWithModels(dm);
	this.lastTotalColumnWidth = -1;
};
$hxClasses["org.aswing.JTable"] = org_aswing_JTable;
org_aswing_JTable.__name__ = ["org","aswing","JTable"];
org_aswing_JTable.__interfaces__ = [org_aswing_LayoutManager,org_aswing_event_CellEditorListener,org_aswing_table_TableColumnModelListener,org_aswing_event_TableModelListener,org_aswing_Viewportable];
org_aswing_JTable.setCellComponentProperties = function(com) {
	com.setFocusable(false);
	if(js_Boot.__instanceof(com,org_aswing_Container)) {
		var con;
		con = js_Boot.__instanceof(com,org_aswing_Container)?com:null;
		var _g1 = 0;
		var _g = con.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			org_aswing_JTable.setCellComponentProperties(con.getComponent(i));
		}
	}
};
org_aswing_JTable.__super__ = org_aswing_Container;
org_aswing_JTable.prototype = $extend(org_aswing_Container.prototype,{
	get_dataModel: function() {
		return this.getModel();
	}
	,set_dataModel: function(v) {
		this.setModel(v);
		return v;
	}
	,get_columnModel: function() {
		return this.getColumnModel();
	}
	,set_columnModel: function(v) {
		this.setColumnModel(v);
		return v;
	}
	,get_selectionModel: function() {
		return this.getSelectionModel();
	}
	,set_selectionModel: function(v) {
		this.setSelectionModel(v);
		return v;
	}
	,get_selectionMode: function() {
		return this.get_selectionModel().getSelectionMode();
	}
	,set_selectionMode: function(v) {
		this.setSelectionMode(v);
		return v;
	}
	,get_tableHeader: function() {
		return this.getTableHeader();
	}
	,set_tableHeader: function(v) {
		this.setTableHeader(v);
		return v;
	}
	,get_footer: function() {
		return this.getFooter();
	}
	,set_footer: function(v) {
		this.setFooter(v);
		return v;
	}
	,get_rowHeight: function() {
		return this.getRowHeight();
	}
	,set_rowHeight: function(v) {
		this.setRowHeight(v);
		return v;
	}
	,get_rowMargin: function() {
		return this.getRowMargin();
	}
	,set_rowMargin: function(v) {
		this.setRowMargin(v);
		return v;
	}
	,get_cellSpacing: function() {
		return this.getIntercellSpacing();
	}
	,set_cellSpacing: function(v) {
		this.setIntercellSpacing(v);
		return v;
	}
	,get_gridColor: function() {
		return this.getGridColor();
	}
	,set_gridColor: function(v) {
		this.setGridColor(v);
		return v;
	}
	,get_showHorizontalLines: function() {
		return this.getShowHorizontalLines();
	}
	,set_showHorizontalLines: function(v) {
		this.setShowHorizontalLines(v);
		return v;
	}
	,get_showVerticalLines: function() {
		return this.getShowVerticalLines();
	}
	,set_showVerticalLines: function(v) {
		this.setShowVerticalLines(v);
		return v;
	}
	,get_autoResizeMode: function() {
		return this.getAutoResizeMode();
	}
	,set_autoResizeMode: function(v) {
		this.setAutoResizeMode(v);
		return v;
	}
	,get_autoCreateColumnsFromModel: function() {
		return this.getAutoCreateColumnsFromModel();
	}
	,set_autoCreateColumnsFromModel: function(v) {
		this.setAutoCreateColumnsFromModel(v);
		return v;
	}
	,get_preferredViewportSize: function() {
		return this.getPreferredScrollableViewportSize();
	}
	,set_preferredViewportSize: function(v) {
		this.setPreferredScrollableViewportSize(v);
		return v;
	}
	,get_rowSelectionAllowed: function() {
		return this.getRowSelectionAllowed();
	}
	,set_rowSelectionAllowed: function(v) {
		this.setRowSelectionAllowed(v);
		return v;
	}
	,get_columnSelectionAllowed: function() {
		return this.getColumnSelectionAllowed();
	}
	,set_columnSelectionAllowed: function(v) {
		this.setColumnSelectionAllowed(v);
		return v;
	}
	,get_cellSelectionEnabled: function() {
		return this.getCellSelectionEnabled();
	}
	,set_cellSelectionEnabled: function(v) {
		this.setCellSelectionEnabled(v);
		return v;
	}
	,get_viewPosition: function() {
		return this.getViewPosition();
	}
	,set_viewPosition: function(v) {
		this.setViewPosition(v);
		return v;
	}
	,get_verticalUnitIncrement: function() {
		return this.getVerticalUnitIncrement();
	}
	,set_verticalUnitIncrement: function(v) {
		this.setVerticalUnitIncrement(v);
		return v;
	}
	,get_verticalBlockIncrement: function() {
		return this.getVerticalBlockIncrement();
	}
	,set_verticalBlockIncrement: function(v) {
		this.setVerticalBlockIncrement(v);
		return v;
	}
	,get_horizontalUnitIncrement: function() {
		return this.getHorizontalUnitIncrement();
	}
	,set_horizontalUnitIncrement: function(v) {
		this.setHorizontalUnitIncrement(v);
		return v;
	}
	,get_horizontalBlockIncrement: function() {
		return this.getHorizontalBlockIncrement();
	}
	,set_horizontalBlockIncrement: function(v) {
		this.setHorizontalBlockIncrement(v);
		return v;
	}
	,get_selectedItem: function() {
		var index = this.getSelectedRow();
		var model = this.get_dataModel();
		if(index >= 0) {
			var sorter;
			sorter = js_Boot.__instanceof(model,org_aswing_table_sorter_TableSorter)?model:null;
			if(null != sorter) {
				index = sorter.modelIndex(index);
				model = sorter.get_tableModel();
			}
			var propertyModel;
			propertyModel = js_Boot.__instanceof(model,org_aswing_table_PropertyTableModel)?model:null;
			if(null == propertyModel || null == propertyModel.get_list()) return null; else return propertyModel.get_list().getElementAt(index);
		} else return null;
	}
	,set_selectedItem: function(v) {
		var __oldValue__ = this.get_selectedItem();
		if(v == __oldValue__) return __oldValue__;
		var model = this.get_dataModel();
		var sorter;
		sorter = js_Boot.__instanceof(model,org_aswing_table_sorter_TableSorter)?model:null;
		if(null != sorter) model = sorter.get_tableModel();
		var propertyModel;
		propertyModel = js_Boot.__instanceof(model,org_aswing_table_PropertyTableModel)?model:null;
		if(null != propertyModel) {
			var index = -1;
			var _g1 = 0;
			var _g = propertyModel.get_list().getSize();
			while(_g1 < _g) {
				var i = _g1++;
				if(v == propertyModel.get_list().getElementAt(i)) {
					index = i;
					break;
				}
			}
			if(index > 0) {
				if(null != sorter) index = sorter.viewIndex(index);
				this.setRowSelectionInterval(index,index);
			}
		}
		this.__fieldBindings__.dispatch("selectedItem",__oldValue__,this.get_selectedItem());
		return v;
	}
	,initWithModels: function(dm,cm,sm) {
		this.setLayout(this);
		this.cellPane = new org_aswing_CellPane();
		this.cellPane.setEnabled(false);
		this.append(this.cellPane);
		this.headerPane = new org_aswing_CellPane();
		this.headerPane.setEnabled(false);
		this.append(this.headerPane);
		this.rowCells = [];
		this._viewPosition = new org_aswing_geom_IntPoint();
		if(cm == null) cm = this.createDefaultColumnModel();
		this.setColumnModel(cm);
		if(sm == null) sm = this.createDefaultSelectionModel();
		this.setSelectionModel(sm);
		if(dm == null) dm = this.createDefaultDataModel();
		this.setModel(dm);
		this.initializeLocalVars();
		this.updateUI();
	}
	,setUI: function(newUI) {
		if(js_Boot.__instanceof(newUI,org_aswing_plaf_TableUI)) {
			org_aswing_Container.prototype.setUI.call(this,newUI);
			this.repaint();
		} else throw new js__$Boot_HaxeError(new org_aswing_error_Error("JTable ui should implemented TableUI interface!"));
	}
	,getTableUI: function() {
		return org_aswing_AsWingUtils["as"](this.getUI(),org_aswing_plaf_TableUI);
	}
	,updateSubComponentUI: function(componentShell) {
		if(componentShell == null) return;
		var component = null;
		if(js_Boot.__instanceof(componentShell,org_aswing_Component)) {
			component = js_Boot.__instanceof(componentShell,org_aswing_Component)?componentShell:null;
			component.updateUI();
		} else if(js_Boot.__instanceof(componentShell,org_aswing_CellEditor)) {
			var ed;
			ed = js_Boot.__instanceof(componentShell,org_aswing_CellEditor)?componentShell:null;
			ed.updateUI();
		}
	}
	,updateUI: function() {
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = cm.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			var aColumn = cm.getColumn(column);
			this.updateSubComponentUI(aColumn.getCellEditor());
		}
		var i;
		var _g11 = 0;
		var _g2 = this.rowCells.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _g3 = 0;
			var _g21 = this.rowCells[i1].length;
			while(_g3 < _g21) {
				var j = _g3++;
				var cell = this.rowCells[i1][j];
				cell.getCellComponent().updateUI();
			}
		}
		var $it0 = this.defaultEditorsByColumnClass.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.updateSubComponentUI(this.defaultEditorsByColumnClass.get(key));
		}
		if(this._tableHeader != null && this._tableHeader.getParent() == null) this._tableHeader.updateUI();
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTableUI;
	}
	,getUIClassID: function() {
		return "TableUI";
	}
	,setTableHeader: function(tableHeader) {
		if(this._tableHeader != tableHeader) {
			var old = this._tableHeader;
			if(old != null) {
				old.setTable(null);
				old.removeFromContainer();
			}
			this._tableHeader = tableHeader;
			if(tableHeader != null) {
				tableHeader.setTable(this);
				this.headerPane.append(tableHeader);
			}
		}
	}
	,getTableHeader: function() {
		return this._tableHeader;
	}
	,getFooter: function() {
		return this._footer;
	}
	,setFooter: function(c) {
		if(this._footer != c) {
			if(this._footer != null) this.remove(this._footer);
			this._footer = c;
			if(this._footer != null) this.append(this._footer);
			this.revalidate();
		}
	}
	,getCellPane: function() {
		return this.cellPane;
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight < 1) throw new js__$Boot_HaxeError(new org_aswing_error_Error("New row height less than 1"));
		this._rowHeight = rowHeight;
		this.resizeAndRepaint();
	}
	,getRowHeight: function() {
		return this._rowHeight;
	}
	,setRowMargin: function(rowMargin) {
		this._rowMargin = rowMargin;
		this.resizeAndRepaint();
	}
	,getRowMargin: function() {
		return this._rowMargin;
	}
	,setIntercellSpacing: function(intercellSpacing) {
		this.setRowMargin(intercellSpacing.height);
		this.getColumnModel().setColumnMargin(intercellSpacing.width);
		this.resizeAndRepaint();
	}
	,getIntercellSpacing: function() {
		return new org_aswing_geom_IntDimension(this.getColumnModel().getColumnMargin(),this._rowMargin);
	}
	,setGridColor: function(gridColor) {
		if(gridColor == null) {
			haxe_Log.trace("New color is null, Ignored",{ fileName : "JTable.hx", lineNumber : 791, className : "org.aswing.JTable", methodName : "setGridColor"});
			return;
		}
		this._gridColor = gridColor;
		this.repaint();
	}
	,getGridColor: function() {
		return this._gridColor;
	}
	,setShowGrid: function(showGrid,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		this.setShowHorizontalLines(showGrid);
		this.setShowVerticalLines(showGrid);
		if(affectCellSpacing) {
			if(showGrid) this.setIntercellSpacing(new org_aswing_geom_IntDimension(1,1)); else this.setIntercellSpacing(new org_aswing_geom_IntDimension(0,0));
		}
		this.repaint();
	}
	,setShowHorizontalLines: function(showHorizontalLines,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		var old = this._showHorizontalLines;
		this._showHorizontalLines = showHorizontalLines;
		if(affectCellSpacing) this.setIntercellSpacing(new org_aswing_geom_IntDimension(this.getIntercellSpacing().width,showHorizontalLines?1:0));
		if(old != showHorizontalLines) this.repaint();
	}
	,setShowVerticalLines: function(showVerticalLines,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		var old = this._showVerticalLines;
		this._showVerticalLines = showVerticalLines;
		if(affectCellSpacing) this.setIntercellSpacing(new org_aswing_geom_IntDimension(showVerticalLines?1:0,this.getIntercellSpacing().height));
		if(old != showVerticalLines) this.repaint();
	}
	,getShowHorizontalLines: function() {
		return this._showHorizontalLines;
	}
	,getShowVerticalLines: function() {
		return this._showVerticalLines;
	}
	,setAutoResizeMode: function(mode) {
		if(mode == 0 || mode == 1 || mode == 2 || mode == 3 || mode == 4) {
			if(mode != this._autoResizeMode) {
				this._autoResizeMode = mode;
				this.resizeAndRepaint();
				if(this._tableHeader != null) this._tableHeader.resizeAndRepaint();
			}
		}
	}
	,getAutoResizeMode: function() {
		return this._autoResizeMode;
	}
	,setAutoCreateColumnsFromModel: function(autoCreateColumnsFromModel) {
		if(this._autoCreateColumnsFromModel != autoCreateColumnsFromModel) {
			this._autoCreateColumnsFromModel = autoCreateColumnsFromModel;
			if(autoCreateColumnsFromModel) this.createDefaultColumnsFromModel();
		}
	}
	,getAutoCreateColumnsFromModel: function() {
		return this._autoCreateColumnsFromModel;
	}
	,createDefaultColumnsFromModel: function() {
		var m = this.getModel();
		if(m != null) {
			var cm = this.getColumnModel();
			while(cm.getColumnCount() > 0) cm.removeColumn(cm.getColumn(0));
			var _g1 = 0;
			var _g = m.getColumnCount();
			while(_g1 < _g) {
				var i = _g1++;
				var newColumn = new org_aswing_table_TableColumn(i);
				this.addColumn(newColumn);
			}
		}
	}
	,setDefaultCellFactory: function(columnClass,renderer) {
		if(renderer != null) this.defaultRenderersByColumnClass.set(columnClass,renderer); else this.defaultRenderersByColumnClass.remove(columnClass);
	}
	,getDefaultCellFactory: function(columnClass) {
		if(columnClass == null) return null; else {
			var renderer = this.defaultRenderersByColumnClass.get(columnClass);
			if(renderer != null) return js_Boot.__instanceof(renderer,org_aswing_table_TableCellFactory)?renderer:null; else return this.getDefaultCellFactory("Object");
		}
	}
	,setDefaultEditor: function(columnClass,editor) {
		if(editor != null) this.defaultEditorsByColumnClass.set(columnClass,editor); else this.defaultEditorsByColumnClass.remove(columnClass);
	}
	,getDefaultEditor: function(columnClass) {
		if(columnClass == null) return null; else {
			var editor = this.defaultEditorsByColumnClass.get(columnClass);
			if(editor != null) return js_Boot.__instanceof(editor,org_aswing_table_TableCellEditor)?editor:null; else return this.getDefaultEditor("Object");
		}
	}
	,setSelectionMode: function(selectionMode) {
		this.clearSelection();
		this.getSelectionModel().setSelectionMode(selectionMode);
		this.getColumnModel().getSelectionModel().setSelectionMode(selectionMode);
	}
	,setRowSelectionAllowed: function(rowSelectionAllowed) {
		var old = this._rowSelectionAllowed;
		this._rowSelectionAllowed = rowSelectionAllowed;
		if(old != rowSelectionAllowed) this.repaint();
	}
	,getRowSelectionAllowed: function() {
		return this._rowSelectionAllowed;
	}
	,setColumnSelectionAllowed: function(columnSelectionAllowed) {
		var old = this._columnModel.getColumnSelectionAllowed();
		this._columnModel.setColumnSelectionAllowed(columnSelectionAllowed);
		if(old != columnSelectionAllowed) this.repaint();
	}
	,getColumnSelectionAllowed: function() {
		return this._columnModel.getColumnSelectionAllowed();
	}
	,setCellSelectionEnabled: function(cellSelectionEnabled) {
		this.setRowSelectionAllowed(cellSelectionEnabled);
		this.setColumnSelectionAllowed(cellSelectionEnabled);
		this._cellSelectionEnabled = cellSelectionEnabled;
	}
	,getCellSelectionEnabled: function() {
		return this.getRowSelectionAllowed() && this.getColumnSelectionAllowed();
	}
	,selectAll: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.isEditing()) this.removeEditor();
		if(this.getRowCount() > 0 && this.getColumnCount() > 0) {
			var oldLead;
			var oldAnchor;
			var selModel;
			selModel = this._selectionModel;
			oldLead = selModel.getLeadSelectionIndex();
			oldAnchor = selModel.getAnchorSelectionIndex();
			this.setRowSelectionInterval(0,this.getRowCount() - 1,programmatic);
			selModel.addSelectionInterval(oldAnchor,oldLead,programmatic);
			selModel = this._columnModel.getSelectionModel();
			oldLead = selModel.getLeadSelectionIndex();
			oldAnchor = selModel.getAnchorSelectionIndex();
			this.setColumnSelectionInterval(0,this.getColumnCount() - 1,programmatic);
			selModel.addSelectionInterval(oldAnchor,oldLead,programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this._selectionModel.clearSelection(programmatic);
		this._columnModel.getSelectionModel().clearSelection(programmatic);
	}
	,boundRow: function(row) {
		if(row < 0 || row >= this.getRowCount()) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Row index out of range"));
		return row;
	}
	,boundColumn: function(col) {
		if(col < 0 || col >= this.getColumnCount()) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Column index out of range"));
		return col;
	}
	,setRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._selectionModel.setSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,setColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._columnModel.getSelectionModel().setSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,addRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._selectionModel.addSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,addColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._columnModel.getSelectionModel().addSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,removeRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._selectionModel.removeSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,removeColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this._columnModel.getSelectionModel().removeSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,getSelectedRow: function() {
		return this._selectionModel.getMinSelectionIndex();
	}
	,getSelectedColumn: function() {
		return this._columnModel.getSelectionModel().getMinSelectionIndex();
	}
	,getSelectedRows: function() {
		var iMin = this._selectionModel.getMinSelectionIndex();
		var iMax = this._selectionModel.getMaxSelectionIndex();
		if(iMin == -1 || iMax == -1) return [];
		var rvTmp = [];
		var _g1 = iMin;
		var _g = iMax + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._selectionModel.isSelectedIndex(i)) rvTmp.push(i);
		}
		return rvTmp;
	}
	,getSelectedColumns: function() {
		return this._columnModel.getSelectedColumns();
	}
	,getSelectedRowCount: function() {
		var iMin = this._selectionModel.getMinSelectionIndex();
		var iMax = this._selectionModel.getMaxSelectionIndex();
		var count = 0;
		var _g1 = iMin;
		var _g = iMax + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._selectionModel.isSelectedIndex(i)) count++;
		}
		return count;
	}
	,getSelectedColumnCount: function() {
		return this._columnModel.getSelectedColumnCount();
	}
	,isRowSelected: function(row) {
		return this._selectionModel.isSelectedIndex(row);
	}
	,isColumnSelected: function(column) {
		return this._columnModel.getSelectionModel().isSelectedIndex(column);
	}
	,isCellSelected: function(row,column) {
		if(!this.getRowSelectionAllowed() && !this.getColumnSelectionAllowed()) return false;
		return (!this.getRowSelectionAllowed() || this.isRowSelected(row)) && (!this.getColumnSelectionAllowed() || this.isColumnSelected(column));
	}
	,ensureCellIsVisible: function(row,column) {
		var rect = this.getCellRect(row,column,false);
		rect.setLocation(this.getPixelLocationFromLogicLocation(rect.getLocation()));
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX;
		var startY = insetsY + this.getHeaderHeight();
		var endX = this.getWidth() - insets.right;
		var endY = this.getHeight() - insets.bottom;
		var moveX = 0;
		var moveY = 0;
		if(rect.x < startX) moveX = rect.x - startX; else if(rect.x + rect.width > endX) moveX = rect.x + rect.width - endX;
		if(rect.y < startY) moveY = rect.y - startY; else if(rect.y + rect.height > endY) moveY = rect.y + rect.height - endY;
		this.setViewPosition(this.getViewPosition().move(moveX,moveY));
	}
	,changeSelectionModel: function(sm,index,toggle,extend,selected,programmatic) {
		if(programmatic == null) programmatic = true;
		if(extend) {
			if(toggle) sm.setAnchorSelectionIndex(index); else sm.setSelectionInterval(sm.getAnchorSelectionIndex(),index,programmatic);
		} else if(toggle) {
			if(selected) sm.removeSelectionInterval(index,index,programmatic); else sm.addSelectionInterval(index,index,programmatic);
		} else sm.setSelectionInterval(index,index,programmatic);
	}
	,changeSelection: function(rowIndex,columnIndex,toggle,extend,programmatic) {
		if(programmatic == null) programmatic = true;
		var rsm = this.getSelectionModel();
		var csm = this.getColumnModel().getSelectionModel();
		var selected = this.isCellSelected(rowIndex,columnIndex);
		this.changeSelectionModel(csm,columnIndex,toggle,extend,selected,programmatic);
		this.changeSelectionModel(rsm,rowIndex,toggle,extend,selected,programmatic);
	}
	,getSelectionForeground: function() {
		return this.selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this.selectionForeground;
		this.selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getSelectionBackground: function() {
		return this.selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this.selectionBackground;
		this.selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getColumn: function(identifier) {
		var cm = this.getColumnModel();
		var columnIndex = cm.getColumnIndex(identifier);
		return cm.getColumn(columnIndex);
	}
	,getColumnAt: function(columnIndex) {
		return this.getColumnModel().getColumn(columnIndex);
	}
	,convertColumnIndexToModel: function(viewColumnIndex) {
		if(viewColumnIndex < 0) return viewColumnIndex;
		return this.getColumnModel().getColumn(viewColumnIndex).getModelIndex();
	}
	,convertColumnIndexToView: function(modelColumnIndex) {
		if(modelColumnIndex < 0) return modelColumnIndex;
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			if(cm.getColumn(column).getModelIndex() == modelColumnIndex) return column;
		}
		return -1;
	}
	,getRowCount: function() {
		return this.getModel().getRowCount();
	}
	,getColumnCount: function() {
		return this.getColumnModel().getColumnCount();
	}
	,getColumnName: function(column) {
		return this.getModel().getColumnName(this.convertColumnIndexToModel(column));
	}
	,getColumnClass: function(column) {
		return this.getModel().getColumnClass(this.convertColumnIndexToModel(column));
	}
	,getValueAt: function(row,column) {
		return this.getModel().getValueAt(row,this.convertColumnIndexToModel(column));
	}
	,setValueAt: function(aValue,row,column) {
		this.getModel().setValueAt(aValue,row,this.convertColumnIndexToModel(column));
	}
	,isCellEditable: function(row,column) {
		return this.getModel().isCellEditable(row,this.convertColumnIndexToModel(column));
	}
	,addColumn: function(aColumn) {
		if(aColumn.getHeaderValue() == null) {
			var modelColumn = aColumn.getModelIndex();
			var columnName = this.getModel().getColumnName(modelColumn);
			aColumn.setHeaderValue(columnName);
		}
		this.getColumnModel().addColumn(aColumn);
	}
	,removeColumn: function(aColumn) {
		this.getColumnModel().removeColumn(aColumn);
	}
	,moveColumn: function(column,targetColumn) {
		this.getColumnModel().moveColumn(column,targetColumn);
	}
	,columnAtPoint: function(point) {
		var x = point.x;
		return this.getColumnModel().getColumnIndexAtX(x);
	}
	,rowAtPoint: function(point) {
		var y = point.y;
		var result = Math.floor(y / this.getRowHeight());
		if(result < 0) return -1; else if(result >= this.getRowCount()) return -1; else return result;
	}
	,getCellRect: function(row,column,includeSpacing) {
		var r = new org_aswing_geom_IntRectangle();
		var insets = this.getInsets();
		var valid = true;
		if(row < 0) valid = false; else if(row >= this.getRowCount()) {
			r.y = this.getViewSize().height - insets.getMarginHeight();
			valid = false;
		} else {
			r.height = this.getRowHeight();
			r.y = row * r.height;
		}
		if(column < 0) valid = false; else if(column >= this.getColumnCount()) {
			r.x = this.getLastTotalColumnWidth() - insets.getMarginWidth();
			valid = false;
		} else {
			var cm = this.getColumnModel();
			var _g = 0;
			while(_g < column) {
				var i = _g++;
				r.x += cm.getColumn(i).getWidth();
			}
			r.width = cm.getColumn(column).getWidth();
		}
		if(valid && !includeSpacing) {
			var rmi = this.getRowMargin();
			var cmi = this.getColumnModel().getColumnMargin();
			r.setRectXYWH(r.x + cmi,r.y + rmi,r.width - cmi,r.height - rmi);
		}
		return r;
	}
	,getPixelLocationFromLogicLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(startP.x,startP.y);
		return pp;
	}
	,getLogicLocationFromPixelLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(-startP.x,-startP.y);
		return pp;
	}
	,getViewStartPoint: function() {
		var viewPos = this.getViewPosition();
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX - viewPos.x;
		var startY = insetsY + this.getHeaderHeight() - viewPos.y;
		return new org_aswing_geom_IntPoint(startX,startY);
	}
	,getHeaderHeight: function() {
		if(this.getTableHeader() == null) return 0; else return this.getTableHeader().getHeight();
	}
	,viewIndexForColumn: function(aColumn) {
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = cm.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			if(cm.getColumn(column) == aColumn) return column;
		}
		return -1;
	}
	,getResizingColumn: function() {
		if(this._tableHeader == null) return null; else return this._tableHeader.getResizingColumn();
	}
	,setWidthsFromPreferredWidths: function(inverse) {
		var insets = this.getInsets();
		var totalWidth;
		if(this._autoResizeMode == 0) totalWidth = this.getLastTotalColumnWidth(); else totalWidth = this.getWidth() - insets.getMarginWidth();
		var totalPreferred = this.getPreferredSize().width - insets.getMarginWidth();
		var target;
		if(!inverse) target = totalWidth; else target = totalPreferred;
		var cm = this._columnModel;
		var r = new org_aswing_table_Resizable3Imp1(cm,inverse);
		this.adjustSizes3(target,r,inverse);
	}
	,accommodateDelta: function(resizingColumnIndex,delta) {
		var columnCount = this.getColumnCount();
		var from = resizingColumnIndex;
		var _to = columnCount;
		var _g = this.get_autoResizeMode();
		switch(_g) {
		case 1:
			from = from + 1;
			_to = Std["int"](Math.min(from + 1,columnCount));
			break;
		case 2:
			from = from + 1;
			_to = columnCount;
			break;
		case 3:
			from = columnCount - 1;
			_to = from + 1;
			break;
		case 4:
			from = 0;
			_to = columnCount;
			break;
		default:
		}
		var start = from;
		var end = _to;
		var cm = this.get_columnModel();
		var r = new org_aswing_table_Resizable3Imp2(cm,start,end);
		var totalWidth = 0;
		var _g1 = from;
		while(_g1 < _to) {
			var i = _g1++;
			var aColumn = this.get_columnModel().getColumn(i);
			var input = aColumn.getWidth();
			totalWidth = totalWidth + input;
		}
		this.adjustSizes3(totalWidth + delta,r,false);
		return;
	}
	,adjustSizes3: function(target,r,inverse) {
		var N = r.getElementCount();
		var totalPreferred = 0;
		var _g = 0;
		while(_g < N) {
			var i = _g++;
			totalPreferred += r.getMidPointAt(i);
		}
		var s = new org_aswing_table_Resizable2Imp1(r,target < totalPreferred == !inverse);
		this.adjustSizes2(target,s,!inverse);
	}
	,adjustSizes2: function(target,r,limitToRange) {
		var totalLowerBound = 0;
		var totalUpperBound = 0;
		var N = r.getElementCount();
		var i;
		var _g = 0;
		while(_g < N) {
			var i1 = _g++;
			totalLowerBound += r.getLowerBoundAt(i1);
			totalUpperBound += r.getUpperBoundAt(i1);
		}
		if(limitToRange) target = Std["int"](Math.min(Math.max(totalLowerBound,target),totalUpperBound));
		var _g1 = 0;
		while(_g1 < N) {
			var i2 = _g1++;
			var lowerBound = r.getLowerBoundAt(i2);
			var upperBound = r.getUpperBoundAt(i2);
			var newSize;
			if(totalLowerBound == totalUpperBound) newSize = lowerBound; else {
				var f = (target - totalLowerBound) / (totalUpperBound - totalLowerBound);
				newSize = Math.round(lowerBound + f * (upperBound - lowerBound));
			}
			r.setSizeAt(newSize,i2);
			target -= newSize;
			totalLowerBound -= lowerBound;
			totalUpperBound -= upperBound;
		}
	}
	,editCellAt: function(row,column,clickCount) {
		if(clickCount == null) clickCount = -1;
		if(this.cellEditor != null && !this.cellEditor.stopCellEditing()) return false;
		if(row < 0 || row >= this.getRowCount() || column < 0 || column >= this.getColumnCount()) return false;
		if(!this.isCellEditable(row,column)) return false;
		if(this.cellEditor != null) this.removeEditor();
		var editor = this.getCellEditorOfRowColumn(row,column);
		if(editor != null && (clickCount == -1 || editor.isCellEditable(clickCount))) {
			var cb = this.getCellRect(row,column,true);
			cb.setLocation(this.getPixelLocationFromLogicLocation(cb.getLocation()));
			editor.startCellEditing(this,this.getValueAt(row,column),cb);
			this.setCellEditor(editor);
			this.setEditingRow(row);
			this.setEditingColumn(column);
			editor.removeCellEditorListener(this);
			editor.addCellEditorListener(this);
			this._storedValue = this.getValueAt(row,column);
			this.dispatchEvent(new org_aswing_event_TableCellEditEvent("tableCellEditingStarted",row,column,this._storedValue));
			return true;
		}
		return false;
	}
	,isEditing: function() {
		if(this.cellEditor == null) return false; else return true;
	}
	,getEditingColumn: function() {
		return this.editingColumn;
	}
	,getEditingRow: function() {
		return this.editingRow;
	}
	,setModel: function(dataModel) {
		if(dataModel == null) {
			haxe_Log.trace("Can't set null TableModel to JTable, Ignored",{ fileName : "JTable.hx", lineNumber : 2281, className : "org.aswing.JTable", methodName : "setModel"});
			return;
		}
		if(this._dataModel != dataModel) {
			var old = this._dataModel;
			if(old != null) old.removeTableModelListener(this);
			this._dataModel = dataModel;
			dataModel.addTableModelListener(this);
			this.tableChanged(new org_aswing_event_TableModelEvent(dataModel,-1));
		}
	}
	,getModel: function() {
		return this._dataModel;
	}
	,setColumnModel: function(columnModel) {
		if(columnModel == null) {
			haxe_Log.trace("Cannot set a null ColumnModel to JTable, Ignored",{ fileName : "JTable.hx", lineNumber : 2320, className : "org.aswing.JTable", methodName : "setColumnModel"});
			return;
		}
		var old = this._columnModel;
		if(columnModel != old) {
			if(old != null) old.removeColumnModelListener(this);
			this._columnModel = columnModel;
			columnModel.addColumnModelListener(this);
			if(this._tableHeader != null) this._tableHeader.setColumnModel(columnModel);
			this.resizeAndRepaint();
		}
	}
	,getColumnModel: function() {
		return this._columnModel;
	}
	,setSelectionModel: function(newModel) {
		if(newModel == null) {
			haxe_Log.trace("Cannot set a null SelectionModel to JTable, Ignored",{ fileName : "JTable.hx", lineNumber : 2362, className : "org.aswing.JTable", methodName : "setSelectionModel"});
			return;
		}
		var oldModel = this._selectionModel;
		if(newModel != oldModel) {
			if(oldModel != null) oldModel.removeListSelectionListener($bind(this,this.__listSelectionChanged));
			this._selectionModel = newModel;
			newModel.addListSelectionListener($bind(this,this.__listSelectionChanged));
			this.repaint();
			this.checkLeadAnchor();
		}
	}
	,getSelectionModel: function() {
		return this._selectionModel;
	}
	,checkLeadAnchor: function() {
		var model = this.getModel();
		if(model == null) return;
		var lead = this._selectionModel.getLeadSelectionIndex();
		var count = model.getRowCount();
		if(count == 0) {
			if(lead != -1) {
				this._selectionModel.setAnchorSelectionIndex(-1);
				this._selectionModel.setLeadSelectionIndex(-1);
			}
		} else if(lead == -1) {
			if(this._selectionModel.isSelectedIndex(0)) this._selectionModel.addSelectionInterval(0,0,true); else this._selectionModel.removeSelectionInterval(0,0,true);
		}
	}
	,tableChanged: function(e) {
		if(e == null || e.getFirstRow() == -1) {
			this.clearSelection();
			this.checkLeadAnchor();
			if(this.getAutoCreateColumnsFromModel()) {
				this.createDefaultColumnsFromModel();
				return;
			}
			this.resizeAndRepaint();
			return;
		}
		if(e.getType() == "insert") {
			this.tableRowsInserted(e);
			return;
		}
		if(e.getType() == "delete") {
			this.tableRowsDeleted(e);
			return;
		}
		var end = e.getLastRow();
		if(end != 2147483647) this.revalidate(); else {
			this.clearSelection();
			this.resizeAndRepaint();
		}
	}
	,tableRowsInserted: function(e) {
		var start = e.getFirstRow();
		var end = e.getLastRow();
		if(start < 0) start = 0;
		if(end < 0) end = this.getRowCount() - 1;
		var length = end - start + 1;
		this._selectionModel.insertIndexInterval(start,length,true);
		this.checkLeadAnchor();
		this.resizeAndRepaint();
	}
	,tableRowsDeleted: function(e) {
		var start = e.getFirstRow();
		var end = e.getLastRow();
		if(start < 0) start = 0;
		if(end < 0) end = this.getRowCount() - 1;
		this._selectionModel.removeIndexInterval(start,end);
		this.checkLeadAnchor();
		this.resizeAndRepaint();
	}
	,columnAdded: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnRemoved: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnMoved: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnMarginChanged: function(source) {
		if(this.isEditing()) this.removeEditor();
		var resizingColumn = this.getResizingColumn();
		if(resizingColumn != null && this._autoResizeMode == 0) resizingColumn.setPreferredWidth(resizingColumn.getWidth());
		this.resizeAndRepaint();
	}
	,columnSelectionChanged: function(source,firstIndex,lastIndex,programmatic) {
		this.dispatchEvent(new org_aswing_event_SelectionEvent("columnSelectionChanged",firstIndex,lastIndex,programmatic));
		var isAdjusting = false;
		if(this.columnSelectionAdjusting && !isAdjusting) {
			this.columnSelectionAdjusting = false;
			return;
		}
		this.columnSelectionAdjusting = isAdjusting;
		if(this.getRowCount() <= 0 || this.getColumnCount() <= 0) return;
		this.resizeAndRepaint();
	}
	,__listSelectionChanged: function(e) {
		var isAdjusting = false;
		if(this.rowSelectionAdjusting && !isAdjusting) {
			this.rowSelectionAdjusting = false;
			return;
		}
		this.rowSelectionAdjusting = isAdjusting;
		this.dispatchEvent(new org_aswing_event_SelectionEvent("rowSelectionChanged",e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic()));
		this.__fieldBindings__.dispatch("selectedItem",null,null);
		this.resizeAndRepaint();
	}
	,editingStopped: function(source) {
		var editor = this.getCellEditor();
		if(editor != null) {
			var value = editor.getCellEditorValue();
			this.setValueAt(value,this.editingRow,this.editingColumn);
			this.dispatchEvent(new org_aswing_event_TableCellEditEvent("tableCellEditingStopped",this.editingRow,this.editingColumn,this._storedValue,value));
			this.removeEditor();
		}
	}
	,editingCanceled: function(source) {
		this.dispatchEvent(new org_aswing_event_TableCellEditEvent("tableCellEditingCanceled",this.editingRow,this.editingColumn));
		this.removeEditor();
	}
	,setPreferredScrollableViewportSize: function(size) {
		this._preferredViewportSize = size.clone();
	}
	,getPreferredScrollableViewportSize: function() {
		return this._preferredViewportSize;
	}
	,initializeLocalVars: function() {
		this.createDefaultCellFactories();
		this.createDefaultEditors();
		this.setTableHeader(this.createDefaultTableHeader());
		this.setShowGrid(true);
		this.setAutoResizeMode(2);
		this.setRowHeight(20);
		this.setRowMargin(1);
		this.setRowSelectionAllowed(true);
		this.setColumnSelectionAllowed(false);
		this.setCellEditor(null);
		this.setEditingColumn(-1);
		this.setEditingRow(-1);
		this.setPreferredScrollableViewportSize(new org_aswing_geom_IntDimension(450,400));
	}
	,createDefaultDataModel: function() {
		return new org_aswing_table_DefaultTableModel().initWithRowcountColumncount(0,0);
	}
	,createDefaultColumnModel: function() {
		return new org_aswing_table_DefaultTableColumnModel();
	}
	,createDefaultSelectionModel: function() {
		return new org_aswing_DefaultListSelectionModel();
	}
	,createDefaultTableHeader: function() {
		return new org_aswing_table_JTableHeader(this._columnModel);
	}
	,createDefaultCellFactories: function() {
		this.defaultRenderersByColumnClass = new haxe_ds_StringMap();
		this.defaultRenderersByColumnClass.set("Object",new org_aswing_table_GeneralTableCellFactoryUIResource(org_aswing_table_PoorTextCell));
	}
	,createDefaultEditors: function() {
		this.defaultEditorsByColumnClass = new haxe_ds_StringMap();
		this.defaultEditorsByColumnClass.set("Number",new org_aswing_DefaultNumberTextFieldCellEditor());
		this.defaultEditorsByColumnClass.set("Boolean",new org_aswing_DefaultCheckBoxCellEditor());
		this.defaultEditorsByColumnClass.set("Object",new org_aswing_DefaultTextFieldCellEditor());
	}
	,resizeAndRepaint: function() {
		this.revalidate();
		this.repaint();
	}
	,getCellEditor: function() {
		return this.cellEditor;
	}
	,setCellEditor: function(anEditor) {
		this.cellEditor = anEditor;
	}
	,setEditingColumn: function(aColumn) {
		this.editingColumn = aColumn;
	}
	,setEditingRow: function(aRow) {
		this.editingRow = aRow;
	}
	,getCellFactory: function(row,column) {
		var tableColumn = this.getColumnModel().getColumn(column);
		var renderer = tableColumn.getCellFactory();
		if(renderer == null) renderer = this.getDefaultCellFactory(this.getColumnClass(column));
		return renderer;
	}
	,getCellEditorOfRowColumn: function(row,column) {
		var tableColumn = this.getColumnModel().getColumn(column);
		var editor = tableColumn.getCellEditor();
		if(editor == null) editor = this.getDefaultEditor(this.getColumnClass(column));
		return editor;
	}
	,removeEditor: function() {
		var editor = this.getCellEditor();
		if(editor != null) {
			editor.removeCellEditorListener(this);
			this.setCellEditor(null);
			this.setEditingColumn(-1);
			this.setEditingRow(-1);
			this.requestFocus();
		}
	}
	,doLayout: function() {
		var resizingColumn = this.getResizingColumn();
		if(resizingColumn == null) this.setWidthsFromPreferredWidths(false); else {
			var w = this.getLastTotalColumnWidth();
			var columnIndex = this.viewIndexForColumn(resizingColumn);
			var delta = w - this.getColumnModel().getTotalColumnWidth();
			this.accommodateDelta(columnIndex,delta);
			delta = w - this.getColumnModel().getTotalColumnWidth();
			if(delta != 0 && this._autoResizeMode != 0) resizingColumn.setWidth(resizingColumn.getWidth() + delta);
			this.setWidthsFromPreferredWidths(true);
		}
		this.lastTotalColumnWidth = this.getColumnModel().getTotalColumnWidth();
		org_aswing_Container.prototype.doLayout.call(this);
	}
	,getLastTotalColumnWidth: function() {
		if(-1 == this.lastTotalColumnWidth) {
			if(this._autoResizeMode == 0) this.lastTotalColumnWidth = this.getPreferredSize().width - this.getInsets().getMarginWidth(); else this.lastTotalColumnWidth = this.getWidth() - this.getInsets().getMarginWidth();
		}
		return this.lastTotalColumnWidth;
	}
	,layoutCells: function() {
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var cWidth = this.getWidth() - insets.getMarginWidth();
		var cHeight = this.getHeight() - insets.getMarginHeight();
		var headerHeight = this.getTableHeader().getPreferredHeight();
		var footerHeight = 0;
		var fotr = this.getFooter();
		this.headerPane.setComBoundsXYWH(insetsX,insetsY,cWidth,headerHeight);
		this.getTableHeader().setLocationXY(-this._viewPosition.x,0);
		this.getTableHeader().setSizeWH(this.getLastTotalColumnWidth(),headerHeight);
		this.getTableHeader().validate();
		this.getTableHeader().paintImmediately();
		if(fotr != null) {
			fotr.setComBoundsXYWH(insetsX,this.getHeight() - insets.bottom - fotr.getPreferredHeight(),cWidth,fotr.getPreferredHeight());
			fotr.validate();
			fotr.paintImmediately();
		}
		var b = new org_aswing_geom_IntRectangle();
		b.setSize(this.getExtentSize());
		b.setLocation(this._viewPosition);
		var cellPaneBounds = new org_aswing_geom_IntRectangle();
		cellPaneBounds.setSize(b.getSize());
		cellPaneBounds.setLocation(new org_aswing_geom_IntPoint(insetsX,insetsY + this.getTableHeader().getHeight()));
		this.cellPane.setComBounds(cellPaneBounds);
		if(this.getRowCount() <= 0 || this.getColumnCount() <= 0) {
			var arr_i = 0;
			var arr = [];
			while(arr_i < this.rowCells.length) {
				var _g = 0;
				while(_g < arr.length) {
					var ccc = arr[_g];
					++_g;
					ccc.getCellComponent().setVisible(false);
				}
				arr_i++;
			}
			return;
		}
		var upperLeft = b.getLocation();
		var lowerRight = b.rightBottom();
		var rMin = this.rowAtPoint(upperLeft);
		var rMax = this.rowAtPoint(lowerRight);
		var columnCount = this.getColumnCount();
		if(rMin == -1) rMin = 0;
		if(rMax == -1) rMax = this.getRowCount() - 1;
		var cMin = this.columnAtPoint(upperLeft);
		var cMax = this.columnAtPoint(lowerRight);
		if(cMin == -1) cMin = 0;
		if(cMax == -1) cMax = columnCount - 1;
		var cm = this.getColumnModel();
		var columnMargin = cm.getColumnMargin();
		var rowMargin = this.getRowMargin();
		var cellRect;
		var tempRect = new org_aswing_geom_IntRectangle();
		var aColumn;
		var columnWidth;
		var cr = 0;
		var cc = 0;
		var startX = -this._viewPosition.x;
		var startY = -this._viewPosition.y;
		var row = rMin - 1;
		var showHL = this.getShowHorizontalLines();
		var showVL = this.getShowVerticalLines();
		while(++row <= rMax) {
			if(cr >= this.rowCells.length) break;
			cellRect = this.getCellRect(row,cMin,false);
			if(showHL && row == this.getRowCount() - 1) cellRect.height -= rowMargin;
			var column = cMin - 1;
			while(++column <= cMax) {
				cc = column;
				if(cc >= this.rowCells[cr].length) break;
				aColumn = cm.getColumn(column);
				columnWidth = aColumn.getWidth();
				cellRect.width = columnWidth - columnMargin;
				tempRect.setRectXYWH(cellRect.x + startX,cellRect.y + startY,cellRect.width,cellRect.height);
				if(showVL && column == columnCount - 1) tempRect.width -= columnMargin;
				this.layoutCell(row,column,tempRect,cr,cc);
				cellRect.x += columnWidth;
			}
			var cell;
			var cellColumnCount = this.rowCells[0].length;
			var _g1 = 0;
			while(_g1 < cMin) {
				var cc1 = _g1++;
				cell = this.rowCells[cr][cc1];
				cell.getCellComponent().setVisible(false);
			}
			var _g2 = cMax + 1;
			while(_g2 < cellColumnCount) {
				var cc2 = _g2++;
				cell = this.rowCells[cr][cc2];
				cell.getCellComponent().setVisible(false);
			}
			cr++;
		}
		var _g11 = cr;
		var _g3 = this.rowCells.length;
		while(_g11 < _g3) {
			var i = _g11++;
			var c = columnCount - 1;
			while(c >= 0) {
				var cell1 = this.rowCells[i][c];
				cell1.getCellComponent().setVisible(false);
				c--;
			}
		}
	}
	,layoutCell: function(row,column,cellRect,cr,cc) {
		var value = this.getValueAt(row,column);
		var cell = this.rowCells[cr][cc];
		if(cell == null) {
			haxe_Log.trace("Logic Error : rowCells[" + cr + "][" + cc + "] = undefined",{ fileName : "JTable.hx", lineNumber : 3139, className : "org.aswing.JTable", methodName : "layoutCell"});
			haxe_Log.trace("rowCells.length = " + this.rowCells.length,{ fileName : "JTable.hx", lineNumber : 3140, className : "org.aswing.JTable", methodName : "layoutCell"});
		}
		cell.setCellValue(value);
		cell.setTableCellStatus(this,this.isCellSelected(row,column),row,column);
		cell.getCellComponent().setComBounds(cellRect);
		cell.getCellComponent().setVisible(true);
		cell.getCellComponent().validate();
		cell.getCellComponent().paintImmediately();
	}
	,synCellClasses: function() {
		if(this.lastColumnCellFactories == null || this.lastColumnCellFactories.length != this.getColumnCount()) {
			this.clearCells();
			return;
		}
		var i = this.lastColumnCellFactories.length - 1;
		while(i >= 0) {
			if(this.lastColumnCellFactories[i] != this.getCellFactory(0,i)) {
				this.clearCells();
				return;
			}
			i--;
		}
	}
	,clearCells: function() {
		this.removeCells(this.rowCells);
		this.rowCells = [];
	}
	,synCreateCellInstances: function() {
		this.synCellClasses();
		var ih = this.getRowHeight();
		var needNum = Math.floor(this.getExtentSize().height / ih) + 2;
		if(this.rowCells.length == needNum) return;
		var columnCount = this.getColumnCount();
		var i;
		this.lastColumnCellFactories = [];
		var _g = 0;
		while(_g < columnCount) {
			var i1 = _g++;
			this.lastColumnCellFactories.push(this.getCellFactory(0,i1));
		}
		if(this.rowCells.length < needNum) {
			var addNum = needNum - this.rowCells.length;
			var _g1 = 0;
			while(_g1 < addNum) {
				var i2 = _g1++;
				var columnCells = [];
				var _g11 = 0;
				while(_g11 < columnCount) {
					var c = _g11++;
					var cell = org_aswing_AsWingUtils["as"](this.lastColumnCellFactories[c],org_aswing_table_TableCellFactory).createNewCell(false);
					columnCells.push(cell);
					this.addCellToContainer(cell);
				}
				this.rowCells.push(columnCells);
			}
		} else if(this.rowCells.length > needNum) {
			var removeIndex = needNum;
			var removed = this.rowCells.splice(removeIndex,this.rowCells.length - 1);
			this.removeCells(removed);
		}
	}
	,removeCells: function(removed) {
		var _g1 = 0;
		var _g = removed.length;
		while(_g1 < _g) {
			var i = _g1++;
			var columnCells = removed[i];
			var _g3 = 0;
			var _g2 = columnCells.length;
			while(_g3 < _g2) {
				var c = _g3++;
				var cell = org_aswing_AsWingUtils["as"](columnCells[c],org_aswing_table_TableCell);
				this.removeCellFromeContainer(cell);
			}
		}
	}
	,addCellToContainer: function(cell) {
		var cellCom = cell.getCellComponent();
		org_aswing_JTable.setCellComponentProperties(cellCom);
		this.cellPane.append(cellCom);
	}
	,removeCellFromeContainer: function(cell) {
		this.cellPane.remove(cell.getCellComponent());
	}
	,setSize: function(newSize) {
		org_aswing_Container.prototype.setSize.call(this,newSize);
		if(this.testingSize != true) this.setViewPosition(this.getViewPosition());
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this._verticalUnitIncrement == -2147483647) return this.getRowHeight(); else return this._verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this._verticalBlockIncrement == -2147483647) return this.getRowHeight() * 5; else return this._verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this._horizontalUnitIncrement == -2147483647) return 1; else return this._horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this._horizontalBlockIncrement == -2147483647) return 10; else return this._horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this._verticalUnitIncrement != increment) {
			this._verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this._verticalBlockIncrement != increment) {
			this._verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this._horizontalUnitIncrement != increment) {
			this._horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this._horizontalBlockIncrement != increment) {
			this._horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.testingSize = true;
		this.setSize(s);
		this.testingSize = false;
	}
	,getExtentSize: function() {
		var d = this.getInsets().getInsideSize(this.getSize());
		d.height -= this.getTableHeader().getHeight();
		if(this.getFooter() != null) d.height -= this.getFooter().getHeight();
		return d;
	}
	,getViewSize: function() {
		if(this.getUI() == null) return this.getInsets().getOutsideSize();
		return this.getTableUI().getViewSize(this);
	}
	,getViewPosition: function() {
		return new org_aswing_geom_IntPoint(this._viewPosition.x,this._viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this._viewPosition.equals(p)) {
			this.restrictionViewPos(p);
			if(this._viewPosition.equals(p)) return;
			this._viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
			this.valid = false;
			org_aswing_RepaintManager.getInstance().addInvalidRootComponent(this);
			this.repaint();
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org_aswing_geom_IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org_aswing_geom_IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("rowSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("rowSelectionChanged",listener);
	}
	,addColumnSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("columnSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeColumnSelectionListener: function(listener) {
		this.removeEventListener("columnSelectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getViewportPane: function() {
		return this;
	}
	,addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		return this.getViewSize();
	}
	,minimumLayoutSize: function(target) {
		return this.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		this.synCreateCellInstances();
		this.layoutCells();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,__class__: org_aswing_JTable
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_horizontalBlockIncrement:"set_horizontalBlockIncrement",get_horizontalBlockIncrement:"get_horizontalBlockIncrement",set_horizontalUnitIncrement:"set_horizontalUnitIncrement",get_horizontalUnitIncrement:"get_horizontalUnitIncrement",set_verticalBlockIncrement:"set_verticalBlockIncrement",get_verticalBlockIncrement:"get_verticalBlockIncrement",set_verticalUnitIncrement:"set_verticalUnitIncrement",get_verticalUnitIncrement:"get_verticalUnitIncrement",set_viewPosition:"set_viewPosition",get_viewPosition:"get_viewPosition",set_cellSelectionEnabled:"set_cellSelectionEnabled",get_cellSelectionEnabled:"get_cellSelectionEnabled",set_columnSelectionAllowed:"set_columnSelectionAllowed",get_columnSelectionAllowed:"get_columnSelectionAllowed",set_rowSelectionAllowed:"set_rowSelectionAllowed",get_rowSelectionAllowed:"get_rowSelectionAllowed",set_preferredViewportSize:"set_preferredViewportSize",get_preferredViewportSize:"get_preferredViewportSize",set_autoCreateColumnsFromModel:"set_autoCreateColumnsFromModel",get_autoCreateColumnsFromModel:"get_autoCreateColumnsFromModel",set_autoResizeMode:"set_autoResizeMode",get_autoResizeMode:"get_autoResizeMode",set_showVerticalLines:"set_showVerticalLines",get_showVerticalLines:"get_showVerticalLines",set_showHorizontalLines:"set_showHorizontalLines",get_showHorizontalLines:"get_showHorizontalLines",set_gridColor:"set_gridColor",get_gridColor:"get_gridColor",set_cellSpacing:"set_cellSpacing",get_cellSpacing:"get_cellSpacing",set_rowMargin:"set_rowMargin",get_rowMargin:"get_rowMargin",set_rowHeight:"set_rowHeight",get_rowHeight:"get_rowHeight",set_footer:"set_footer",get_footer:"get_footer",set_tableHeader:"set_tableHeader",get_tableHeader:"get_tableHeader",set_selectionMode:"set_selectionMode",get_selectionMode:"get_selectionMode",set_selectionModel:"set_selectionModel",get_selectionModel:"get_selectionModel",set_columnModel:"set_columnModel",get_columnModel:"get_columnModel",set_dataModel:"set_dataModel",get_dataModel:"get_dataModel"})
});
var org_aswing_JTextComponent = function() {
	var _g = this;
	org_aswing_Component.call(this);
	this.textField = new openfl_text_TextField();
	this.textField.set_type(openfl_text_TextFieldType.INPUT);
	this.textField.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
	this.textField.set_background(false);
	this._editable = true;
	this.columnRowCounted = false;
	this.addChild(this.textField);
	this.textField.addEventListener(openfl_events_Event.CHANGE,function(e) {
		_g.__fieldBindings__.dispatch("text",null,null);
	});
	this.addEventListener("focusGained",function(e1) {
		_g.doFocusTransition();
	});
	this.addEventListener("focusLost",function(e2) {
		_g.doFocusTransition();
	});
};
$hxClasses["org.aswing.JTextComponent"] = org_aswing_JTextComponent;
org_aswing_JTextComponent.__name__ = ["org","aswing","JTextComponent"];
org_aswing_JTextComponent.__interfaces__ = [org_aswing_EditableComponent];
org_aswing_JTextComponent.__super__ = org_aswing_Component;
org_aswing_JTextComponent.prototype = $extend(org_aswing_Component.prototype,{
	get_wordWrap: function() {
		return this.isWordWrap();
	}
	,set_wordWrap: function(v) {
		this.setWordWrap(v);
		return v;
	}
	,get_defaultTextFormat: function() {
		return this.getDefaultTextFormat();
	}
	,set_defaultTextFormat: function(v) {
		this.setDefaultTextFormat(v);
		return v;
	}
	,get_editable: function() {
		return this.isEditable();
	}
	,set_editable: function(v) {
		this.setEditable(v);
		return v;
	}
	,get_text: function() {
		return this.getText();
	}
	,set_text: function(val) {
		var __oldValue__ = this.get_text();
		if(val == __oldValue__) return __oldValue__;
		this.setText(val);
		this.__fieldBindings__.dispatch("text",__oldValue__,this.get_text());
		return val;
	}
	,get_htmlText: function() {
		return this.getHtmlText();
	}
	,set_htmlText: function(v) {
		this.setHtmlText(v);
		return v;
	}
	,get_displayAsPassword: function() {
		return this.isDisplayAsPassword();
	}
	,set_displayAsPassword: function(v) {
		this.setDisplayAsPassword(v);
		return v;
	}
	,get_length: function() {
		return this.getLength();
	}
	,get_maxChars: function() {
		return this.getMaxChars();
	}
	,set_maxChars: function(v) {
		this.setMaxChars(v);
		return v;
	}
	,get_restrict: function() {
		return this.getRestrict();
	}
	,set_restrict: function(v) {
		this.setRestrict(v);
		return v;
	}
	,get_selectionBeginIndex: function() {
		return this.getSelectionBeginIndex();
	}
	,get_selectionEndIndex: function() {
		return this.getSelectionEndIndex();
	}
	,updateTextForeground: function() {
		var color = this.get_foreground();
		if(!this.get_editable() || !this.get_enabled()) color = color.offsetHLS(0,0.4,-0.5);
		this.textField.set_textColor(color.get_rgb());
	}
	,setDefaultTextFormat: function(dtf) {
		this.getTextField().set_defaultTextFormat(dtf);
	}
	,getDefaultTextFormat: function() {
		return this.getTextField().get_defaultTextFormat();
	}
	,setWordWrap: function(b) {
		this.getTextField().set_wordWrap(b);
		if(this.isAutoSize()) this.revalidate();
	}
	,isWordWrap: function() {
		return this.getTextField().get_wordWrap();
	}
	,getTextField: function() {
		return this.textField;
	}
	,isAutoSize: function() {
		return false;
	}
	,setEnabled: function(b) {
		org_aswing_Component.prototype.setEnabled.call(this,b);
		this.getTextField().set_selectable(b);
		this.getTextField().mouseEnabled = b;
		this.updateTextForeground();
	}
	,setEditable: function(b) {
		if(b != this._editable) {
			this._editable = b;
			if(b) this.getTextField().set_type(openfl_text_TextFieldType.INPUT); else this.getTextField().set_type(openfl_text_TextFieldType.DYNAMIC);
			this.updateTextForeground();
			this.invalidate();
			this.invalidateColumnRowSize();
			this.repaint();
		}
	}
	,isEditable: function() {
		return this._editable;
	}
	,setFont: function(f) {
		org_aswing_Component.prototype.setFont.call(this,f);
		this.setFontValidated(true);
		if(this.getFont() != null) {
			this.getFont().apply(this.getTextField());
			this.invalidateColumnRowSize();
		}
	}
	,setForeground: function(c) {
		org_aswing_Component.prototype.setForeground.call(this,c);
		if(this.getForeground() != null) {
			this.getTextField().set_textColor(this.getForeground().getRGB());
			this.getTextField().set_alpha(this.getForeground().getAlpha());
		}
	}
	,setText: function(text) {
		if(null == text) text = "";
		if(this.getTextField().get_text() != text) {
			this.getTextField().set_text(text);
			if(this.isAutoSize()) this.revalidate();
			this.__fieldBindings__.dispatch("text",null,null);
		}
	}
	,getText: function() {
		return this.getTextField().get_text();
	}
	,setHtmlText: function(ht) {
		this.getTextField().set_htmlText(ht);
		if(this.isAutoSize()) this.revalidate();
	}
	,getHtmlText: function() {
		return this.getTextField().get_htmlText();
	}
	,appendText: function(newText) {
		var _g = this.getTextField();
		_g.set_text(_g.get_text() + newText);
		if(this.isAutoSize()) this.revalidate();
	}
	,countPreferredSize: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("Subclass of JTextComponent need implement this method : countPreferredSize!"));
		return null;
	}
	,invalidateColumnRowSize: function() {
		this.columnRowCounted = false;
	}
	,getColumnWidth: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.columnWidth;
	}
	,getRowHeight: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.rowHeight;
	}
	,getWidthMargin: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.widthMargin;
	}
	,getHeightMargin: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.heightMargin;
	}
	,getTextFieldAutoSizedSize: function(forceWidth,forceHeight) {
		if(forceHeight == null) forceHeight = 0;
		if(forceWidth == null) forceWidth = 0;
		var tf = this.getTextField();
		var oldSize = new org_aswing_geom_IntDimension(Std["int"](tf.get_textWidth()),Std["int"](tf.get_textHeight()));
		oldSize = new org_aswing_geom_IntDimension(Std["int"](tf.get_width()),Std["int"](tf.get_height()));
		var old = tf.autoSize;
		if(forceWidth != 0) tf.set_width(forceWidth);
		if(forceHeight != 0) tf.set_height(forceHeight);
		tf.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		var size = new org_aswing_geom_IntDimension(Std["int"](tf.get_textWidth()),Std["int"](tf.get_textHeight()));
		size = new org_aswing_geom_IntDimension(Std["int"](tf.get_width()),Std["int"](tf.get_height()));
		tf.set_autoSize(old);
		tf.set_width(oldSize.width);
		tf.set_height(oldSize.height);
		if(forceWidth != 0) size.width = forceWidth;
		if(forceHeight != 0) size.height = forceHeight;
		return size;
	}
	,countColumnRowSize: function() {
		var str = "Mmmmm";
		var tf = this.getFont().getTextFormat();
		var textFieldSize = org_aswing_AsWingUtils.computeStringSizeWithFont(this.getFont(),str,true);
		var textSize = org_aswing_AsWingUtils.computeStringSizeWithFont(this.getFont(),str,false);
		if(tf.font == "NSimSun") this.columnWidth = Math.round(textSize.width / 4 + (tf.size | 0) / 6); else this.columnWidth = textSize.width / 5 | 0;
		this.rowHeight = textSize.height;
		this.widthMargin = textFieldSize.width - textSize.width;
		this.heightMargin = textFieldSize.height - textSize.height;
		this.columnRowCounted = true;
	}
	,getInternalFocusObject: function() {
		return this.getTextField();
	}
	,paint: function(b) {
		org_aswing_Component.prototype.paint.call(this,b);
		this.applyBoundsToText(b);
	}
	,applyBoundsToText: function(b) {
		var t = this.getTextField();
		t.set_x(b.x);
		t.set_y(b.y);
		t.set_width(b.width);
		t.set_height(b.height);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.getTextField().setSelection(beginIndex,endIndex);
	}
	,selectAll: function() {
		this.getTextField().setSelection(0,this.getTextField().length);
	}
	,setTextFormat: function(tf,beginIndex,endIndex) {
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = -1;
		this.getTextField().setTextFormat(tf,beginIndex,endIndex);
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = -1;
		return this.getTextField().getTextFormat(beginIndex,endIndex);
	}
	,setDisplayAsPassword: function(b) {
		this.getTextField().displayAsPassword = b;
	}
	,isDisplayAsPassword: function() {
		return this.getTextField().displayAsPassword;
	}
	,getLength: function() {
		return this.getTextField().length;
	}
	,setMaxChars: function(n) {
		this.getTextField().maxChars = n;
	}
	,getMaxChars: function() {
		return this.getTextField().maxChars;
	}
	,setRestrict: function(res) {
		this.getTextField().restrict = res;
	}
	,getRestrict: function() {
		return this.getTextField().restrict;
	}
	,getSelectionBeginIndex: function() {
		return this.getTextField().selectionBeginIndex;
	}
	,getSelectionEndIndex: function() {
		return this.getTextField().selectionEndIndex;
	}
	,__class__: org_aswing_JTextComponent
	,__properties__: $extend(org_aswing_Component.prototype.__properties__,{get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_restrict:"set_restrict",get_restrict:"get_restrict",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",set_editable:"set_editable",get_editable:"get_editable",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap"})
});
var org_aswing_JTextArea = function(text,rows,columns) {
	if(columns == null) columns = 0;
	if(rows == null) rows = 0;
	if(text == null) text = "";
	org_aswing_JTextComponent.call(this);
	this.setName("JTextField");
	this.getTextField().multiline = true;
	this.getTextField().set_text(text);
	this._rows = rows;
	this._columns = columns;
	this._viewPosition = new org_aswing_geom_IntPoint();
	this.viewportSizeTesting = false;
	this.lastMaxScrollV = this.getTextField().get_maxScrollV();
	this.lastMaxScrollH = this.getTextField().get_maxScrollH();
	this._verticalUnitIncrement = -2147483648;
	this._verticalBlockIncrement = -2147483648;
	this._horizontalUnitIncrement = -2147483648;
	this._horizontalBlockIncrement = -2147483648;
	this.getTextField().addEventListener(openfl_events_Event.CHANGE,$bind(this,this.__onTextAreaTextChange));
	this.getTextField().addEventListener(openfl_events_Event.SCROLL,$bind(this,this.__onTextAreaTextScroll));
	this.updateUI();
};
$hxClasses["org.aswing.JTextArea"] = org_aswing_JTextArea;
org_aswing_JTextArea.__name__ = ["org","aswing","JTextArea"];
org_aswing_JTextArea.__interfaces__ = [org_aswing_Viewportable];
org_aswing_JTextArea.setDefaultMaxChars = function(n) {
	org_aswing_JTextArea.defaultMaxChars = n;
};
org_aswing_JTextArea.getDefaultMaxChars = function() {
	return org_aswing_JTextArea.defaultMaxChars;
};
org_aswing_JTextArea.__super__ = org_aswing_JTextComponent;
org_aswing_JTextArea.prototype = $extend(org_aswing_JTextComponent.prototype,{
	get_columns: function() {
		return Math.floor(this._columns);
	}
	,set_columns: function(columns) {
		this.setColumns(columns);
		return columns;
	}
	,get_rows: function() {
		return Math.floor(this._rows);
	}
	,set_rows: function(rows) {
		this.setRows(rows);
		return rows;
	}
	,get_viewPosition: function() {
		return this.getViewPosition();
	}
	,set_viewPosition: function(v) {
		this.setViewPosition(v);
		return v;
	}
	,get_verticalUnitIncrement: function() {
		return this.getVerticalUnitIncrement();
	}
	,set_verticalUnitIncrement: function(v) {
		this.setVerticalUnitIncrement(v);
		return v;
	}
	,get_verticalBlockIncrement: function() {
		return this.getVerticalBlockIncrement();
	}
	,set_verticalBlockIncrement: function(v) {
		this.setVerticalBlockIncrement(v);
		return v;
	}
	,get_horizontalUnitIncrement: function() {
		return this.getHorizontalUnitIncrement();
	}
	,set_horizontalUnitIncrement: function(v) {
		this.setHorizontalUnitIncrement(v);
		return v;
	}
	,get_horizontalBlockIncrement: function() {
		return this.getHorizontalBlockIncrement();
	}
	,set_horizontalBlockIncrement: function(v) {
		this.setHorizontalBlockIncrement(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTextAreaUI;
	}
	,getUIClassID: function() {
		return "TextAreaUI";
	}
	,setColumns: function(columns) {
		if(columns < 0) columns = 0;
		if(this._columns != columns) {
			this._columns = columns;
			if(this.isWordWrap()) {
			}
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this._columns;
	}
	,setRows: function(rows) {
		if(rows < 0) rows = 0;
		if(this._rows != rows) {
			this._rows = rows;
			if(this.isWordWrap()) {
			}
			this.revalidate();
		}
	}
	,getRows: function() {
		return this._rows;
	}
	,isAutoSize: function() {
		return this._columns == 0 || this._rows == 0;
	}
	,countPreferredSize: function() {
		var size;
		if(this._columns > 0 && this._rows > 0) {
			var width = this.getColumnWidth() * this._columns + this.getWidthMargin();
			var height = this.getRowHeight() * this._rows + this.getHeightMargin();
			size = new org_aswing_geom_IntDimension(width,height);
		} else if(this._rows <= 0 && this._columns <= 0) size = this.getTextFieldAutoSizedSize(); else if(this._rows > 0) {
			var forceHeight = this.getRowHeight() * this._rows + this.getHeightMargin();
			size = this.getTextFieldAutoSizedSize(0,forceHeight);
		} else {
			var forceWidth = this.getColumnWidth() * this._columns + this.getWidthMargin();
			size = this.getTextFieldAutoSizedSize(forceWidth,0);
		}
		return this.getInsets().getOutsideSize(size);
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,size: function() {
		org_aswing_JTextComponent.prototype.size.call(this);
		this.applyBoundsToText(this.getPaintBounds());
	}
	,__onTextAreaTextChange: function(e) {
		if(this.viewportSizeTesting) return;
	}
	,__onTextAreaTextScroll: function(e) {
		if(this.viewportSizeTesting) return;
		var t = this.getTextField();
		if(this.focusScrolling) {
			var vp = this.getViewPosition();
			t.scrollH = vp.x;
			t.scrollV = vp.y + 1;
			return;
		}
		var newViewPos = new org_aswing_geom_IntPoint(t.scrollH,t.scrollV - 1);
		if(!this.getViewPosition().equals(newViewPos)) {
			this._viewPosition.setLocation(newViewPos);
			this.fireStateChanged(true);
		}
		if(this.lastMaxScrollV != t.get_maxScrollV() || this.lastMaxScrollH != t.get_maxScrollH()) {
			this.lastMaxScrollV = t.get_maxScrollV();
			this.lastMaxScrollH = t.get_maxScrollH();
			this.revalidate();
		}
	}
	,makeFocus: function() {
		if(this.getFocusTransmit() == null) {
			this.focusScrolling = true;
			org_aswing_JTextComponent.prototype.makeFocus.call(this);
			this.focusScrolling = false;
		}
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getVerticalUnitIncrement: function() {
		if(this._verticalUnitIncrement == -2147483648) return 1; else return this._verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this._verticalBlockIncrement == -2147483648) return 10; else return this._verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this._horizontalUnitIncrement == -2147483648) return this.getColumnWidth(); else return this._horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this._horizontalBlockIncrement == -2147483648) return this.getColumnWidth() * 10; else return this._horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this._verticalUnitIncrement != increment) {
			this._verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this._verticalBlockIncrement != increment) {
			this._verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this._horizontalUnitIncrement != increment) {
			this._horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this._horizontalBlockIncrement != increment) {
			this._horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,0));
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org_aswing_geom_IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this._viewPosition.equals(p)) {
			this.restrictionViewPos(p);
			if(this._viewPosition.equals(p)) return;
			this._viewPosition.setLocation(p);
			this.validateScroll();
			this.fireStateChanged(programmatic);
		}
	}
	,setViewportTestSize: function(s) {
		this.viewportSizeTesting = true;
		this.setSize(s);
		this.validateScroll();
		this.viewportSizeTesting = false;
	}
	,getViewSize: function() {
		var t = this.getTextField();
		var wRange;
		var hRange;
		if(this.isWordWrap()) {
			wRange = Std["int"](t.get_textWidth());
			t.scrollH = 0;
		} else if(t.get_maxScrollH() > 0) wRange = Std["int"](t.get_textWidth() + t.get_maxScrollH()); else {
			wRange = Std["int"](t.get_textWidth());
			t.scrollH = 0;
		}
		var extent = t.get_bottomScrollV() - t.scrollV + 1;
		var maxValue = t.get_maxScrollV() + extent;
		var minValue = 1;
		hRange = maxValue - minValue;
		return new org_aswing_geom_IntDimension(wRange,hRange);
	}
	,getExtentSize: function() {
		var t = this.getTextField();
		var extentVer = t.get_bottomScrollV() - t.scrollV + 1;
		var extentHor = Std["int"](t.get_textWidth());
		return new org_aswing_geom_IntDimension(extentHor,extentVer);
	}
	,getViewportPane: function() {
		return this;
	}
	,getViewPosition: function() {
		return this._viewPosition.clone();
	}
	,validateScroll: function() {
		var xS = this._viewPosition.x;
		var yS = this._viewPosition.y + 1;
		var t = this.getTextField();
		if(t.scrollH != xS) t.scrollH = xS;
		if(t.scrollV != yS) t.scrollV = yS;
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org_aswing_geom_IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,__class__: org_aswing_JTextArea
	,__properties__: $extend(org_aswing_JTextComponent.prototype.__properties__,{set_horizontalBlockIncrement:"set_horizontalBlockIncrement",get_horizontalBlockIncrement:"get_horizontalBlockIncrement",set_horizontalUnitIncrement:"set_horizontalUnitIncrement",get_horizontalUnitIncrement:"get_horizontalUnitIncrement",set_verticalBlockIncrement:"set_verticalBlockIncrement",get_verticalBlockIncrement:"get_verticalBlockIncrement",set_verticalUnitIncrement:"set_verticalUnitIncrement",get_verticalUnitIncrement:"get_verticalUnitIncrement",set_viewPosition:"set_viewPosition",get_viewPosition:"get_viewPosition",set_rows:"set_rows",get_rows:"get_rows",set_columns:"set_columns",get_columns:"get_columns"})
});
var org_aswing_JTextField = function(text,columns) {
	if(columns == null) columns = 0;
	if(text == null) text = "";
	var _g = this;
	org_aswing_JTextComponent.call(this);
	this.setName("JTextField");
	this.getTextField().multiline = false;
	this._columns = columns;
	this.hintTextField = new openfl_text_TextField();
	this.hintTextField.set_type(openfl_text_TextFieldType.DYNAMIC);
	this.hintTextField.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
	this.hintTextField.set_background(false);
	this.addChildAt(this.hintTextField,0);
	this.getTextField().addEventListener(openfl_events_Event.CHANGE,function(e) {
		_g.updateHintTextField();
	});
	this.set_text(text);
	this.updateUI();
};
$hxClasses["org.aswing.JTextField"] = org_aswing_JTextField;
org_aswing_JTextField.__name__ = ["org","aswing","JTextField"];
org_aswing_JTextField.setDefaultMaxChars = function(n) {
	org_aswing_JTextField.defaultMaxChars = n;
};
org_aswing_JTextField.getDefaultMaxChars = function() {
	return org_aswing_JTextField.defaultMaxChars;
};
org_aswing_JTextField.__super__ = org_aswing_JTextComponent;
org_aswing_JTextField.prototype = $extend(org_aswing_JTextComponent.prototype,{
	get_columns: function() {
		return Math.floor(this._columns);
	}
	,set_columns: function(c) {
		var __oldValue__ = this.get_columns();
		if(c == __oldValue__) return __oldValue__;
		this.setColumns(c);
		this.__fieldBindings__.dispatch("columns",__oldValue__,this.get_columns());
		return c;
	}
	,get_inlineHint: function() {
		return this.hintTextField.get_text();
	}
	,set_inlineHint: function(v) {
		this.hintTextField.set_text(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTextFieldUI;
	}
	,getUIClassID: function() {
		return "TextFieldUI";
	}
	,setColumns: function(columns) {
		if(columns == null) columns = 0;
		if(columns < 0) columns = 0;
		if(this._columns != columns) {
			this._columns = columns;
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this._columns;
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,isAutoSize: function() {
		return this._columns == 0;
	}
	,countPreferredSize: function() {
		if(this._columns > 0) {
			var columnWidth = this.getColumnWidth();
			var width = columnWidth * this._columns + this.getWidthMargin();
			var height = this.getRowHeight() + this.getHeightMargin();
			var size = new org_aswing_geom_IntDimension(width,height);
			return this.getInsets().getOutsideSize(size);
		} else return this.getInsets().getOutsideSize(this.getTextFieldAutoSizedSize());
	}
	,__onFocusKeyDown: function(e) {
		if((e.keyCode | 0) == org_aswing_AWKeyboard.ENTER) this.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,paintFocusRect: function(force) {
		if(force == null) force = false;
		if(null == this.stage) return;
		org_aswing_FocusManager.getManager(this.stage).setTraversalEnabled(true);
		org_aswing_JTextComponent.prototype.paintFocusRect.call(this,true);
	}
	,applyBoundsToText: function(b) {
		org_aswing_JTextComponent.prototype.applyBoundsToText.call(this,b);
		var t = this.hintTextField;
		t.set_x(b.x);
		t.set_y(b.y);
		t.set_width(b.width);
		t.set_height(b.height);
	}
	,setForeground: function(c) {
		org_aswing_JTextComponent.prototype.setForeground.call(this,c);
		if(this.getForeground() != null) {
			var c1 = this.getForeground().offsetHLS(0,0.4,0);
			this.hintTextField.set_textColor(c1.getRGB());
			this.hintTextField.set_alpha(c1.getAlpha());
		}
	}
	,setFont: function(f) {
		org_aswing_JTextComponent.prototype.setFont.call(this,f);
		if(this.getFont() != null) this.getFont().apply(this.hintTextField);
	}
	,setText: function(text) {
		org_aswing_JTextComponent.prototype.setText.call(this,text);
		this.updateHintTextField();
	}
	,updateHintTextField: function() {
		this.hintTextField.set_visible(null == this.get_text() || this.get_text() == "");
	}
	,__class__: org_aswing_JTextField
	,__properties__: $extend(org_aswing_JTextComponent.prototype.__properties__,{set_inlineHint:"set_inlineHint",get_inlineHint:"get_inlineHint",set_columns:"set_columns",get_columns:"get_columns"})
});
var org_aswing_event_TreeModelListener = function() { };
$hxClasses["org.aswing.event.TreeModelListener"] = org_aswing_event_TreeModelListener;
org_aswing_event_TreeModelListener.__name__ = ["org","aswing","event","TreeModelListener"];
org_aswing_event_TreeModelListener.prototype = {
	__class__: org_aswing_event_TreeModelListener
};
var org_aswing_JTree = function(newModel) {
	org_aswing_Container.call(this);
	this.setName("JTree");
	this._verticalUnitIncrement = -2147483648;
	this._verticalBlockIncrement = -2147483648;
	this._horizontalUnitIncrement = -2147483648;
	this._horizontalBlockIncrement = -2147483648;
	if(newModel == null) newModel = org_aswing_JTree.getDefaultTreeModel();
	this._viewPosition = new org_aswing_geom_IntPoint();
	this.expandedStack = new org_aswing_util_Stack();
	this._toggleClickCount = 3;
	this.expandedState = new org_aswing_tree_TreePathMap();
	this._rowHeight = 16;
	this.rowHeightSet = false;
	this._fixedCellWidth = -1;
	this._visibleRowCount = 16;
	this._rootVisible = true;
	this._editable = false;
	this.setSelectionModel(new org_aswing_tree_DefaultTreeSelectionModel());
	this._cellFactory = null;
	this._scrollsOnExpand = true;
	this.scrollsOnExpandSet = false;
	this._expandsSelectedPaths = false;
	this.setCellFactory(new org_aswing_tree_GeneralTreeCellFactoryUIResource(org_aswing_tree_DefaultTreeCell));
	this.setCellEditor(new org_aswing_DefaultTextFieldCellEditor());
	this.setModel(newModel);
	this.updateUI();
};
$hxClasses["org.aswing.JTree"] = org_aswing_JTree;
org_aswing_JTree.__name__ = ["org","aswing","JTree"];
org_aswing_JTree.__interfaces__ = [org_aswing_event_CellEditorListener,org_aswing_event_TreeModelListener,org_aswing_Viewportable];
org_aswing_JTree.getDefaultTreeModel = function() {
	var root = new org_aswing_tree_DefaultMutableTreeNode("JTree");
	return new org_aswing_tree_DefaultTreeModel(root);
};
org_aswing_JTree.__super__ = org_aswing_Container;
org_aswing_JTree.prototype = $extend(org_aswing_Container.prototype,{
	get_model: function() {
		return this.getModel();
	}
	,set_model: function(v) {
		this.setModel(v);
		return v;
	}
	,get_selectionModel: function() {
		return this.getSelectionModel();
	}
	,set_selectionModel: function(v) {
		this.setSelectionModel(v);
		return v;
	}
	,get_rootVisible: function() {
		return this.isRootVisible();
	}
	,set_rootVisible: function(v) {
		this.setRootVisible(v);
		return v;
	}
	,get_cellFactory: function() {
		return this.getCellFactory();
	}
	,set_cellFactory: function(v) {
		this.setCellFactory(v);
		return v;
	}
	,get_rowHeight: function() {
		return this.getRowHeight();
	}
	,set_rowHeight: function(v) {
		this.setRowHeight(v);
		return v;
	}
	,get_fixedCellWidth: function() {
		return this.getFixedCellWidth();
	}
	,set_fixedCellWidth: function(v) {
		this.setFixedCellWidth(v);
		return v;
	}
	,get_selectionForeground: function() {
		return this.getSelectionForeground();
	}
	,set_selectionForeground: function(v) {
		this.setSelectionForeground(v);
		return v;
	}
	,get_selectionBackground: function() {
		return this.getSelectionBackground();
	}
	,set_selectionBackground: function(v) {
		this.setSelectionBackground(v);
		return v;
	}
	,get_cellEditor: function() {
		return this.getCellEditor();
	}
	,set_cellEditor: function(v) {
		this.setCellEditor(v);
		return v;
	}
	,get_editable: function() {
		return this.isEditable();
	}
	,set_editable: function(v) {
		this.setEditable(v);
		return v;
	}
	,get_visibleRowCount: function() {
		return this.getVisibleRowCount();
	}
	,set_visibleRowCount: function(v) {
		this.setVisibleRowCount(v);
		return v;
	}
	,get_invokesStopCellEditing: function() {
		return this.isInvokesStopCellEditing();
	}
	,set_invokesStopCellEditing: function(v) {
		this.setInvokesStopCellEditing(v);
		return v;
	}
	,get_scrollsOnExpand: function() {
		return this.isScrollsOnExpand();
	}
	,set_scrollsOnExpand: function(v) {
		this.setScrollsOnExpand(v);
		return v;
	}
	,get_toggleClickCount: function() {
		return this.getToggleClickCount();
	}
	,set_toggleClickCount: function(v) {
		this.setToggleClickCount(v);
		return v;
	}
	,get_expandsSelectedPaths: function() {
		return this.isExpandsSelectedPaths();
	}
	,set_expandsSelectedPaths: function(v) {
		this.setExpandsSelectedPaths(v);
		return v;
	}
	,get_viewPosition: function() {
		return this.getViewPosition();
	}
	,set_viewPosition: function(v) {
		this.setViewPosition(v);
		return v;
	}
	,get_verticalUnitIncrement: function() {
		return this.getVerticalUnitIncrement();
	}
	,set_verticalUnitIncrement: function(v) {
		this.setVerticalUnitIncrement(v);
		return v;
	}
	,get_verticalBlockIncrement: function() {
		return this.getVerticalBlockIncrement();
	}
	,set_verticalBlockIncrement: function(v) {
		this.setVerticalBlockIncrement(v);
		return v;
	}
	,get_horizontalUnitIncrement: function() {
		return this.getHorizontalUnitIncrement();
	}
	,set_horizontalUnitIncrement: function(v) {
		this.setHorizontalUnitIncrement(v);
		return v;
	}
	,get_horizontalBlockIncrement: function() {
		return this.getHorizontalBlockIncrement();
	}
	,set_horizontalBlockIncrement: function(v) {
		this.setHorizontalBlockIncrement(v);
		return v;
	}
	,getTreeUI: function() {
		return org_aswing_AsWingUtils["as"](this._ui,org_aswing_plaf_TreeUI);
	}
	,setUI: function(ui) {
		this.settingUI = true;
		org_aswing_Container.prototype.setUI.call(this,ui);
		this.settingUI = false;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
		this.invalidate();
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTreeUI;
	}
	,getUIClassID: function() {
		return "TreeUI";
	}
	,setLayout: function(layout) {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("You can not set layout to JTree, it's handled by TreeUI"));
	}
	,getCellFactory: function() {
		return this._cellFactory;
	}
	,setCellFactory: function(x) {
		var oldValue = this._cellFactory;
		if(this._cellFactory != x) {
			this._cellFactory = x;
			this.firePropertyChange("cellFactory",oldValue,this._cellFactory);
			this.invalidate();
		}
	}
	,setFont: function(f) {
		var old = this.getFont();
		if(old != f) {
			org_aswing_Container.prototype.setFont.call(this,f);
			this.firePropertyChange("font",old,this.getFont());
		}
	}
	,setEditable: function(flag) {
		var oldValue = this._editable;
		if(this._editable != flag) {
			this._editable = flag;
			this.firePropertyChange("editable",oldValue,flag);
		}
	}
	,isEditable: function() {
		return this._editable;
	}
	,setCellEditor: function(cellEditor) {
		var oldEditor = this._cellEditor;
		if(oldEditor != cellEditor) {
			if(oldEditor != null) oldEditor.removeCellEditorListener(this);
			this._cellEditor = cellEditor;
			cellEditor.addCellEditorListener(this);
			this.firePropertyChange("cellEditor",oldEditor,cellEditor);
			this.invalidate();
		}
	}
	,getCellEditor: function() {
		return this._cellEditor;
	}
	,getModel: function() {
		return this._treeModel;
	}
	,setModel: function(newModel) {
		if(this._treeModel == newModel) return;
		this.clearSelection();
		var oldModel = this._treeModel;
		if(this._treeModel != null) this._treeModel.removeTreeModelListener(this);
		this._treeModel = newModel;
		this.clearToggledPaths();
		if(this._treeModel != null) {
			this._treeModel.addTreeModelListener(this);
			if(this._treeModel.getRoot() != null && !this._treeModel.isLeaf(this._treeModel.getRoot())) this.expandedState.put(new org_aswing_tree_TreePath([this._treeModel.getRoot()]),true);
		}
		this.firePropertyChange("model",oldModel,this._treeModel);
		this.invalidate();
	}
	,isRootVisible: function() {
		return this._rootVisible;
	}
	,setRootVisible: function(rootVisible) {
		var oldValue = this._rootVisible;
		if(oldValue != rootVisible) {
			this._rootVisible = rootVisible;
			this.firePropertyChange("rootVisible",oldValue,this._rootVisible);
		}
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight <= 0 || this._rowHeight == rowHeight) return;
		var oldValue = this._rowHeight;
		this._rowHeight = rowHeight;
		this.rowHeightSet = true;
		this.firePropertyChange("rowHeight",oldValue,this._rowHeight);
		this.invalidate();
	}
	,getRowHeight: function() {
		return this._rowHeight;
	}
	,setRowHeightSet: function(b) {
		this.rowHeightSet = b;
	}
	,isRowHeightSet: function() {
		return this.rowHeightSet;
	}
	,getFixedCellWidth: function() {
		return this._fixedCellWidth;
	}
	,setFixedCellWidth: function(width) {
		if(width != this._fixedCellWidth) {
			this._fixedCellWidth = width;
			this.treeDidChange();
		}
	}
	,getSelectionForeground: function() {
		return this._selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this._selectionForeground;
		this._selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getSelectionBackground: function() {
		return this._selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this._selectionBackground;
		this._selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,setInvokesStopCellEditing: function(newValue) {
		var oldValue = this._invokesStopCellEditing;
		if(oldValue != newValue) {
			this._invokesStopCellEditing = newValue;
			this.firePropertyChange("invokesStopCellEditing",oldValue,newValue);
		}
	}
	,isInvokesStopCellEditing: function() {
		return this._invokesStopCellEditing;
	}
	,setScrollsOnExpand: function(newValue) {
		var oldValue = this._scrollsOnExpand;
		if(oldValue != newValue) {
			this._scrollsOnExpand = newValue;
			this.scrollsOnExpandSet = true;
			this.firePropertyChange("scrollsOnExpand",oldValue,newValue);
		}
	}
	,isScrollsOnExpand: function() {
		return this._scrollsOnExpand;
	}
	,setScrollsOnExpandSet: function(b) {
		this.scrollsOnExpandSet = b;
	}
	,isScrollsOnExpandSet: function() {
		return this.scrollsOnExpandSet;
	}
	,setToggleClickCount: function(clickCount) {
		var oldCount = this._toggleClickCount;
		if(oldCount != clickCount) {
			this._toggleClickCount = clickCount;
			this.firePropertyChange("toggleClickCount",oldCount,clickCount);
		}
	}
	,getToggleClickCount: function() {
		return this._toggleClickCount;
	}
	,setExpandsSelectedPaths: function(newValue) {
		var oldValue = this._expandsSelectedPaths;
		if(oldValue != newValue) {
			this._expandsSelectedPaths = newValue;
			this.firePropertyChange("expandsSelectedPaths",oldValue,newValue);
		}
	}
	,isExpandsSelectedPaths: function() {
		return this._expandsSelectedPaths;
	}
	,isPathEditable: function(path) {
		return this.isEditable();
	}
	,getRowCount: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getRowCount(this);
		return 0;
	}
	,setSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionPath(path,programmatic);
	}
	,setSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionPaths(paths,programmatic);
	}
	,setLeadSelectionPath: function(newPath) {
		var oldValue = this.leadPath;
		if(oldValue == null && newPath != null || oldValue != null && !oldValue.equals(newPath)) {
			this.leadPath = newPath;
			this.firePropertyChange("leadSelectionPath",oldValue,newPath);
		}
	}
	,setAnchorSelectionPath: function(newPath) {
		var oldValue = this.anchorPath;
		if(oldValue == null && newPath != null || oldValue != null && !oldValue.equals(newPath)) {
			this.anchorPath = newPath;
			this.firePropertyChange("anchorSelectionPath",oldValue,newPath);
		}
	}
	,setSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectionRows([row],programmatic);
	}
	,setSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var ui = this.getTreeUI();
		if(ui != null && rows != null) {
			var numRows = rows.length;
			var paths = [];
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = ui.getPathForRow(this,rows[counter]);
			}
			this.setSelectionPaths(paths,programmatic);
		}
	}
	,addSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionPath(path,programmatic);
	}
	,addSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionPaths(paths,programmatic);
	}
	,addSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.addSelectionRows([row],programmatic);
	}
	,addSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var ui = this.getTreeUI();
		if(ui != null && rows != null) {
			var numRows = rows.length;
			var paths = [];
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = ui.getPathForRow(this,rows[counter]);
			}
			this.addSelectionPaths(paths,programmatic);
		}
	}
	,getLastSelectedPathComponent: function() {
		var selPath = this.getSelectionModel().getSelectionPath();
		if(selPath != null) return selPath.getLastPathComponent();
		return null;
	}
	,getLeadSelectionPath: function() {
		return this.leadPath;
	}
	,getAnchorSelectionPath: function() {
		return this.anchorPath;
	}
	,getSelectionPath: function() {
		return this.getSelectionModel().getSelectionPath();
	}
	,getSelectionPaths: function() {
		return this.getSelectionModel().getSelectionPaths();
	}
	,getSelectionRows: function() {
		return this.getSelectionModel().getSelectionRows();
	}
	,getSelectionRow: function() {
		var rows = this.getSelectionModel().getSelectionRows();
		if(rows == null || rows.length == 0) return -1; else return rows[0];
	}
	,getSelectionCount: function() {
		return this._selectionModel.getSelectionCount();
	}
	,getMinSelectionRow: function() {
		return this.getSelectionModel().getMinSelectionRow();
	}
	,getMaxSelectionRow: function() {
		return this.getSelectionModel().getMaxSelectionRow();
	}
	,getLeadSelectionRow: function() {
		var leadPath = this.getLeadSelectionPath();
		if(leadPath != null) return this.getRowForPath(leadPath);
		return -1;
	}
	,isPathSelected: function(path) {
		return this.getSelectionModel().isPathSelected(path);
	}
	,isRowSelected: function(row) {
		return this.getSelectionModel().isRowSelected(row);
	}
	,getExpandedDescendants: function(parent) {
		if(!this.isExpanded(parent)) return null;
		var toggledPaths = this.expandedState.keys();
		var elements = null;
		var path;
		var value = false;
		if(toggledPaths != null) {
			while( toggledPaths.hasNext() ) {
				var path1 = toggledPaths.next();
				value = false;
				value = this.expandedState.get(path1);
				if(path1 != parent && value == true && parent.isDescendant(path1) && this.isPathVisible(path1)) {
					if(elements == null) elements = new org_aswing_util_ArrayList();
					elements.append(path1);
				}
			}
		}
		if(elements == null) return [];
		return elements.toArray();
	}
	,hasBeenExpanded: function(path) {
		return path != null && this.expandedState.get(path) != null;
	}
	,isExpanded: function(path) {
		if(path == null) return false;
		var value = this.expandedState.get(path);
		if(value != true) return false;
		var parentPath = path.getParentPath();
		if(parentPath != null) return this.isExpanded(parentPath);
		return true;
	}
	,isExpandedOfRow: function(row) {
		var tree = this.getTreeUI();
		if(tree != null) {
			var path = tree.getPathForRow(this,row);
			if(path != null) {
				var value = this.expandedState.get(path);
				return value == true;
			}
		}
		return false;
	}
	,isCollapsed: function(path) {
		return !this.isExpanded(path);
	}
	,isCollapsedOfRow: function(row) {
		return !this.isExpandedOfRow(row);
	}
	,makePathVisible: function(path) {
		if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) this.expandPath(parentPath);
		}
	}
	,isPathVisible: function(path) {
		if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) return this.isExpanded(parentPath);
			return true;
		}
		return false;
	}
	,getPathBounds: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getPathBounds(this,path);
		return null;
	}
	,getRowBounds: function(row) {
		return this.getPathBounds(this.getPathForRow(row));
	}
	,getPixelLocationFromLogicLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(startP.x,startP.y);
		return pp;
	}
	,getLogicLocationFromPixelLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(-startP.x,-startP.y);
		return pp;
	}
	,getViewStartPoint: function() {
		var viewPos = this.getViewPosition();
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX - viewPos.x;
		var startY = insetsY - viewPos.y;
		return new org_aswing_geom_IntPoint(startX,startY);
	}
	,scrollPathToVisible: function(path) {
		if(path != null) {
			this.makePathVisible(path);
			var bounds = this.getPathBounds(path);
			if(bounds != null) this.scrollRectToVisible(bounds);
		}
	}
	,scrollRowToVisible: function(row) {
		this.scrollPathToVisible(this.getPathForRow(row));
	}
	,getMousePointedPath: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getMousePointedPath();
		return null;
	}
	,getPathForRow: function(row) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getPathForRow(this,row);
		return null;
	}
	,getRowForPath: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getRowForPath(this,path);
		return -1;
	}
	,expandPath: function(path) {
		var model = this.getModel();
		if(path != null && model != null && !model.isLeaf(path.getLastPathComponent())) this.setExpandedState(path,true);
	}
	,expandRow: function(row) {
		this.expandPath(this.getPathForRow(row));
	}
	,collapsePath: function(path) {
		this.setExpandedState(path,false);
	}
	,collapseRow: function(row) {
		this.collapsePath(this.getPathForRow(row));
	}
	,getPathForLocation: function(x,y) {
		var closestPath = this.getClosestPathForLocation(x,y);
		if(closestPath != null) {
			var pathBounds = this.getPathBounds(closestPath);
			if(pathBounds != null && x >= pathBounds.x && x < pathBounds.x + pathBounds.width && y >= pathBounds.y && y < pathBounds.y + pathBounds.height) return closestPath;
		}
		return null;
	}
	,getRowForLocation: function(x,y) {
		return this.getRowForPath(this.getPathForLocation(x,y));
	}
	,getClosestPathForLocation: function(x,y) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getClosestPathForLocation(this,x,y);
		return null;
	}
	,getClosestRowForLocation: function(x,y) {
		return this.getRowForPath(this.getClosestPathForLocation(x,y));
	}
	,isEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.isEditing(this);
		return false;
	}
	,stopEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.stopEditing(this);
		return false;
	}
	,cancelEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) tree.cancelEditing(this);
	}
	,startEditingAtPath: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) {
			if(tree.startEditingAtPath(this,path)) this.dispatchEvent(new org_aswing_event_TreeCellEditEvent("treeCellEditingStarted",path));
		}
	}
	,getEditingPath: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getEditingPath(this);
		return null;
	}
	,setSelectionModel: function(selectionModel) {
		if(this._selectionModel == selectionModel) return;
		if(selectionModel == null) selectionModel = org_aswing_tree_EmptySelectionModel.sharedInstance();
		var oldValue = this._selectionModel;
		if(this._selectionModel != null) this._selectionModel.removeTreeSelectionListener($bind(this,this.__valueChangedTreeSelectionRedirector));
		this._selectionModel = selectionModel;
		this._selectionModel.addTreeSelectionListener($bind(this,this.__valueChangedTreeSelectionRedirector));
		this.firePropertyChange("selectionModel",oldValue,this._selectionModel);
	}
	,getSelectionModel: function() {
		return this._selectionModel;
	}
	,setSelectionMode: function(mode) {
		this._selectionModel.setSelectionMode(mode);
	}
	,getPathBetweenRows: function(index0,index1) {
		var newMinIndex;
		var newMaxIndex;
		var tree = this.getTreeUI();
		newMinIndex = Std["int"](Math.min(index0,index1));
		newMaxIndex = Std["int"](Math.max(index0,index1));
		if(tree != null) {
			var selection = [];
			var _g1 = newMinIndex;
			var _g = newMaxIndex + 1;
			while(_g1 < _g) {
				var counter = _g1++;
				selection[counter - newMinIndex] = tree.getPathForRow(this,counter);
			}
			return selection;
		}
		return null;
	}
	,setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().setSelectionPaths(paths,programmatic);
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().addSelectionPaths(paths,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().removeSelectionPaths(paths,programmatic);
	}
	,removeSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionPath(path,programmatic);
	}
	,removeSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionPaths(paths,programmatic);
	}
	,removeSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.removeSelectionRows([row],programmatic);
	}
	,removeSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var tree = this.getTreeUI();
		if(tree != null && rows != null) {
			var numRows = rows.length;
			var paths = [];
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = tree.getPathForRow(this,rows[counter]);
			}
			this.removeSelectionPaths(paths,programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().clearSelection(programmatic);
	}
	,isSelectionEmpty: function() {
		return this.getSelectionModel().isSelectionEmpty();
	}
	,firePropertyChange: function(pn,oldValue,newValue) {
		this.dispatchEvent(new org_aswing_event_PropertyChangeEvent(pn,oldValue,newValue));
	}
	,fireTreeExpanded: function(path) {
		this.dispatchEvent(new org_aswing_event_TreeEvent("treeExpanded",path));
	}
	,fireTreeCollapsed: function(path) {
		this.dispatchEvent(new org_aswing_event_TreeEvent("treeCollapsed",path));
	}
	,fireTreeWillExpand: function(path) {
		this.dispatchEvent(new org_aswing_event_TreeEvent("treeWillExpand",path));
	}
	,fireTreeWillCollapse: function(path) {
		this.dispatchEvent(new org_aswing_event_TreeEvent("treeWillCollapse",path));
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("treeSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("treeSelectionChanged",listener);
	}
	,treeDidChange: function() {
		this.setViewPosition(this.restrictionViewPos(this.getViewPosition()));
		this.revalidate();
		this.repaint();
	}
	,setVisibleRowCount: function(newCount) {
		var oldCount = this._visibleRowCount;
		if(oldCount != newCount) {
			this._visibleRowCount = newCount;
			this.firePropertyChange("visibleRowCount",oldCount,this._visibleRowCount);
			this.invalidate();
		}
	}
	,getVisibleRowCount: function() {
		return this._visibleRowCount;
	}
	,expandRoot: function() {
		var model = this.getModel();
		if(model != null && model.getRoot() != null) this.expandPath(new org_aswing_tree_TreePath([model.getRoot()]));
	}
	,getModelIndexsForPath: function(path) {
		if(path != null) {
			var model = this.getModel();
			var count = path.getPathCount();
			var indexs = [];
			var parent = model.getRoot();
			var _g = 1;
			while(_g < count) {
				var counter = _g++;
				indexs[counter - 1] = model.getIndexOfChild(parent,path.getPathComponent(counter));
				parent = path.getPathComponent(counter);
				if(indexs[counter - 1] < 0) return null;
			}
			return indexs;
		}
		return null;
	}
	,getPathForIndexs: function(indexs) {
		if(indexs == null) return null;
		var model = this.getModel();
		if(model == null) return null;
		var count = indexs.length;
		var parent = model.getRoot();
		var parentPath = new org_aswing_tree_TreePath([parent]);
		var _g = 0;
		while(_g < count) {
			var counter = _g++;
			parent = model.getChild(parent,indexs[counter]);
			if(parent == null) return null;
			parentPath = parentPath.pathByAddingChild(parent);
		}
		return parentPath;
	}
	,setExpandedState: function(path,state) {
		if(path != null) {
			var stack;
			var parentPath = path.getParentPath();
			if(this.expandedStack.size() == 0) stack = new org_aswing_util_Stack(); else stack = org_aswing_AsWingUtils["as"](this.expandedStack.pop(),org_aswing_util_Stack);
			try {
				while(parentPath != null) if(this.isExpanded(parentPath)) parentPath = null; else {
					stack.push(parentPath);
					parentPath = parentPath.getParentPath();
				}
				var counter = stack.size() - 1;
				while(counter >= 0) {
					parentPath = org_aswing_AsWingUtils["as"](stack.pop(),org_aswing_tree_TreePath);
					if(!this.isExpanded(parentPath)) {
						try {
							this.fireTreeWillExpand(parentPath);
						} catch( eve1 ) {
							haxe_CallStack.lastException = eve1;
							if (eve1 instanceof js__$Boot_HaxeError) eve1 = eve1.val;
							if( js_Boot.__instanceof(eve1,org_aswing_error_Error) ) {
								return;
							} else throw(eve1);
						}
						this.expandedState.put(parentPath,true);
						this.fireTreeExpanded(parentPath);
					}
					counter--;
				}
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,org_aswing_error_Error) ) {
					if(this.expandedStack.size() < org_aswing_JTree.TEMP_STACK_SIZE) {
						stack.clear();
						this.expandedStack.push(stack);
					}
				} else throw(e);
			}
			var cValue;
			if(state != true) {
				cValue = this.expandedState.get(path);
				if(cValue != null && cValue == true) {
					try {
						this.fireTreeWillCollapse(path);
					} catch( eve2 ) {
						haxe_CallStack.lastException = eve2;
						if (eve2 instanceof js__$Boot_HaxeError) eve2 = eve2.val;
						if( js_Boot.__instanceof(eve2,org_aswing_error_Error) ) {
							return;
						} else throw(eve2);
					}
					this.expandedState.put(path,false);
					this.fireTreeCollapsed(path);
					if(this.removeDescendantSelectedPaths(path,false) && !this.isPathSelected(path)) this.addSelectionPath(path);
				}
			} else {
				cValue = this.expandedState.get(path);
				if(cValue == null || !(cValue == true)) {
					try {
						this.fireTreeWillExpand(path);
					} catch( eve3 ) {
						haxe_CallStack.lastException = eve3;
						if (eve3 instanceof js__$Boot_HaxeError) eve3 = eve3.val;
						if( js_Boot.__instanceof(eve3,org_aswing_error_Error) ) {
							return;
						} else throw(eve3);
					}
					this.expandedState.put(path,true);
					this.fireTreeExpanded(path);
				}
			}
		}
	}
	,getDescendantToggledPaths: function(parent) {
		if(parent == null) return null;
		var descendants = [];
		var nodes = this.expandedState.keys();
		var path;
		while( nodes.hasNext() ) {
			var path1 = nodes.next();
			if(parent.isDescendant(path1)) descendants.push(path1);
		}
		return descendants;
	}
	,removeDescendantToggledPaths: function(toRemove) {
		if(toRemove != null) {
			var _g1 = 0;
			var _g = toRemove.length;
			while(_g1 < _g) {
				var i = _g1++;
				var descendants = this.getDescendantToggledPaths(org_aswing_AsWingUtils["as"](toRemove[i],org_aswing_tree_TreePath));
				if(descendants != null) {
					var _g3 = 0;
					var _g2 = descendants.length;
					while(_g3 < _g2) {
						var j = _g3++;
						this.expandedState.remove(descendants[j]);
					}
				}
			}
		}
	}
	,clearToggledPaths: function() {
		this.expandedState.clear();
	}
	,removeDescendantSelectedPaths: function(path,includePath) {
		var toRemove = this.getDescendantSelectedPaths(path,includePath);
		if(toRemove != null) {
			this.getSelectionModel().removeSelectionPaths(toRemove);
			return true;
		}
		return false;
	}
	,getDescendantSelectedPaths: function(path,includePath) {
		var sm = this.getSelectionModel();
		var selPaths;
		if(sm != null) selPaths = sm.getSelectionPaths(); else selPaths = null;
		if(selPaths != null) {
			var shouldRemove = false;
			var counter = selPaths.length - 1;
			while(counter >= 0) {
				if(selPaths[counter] != null && path.isDescendant(selPaths[counter]) && (!path.equals(selPaths[counter]) || includePath)) shouldRemove = true; else selPaths[counter] = null;
				counter--;
			}
			if(shouldRemove != true) selPaths = null;
			return selPaths;
		}
		return null;
	}
	,removeDescendantSelectedPathsWithEvent: function(e) {
		var pPath = e.getTreePath();
		var oldChildren = e.getChildren();
		var sm = this.getSelectionModel();
		if(sm != null && pPath != null && oldChildren != null && oldChildren.length > 0) {
			var counter = oldChildren.length - 1;
			while(counter >= 0) {
				this.removeDescendantSelectedPaths(pPath.pathByAddingChild(oldChildren[counter]),true);
				counter--;
			}
		}
	}
	,__valueChangedTreeSelectionRedirector: function(e) {
		this.dispatchEvent(e.cloneWithSource(this));
	}
	,treeNodesChanged: function(e) {
	}
	,treeNodesInserted: function(e) {
	}
	,treeNodesRemoved: function(e) {
		if(e == null) return;
		var parent = e.getTreePath();
		var children = e.getChildren();
		if(children == null) return;
		var rPath;
		var toRemove = [];
		var counter = children.length - 1;
		while(counter >= 0) {
			rPath = parent.pathByAddingChild(children[counter]);
			if(this.expandedState.get(rPath) != null) toRemove.push(rPath);
			counter--;
		}
		if(toRemove.length > 0) this.removeDescendantToggledPaths(toRemove);
		var model = this.getModel();
		if(model == null || model.isLeaf(parent.getLastPathComponent())) this.expandedState.remove(parent);
		this.removeDescendantSelectedPathsWithEvent(e);
	}
	,treeStructureChanged: function(e) {
		if(e == null) return;
		var parent = e.getTreePath();
		if(parent == null) return;
		if(parent.getPathCount() == 1) {
			this.clearToggledPaths();
			if(this._treeModel.getRoot() != null && !this._treeModel.isLeaf(this._treeModel.getRoot())) this.expandedState.put(parent,true);
		} else if(this.expandedState.get(parent) != null) {
			var toRemove = [];
			var isExpanded = this.isExpanded(parent);
			toRemove.push(parent);
			this.removeDescendantToggledPaths(toRemove);
			if(isExpanded) {
				var model = this.getModel();
				if(model == null || model.isLeaf(parent.getLastPathComponent())) this.collapsePath(parent); else this.expandedState.put(parent,true);
			}
		}
		this.removeDescendantSelectedPaths(parent,false);
	}
	,editingStopped: function(source) {
		var tree = this.getTreeUI();
		if(tree != null) {
			var path = tree.getEditingPath(this);
			if(path != null) {
				this.getModel().valueForPathChanged(tree.getEditingPath(this),source.getCellEditorValue());
				this.dispatchEvent(new org_aswing_event_TreeCellEditEvent("treeCellEditingStopped",path,path.getLastPathComponent(),source.getCellEditorValue()));
			}
		}
		this.requestFocus();
	}
	,editingCanceled: function(source) {
		this.dispatchEvent(new org_aswing_event_TreeCellEditEvent("treeCellEditingCanceled",this.getTreeUI().getEditingPath(this)));
		this.requestFocus();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this._verticalUnitIncrement == -2147483648) return this.getRowHeight(); else return this._verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this._verticalBlockIncrement == -2147483648) return Std["int"](Math.max(this.getRowHeight(),this.getExtentSize().height - this.getRowHeight())); else return this._verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this._horizontalUnitIncrement == -2147483648) return 1; else return this._horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this._horizontalBlockIncrement == -2147483648) return Std["int"](Math.max(1,this.getExtentSize().width - 1)); else return this._horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this._verticalUnitIncrement != increment) {
			this._verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this._verticalBlockIncrement != increment) {
			this._verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this._horizontalUnitIncrement != increment) {
			this._horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this._horizontalBlockIncrement != increment) {
			this._horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		return this.getTreeUI().getViewSize(this);
	}
	,getViewPosition: function() {
		return new org_aswing_geom_IntPoint(this._viewPosition.x,this._viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!this._viewPosition.equals(p)) {
			this._viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		var visibleRect = this.getVisibleRect();
		var ltPoint = contentRect.leftTop();
		var rbPoint = contentRect.rightBottom();
		var ltIn = visibleRect.containsPoint(ltPoint);
		var rbIn = visibleRect.containsPoint(rbPoint);
		if(ltIn && rbIn) return; else if(ltIn != true) this.setViewPosition(new org_aswing_geom_IntPoint(ltPoint.x,ltPoint.y),programmatic); else {
			var extendSize = this.getExtentSize();
			this.setViewPosition(new org_aswing_geom_IntPoint(rbPoint.x - extendSize.width,rbPoint.y - extendSize.height),programmatic);
		}
	}
	,getVisibleRect: function() {
		var es = this.getExtentSize();
		return new org_aswing_geom_IntRectangle(this._viewPosition.x,this._viewPosition.y,es.width,es.height);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org_aswing_geom_IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getViewportPane: function() {
		return this;
	}
	,__class__: org_aswing_JTree
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_horizontalBlockIncrement:"set_horizontalBlockIncrement",get_horizontalBlockIncrement:"get_horizontalBlockIncrement",set_horizontalUnitIncrement:"set_horizontalUnitIncrement",get_horizontalUnitIncrement:"get_horizontalUnitIncrement",set_verticalBlockIncrement:"set_verticalBlockIncrement",get_verticalBlockIncrement:"get_verticalBlockIncrement",set_verticalUnitIncrement:"set_verticalUnitIncrement",get_verticalUnitIncrement:"get_verticalUnitIncrement",set_viewPosition:"set_viewPosition",get_viewPosition:"get_viewPosition",set_expandsSelectedPaths:"set_expandsSelectedPaths",get_expandsSelectedPaths:"get_expandsSelectedPaths",set_toggleClickCount:"set_toggleClickCount",get_toggleClickCount:"get_toggleClickCount",set_scrollsOnExpand:"set_scrollsOnExpand",get_scrollsOnExpand:"get_scrollsOnExpand",set_invokesStopCellEditing:"set_invokesStopCellEditing",get_invokesStopCellEditing:"get_invokesStopCellEditing",set_visibleRowCount:"set_visibleRowCount",get_visibleRowCount:"get_visibleRowCount",set_editable:"set_editable",get_editable:"get_editable",set_cellEditor:"set_cellEditor",get_cellEditor:"get_cellEditor",set_selectionBackground:"set_selectionBackground",get_selectionBackground:"get_selectionBackground",set_selectionForeground:"set_selectionForeground",get_selectionForeground:"get_selectionForeground",set_fixedCellWidth:"set_fixedCellWidth",get_fixedCellWidth:"get_fixedCellWidth",set_rowHeight:"set_rowHeight",get_rowHeight:"get_rowHeight",set_cellFactory:"set_cellFactory",get_cellFactory:"get_cellFactory",set_rootVisible:"set_rootVisible",get_rootVisible:"get_rootVisible",set_selectionModel:"set_selectionModel",get_selectionModel:"get_selectionModel",set_model:"set_model",get_model:"get_model"})
});
var org_aswing_JViewport = function(view,fitViewWidth,fitViewHeight) {
	if(fitViewHeight == null) fitViewHeight = false;
	if(fitViewWidth == null) fitViewWidth = false;
	org_aswing_Container.call(this);
	this.setName("JViewport");
	this._fitViewWidth = fitViewWidth;
	this._fitViewHeight = fitViewHeight;
	this._verticalUnitIncrement = -2147483648;
	this._verticalBlockIncrement = -2147483648;
	this._horizontalUnitIncrement = -2147483648;
	this._horizontalBlockIncrement = -2147483648;
	this.set_verticalAlignment(0);
	this._horizontalAlignment = 0;
	if(view != null) this.setView(view);
	this.setLayout(new org_aswing_ViewportLayout());
	this.updateUI();
	this.gestureManager = new jive_events_GestureManager(this,0);
	this.addEventListener(jive_events_TransformGestureEvent.GESTURE_PAN,$bind(this,this.onPan));
};
$hxClasses["org.aswing.JViewport"] = org_aswing_JViewport;
org_aswing_JViewport.__name__ = ["org","aswing","JViewport"];
org_aswing_JViewport.__interfaces__ = [org_aswing_Viewportable];
org_aswing_JViewport.__super__ = org_aswing_Container;
org_aswing_JViewport.prototype = $extend(org_aswing_Container.prototype,{
	get_verticalUnitIncrement: function() {
		return this.getVerticalUnitIncrement();
	}
	,set_verticalUnitIncrement: function(v) {
		this.setVerticalUnitIncrement(v);
		return v;
	}
	,get_verticalBlockIncrement: function() {
		return this.getVerticalBlockIncrement();
	}
	,set_verticalBlockIncrement: function(v) {
		this.setVerticalBlockIncrement(v);
		return v;
	}
	,get_horizontalUnitIncrement: function() {
		return this.getHorizontalUnitIncrement();
	}
	,set_horizontalUnitIncrement: function(v) {
		this.setHorizontalUnitIncrement(v);
		return v;
	}
	,get_horizontalBlockIncrement: function() {
		return this.getHorizontalBlockIncrement();
	}
	,set_horizontalBlockIncrement: function(v) {
		this.setHorizontalBlockIncrement(v);
		return v;
	}
	,get_fitViewHeight: function() {
		return this.isTracksHeight();
	}
	,set_fitViewHeight: function(v) {
		this.setTracksHeight(v);
		return v;
	}
	,get_fitViewWidth: function() {
		return this.isTracksWidth();
	}
	,set_fitViewWidth: function(v) {
		this.setTracksWidth(v);
		return v;
	}
	,get_verticalAlignment: function() {
		return this.getVerticalAlignment();
	}
	,set_verticalAlignment: function(v) {
		this.setVerticalAlignment(v);
		return v;
	}
	,get_horizontalAlignment: function() {
		return this.getHorizontalAlignment();
	}
	,set_horizontalAlignment: function(v) {
		this.setHorizontalAlignment(v);
		return v;
	}
	,get_view: function() {
		return this.getView();
	}
	,set_view: function(v) {
		this.setView(v);
		return v;
	}
	,get_viewPosition: function() {
		return this.getViewPosition();
	}
	,set_viewPosition: function(v) {
		this.setViewPosition(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicViewportUI;
	}
	,getUIClassID: function() {
		return "ViewportUI";
	}
	,setLayout: function(layout) {
		if(js_Boot.__instanceof(layout,org_aswing_ViewportLayout)) org_aswing_Container.prototype.setLayout.call(this,layout); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Only on set ViewportLayout to JViewport"));
	}
	,setTracksWidth: function(b) {
		if(b != this._fitViewWidth) {
			this._fitViewWidth = b;
			this.revalidate();
		}
	}
	,isTracksWidth: function() {
		return this._fitViewWidth;
	}
	,setTracksHeight: function(b) {
		if(this._fitViewHeight != b) {
			this._fitViewHeight = b;
			this.revalidate();
		}
	}
	,isTracksHeight: function() {
		return this._fitViewHeight;
	}
	,getVerticalAlignment: function() {
		return this._verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this._verticalAlignment) return; else {
			this._verticalAlignment = alignment;
			this.setViewPosition(this.getViewPosition());
		}
	}
	,getHorizontalAlignment: function() {
		return this._horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this._horizontalAlignment) return; else {
			this._horizontalAlignment = alignment;
			this.setViewPosition(this.getViewPosition());
		}
	}
	,setView: function(view) {
		if(this._view != view) {
			this._view = view;
			this.removeAll();
			if(view != null) this.insertImp(-1,this._view);
			this.fireStateChanged();
		}
	}
	,getView: function() {
		return this._view;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this._verticalUnitIncrement != increment) {
			this._verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this._verticalBlockIncrement != increment) {
			this._verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this._horizontalUnitIncrement != increment) {
			this._horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this._horizontalBlockIncrement != increment) {
			this._horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,append: function(com,constraints) {
		this.setView(com);
	}
	,insert: function(i,com,constraints) {
		this.setView(com);
	}
	,getVerticalUnitIncrement: function() {
		if(this._verticalUnitIncrement != -2147483648) return this._verticalUnitIncrement; else return Std["int"](Math.max(this.getExtentSize().height / 40,1));
	}
	,getVerticalBlockIncrement: function() {
		if(this._verticalBlockIncrement != -2147483648) return this._verticalBlockIncrement; else return this.getExtentSize().height - 1;
	}
	,getHorizontalUnitIncrement: function() {
		if(this._horizontalUnitIncrement != -2147483648) return this._horizontalUnitIncrement; else return Std["int"](Math.max(this.getExtentSize().width / 40,1));
	}
	,getHorizontalBlockIncrement: function() {
		if(this._horizontalBlockIncrement != -2147483648) return this._horizontalBlockIncrement; else return this.getExtentSize().width - 1;
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		if(this._view == null) return new org_aswing_geom_IntDimension(); else if(this.isTracksWidth() && this.isTracksHeight()) return this.getExtentSize(); else {
			var viewSize = this._view.getPreferredSize();
			var extentSize = this.getExtentSize();
			if(this.isTracksWidth()) viewSize.width = extentSize.width; else if(this.isTracksHeight()) viewSize.height = extentSize.height;
			return viewSize;
		}
	}
	,getViewPosition: function() {
		if(this._view != null) {
			var p = this._view.getLocation();
			var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
			p.x = ir.x - p.x;
			p.y = ir.y - p.y;
			return p;
		} else return new org_aswing_geom_IntPoint(0,0);
	}
	,getVisibleRect: function() {
		var p = this.getViewPosition();
		var s = this.getExtentSize();
		return new org_aswing_geom_IntRectangle(p.x,p.y,s.width,s.height);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!p.equals(this.getViewPosition())) {
			var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
			if(this._view != null) this._view.setLocationXY(ir.x - p.x,ir.y - p.y);
			this.fireStateChanged(programmatic);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org_aswing_geom_IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,ensureRectVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		contentRect = contentRect.clone();
		var vp = this.getViewPosition();
		var es = this.getExtentSize();
		var vs = this.getViewSize();
		var range = new org_aswing_geom_IntRectangle(vp.x,vp.y,es.width,es.height);
		if(contentRect.x < 0) {
			contentRect.width += contentRect.x;
			contentRect.x = 0;
		}
		if(contentRect.y < 0) {
			contentRect.height += contentRect.y;
			contentRect.y = 0;
		}
		if(contentRect.x + contentRect.width > vs.width) contentRect.width = vs.width - contentRect.x;
		if(contentRect.y + contentRect.height > vs.height) contentRect.height = vs.height - contentRect.y;
		var newVP = vp.clone();
		if(contentRect.x + contentRect.width > range.x + range.width) newVP.x = contentRect.x + contentRect.width - es.width;
		if(contentRect.y + contentRect.height > range.y + range.height) newVP.y = contentRect.y + contentRect.height - es.height;
		if(contentRect.x < range.x) newVP.x = contentRect.x;
		if(contentRect.y < range.y) newVP.y = contentRect.y;
		this.setViewPosition(newVP,programmatic);
	}
	,scrollVertical: function(delta) {
		this.setViewPosition(this.getViewPosition().move(0,delta));
	}
	,scrollHorizontal: function(delta) {
		this.setViewPosition(this.getViewPosition().move(delta,0));
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org_aswing_geom_IntPoint(2147483647,0));
	}
	,restrictionViewPos: function(p) {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		if(showSize.width < viewSize.width) p.x = Std["int"](Math.max(0,Math.min(viewSize.width - showSize.width,p.x))); else if(showSize.width > viewSize.width) {
			if(this._horizontalAlignment == 0) p.x = -((showSize.width - viewSize.width) / 2 | 0); else if(this._horizontalAlignment == 4) p.x = -(showSize.width - viewSize.width); else p.x = 0;
		} else p.x = 0;
		if(showSize.height < viewSize.height) p.y = Std["int"](Math.max(0,Math.min(viewSize.height - showSize.height,p.y))); else if(showSize.height > viewSize.height) {
			if(this.get_verticalAlignment() == 0) p.y = -((showSize.height - viewSize.height) / 2 | 0); else if(this.get_verticalAlignment() == 3) p.y = -(showSize.height - viewSize.height); else p.y = 0;
		} else p.y = 0;
		return p;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("stateChanged",programmatic));
	}
	,getViewportPane: function() {
		return this;
	}
	,onPan: function(e) {
		var pos = this.getViewPosition();
		pos.y -= e.offsetY | 0;
		pos.x -= e.offsetX | 0;
		this.setViewPosition(pos);
	}
	,__class__: org_aswing_JViewport
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_viewPosition:"set_viewPosition",get_viewPosition:"get_viewPosition",set_view:"set_view",get_view:"get_view",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_fitViewWidth:"set_fitViewWidth",get_fitViewWidth:"get_fitViewWidth",set_fitViewHeight:"set_fitViewHeight",get_fitViewHeight:"get_fitViewHeight",set_horizontalBlockIncrement:"set_horizontalBlockIncrement",get_horizontalBlockIncrement:"get_horizontalBlockIncrement",set_horizontalUnitIncrement:"set_horizontalUnitIncrement",get_horizontalUnitIncrement:"get_horizontalUnitIncrement",set_verticalBlockIncrement:"set_verticalBlockIncrement",get_verticalBlockIncrement:"get_verticalBlockIncrement",set_verticalUnitIncrement:"set_verticalUnitIncrement",get_verticalUnitIncrement:"get_verticalUnitIncrement"})
});
var org_aswing_KeyMap = function() {
	this.map = new haxe_ds_StringMap();
};
$hxClasses["org.aswing.KeyMap"] = org_aswing_KeyMap;
org_aswing_KeyMap.__name__ = ["org","aswing","KeyMap"];
org_aswing_KeyMap.getCodec = function(key) {
	return org_aswing_KeyMap.getCodecWithKeySequence(key.getCodeSequence());
};
org_aswing_KeyMap.getCodecWithKeySequence = function(keySequence) {
	return keySequence.join("|");
};
org_aswing_KeyMap.prototype = {
	registerKeyAction: function(key,action) {
		this.map.set(org_aswing_KeyMap.getCodec(key),new org_aswing_KeyAction(key,action));
	}
	,unregisterKeyAction: function(key) {
		this.map.remove(org_aswing_KeyMap.getCodec(key));
	}
	,getKeyAction: function(key) {
		return this.getKeyActionWithCodec(org_aswing_KeyMap.getCodec(key));
	}
	,getKeyActionWithCodec: function(codec) {
		var ka = this.map.get(codec);
		if(ka != null) return ka.action;
		return null;
	}
	,fireKeyAction: function(keySequence) {
		var codec = org_aswing_KeyMap.getCodecWithKeySequence(keySequence);
		var action = this.getKeyActionWithCodec(codec);
		if(action != null) {
			action();
			return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.map.exists(org_aswing_KeyMap.getCodec(key));
	}
	,__class__: org_aswing_KeyMap
};
var org_aswing_KeyAction = function(key,action) {
	this.key = key;
	this.action = action;
};
$hxClasses["org.aswing.KeyAction"] = org_aswing_KeyAction;
org_aswing_KeyAction.__name__ = ["org","aswing","KeyAction"];
org_aswing_KeyAction.prototype = {
	__class__: org_aswing_KeyAction
};
var org_aswing_KeyType = function() { };
$hxClasses["org.aswing.KeyType"] = org_aswing_KeyType;
org_aswing_KeyType.__name__ = ["org","aswing","KeyType"];
org_aswing_KeyType.prototype = {
	__class__: org_aswing_KeyType
};
var org_aswing_KeyboardManager = function() {
	this.enabled = true;
	this.inited = false;
	this.keyJustActed = false;
	this.keySequence = new org_aswing_util_ArrayList();
	this.keymap = new org_aswing_KeyMap();
	this.mnemonicModifier = null;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.KeyboardManager"] = org_aswing_KeyboardManager;
org_aswing_KeyboardManager.__name__ = ["org","aswing","KeyboardManager"];
org_aswing_KeyboardManager.getDefaultMnemonicModifier = function() {
	return org_aswing_KeyboardManager.defaultMnemonicModifier.slice();
};
org_aswing_KeyboardManager.setDefaultMnemonicModifier = function(keyCodes) {
	org_aswing_KeyboardManager.defaultMnemonicModifier = keyCodes.slice();
};
org_aswing_KeyboardManager.__super__ = openfl_events_EventDispatcher;
org_aswing_KeyboardManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	init: function(root) {
		if(this.inited != true) {
			this.inited = true;
			root.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false,0,true);
			root.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false,0,true);
			root.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.__deactived),false,0,true);
		} else throw new js__$Boot_HaxeError(new org_aswing_error_Error("This KeyboardManager was already inited!"));
	}
	,registerKeyAction: function(key,action) {
		this.keymap.registerKeyAction(key,action);
	}
	,unregisterKeyAction: function(key) {
		this.keymap.unregisterKeyAction(key);
	}
	,getKeyMap: function() {
		return this.keymap;
	}
	,isKeyDown: function(keyCode) {
		return this.keySequence.contains(keyCode);
	}
	,setMnemonicModifier: function(keyCodes) {
		if(keyCodes == null) keyCodes = null; else this.mnemonicModifier = keyCodes.slice();
	}
	,setEnabled: function(b) {
		this.enabled = b;
		if(b != true) this.keySequence.clear();
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,getMnemonicModifier: function() {
		if(this.mnemonicModifier == null) return org_aswing_KeyboardManager.getDefaultMnemonicModifier(); else return this.mnemonicModifier.slice();
	}
	,isMnemonicModifierDown: function() {
		var mm = this.getMnemonicModifier();
		var _g1 = 0;
		var _g = mm.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.isKeyDown(mm[i])) return false;
		}
		return mm.length > 0;
	}
	,isKeyJustActed: function() {
		return this.keyJustActed;
	}
	,__onKeyDown: function(e) {
		if(this.enabled != true) return;
		this.dispatchEvent(e);
		var code = e.keyCode;
		if(!this.keySequence.contains(code)) this.keySequence.append(code);
		this.keyJustActed = false;
		if(this.keymap.fireKeyAction(this.keySequence.toArray())) this.keyJustActed = true;
	}
	,__onKeyUp: function(e) {
		if(this.enabled != true) return;
		this.dispatchEvent(e);
		var code = e.keyCode;
		this.keySequence.remove(code);
		if(e.ctrlKey != true) this.keySequence.remove(org_aswing_AWKeyboard.CONTROL);
		if(e.shiftKey != true) this.keySequence.remove(org_aswing_AWKeyboard.SHIFT);
	}
	,__deactived: function(e) {
		this.keySequence.clear();
	}
	,__class__: org_aswing_KeyboardManager
});
var org_aswing_ListModel = function() { };
$hxClasses["org.aswing.ListModel"] = org_aswing_ListModel;
org_aswing_ListModel.__name__ = ["org","aswing","ListModel"];
org_aswing_ListModel.prototype = {
	__class__: org_aswing_ListModel
};
var org_aswing_MenuSelectionManager = function() {
	this.selection = new org_aswing_util_ArrayList();
	this.keyEnabled = true;
	this.lastTriggerRef = new org_aswing_util_WeakReference();
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.MenuSelectionManager"] = org_aswing_MenuSelectionManager;
org_aswing_MenuSelectionManager.__name__ = ["org","aswing","MenuSelectionManager"];
org_aswing_MenuSelectionManager.instance = null;
org_aswing_MenuSelectionManager.defaultManager = function() {
	if(org_aswing_MenuSelectionManager.instance == null) org_aswing_MenuSelectionManager.instance = new org_aswing_MenuSelectionManager();
	return org_aswing_MenuSelectionManager.instance;
};
org_aswing_MenuSelectionManager.setDefaultManager = function(m) {
	org_aswing_MenuSelectionManager.instance = m;
};
org_aswing_MenuSelectionManager.__super__ = openfl_events_EventDispatcher;
org_aswing_MenuSelectionManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	setKeyEnabled: function(b) {
		this.keyEnabled = b;
	}
	,isKeyEnabled: function() {
		return this.keyEnabled;
	}
	,setSelectedPath: function(trigger,path,programmatic) {
		var i;
		var c;
		var currentSelectionCount = this.selection.size();
		var firstDifference = 0;
		if(path == null) path = [];
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(i1 < currentSelectionCount && this.selection.get(i1) == path[i1]) firstDifference++; else break;
		}
		i = currentSelectionCount - 1;
		while(i >= firstDifference) {
			var me = org_aswing_AsWingUtils["as"](this.selection.get(i),org_aswing_MenuElement);
			this.selection.removeAt(i);
			me.menuSelectionChanged(false);
			i--;
		}
		var _g11 = firstDifference;
		var _g2 = path.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			var tm = org_aswing_AsWingUtils["as"](path[i2],org_aswing_MenuElement);
			if(tm != null) {
				this.selection.append(tm);
				tm.menuSelectionChanged(true);
			}
		}
		if(firstDifference < path.length - 1 || currentSelectionCount != path.length) this.fireSelectionChanged(programmatic);
		var lastTrigger = this.lastTriggerRef.get_value();
		if(this.selection.size() == 0) {
			if(lastTrigger != null) {
				lastTrigger.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown));
				this.lastTriggerRef.clear();
			}
		} else if(lastTrigger != trigger) {
			if(lastTrigger != null) lastTrigger.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown));
			lastTrigger = trigger;
			if(trigger != null) trigger.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown),false,0,false);
			this.lastTriggerRef.set_value(trigger);
		}
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,getSelectedPath: function() {
		return this.selection.toArray();
	}
	,clearSelectedPath: function(programmatic) {
		if(this.selection.size() > 0) this.setSelectedPath(null,null,true);
	}
	,isComponentPartOfCurrentMenu: function(c) {
		if(this.selection.size() > 0) {
			var me = org_aswing_AsWingUtils["as"](this.selection.get(0),org_aswing_MenuElement);
			return this.isComponentPartOfMenu(me,c);
		} else return false;
	}
	,isNavigatingKey: function(code) {
		return this.isPageNavKey(code) || this.isItemNavKey(code);
	}
	,isPageNavKey: function(code) {
		return this.isPrevPageKey(code) || this.isNextPageKey(code);
	}
	,isItemNavKey: function(code) {
		return this.isPrevItemKey(code) || this.isNextItemKey(code);
	}
	,isPrevPageKey: function(code) {
		return code == org_aswing_AWKeyboard.LEFT;
	}
	,isPrevItemKey: function(code) {
		return code == org_aswing_AWKeyboard.UP;
	}
	,isNextPageKey: function(code) {
		return code == org_aswing_AWKeyboard.RIGHT;
	}
	,isNextItemKey: function(code) {
		return code == org_aswing_AWKeyboard.DOWN;
	}
	,isEnterKey: function(code) {
		return code == org_aswing_AWKeyboard.ENTER;
	}
	,isEscKey: function(code) {
		return code == org_aswing_AWKeyboard.TAB || code == org_aswing_AWKeyboard.ESCAPE;
	}
	,nextSubElement: function(parent,sub) {
		return this.besideSubElement(parent,sub,1);
	}
	,prevSubElement: function(parent,sub) {
		return this.besideSubElement(parent,sub,-1);
	}
	,besideSubElement: function(parent,sub,dir) {
		if(parent == null || sub == null) return null;
		var subs = parent.getSubElements();
		var index = org_aswing_util_ArrayUtils.indexInArray(subs,sub);
		if(index < 0) return null;
		index += dir | 0;
		if(index >= subs.length) index = 0; else if(index < 0) index = subs.length - 1;
		return org_aswing_AsWingUtils["as"](subs[index],org_aswing_MenuElement);
	}
	,isComponentPartOfMenu: function(root,c) {
		var children;
		var i;
		var d;
		if(root == null) return false;
		if(root.getMenuComponent() == c) return true; else {
			children = root.getSubElements();
			var _g1 = 0;
			var _g = children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				var me = org_aswing_AsWingUtils["as"](children[i1],org_aswing_MenuElement);
				if(me != null && this.isComponentPartOfMenu(me,c)) return true;
			}
		}
		return false;
	}
	,fireSelectionChanged: function(programmatic) {
		this.dispatchEvent(new org_aswing_event_InteractiveEvent("selectionChanged",programmatic));
	}
	,__onMSMKeyDown: function(e) {
		if(this.selection.size() == 0 || !this.isKeyEnabled()) return;
		var code = e.keyCode;
		if(this.isEscKey(code)) {
			this.setSelectedPath(null,null,true);
			return;
		}
		var element = org_aswing_AsWingUtils["as"](this.selection.last(),org_aswing_MenuElement);
		element.processKeyEvent(code);
	}
	,__class__: org_aswing_MenuSelectionManager
});
var org_aswing_MutableListModel = function() { };
$hxClasses["org.aswing.MutableListModel"] = org_aswing_MutableListModel;
org_aswing_MutableListModel.__name__ = ["org","aswing","MutableListModel"];
org_aswing_MutableListModel.__interfaces__ = [org_aswing_ListModel];
org_aswing_MutableListModel.prototype = {
	__class__: org_aswing_MutableListModel
};
var org_aswing_RepaintManager = function() {
	if(org_aswing_RepaintManager.instance != null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("Singleton can't be create more than once!"));
	this.repaintQueue = [];
	this.validateQueue = [];
	this.renderring = false;
	this.alwaysUseTimer = false;
	this.timer = new org_aswing_util_Timer(20,0);
	this.timer.addEventListener("act",$bind(this,this.__timerRender));
};
$hxClasses["org.aswing.RepaintManager"] = org_aswing_RepaintManager;
org_aswing_RepaintManager.__name__ = ["org","aswing","RepaintManager"];
org_aswing_RepaintManager.instance = null;
org_aswing_RepaintManager.getInstance = function() {
	if(org_aswing_RepaintManager.instance == null) org_aswing_RepaintManager.instance = new org_aswing_RepaintManager();
	return org_aswing_RepaintManager.instance;
};
org_aswing_RepaintManager.prototype = {
	setAlwaysUseTimer: function(b,delay) {
		if(delay == null) delay = 19;
		this.alwaysUseTimer = b;
		this.timer.setDelay(delay);
	}
	,addRepaintComponent: function(com) {
		this.repaintQueue.push(com);
		this.renderLater(com);
	}
	,addInvalidComponent: function(com) {
		var validateRoot = this.getValidateRootComponent(com);
		if(validateRoot != null) {
			this.validateQueue.push(validateRoot);
			this.renderLater(com);
		}
	}
	,addInvalidRootComponent: function(com) {
		this.validateQueue.push(com);
		this.renderLater(com);
	}
	,renderLater: function(c) {
		var st = org_aswing_AsWingManager.getStage();
		if(this.alwaysUseTimer || st == null || this.renderring) {
			if(this.timer.isRunning() != true) this.timer.restart();
		} else {
			st.addEventListener(openfl_events_Event.RENDER,$bind(this,this.__render),false,0,true);
			st.invalidate();
		}
	}
	,getValidateRootComponent: function(com) {
		var validateRoot = null;
		var i;
		i = com;
		while(i != null) {
			if(i.isValidateRoot()) {
				validateRoot = i;
				break;
			}
			i = i.getParent();
		}
		i = validateRoot;
		while(i != null) {
			if(!i.isVisible()) {
			}
			i = i.getParent();
		}
		return validateRoot;
	}
	,__timerRender: function(e) {
		this.__render();
	}
	,__render: function(e) {
		if(e != null) {
			var st = org_aswing_AsWingManager.getStage();
			st.removeEventListener(openfl_events_Event.RENDER,$bind(this,this.__render));
		}
		var i;
		var n;
		var com;
		this.renderring = true;
		var processValidates = this.validateQueue.slice();
		this.validateQueue = [];
		n = processValidates.length;
		i = -1;
		if(n > 0) {
		}
		while(++i < n) {
			com = processValidates[i];
			com.validate();
		}
		var processRepaints = this.repaintQueue.slice();
		this.repaintQueue = [];
		n = processRepaints.length;
		i = -1;
		while(++i < n) {
			com = processRepaints[i];
			com.paintImmediately();
		}
		this.renderring = false;
	}
	,__class__: org_aswing_RepaintManager
};
var org_aswing_ScrollPaneLayout = function(style) {
	if(style == null) style = 0;
	this.style = style;
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.ScrollPaneLayout"] = org_aswing_ScrollPaneLayout;
org_aswing_ScrollPaneLayout.__name__ = ["org","aswing","ScrollPaneLayout"];
org_aswing_ScrollPaneLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_ScrollPaneLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	minimumLayoutSize: function(target) {
		if(js_Boot.__instanceof(target,org_aswing_JScrollPane)) {
			var scrollPane;
			scrollPane = js_Boot.__instanceof(target,org_aswing_JScrollPane)?target:null;
			var size = this.getScrollBarsSize(scrollPane);
			var i = scrollPane.getInsets();
			size = size.increaseSize(i.getOutsideSize());
			var viewport = scrollPane.getViewport();
			if(viewport != null) {
				i = viewport.getViewportPane().getInsets();
				size.increaseSize(i.getOutsideSize());
				size.increaseSize(viewport.getViewportPane().getMinimumSize());
			}
			return size;
		} else return org_aswing_EmptyLayout.prototype.minimumLayoutSize.call(this,target);
	}
	,getScrollBarsSize: function(scrollPane) {
		var vsb = scrollPane.getVerticalScrollBar();
		var hsb = scrollPane.getHorizontalScrollBar();
		var size = new org_aswing_geom_IntDimension();
		if(vsb != null && scrollPane.getVerticalScrollBarPolicy() == 2) size.width = vsb.getPreferredWidth();
		if(hsb != null && scrollPane.getHorizontalScrollBarPolicy() == 2) size.height = hsb.getPreferredHeight();
		return size;
	}
	,preferredLayoutSize: function(target) {
		if(js_Boot.__instanceof(target,org_aswing_JScrollPane)) {
			var scrollPane;
			scrollPane = js_Boot.__instanceof(target,org_aswing_JScrollPane)?target:null;
			var i = scrollPane.getInsets();
			var size = i.getOutsideSize();
			size.increaseSize(this.getScrollBarsSize(scrollPane));
			var viewport = scrollPane.getViewport();
			if(viewport != null) size.increaseSize(viewport.getViewportPane().getPreferredSize());
			return size;
		} else return org_aswing_EmptyLayout.prototype.preferredLayoutSize.call(this,target);
	}
	,layoutContainer: function(target) {
		if(js_Boot.__instanceof(target,org_aswing_JScrollPane)) {
			var scrollPane;
			scrollPane = js_Boot.__instanceof(target,org_aswing_JScrollPane)?target:null;
			var viewport = scrollPane.getViewport();
			var vScrollBar = scrollPane.getVerticalScrollBar();
			var hScrollBar = scrollPane.getHorizontalScrollBar();
			var fcd = scrollPane.getSize();
			var insets = scrollPane.getInsets();
			var cb = insets.getInsideBounds(fcd.getBounds());
			var vPreferSize = vScrollBar.getPreferredSize();
			var hPreferSize = hScrollBar.getPreferredSize();
			var vx;
			var vy;
			var vh;
			var vw;
			var hx;
			var hy;
			var hw;
			var hh;
			var vpPane = viewport.getViewportPane();
			var wdis = 0;
			var hdis = 0;
			if(scrollPane.getHorizontalScrollBarPolicy() == 2) hdis = hPreferSize.height;
			if(scrollPane.getVerticalScrollBarPolicy() == 2) wdis = vPreferSize.width;
			viewport.setViewportTestSize(new org_aswing_geom_IntDimension(cb.width - wdis,cb.height - hdis));
			var showSize = viewport.getExtentSize();
			var viewSize = viewport.getViewSize();
			vw = vPreferSize.width;
			hh = hPreferSize.height;
			if(scrollPane.getHorizontalScrollBarPolicy() == 1) {
				hScrollBar.setVisible(false);
				hh = 0;
			} else if(viewSize.width <= showSize.width) {
				if(hScrollBar.isEnabled()) hScrollBar.setEnabled(false);
				if(scrollPane.getHorizontalScrollBarPolicy() != 2) {
					hScrollBar.setVisible(false);
					hh = 0;
					viewport.setViewPosition(new org_aswing_geom_IntPoint(0,viewport.getViewPosition().y));
				} else hScrollBar.setVisible(true);
			} else {
				hScrollBar.setVisible(true);
				if(!hScrollBar.isEnabled()) hScrollBar.setEnabled(true);
			}
			if(hh != hdis) {
				viewport.setViewportTestSize(new org_aswing_geom_IntDimension(cb.width,cb.height - hh));
				showSize = viewport.getExtentSize();
				viewSize = viewport.getViewSize();
			}
			if(scrollPane.getVerticalScrollBarPolicy() == 1) {
				vScrollBar.setVisible(false);
				vw = 0;
			} else if(viewSize.height <= showSize.height) {
				vScrollBar.setEnabled(false);
				if(scrollPane.getVerticalScrollBarPolicy() != 2) {
					vScrollBar.setVisible(false);
					vw = 0;
					viewport.setViewPosition(new org_aswing_geom_IntPoint(viewport.getViewPosition().x,0));
				} else vScrollBar.setVisible(true);
			} else {
				vScrollBar.setVisible(true);
				if(!vScrollBar.isEnabled()) vScrollBar.setEnabled(true);
			}
			if(vw != wdis) {
				viewport.setViewportTestSize(new org_aswing_geom_IntDimension(cb.width - vw,cb.height - hh));
				showSize = viewport.getExtentSize();
				viewSize = viewport.getViewSize();
			}
			if(viewSize.width > showSize.width && scrollPane.getHorizontalScrollBarPolicy() == 0) {
				if(!hScrollBar.isVisible()) {
					hScrollBar.setEnabled(true);
					hScrollBar.setVisible(true);
					hh = hPreferSize.height;
					viewport.setViewportTestSize(new org_aswing_geom_IntDimension(cb.width - vw,cb.height - hh));
					showSize = viewport.getExtentSize();
					viewSize = viewport.getViewSize();
				}
			}
			var viewPortX = cb.x;
			var viewPortY = cb.y;
			if(this.style == 3) {
				vx = cb.x;
				vy = cb.y + hh;
				vh = cb.height - hh;
				hx = cb.x + vw;
				hy = cb.y;
				hw = cb.width - vw;
				viewPortY += hh;
				viewPortX += vw;
			} else if(this.style == 2) {
				vx = cb.x + cb.width - vw;
				vy = cb.y + hh;
				vh = cb.height - hh;
				hx = cb.x;
				hy = cb.y;
				hw = cb.width - vw;
				viewPortY += hh;
			} else if(this.style == 1) {
				vx = cb.x;
				vy = cb.y;
				vh = cb.height - hh;
				hx = cb.x + vw;
				hy = cb.y + cb.height - hh;
				hw = cb.width - vw;
				viewPortX += vw;
			} else {
				vx = cb.x + cb.width - vw;
				vy = cb.y;
				vh = cb.height - hh;
				hx = cb.x;
				hy = cb.y + cb.height - hh;
				hw = cb.width - vw;
			}
			if(vScrollBar.isVisible()) vScrollBar.setComBoundsXYWH(vx,vy,vw,vh);
			if(hScrollBar.isVisible()) hScrollBar.setComBoundsXYWH(hx,hy,hw,hh);
			vpPane.setComBoundsXYWH(viewPortX,viewPortY,cb.width - vw,cb.height - hh);
			if(hScrollBar.isVisible()) {
				hScrollBar.setValues(Std["int"](Math.max(Math.min(hScrollBar.getValue(),viewSize.width - showSize.width),0)),showSize.width,0,viewSize.width);
				hScrollBar.setUnitIncrement(viewport.getHorizontalUnitIncrement());
				hScrollBar.setBlockIncrement(viewport.getHorizontalBlockIncrement());
			}
			if(vScrollBar.isVisible()) {
				vScrollBar.setValues(Std["int"](Math.max(Math.min(vScrollBar.getValue(),viewSize.height - showSize.height),0)),showSize.height,0,viewSize.height);
				vScrollBar.setUnitIncrement(viewport.getVerticalUnitIncrement());
				vScrollBar.setBlockIncrement(viewport.getVerticalBlockIncrement());
			}
		}
	}
	,__class__: org_aswing_ScrollPaneLayout
});
var org_aswing_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_Sprite.call(this);
	this.upState = upState;
	this.overState = overState;
	this.downState = downState;
	this.hitTestState = hitTestState;
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseGoDown));
	this.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.onMouseOver));
};
$hxClasses["org.aswing.SimpleButton"] = org_aswing_SimpleButton;
org_aswing_SimpleButton.__name__ = ["org","aswing","SimpleButton"];
org_aswing_SimpleButton.__super__ = openfl_display_Sprite;
org_aswing_SimpleButton.prototype = $extend(openfl_display_Sprite.prototype,{
	show: function() {
		this.clear();
		this.addChild(this.upState);
	}
	,clear: function() {
		while(this.get_numChildren() > 0) this.removeChildAt(0);
	}
	,onMouseOver: function(event) {
		this._over = true;
		this.clear();
		this.addChild(this.overState);
		this.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.onMouseOut));
	}
	,onMouseOut: function(event) {
		this._over = false;
		if(!this._down) {
			this.clear();
			this.addChild(this.upState);
		}
		this.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.onMouseOut));
	}
	,onMouseGoDown: function(event) {
		this._down = true;
		this.clear();
		this.addChild(this.downState);
		org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseGoUp));
	}
	,onMouseGoUp: function(event) {
		this.clear();
		this.addChild(this.upState);
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseGoUp));
	}
	,__class__: org_aswing_SimpleButton
});
var org_aswing_SimpleButtonIcon = function(asset) {
	this.asset = asset;
	this.width = Math.ceil(asset.get_width());
	this.height = Math.ceil(asset.get_height());
	if(org_aswing_SimpleButtonIcon.disabledFilters == null) {
		var cmatrix_0 = 0.3;
		var cmatrix_1 = 0.59;
		var cmatrix_2 = 0.11;
		var cmatrix_3 = 0;
		var cmatrix_4 = 0;
		var cmatrix_5 = 0.3;
		var cmatrix_6 = 0.59;
		var cmatrix_7 = 0.11;
		var cmatrix_8 = 0;
		var cmatrix_9 = 0;
		var cmatrix_10 = 0.3;
		var cmatrix_11 = 0.59;
		var cmatrix_12 = 0.11;
		var cmatrix_13 = 0;
		var cmatrix_14 = 0;
		var cmatrix_15 = 0;
		var cmatrix_16 = 0;
		var cmatrix_17 = 0;
		var cmatrix_18 = 1;
		var cmatrix_19 = 0;
	}
};
$hxClasses["org.aswing.SimpleButtonIcon"] = org_aswing_SimpleButtonIcon;
org_aswing_SimpleButtonIcon.__name__ = ["org","aswing","SimpleButtonIcon"];
org_aswing_SimpleButtonIcon.__interfaces__ = [org_aswing_Icon];
org_aswing_SimpleButtonIcon.disabledFilters = null;
org_aswing_SimpleButtonIcon.prototype = {
	getDisplay: function(c) {
		return this.asset;
	}
	,getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.height;
	}
	,updateIcon: function(c,g,x,y) {
		this.asset.set_x(x);
		this.asset.set_y(y);
		this.asset.set_filters(c.isEnabled()?org_aswing_SimpleButtonIcon.eabledFilters:org_aswing_SimpleButtonIcon.disabledFilters);
	}
	,__class__: org_aswing_SimpleButtonIcon
};
var org_aswing_SimpleButtonIconToggle = function(asset) {
	this.asset = asset;
	this.width = Math.ceil(asset.get_width());
	this.height = Math.ceil(asset.get_height());
	asset.mouseEnabled = false;
	this.upState = asset.upState;
	this.overState = asset.overState;
	this.downState = asset.downState;
	if(org_aswing_SimpleButtonIconToggle.disabledFilters == null) {
		var cmatrix_0 = 0.3;
		var cmatrix_1 = 0.59;
		var cmatrix_2 = 0.11;
		var cmatrix_3 = 0;
		var cmatrix_4 = 0;
		var cmatrix_5 = 0.3;
		var cmatrix_6 = 0.59;
		var cmatrix_7 = 0.11;
		var cmatrix_8 = 0;
		var cmatrix_9 = 0;
		var cmatrix_10 = 0.3;
		var cmatrix_11 = 0.59;
		var cmatrix_12 = 0.11;
		var cmatrix_13 = 0;
		var cmatrix_14 = 0;
		var cmatrix_15 = 0;
		var cmatrix_16 = 0;
		var cmatrix_17 = 0;
		var cmatrix_18 = 1;
		var cmatrix_19 = 0;
	}
};
$hxClasses["org.aswing.SimpleButtonIconToggle"] = org_aswing_SimpleButtonIconToggle;
org_aswing_SimpleButtonIconToggle.__name__ = ["org","aswing","SimpleButtonIconToggle"];
org_aswing_SimpleButtonIconToggle.__interfaces__ = [org_aswing_Icon];
org_aswing_SimpleButtonIconToggle.disabledFilters = null;
org_aswing_SimpleButtonIconToggle.prototype = {
	getDisplay: function(c) {
		return this.asset;
	}
	,getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.height;
	}
	,updateIcon: function(c,g,x,y) {
		this.asset.set_x(x);
		this.asset.set_y(y);
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		var state = null;
		if(b != null) {
			var model = b.getModel();
			if(model.isPressed() && model.isArmed() || model.isSelected()) state = this.downState; else if(b.isRollOverEnabled() && model.isRollOver()) state = this.overState; else state = this.upState;
			this.asset.upState = state;
			this.asset.set_filters(model.isEnabled()?org_aswing_SimpleButtonIconToggle.eabledFilters:org_aswing_SimpleButtonIconToggle.disabledFilters);
		}
	}
	,__class__: org_aswing_SimpleButtonIconToggle
};
var org_aswing_SoftBoxLayout = function(axis,gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	if(axis == null) axis = 0;
	this.setAxis(axis);
	this.setGap(gap);
	this.setAlign(align);
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.SoftBoxLayout"] = org_aswing_SoftBoxLayout;
org_aswing_SoftBoxLayout.__name__ = ["org","aswing","SoftBoxLayout"];
org_aswing_SoftBoxLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_SoftBoxLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	setAxis: function(axis) {
		if(axis == null) axis = 0;
		this.axis = axis;
	}
	,getAxis: function() {
		return this.axis;
	}
	,setGap: function(gap) {
		if(gap == null) gap = 0;
		this.gap = gap;
	}
	,getGap: function() {
		return this.gap;
	}
	,setAlign: function(align) {
		if(align == null) align = 2;
		this.align = align;
	}
	,getAlign: function() {
		return this.align;
	}
	,preferredLayoutSize: function(target) {
		var count = target.getComponentCount();
		var insets = target.getInsets();
		var width = 0;
		var height = 0;
		var wTotal = 0;
		var hTotal = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) {
				var size = c.getPreferredSize();
				width = Std["int"](Math.max(width,size.width));
				height = Std["int"](Math.max(height,size.height));
				var g;
				if(i > 0) g = this.gap; else g = 0;
				wTotal += size.width + g;
				hTotal += size.height + g;
			}
		}
		if(this.axis == 1) height = hTotal; else width = wTotal;
		var dim = new org_aswing_geom_IntDimension(width,height);
		return insets.getOutsideSize(dim);
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,layoutContainer: function(target) {
		var count = target.getComponentCount();
		var size = target.getSize();
		var insets = target.getInsets();
		var rd = insets.getInsideBounds(size.getBounds());
		var ch = rd.height;
		var cw = rd.width;
		var x = rd.x;
		var y = rd.y;
		if(this.align == 4 || this.align == 3) {
			if(this.axis == 1) y = y + ch; else x = x + cw;
			var i = count - 1;
			while(i >= 0) {
				var c = target.getComponent(i);
				if(c.isVisible()) {
					var ps = c.getPreferredSize();
					if(this.axis == 1) {
						y -= ps.height;
						c.setBounds(new org_aswing_geom_IntRectangle(x,y,cw,ps.height));
						y -= this.gap;
					} else {
						x -= ps.width;
						c.setBounds(new org_aswing_geom_IntRectangle(x,y,ps.width,ch));
						x -= this.gap;
					}
				}
				i--;
			}
		} else {
			if(this.align == 0) {
				var prefferedSize = insets.getInsideSize(target.getPreferredSize());
				if(this.axis == 1) y = Math.round(y + (ch - prefferedSize.height) / 2); else x = Math.round(x + (cw - prefferedSize.width) / 2);
			}
			var _g = 0;
			while(_g < count) {
				var ii = _g++;
				var comp = target.getComponent(ii);
				if(comp.isVisible()) {
					var cps = comp.getPreferredSize();
					if(this.axis == 1) {
						comp.setBounds(new org_aswing_geom_IntRectangle(x,y,cw,cps.height));
						y += cps.height + this.gap;
					} else {
						comp.setBounds(new org_aswing_geom_IntRectangle(x,y,cps.width,ch));
						x += cps.width + this.gap;
					}
				}
			}
		}
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,__class__: org_aswing_SoftBoxLayout
});
var org_aswing_SolidBackground = function(color) {
	if(null == color) color = org_aswing_ASColor.WHITE;
	this.color = color;
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.SolidBackground"] = org_aswing_SolidBackground;
org_aswing_SolidBackground.__name__ = ["org","aswing","SolidBackground"];
org_aswing_SolidBackground.__interfaces__ = [org_aswing_GroundDecorator];
org_aswing_SolidBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		g.fillRectangle(new org_aswing_graphics_SolidBrush(this.color),bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_SolidBackground
};
var org_aswing_StyleResult = function(mainColor,tune) {
	this.clight = tune.getCLight(mainColor);
	this.cdark = tune.getCDark(mainColor);
	this.blight = tune.getBLight(mainColor);
	this.bdark = tune.getBDark(mainColor);
	this.shadow = tune.getShadowAlpha();
	this.round = tune.round;
};
$hxClasses["org.aswing.StyleResult"] = org_aswing_StyleResult;
org_aswing_StyleResult.__name__ = ["org","aswing","StyleResult"];
org_aswing_StyleResult.prototype = {
	__class__: org_aswing_StyleResult
};
var org_aswing_StyleTune = function(cg,bo,bg,sa,r,ma) {
	if(r == null) r = 0;
	if(sa == null) sa = 0.2;
	if(bg == null) bg = 0.35;
	if(bo == null) bo = 0.15;
	if(cg == null) cg = 0.2;
	this.cGradient = cg;
	this.bOffset = bo;
	this.bGradient = bg;
	this.shadowAlpha = sa;
	this.round = r;
	if(ma == null) this.mideAdjuster = this; else this.mideAdjuster = ma;
};
$hxClasses["org.aswing.StyleTune"] = org_aswing_StyleTune;
org_aswing_StyleTune.__name__ = ["org","aswing","StyleTune"];
org_aswing_StyleTune.prototype = {
	get_mide: function() {
		return this.mideAdjuster;
	}
	,set_mide: function(adjuster) {
		this.mideAdjuster = adjuster;
		return adjuster;
	}
	,sharpen: function(factor) {
		return new org_aswing_StyleTune(this.cGradient * factor,this.bOffset * factor,this.bGradient * factor,this.shadowAlpha * factor,this.round,this.get_mide());
	}
	,changeRound: function(newRound) {
		return new org_aswing_StyleTune(this.cGradient,this.bOffset,this.bGradient,this.shadowAlpha,newRound,this.get_mide());
	}
	,clone: function() {
		return new org_aswing_StyleTune(this.cGradient,this.bOffset,this.bGradient,this.shadowAlpha,this.round,this.get_mide());
	}
	,getCLight: function(c) {
		return c.changeLuminance(c.getLuminance() + this.cGradient / 2);
	}
	,getCDark: function(c) {
		return c.changeLuminance(c.getLuminance() - this.cGradient / 2);
	}
	,getBLight: function(c) {
		return c.changeLuminance(c.getLuminance() + this.bGradient / 2 + this.bOffset);
	}
	,getBDark: function(c) {
		return c.changeLuminance(c.getLuminance() - this.bGradient / 2 + this.bOffset);
	}
	,getShadowAlpha: function() {
		return this.shadowAlpha;
	}
	,getRound: function() {
		return this.round;
	}
	,toString: function() {
		return "StyleTune{cGradient:" + this.cGradient + ", bOffset:" + this.bOffset + ", bGradient:" + this.bGradient + ", shadowAlpha:" + this.shadowAlpha + ", round:" + this.round + (this.mideAdjuster != this?"mide:" + this.mideAdjuster.toString():"") + "}";
	}
	,__class__: org_aswing_StyleTune
	,__properties__: {set_mide:"set_mide",get_mide:"get_mide"}
};
var org_aswing_TabInfo = function() {
};
$hxClasses["org.aswing.TabInfo"] = org_aswing_TabInfo;
org_aswing_TabInfo.__name__ = ["org","aswing","TabInfo"];
org_aswing_TabInfo.prototype = {
	__class__: org_aswing_TabInfo
};
var org_aswing_ToggleButtonModel = function() {
	org_aswing_DefaultButtonModel.call(this);
};
$hxClasses["org.aswing.ToggleButtonModel"] = org_aswing_ToggleButtonModel;
org_aswing_ToggleButtonModel.__name__ = ["org","aswing","ToggleButtonModel"];
org_aswing_ToggleButtonModel.__super__ = org_aswing_DefaultButtonModel;
org_aswing_ToggleButtonModel.prototype = $extend(org_aswing_DefaultButtonModel.prototype,{
	setSelected: function(b) {
		var group = this.getGroup();
		if(group != null) {
			group.setSelected(this,b);
			b = group.isSelected(this);
		}
		org_aswing_DefaultButtonModel.prototype.setSelected.call(this,b);
	}
	,setPressed: function(b) {
		if(this.isPressed() == b || !this.isEnabled()) return;
		if(b == false && this.isArmed()) this.setSelected(!this.isSelected());
		this.pressed = b;
		this.fireStateChanged();
		if(!this.isPressed() && this.isArmed()) this.fireActionEvent();
	}
	,__class__: org_aswing_ToggleButtonModel
});
var org_aswing_UIDefaults = function() {
	haxe_ds_StringMap.call(this);
};
$hxClasses["org.aswing.UIDefaults"] = org_aswing_UIDefaults;
org_aswing_UIDefaults.__name__ = ["org","aswing","UIDefaults"];
org_aswing_UIDefaults.__super__ = haxe_ds_StringMap;
org_aswing_UIDefaults.prototype = $extend(haxe_ds_StringMap.prototype,{
	putDefaults: function(keyValueList) {
		var i = 0;
		while(i < keyValueList.length) {
			this.set(keyValueList[i],keyValueList[i + 1]);
			i += 2;
		}
	}
	,getUI: function(target) {
		var ui = org_aswing_AsWingUtils["as"](this.getInstance(target.getUIClassID()),org_aswing_plaf_ComponentUI);
		if(ui == null) ui = org_aswing_AsWingUtils["as"](this.getCreateInstance(target.getDefaultBasicUIClass()),org_aswing_plaf_ComponentUI);
		return ui;
	}
	,getBoolean: function(key) {
		return (__map_reserved[key] != null?this.getReserved(key):this.h[key]) == true;
	}
	,getNumber: function(key) {
		return org_aswing_AsWingUtils["as"](__map_reserved[key] != null?this.getReserved(key):this.h[key],Float);
	}
	,getInt: function(key) {
		return org_aswing_AsWingUtils["as"](__map_reserved[key] != null?this.getReserved(key):this.h[key],Int);
	}
	,getUint: function(key) {
		return org_aswing_AsWingUtils["as"](__map_reserved[key] != null?this.getReserved(key):this.h[key],Int);
	}
	,getString: function(key) {
		return org_aswing_AsWingUtils["as"](__map_reserved[key] != null?this.getReserved(key):this.h[key],String);
	}
	,getBorder: function(key) {
		var border = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_Border);
		if(border == null) border = org_aswing_plaf_EmptyUIResources.BORDER;
		return border;
	}
	,getIcon: function(key) {
		var icon = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_Icon);
		if(icon == null) icon = org_aswing_plaf_EmptyUIResources.ICON;
		return icon;
	}
	,getGroundDecorator: function(key) {
		var dec = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_GroundDecorator);
		if(dec == null) dec = org_aswing_plaf_EmptyUIResources.DECORATOR;
		return dec;
	}
	,getColor: function(key) {
		var color = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_ASColor);
		if(color == null) color = org_aswing_plaf_EmptyUIResources.COLOR;
		return color;
	}
	,getFont: function(key) {
		var font = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_ASFont);
		if(font == null) font = org_aswing_plaf_EmptyUIResources.get_FONT();
		return font;
	}
	,getInsets: function(key) {
		var i = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_Insets);
		if(i == null) i = org_aswing_plaf_EmptyUIResources.INSETS;
		return i;
	}
	,getStyleTune: function(key) {
		var i = org_aswing_AsWingUtils["as"](this.getInstance(key),org_aswing_StyleTune);
		if(i == null) i = org_aswing_plaf_EmptyUIResources.STYLE_TUNE;
		return i;
	}
	,getConstructor: function(key) {
		return org_aswing_AsWingUtils["as"](__map_reserved[key] != null?this.getReserved(key):this.h[key],Class);
	}
	,getInstance: function(key) {
		var value;
		value = __map_reserved[key] != null?this.getReserved(key):this.h[key];
		if(js_Boot.__instanceof(value,Class)) return this.getCreateInstance(value); else return value;
	}
	,getCreateInstance: function(constructor) {
		return Type.createInstance(constructor,[]);
	}
	,__class__: org_aswing_UIDefaults
});
var org_aswing_UIManager = function() { };
$hxClasses["org.aswing.UIManager"] = org_aswing_UIManager;
org_aswing_UIManager.__name__ = ["org","aswing","UIManager"];
org_aswing_UIManager.lookAndFeelDefaults = null;
org_aswing_UIManager.lookAndFeel = null;
org_aswing_UIManager.setLookAndFeel = function(laf) {
	org_aswing_UIManager.lookAndFeel = laf;
	org_aswing_UIManager.setLookAndFeelDefaults(laf.getDefaults());
};
org_aswing_UIManager.getLookAndFeel = function() {
	org_aswing_UIManager.checkLookAndFeel();
	return org_aswing_UIManager.lookAndFeel;
};
org_aswing_UIManager.getDefaults = function() {
	return org_aswing_UIManager.getLookAndFeelDefaults();
};
org_aswing_UIManager.getLookAndFeelDefaults = function() {
	org_aswing_UIManager.checkLookAndFeel();
	return org_aswing_UIManager.lookAndFeelDefaults;
};
org_aswing_UIManager.setLookAndFeelDefaults = function(d) {
	org_aswing_UIManager.lookAndFeelDefaults = d;
};
org_aswing_UIManager.checkLookAndFeel = function() {
	if(org_aswing_UIManager.lookAndFeel == null) org_aswing_UIManager.setLookAndFeel(new jive_plaf_flat_FlatLookAndFeel());
};
org_aswing_UIManager.containsKey = function(key) {
	return org_aswing_UIManager.getDefaults().exists(key);
};
org_aswing_UIManager.get = function(key) {
	return org_aswing_UIManager.getDefaults().get(key);
};
org_aswing_UIManager.getUI = function(target) {
	return org_aswing_UIManager.getDefaults().getUI(target);
};
org_aswing_UIManager.getBoolean = function(key) {
	return org_aswing_UIManager.getDefaults().getBoolean(key);
};
org_aswing_UIManager.getNumber = function(key) {
	return org_aswing_UIManager.getDefaults().getNumber(key);
};
org_aswing_UIManager.getInt = function(key) {
	return org_aswing_UIManager.getDefaults().getInt(key);
};
org_aswing_UIManager.getUint = function(key) {
	return org_aswing_UIManager.getDefaults().getUint(key);
};
org_aswing_UIManager.getString = function(key) {
	return org_aswing_UIManager.getDefaults().getString(key);
};
org_aswing_UIManager.getBorder = function(key) {
	return org_aswing_UIManager.getDefaults().getBorder(key);
};
org_aswing_UIManager.getGroundDecorator = function(key) {
	return org_aswing_UIManager.getDefaults().getGroundDecorator(key);
};
org_aswing_UIManager.getColor = function(key) {
	return org_aswing_UIManager.getDefaults().getColor(key);
};
org_aswing_UIManager.getFont = function(key) {
	return org_aswing_UIManager.getDefaults().getFont(key);
};
org_aswing_UIManager.getIcon = function(key) {
	return org_aswing_UIManager.getDefaults().getIcon(key);
};
org_aswing_UIManager.getInsets = function(key) {
	return org_aswing_UIManager.getDefaults().getInsets(key);
};
org_aswing_UIManager.getStyleTune = function(key) {
	return org_aswing_UIManager.getDefaults().getStyleTune(key);
};
org_aswing_UIManager.getInstance = function(key) {
	return org_aswing_UIManager.getDefaults().getInstance(key);
};
org_aswing_UIManager.getClass = function(key) {
	return org_aswing_UIManager.getDefaults().getConstructor(key);
};
var org_aswing_util_List = function() { };
$hxClasses["org.aswing.util.List"] = org_aswing_util_List;
org_aswing_util_List.__name__ = ["org","aswing","util","List"];
org_aswing_util_List.prototype = {
	__class__: org_aswing_util_List
};
var org_aswing_VectorListModel = function(initalData) {
	org_aswing_AbstractListModel.call(this);
	if(initalData != null) this._elements = initalData.slice(); else this._elements = [];
};
$hxClasses["org.aswing.VectorListModel"] = org_aswing_VectorListModel;
org_aswing_VectorListModel.__name__ = ["org","aswing","VectorListModel"];
org_aswing_VectorListModel.__interfaces__ = [org_aswing_util_List,org_aswing_MutableListModel];
org_aswing_VectorListModel.__super__ = org_aswing_AbstractListModel;
org_aswing_VectorListModel.prototype = $extend(org_aswing_AbstractListModel.prototype,{
	get: function(i) {
		return this._elements[i];
	}
	,getElementAt: function(i) {
		return this._elements[i];
	}
	,append: function(obj,index) {
		if(index == null) index = -1;
		if(index == -1) {
			index = this._elements.length;
			this._elements.push(obj);
		} else {
			var x = obj;
			this._elements.splice(index,0,x);
		}
		this.fireIntervalAdded(this,index,index);
	}
	,replaceAt: function(index,obj) {
		if(index < 0 || index >= this.size()) return null;
		var oldObj = this._elements[index];
		this._elements[index] = obj;
		this.fireContentsChanged(this,index,index,[oldObj]);
		return oldObj;
	}
	,appendAll: function(arr,index) {
		if(index == null) index = -1;
		if(arr == null || arr.length <= 0) return;
		if(index == -1) index = this._elements.length;
		if(index == 0) this._elements = arr.concat(this._elements); else if(index == this._elements.length) this._elements = this._elements.concat(arr); else {
			var right = this._elements.splice(index,this._elements.length - index);
			this._elements = this._elements.concat(arr);
			this._elements = this._elements.concat(right);
		}
		this.fireIntervalAdded(this,index,index + arr.length - 1);
	}
	,valueChanged: function(obj) {
		this.valueChangedAt(this.indexOf(obj));
	}
	,valueChangedAt: function(index) {
		if(index >= 0 && index < this._elements.length) this.fireContentsChanged(this,index,index,[]);
	}
	,valueChangedRange: function(from,to) {
		this.fireContentsChanged(this,from,to,[]);
	}
	,removeAt: function(index) {
		if(index < 0 || index >= this.size()) return null;
		var obj = this._elements[index];
		this._elements.splice(index,1);
		this.fireIntervalRemoved(this,index,index,[obj]);
		return obj;
	}
	,remove: function(obj) {
		var i = this.indexOf(obj);
		if(i >= 0) return this.removeAt(i); else return null;
	}
	,removeRange: function(fromIndex,toIndex) {
		if(this._elements.length > 0) {
			fromIndex = Std["int"](Math.max(0,fromIndex));
			toIndex = Std["int"](Math.min(toIndex,this._elements.length - 1));
			if(fromIndex > toIndex) return []; else {
				var removed = this._elements.splice(fromIndex,toIndex - fromIndex + 1);
				this.fireIntervalRemoved(this,fromIndex,toIndex,removed);
				return removed;
			}
		} else return [];
	}
	,removeElementAt: function(index) {
		this.removeAt(index);
	}
	,insertElementAt: function(item,index) {
		this.append(item,index);
	}
	,indexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(obj) {
		return this.indexOf(obj) >= 0;
	}
	,appendList: function(list,index) {
		if(index == null) index = -1;
		this.appendAll(list.toArray(),index);
	}
	,pop: function() {
		if(this.size() > 0) return this.removeAt(this.size() - 1); else return null;
	}
	,shift: function() {
		if(this.size() > 0) return this.removeAt(0); else return null;
	}
	,first: function() {
		return this._elements[0];
	}
	,last: function() {
		return this._elements[this._elements.length - 1];
	}
	,size: function() {
		return this._elements.length;
	}
	,isEmpty: function() {
		return this._elements.length <= 0;
	}
	,getSize: function() {
		return this.size();
	}
	,clear: function() {
		var ei = this.size() - 1;
		if(ei >= 0) {
			var temp = this.toArray();
			this._elements.slice(0);
			this.fireIntervalRemoved(this,0,ei,temp);
		}
	}
	,toArray: function() {
		return this._elements.slice();
	}
	,subArray: function(startIndex,length) {
		if(this.size() == 0 || length <= 0) return [];
		return this._elements.slice(startIndex,Std["int"](Math.min(startIndex + length,this.size())));
	}
	,sort: function(compare,options) {
		this._elements.sort(function(a,b) {
			if(a == b) return 0;
			if(a > b) return 1; else return -1;
		});
		this.fireContentsChanged(this,0,this._elements.length - 1,[]);
		return this._elements;
	}
	,sortOn: function(key,options) {
		this._elements.sort(function(a,b) {
			if(a == b) return 0;
			if(a > b) return 1; else return -1;
		});
		this.fireContentsChanged(this,0,this._elements.length - 1,[]);
		return this._elements;
	}
	,toString: function() {
		return "VectorListModel : " + this._elements.toString();
	}
	,__class__: org_aswing_VectorListModel
});
var org_aswing_ViewportLayout = function() {
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.ViewportLayout"] = org_aswing_ViewportLayout;
org_aswing_ViewportLayout.__name__ = ["org","aswing","ViewportLayout"];
org_aswing_ViewportLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_ViewportLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	preferredLayoutSize: function(parent) {
		var vp;
		vp = js_Boot.__instanceof(parent,org_aswing_JViewport)?parent:null;
		var viewPreferSize = null;
		if(vp.getView() != null) viewPreferSize = vp.getView().getPreferredSize(); else viewPreferSize = new org_aswing_geom_IntDimension(0,0);
		return vp.getViewportPane().getInsets().getOutsideSize(viewPreferSize);
	}
	,layoutContainer: function(parent) {
		var vp;
		vp = js_Boot.__instanceof(parent,org_aswing_JViewport)?parent:null;
		if(vp == null) return;
		var view = vp.getView();
		if(view == null) return;
		var extentSize = vp.getExtentSize();
		var viewSize = vp.getViewSize();
		var viewPosition = vp.getViewPosition();
		viewPosition.x = Math.round(viewPosition.x);
		viewPosition.y = Math.round(viewPosition.y);
		if(viewPosition.x + extentSize.width > viewSize.width) viewPosition.x = Std["int"](Math.max(0,viewSize.width - extentSize.width));
		if(viewPosition.y + extentSize.height > viewSize.height) viewPosition.y = Std["int"](Math.max(0,viewSize.height - extentSize.height));
		vp.setViewPosition(viewPosition);
		view.setSize(viewSize);
	}
	,__class__: org_aswing_ViewportLayout
});
var org_aswing_WindowLayout = function() {
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.WindowLayout"] = org_aswing_WindowLayout;
org_aswing_WindowLayout.__name__ = ["org","aswing","WindowLayout"];
org_aswing_WindowLayout.__super__ = org_aswing_EmptyLayout;
org_aswing_WindowLayout.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	addLayoutComponent: function(comp,constraints) {
		if(constraints == "Title") this.titleBar = comp; else if(constraints == "Content") this.contentPane = comp; else throw new js__$Boot_HaxeError(new org_aswing_error_Error("ERROR When add component to JWindow/JFrame, constraints must be TITLE or CONTENT : " + Std.string(constraints)));
	}
	,getTitleBar: function() {
		return this.titleBar;
	}
	,getContentPane: function() {
		return this.contentPane;
	}
	,removeLayoutComponent: function(comp) {
		if(comp == this.titleBar) this.titleBar = null; else if(comp == this.contentPane) this.contentPane = null;
	}
	,minimumLayoutSize: function(target) {
		var insets = target.getInsets();
		var size = insets.getOutsideSize();
		if(this.titleBar != null) size.increaseSize(this.titleBar.getMinimumSize());
		return size;
	}
	,preferredLayoutSize: function(target) {
		var insets = target.getInsets();
		var size = insets.getOutsideSize();
		var titleBarSize;
		var contentSize;
		if(this.titleBar != null) titleBarSize = this.titleBar.getPreferredSize(); else titleBarSize = new org_aswing_geom_IntDimension(0,0);
		if(this.contentPane != null) contentSize = this.contentPane.getPreferredSize(); else contentSize = new org_aswing_geom_IntDimension(0,0);
		size.increaseSize(new org_aswing_geom_IntDimension(Std["int"](Math.max(titleBarSize.width,contentSize.width)),titleBarSize.height + contentSize.height | 0));
		return size;
	}
	,layoutContainer: function(target) {
		var td = target.getSize();
		var insets = target.getInsets();
		var r = insets.getInsideBounds(td.getBounds());
		var d;
		if(this.titleBar != null) {
			d = this.titleBar.getPreferredSize();
			this.titleBar.setBounds(new org_aswing_geom_IntRectangle(r.x,r.y,r.width,d.height));
			r.y += d.height;
			r.height -= d.height;
		}
		if(this.contentPane != null) this.contentPane.setBounds(new org_aswing_geom_IntRectangle(r.x,r.y,r.width,r.height));
	}
	,toString: function() {
		return "WindowLayout[]";
	}
	,__class__: org_aswing_WindowLayout
});
var org_aswing_WindowOrderFocusTraversalPolicy = function() {
	org_aswing_ContainerOrderFocusTraversalPolicy.call(this);
};
$hxClasses["org.aswing.WindowOrderFocusTraversalPolicy"] = org_aswing_WindowOrderFocusTraversalPolicy;
org_aswing_WindowOrderFocusTraversalPolicy.__name__ = ["org","aswing","WindowOrderFocusTraversalPolicy"];
org_aswing_WindowOrderFocusTraversalPolicy.__super__ = org_aswing_ContainerOrderFocusTraversalPolicy;
org_aswing_WindowOrderFocusTraversalPolicy.prototype = $extend(org_aswing_ContainerOrderFocusTraversalPolicy.prototype,{
	getDefaultComponent: function(container) {
		if(js_Boot.__instanceof(container,org_aswing_JWindow)) {
			var $window;
			$window = js_Boot.__instanceof(container,org_aswing_JWindow)?container:null;
			var content = $window.getContentPane();
			if(content.isShowing() && content.isVisible() && content.isFocusable()) return content;
			var dc = this.getFirstComponent(content);
			if(dc == null) return org_aswing_ContainerOrderFocusTraversalPolicy.prototype.getDefaultComponent.call(this,container); else return dc;
		} else return org_aswing_ContainerOrderFocusTraversalPolicy.prototype.getDefaultComponent.call(this,container);
	}
	,__class__: org_aswing_WindowOrderFocusTraversalPolicy
});
var org_aswing_border_BevelBorder = function(interior,bevelType,highlightOuterColor,highlightInnerColor,shadowOuterColor,shadowInnerColor,thickness) {
	if(thickness == null) thickness = 2;
	if(bevelType == null) bevelType = 1;
	org_aswing_border_DecorateBorder.call(this,interior);
	this.bevelType = bevelType;
	if(highlightInnerColor != null && shadowOuterColor == null) {
		this.highlightOuter = highlightOuterColor.brighter();
		this.highlightInner = highlightOuterColor;
		this.shadowOuter = null;
		this.shadowInner = null;
	} else {
		this.highlightOuter = highlightOuterColor;
		this.highlightInner = highlightInnerColor;
		this.shadowOuter = shadowOuterColor;
		this.shadowInner = shadowInnerColor;
	}
	this.thickness = thickness;
};
$hxClasses["org.aswing.border.BevelBorder"] = org_aswing_border_BevelBorder;
org_aswing_border_BevelBorder.__name__ = ["org","aswing","border","BevelBorder"];
org_aswing_border_BevelBorder.__super__ = org_aswing_border_DecorateBorder;
org_aswing_border_BevelBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		if(this.bevelType == 0) this.paintRaisedBevel(com,g,b.x,b.y,b.width,b.height); else this.paintLoweredBevel(com,g,b.x,b.y,b.width,b.height);
	}
	,getBorderInsetsImp: function(c,bounds) {
		return new org_aswing_Insets(this.thickness | 0,this.thickness | 0,this.thickness | 0,this.thickness | 0);
	}
	,getDisplayImp: function() {
		return null;
	}
	,setThickness: function(t) {
		this.thickness = t;
	}
	,getThickness: function() {
		return this.thickness;
	}
	,getHighlightOuterColorWith: function(c) {
		var highlight = this.getHighlightOuterColor();
		if(highlight == null) highlight = c.getBackground().brighter().brighter();
		return highlight;
	}
	,getHighlightInnerColorWith: function(c) {
		var highlight = this.getHighlightInnerColor();
		if(highlight == null) highlight = c.getBackground().brighter();
		return highlight;
	}
	,getShadowInnerColorWith: function(c) {
		var shadow = this.getShadowInnerColor();
		if(shadow == null) shadow = c.getBackground().darker();
		return shadow;
	}
	,getShadowOuterColorWith: function(c) {
		var shadow = this.getShadowOuterColor();
		if(shadow == null) shadow = c.getBackground().darker().darker();
		return shadow;
	}
	,setHighlightOuterColor: function(color) {
		this.highlightOuter = color;
	}
	,getHighlightOuterColor: function() {
		return this.highlightOuter;
	}
	,setHighlightInnerColor: function(color) {
		this.highlightInner = color;
	}
	,getHighlightInnerColor: function() {
		return this.highlightInner;
	}
	,setShadowInnerColor: function(color) {
		this.shadowInner = color;
	}
	,getShadowInnerColor: function() {
		return this.shadowInner;
	}
	,setShadowOuterColor: function(color) {
		this.shadowOuter = color;
	}
	,getShadowOuterColor: function() {
		return this.shadowOuter;
	}
	,setBevelType: function(bevelType) {
		this.bevelType = bevelType | 0;
	}
	,getBevelType: function() {
		return this.bevelType;
	}
	,paintRaisedBevel: function(c,g,x,y,width,height) {
		var h = height;
		var w = width;
		var pt = this.thickness / 2;
		x += pt / 2;
		y += pt / 2;
		w -= pt;
		h -= pt;
		var pen = new org_aswing_graphics_Pen(this.getHighlightOuterColorWith(c),pt,false,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE,openfl_display_JointStyle.MITER);
		g.drawLine(pen,x,y,x,y + h - pt);
		g.drawLine(pen,x + pt,y,x + w - pt,y);
		pen.setColor(this.getHighlightInnerColorWith(c));
		g.drawLine(pen,x + pt,y + pt,x + pt,y + h - 2 * pt);
		g.drawLine(pen,x + 2 * pt,y + pt,x + w - 2 * pt,y + pt);
		pen.setColor(this.getShadowOuterColorWith(c));
		g.drawLine(pen,x,y + h - 0 * pt,x + w - 0 * pt,y + h - 0 * pt);
		g.drawLine(pen,x + w - 0 * pt,y,x + w - 0 * pt,y + h - pt);
		pen.setColor(this.getShadowInnerColorWith(c));
		g.drawLine(pen,x + pt,y + h - pt,x + w - pt,y + h - pt);
		g.drawLine(pen,x + w - pt,y + pt,x + w - pt,y + h - 2 * pt);
	}
	,paintLoweredBevel: function(c,g,x,y,width,height) {
		var h = height;
		var w = width;
		var pt = this.thickness / 2;
		x += pt / 2;
		y += pt / 2;
		w -= pt;
		h -= pt;
		var pen = new org_aswing_graphics_Pen(this.getShadowInnerColorWith(c),pt,false,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE,openfl_display_JointStyle.MITER);
		g.drawLine(pen,x,y,x,y + h - pt);
		g.drawLine(pen,x + pt,y,x + w - pt,y);
		pen.setColor(this.getShadowOuterColorWith(c));
		g.drawLine(pen,x + pt,y + pt,x + pt,y + h - 2 * pt);
		g.drawLine(pen,x + 2 * pt,y + pt,x + w - 2 * pt,y + pt);
		pen.setColor(this.getHighlightOuterColorWith(c));
		g.drawLine(pen,x,y + h - 0 * pt,x + w - 0 * pt,y + h - 0 * pt);
		g.drawLine(pen,x + w - 0 * pt,y,x + w - 0 * pt,y + h - pt);
		pen.setColor(this.getHighlightInnerColorWith(c));
		g.drawLine(pen,x + pt,y + h - pt,x + w - pt,y + h - pt);
		g.drawLine(pen,x + w - pt,y + pt,x + w - pt,y + h - 2 * pt);
	}
	,__class__: org_aswing_border_BevelBorder
});
var org_aswing_border_EmptyBorder = function(interior,margin) {
	org_aswing_border_DecorateBorder.call(this,interior);
	if(margin == null) this.margin = new org_aswing_Insets(); else this.margin = margin.clone();
};
$hxClasses["org.aswing.border.EmptyBorder"] = org_aswing_border_EmptyBorder;
org_aswing_border_EmptyBorder.__name__ = ["org","aswing","border","EmptyBorder"];
org_aswing_border_EmptyBorder.createIndent = function(indent) {
	return new org_aswing_border_EmptyBorder(null,new org_aswing_Insets(indent,indent,indent,indent));
};
org_aswing_border_EmptyBorder.__super__ = org_aswing_border_DecorateBorder;
org_aswing_border_EmptyBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	get_top: function() {
		return this.getTop();
	}
	,set_top: function(v) {
		this.setTop(v);
		return v;
	}
	,get_left: function() {
		return this.getLeft();
	}
	,set_left: function(v) {
		this.setLeft(v);
		return v;
	}
	,get_bottom: function() {
		return this.getBottom();
	}
	,set_bottom: function(v) {
		this.setBottom(v);
		return v;
	}
	,get_right: function() {
		return this.getRight();
	}
	,set_right: function(v) {
		this.setRight(v);
		return v;
	}
	,setTop: function(v) {
		this.margin.top = v;
	}
	,setLeft: function(v) {
		this.margin.left = v;
	}
	,setBottom: function(v) {
		this.margin.bottom = v;
	}
	,setRight: function(v) {
		this.margin.right = v;
	}
	,getTop: function() {
		return this.margin.top;
	}
	,getLeft: function() {
		return this.margin.left;
	}
	,getBottom: function() {
		return this.margin.bottom;
	}
	,getRight: function() {
		return this.margin.right;
	}
	,updateBorderImp: function(com,g,bounds) {
	}
	,getBorderInsetsImp: function(c,bounds) {
		return this.margin.clone();
	}
	,__class__: org_aswing_border_EmptyBorder
	,__properties__: {set_right:"set_right",get_right:"get_right",set_bottom:"set_bottom",get_bottom:"get_bottom",set_left:"set_left",get_left:"get_left",set_top:"set_top",get_top:"get_top"}
});
var org_aswing_border_TitledBorder = function(interior,title,position,align,edge,round) {
	if(round == null) round = 0;
	if(edge == null) edge = 0;
	if(align == null) align = 0;
	if(position == null) position = 1;
	if(title == null) title = "";
	org_aswing_border_DecorateBorder.call(this,interior);
	this.title = title;
	this.position = position;
	this.align = align;
	this.edge = edge;
	this.round = round;
	this.font = this.get_DEFAULT_FONT();
	this.color = this.get_DEFAULT_COLOR();
	this.lineColor = this.get_DEFAULT_LINE_COLOR();
	this.lineLightColor = this.get_DEFAULT_LINE_LIGHT_COLOR();
	this.lineThickness = 1;
	this.beveled = true;
	this.textField = null;
	this.textFieldSize = null;
};
$hxClasses["org.aswing.border.TitledBorder"] = org_aswing_border_TitledBorder;
org_aswing_border_TitledBorder.__name__ = ["org","aswing","border","TitledBorder"];
org_aswing_border_TitledBorder.__super__ = org_aswing_border_DecorateBorder;
org_aswing_border_TitledBorder.prototype = $extend(org_aswing_border_DecorateBorder.prototype,{
	get_DEFAULT_FONT: function() {
		return org_aswing_UIManager.getFont("systemFont");
	}
	,get_DEFAULT_COLOR: function() {
		return org_aswing_UIManager.getColor("controlText");
	}
	,get_DEFAULT_LINE_COLOR: function() {
		return org_aswing_ASColor.GRAY;
	}
	,get_DEFAULT_LINE_LIGHT_COLOR: function() {
		return org_aswing_ASColor.WHITE;
	}
	,getTextField: function() {
		if(this.textField == null) {
			this.textField = new openfl_text_TextField();
			this.textField.set_selectable(false);
			this.textField.set_autoSize(openfl_text_TextFieldAutoSize.CENTER);
		}
		return this.textField;
	}
	,updateBorderImp: function(c,g,bounds) {
		var textHeight = Math.ceil(this.getTextFieldSize().height);
		var x1 = bounds.x + this.lineThickness * 0.5;
		var y1 = bounds.y + this.lineThickness * 0.5;
		if(this.position == 1) y1 += textHeight / 2;
		var w = bounds.width - this.lineThickness;
		var h = bounds.height - this.lineThickness - textHeight / 2;
		if(this.beveled) {
			w -= this.lineThickness;
			h -= this.lineThickness;
		}
		var x2 = x1 + w;
		var y2 = y1 + h;
		var textR = new org_aswing_geom_IntRectangle();
		var viewR = new org_aswing_geom_IntRectangle(bounds.x,bounds.y,bounds.width,bounds.height);
		var text = this.title;
		var verticalAlignment = this.position;
		var horizontalAlignment = this.align;
		var pen = new org_aswing_graphics_Pen(this.lineColor,this.lineThickness);
		if(this.round <= 0) {
			if(bounds.width <= this.edge * 2) {
				g.drawRectangle(pen,x1,y1,w,h);
				if(this.beveled) {
					pen.setColor(this.lineLightColor);
					g.beginDraw(pen);
					g.moveTo(x1 + this.lineThickness,y2 - this.lineThickness);
					g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
					g.lineTo(x2 - this.lineThickness,y1 + this.lineThickness);
					g.moveTo(x2 + this.lineThickness,y1);
					g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
					g.lineTo(x1,y2 + this.lineThickness);
				}
				this.textField.set_text("");
			} else {
				viewR.x += this.edge | 0;
				viewR.width -= this.edge * 2 | 0;
				text = org_aswing_AsWingUtils.layoutText(this.font,text,verticalAlignment,horizontalAlignment,viewR,textR);
				g.beginDraw(pen);
				if(this.position == 1) {
					g.moveTo(textR.x - 1,y1);
					g.lineTo(x1,y1);
					g.lineTo(x1,y2);
					g.lineTo(x2,y2);
					g.lineTo(x2,y1);
					g.lineTo(textR.x + textR.width + 1,y1);
				} else {
					g.moveTo(textR.x - 1,y2);
					g.lineTo(x1,y2);
					g.lineTo(x1,y1);
					g.lineTo(x2,y1);
					g.lineTo(x2,y2);
					g.lineTo(textR.x + textR.width + 1,y2);
				}
				g.endDraw();
				if(this.beveled) {
					pen.setColor(this.lineLightColor);
					g.beginDraw(pen);
					if(this.position == 1) {
						g.moveTo(textR.x - 1,y1 + this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y2 - this.lineThickness);
						g.moveTo(x1,y2 + this.lineThickness);
						g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
						g.lineTo(x2 + this.lineThickness,y1);
						g.moveTo(x2 - this.lineThickness,y1 + this.lineThickness);
						g.lineTo(textR.x + textR.width + 1,y1 + this.lineThickness);
					} else {
						g.moveTo(textR.x - 1,y2 + this.lineThickness);
						g.lineTo(x1,y2 + this.lineThickness);
						g.moveTo(x1 + this.lineThickness,y2 - this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
						g.lineTo(x2 - this.lineThickness,y1 + this.lineThickness);
						g.moveTo(x2 + this.lineThickness,y1);
						g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
						g.lineTo(textR.x + textR.width + 1,y2 + this.lineThickness);
					}
					g.endDraw();
				}
			}
		} else if(bounds.width <= this.edge * 2 + this.round * 2) {
			if(this.beveled) g.drawRoundRect(new org_aswing_graphics_Pen(this.lineLightColor,this.lineThickness),x1 + this.lineThickness,y1 + this.lineThickness,w,h,Math.min(this.round,Math.min(w / 2,h / 2)));
			g.drawRoundRect(pen,x1,y1,w,h,Math.min(this.round,Math.min(w / 2,h / 2)));
			this.textField.set_text("");
		} else {
			viewR.x += this.edge + this.round | 0;
			viewR.width -= (this.edge + this.round) * 2 | 0;
			text = org_aswing_AsWingUtils.layoutText(this.font,text,verticalAlignment,horizontalAlignment,viewR,textR);
			var r = this.round;
			if(this.beveled) {
				pen.setColor(this.lineLightColor);
				g.beginDraw(pen);
				var t = this.lineThickness;
				x1 += t;
				x2 += t;
				y1 += t;
				y2 += t;
				if(this.position == 1) {
					g.moveTo(textR.x - 1,y1);
					g.lineTo(x1 + r,y1);
					g.curveTo(x1,y1,x1,y1 + r);
					g.lineTo(x1,y2 - r);
					g.curveTo(x1,y2,x1 + r,y2);
					g.lineTo(x2 - r,y2);
					g.curveTo(x2,y2,x2,y2 - r);
					g.lineTo(x2,y1 + r);
					g.curveTo(x2,y1,x2 - r,y1);
					g.lineTo(textR.x + textR.width + 1,y1);
				} else {
					g.moveTo(textR.x + textR.width + 1,y2);
					g.lineTo(x2 - r,y2);
					g.curveTo(x2,y2,x2,y2 - r);
					g.lineTo(x2,y1 + r);
					g.curveTo(x2,y1,x2 - r,y1);
					g.lineTo(x1 + r,y1);
					g.curveTo(x1,y1,x1,y1 + r);
					g.lineTo(x1,y2 - r);
					g.curveTo(x1,y2,x1 + r,y2);
					g.lineTo(textR.x - 1,y2);
				}
				g.endDraw();
				x1 -= t;
				x2 -= t;
				y1 -= t;
				y2 -= t;
			}
			pen.setColor(this.lineColor);
			g.beginDraw(pen);
			if(this.position == 1) {
				g.moveTo(textR.x - 1,y1);
				g.lineTo(x1 + r,y1);
				g.curveTo(x1,y1,x1,y1 + r);
				g.lineTo(x1,y2 - r);
				g.curveTo(x1,y2,x1 + r,y2);
				g.lineTo(x2 - r,y2);
				g.curveTo(x2,y2,x2,y2 - r);
				g.lineTo(x2,y1 + r);
				g.curveTo(x2,y1,x2 - r,y1);
				g.lineTo(textR.x + textR.width + 1,y1);
			} else {
				g.moveTo(textR.x + textR.width + 1,y2);
				g.lineTo(x2 - r,y2);
				g.curveTo(x2,y2,x2,y2 - r);
				g.lineTo(x2,y1 + r);
				g.curveTo(x2,y1,x2 - r,y1);
				g.lineTo(x1 + r,y1);
				g.curveTo(x1,y1,x1,y1 + r);
				g.lineTo(x1,y2 - r);
				g.curveTo(x1,y2,x1 + r,y2);
				g.lineTo(textR.x - 1,y2);
			}
			g.endDraw();
		}
		this.textField.set_text(text);
		org_aswing_AsWingUtils.applyTextFontAndColor(this.textField,this.font,this.color);
		this.textField.set_x(textR.x);
		this.textField.set_y(textR.y);
	}
	,getBorderInsetsImp: function(c,bounds) {
		var cornerW = Math.ceil(this.lineThickness * 2 + this.round - this.round * 0.707106781186547);
		var insets = new org_aswing_Insets(cornerW | 0,cornerW | 0,cornerW | 0,cornerW | 0);
		if(this.position == 3) insets.bottom += Math.ceil(this.getTextFieldSize().height); else insets.top += Math.ceil(this.getTextFieldSize().height);
		return insets;
	}
	,getDisplayImp: function() {
		return this.getTextField();
	}
	,getFont: function() {
		return this.font;
	}
	,setFont: function(font) {
		if(this.font != font) {
			if(font == null) font = this.get_DEFAULT_FONT();
			this.font = font;
			this.textFieldSize == null;
		}
	}
	,getLineColor: function() {
		return this.lineColor;
	}
	,setLineColor: function(lineColor) {
		if(lineColor != null) this.lineColor = lineColor;
	}
	,getLineLightColor: function() {
		return this.lineLightColor;
	}
	,setLineLightColor: function(lineLightColor) {
		if(lineLightColor != null) this.lineLightColor = lineLightColor;
	}
	,isBeveled: function() {
		return this.beveled;
	}
	,setBeveled: function(b) {
		this.beveled = b;
	}
	,getEdge: function() {
		return this.edge;
	}
	,setEdge: function(edge) {
		this.edge = edge;
	}
	,getTitle: function() {
		return this.title;
	}
	,setTitle: function(title) {
		if(this.title != title) {
			this.title = title;
			this.textFieldSize == null;
		}
	}
	,getRound: function() {
		return this.round;
	}
	,setRound: function(round) {
		this.round = round;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,getAlign: function() {
		return this.align;
	}
	,setAlign: function(align) {
		this.align = align;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getLineThickness: function() {
		return this.lineThickness | 0;
	}
	,setLineThickness: function(lineThickness) {
		this.lineThickness = lineThickness;
	}
	,getTextFieldSize: function() {
		if(this.textFieldSize == null) this.textFieldSize = this.getFont().computeTextSize(this.title);
		return this.textFieldSize;
	}
	,__class__: org_aswing_border_TitledBorder
	,__properties__: {get_DEFAULT_FONT:"get_DEFAULT_FONT",get_DEFAULT_COLOR:"get_DEFAULT_COLOR",get_DEFAULT_LINE_COLOR:"get_DEFAULT_LINE_COLOR",get_DEFAULT_LINE_LIGHT_COLOR:"get_DEFAULT_LINE_LIGHT_COLOR"}
});
var org_aswing_dnd_DraggingImage = function() { };
$hxClasses["org.aswing.dnd.DraggingImage"] = org_aswing_dnd_DraggingImage;
org_aswing_dnd_DraggingImage.__name__ = ["org","aswing","dnd","DraggingImage"];
org_aswing_dnd_DraggingImage.prototype = {
	__class__: org_aswing_dnd_DraggingImage
};
var org_aswing_dnd_DefaultDragImage = function(dragInitiator) {
	this.width = Std["int"](dragInitiator.get_width());
	this.height = Std["int"](dragInitiator.get_height());
	this.image = new openfl_display_Shape();
};
$hxClasses["org.aswing.dnd.DefaultDragImage"] = org_aswing_dnd_DefaultDragImage;
org_aswing_dnd_DefaultDragImage.__name__ = ["org","aswing","dnd","DefaultDragImage"];
org_aswing_dnd_DefaultDragImage.__interfaces__ = [org_aswing_dnd_DraggingImage];
org_aswing_dnd_DefaultDragImage.prototype = {
	getDisplay: function() {
		return this.image;
	}
	,switchToRejectImage: function() {
		this.image.get_graphics().clear();
		var r = Math.min(this.width,this.height) - 2;
		var x = 0;
		var y = 0;
		var w = this.width;
		var h = this.height;
		var g = new org_aswing_graphics_Graphics2D(this.image.get_graphics());
		g.drawLine(new org_aswing_graphics_Pen(org_aswing_ASColor.RED,2),x + 1,y + 1,x + 1 + r,y + 1 + r);
		g.drawLine(new org_aswing_graphics_Pen(org_aswing_ASColor.RED,2),x + 1 + r,y + 1,x + 1,y + 1 + r);
		g.drawRectangle(new org_aswing_graphics_Pen(org_aswing_ASColor.GRAY),x,y,w,h);
	}
	,switchToAcceptImage: function() {
		this.image.get_graphics().clear();
		var g = new org_aswing_graphics_Graphics2D(this.image.get_graphics());
		g.drawRectangle(new org_aswing_graphics_Pen(org_aswing_ASColor.GRAY),0,0,this.width,this.height);
	}
	,__class__: org_aswing_dnd_DefaultDragImage
};
var org_aswing_dnd_DropMotion = function() { };
$hxClasses["org.aswing.dnd.DropMotion"] = org_aswing_dnd_DropMotion;
org_aswing_dnd_DropMotion.__name__ = ["org","aswing","dnd","DropMotion"];
org_aswing_dnd_DropMotion.prototype = {
	__class__: org_aswing_dnd_DropMotion
};
var org_aswing_dnd_DirectlyRemoveMotion = function() {
};
$hxClasses["org.aswing.dnd.DirectlyRemoveMotion"] = org_aswing_dnd_DirectlyRemoveMotion;
org_aswing_dnd_DirectlyRemoveMotion.__name__ = ["org","aswing","dnd","DirectlyRemoveMotion"];
org_aswing_dnd_DirectlyRemoveMotion.__interfaces__ = [org_aswing_dnd_DropMotion];
org_aswing_dnd_DirectlyRemoveMotion.prototype = {
	startMotionAndLaterRemove: function(dragInitiator,dragObject) {
		if(dragObject.parent != null) dragObject.parent.removeChild(dragObject);
	}
	,forceStop: function() {
	}
	,__class__: org_aswing_dnd_DirectlyRemoveMotion
};
var org_aswing_dnd_DragListener = function() { };
$hxClasses["org.aswing.dnd.DragListener"] = org_aswing_dnd_DragListener;
org_aswing_dnd_DragListener.__name__ = ["org","aswing","dnd","DragListener"];
org_aswing_dnd_DragListener.prototype = {
	__class__: org_aswing_dnd_DragListener
};
var org_aswing_dnd_RejectedMotion = function() {
	this.timer = new org_aswing_util_Timer(40);
	this.timer.addEventListener("act",$bind(this,this.__enterFrame));
};
$hxClasses["org.aswing.dnd.RejectedMotion"] = org_aswing_dnd_RejectedMotion;
org_aswing_dnd_RejectedMotion.__name__ = ["org","aswing","dnd","RejectedMotion"];
org_aswing_dnd_RejectedMotion.__interfaces__ = [org_aswing_dnd_DropMotion];
org_aswing_dnd_RejectedMotion.prototype = {
	startNewMotion: function(dragInitiator,dragObject) {
		this.dragObject = dragObject;
		this.initiatorPos = dragInitiator.getGlobalLocation();
		if(this.initiatorPos == null) this.initiatorPos = new org_aswing_geom_IntPoint();
		this.timer.start();
	}
	,forceStop: function() {
		this.finishMotion();
	}
	,startMotionAndLaterRemove: function(dragInitiator,dragObject) {
		this.startNewMotion(dragInitiator,dragObject);
	}
	,finishMotion: function() {
		if(this.timer.isRunning()) {
			this.timer.stop();
			this.dragObject.set_alpha(1);
			if(this.dragObject.parent != null) this.dragObject.parent.removeChild(this.dragObject);
		}
	}
	,__enterFrame: function(e) {
		var speed = 0.25;
		var p = new openfl_geom_Point(this.dragObject.get_x(),this.dragObject.get_y());
		p = this.dragObject.parent.localToGlobal(p);
		p.x += (this.initiatorPos.x - p.x) * speed;
		p.y += (this.initiatorPos.y - p.y) * speed;
		if(openfl_geom_Point.distance(p,this.initiatorPos.toPoint()) < 2) {
			this.finishMotion();
			return;
		}
		p = this.dragObject.parent.globalToLocal(p);
		var _g = this.dragObject;
		_g.set_alpha(_g.get_alpha() + (0.04 - this.dragObject.get_alpha()) * speed);
		this.dragObject.set_x(p.x);
		this.dragObject.set_y(p.y);
	}
	,__class__: org_aswing_dnd_RejectedMotion
};
var org_aswing_util_Impulser = function() { };
$hxClasses["org.aswing.util.Impulser"] = org_aswing_util_Impulser;
org_aswing_util_Impulser.__name__ = ["org","aswing","util","Impulser"];
org_aswing_util_Impulser.prototype = {
	__class__: org_aswing_util_Impulser
};
var org_aswing_util_AbstractImpulser = function(delay,repeats) {
	if(repeats == null) repeats = 0;
	this.delay = delay;
	this.initialDelay = 0;
	this.repeats = repeats;
	this.isInitalFire = true;
	this.repeatCount = repeats;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.util.AbstractImpulser"] = org_aswing_util_AbstractImpulser;
org_aswing_util_AbstractImpulser.__name__ = ["org","aswing","util","AbstractImpulser"];
org_aswing_util_AbstractImpulser.__interfaces__ = [org_aswing_util_Impulser];
org_aswing_util_AbstractImpulser.__super__ = openfl_events_EventDispatcher;
org_aswing_util_AbstractImpulser.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,setDelay: function(delay) {
		this.delay = delay;
	}
	,getDelay: function() {
		return this.delay;
	}
	,setInitialDelay: function(initialDelay) {
		this.initialDelay = initialDelay;
	}
	,getInitialDelay: function() {
		if(this.initialDelay == 0) return this.delay; else return this.initialDelay;
	}
	,setRepeats: function(flag) {
		this.repeats = flag;
		this.repeatCount = this.repeats;
	}
	,isRepeats: function() {
		return this.repeats == 0;
	}
	,isRunning: function() {
		return false;
	}
	,stop: function() {
	}
	,start: function() {
	}
	,restart: function() {
	}
	,__class__: org_aswing_util_AbstractImpulser
});
var org_aswing_util_Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(isNaN(delay) || delay < 0) throw new js__$Boot_HaxeError(new org_aswing_error_Error("The delay specified is negative or not a finite number"));
	org_aswing_util_AbstractImpulser.call(this,delay,repeatCount);
	this.currentCount = 0;
};
$hxClasses["org.aswing.util.Timer"] = org_aswing_util_Timer;
org_aswing_util_Timer.__name__ = ["org","aswing","util","Timer"];
org_aswing_util_Timer.__interfaces__ = [org_aswing_util_Impulser];
org_aswing_util_Timer.__super__ = org_aswing_util_AbstractImpulser;
org_aswing_util_Timer.prototype = $extend(org_aswing_util_AbstractImpulser.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.timer = new haxe_Timer(this.delay);
			this.timer.run = $bind(this,this.fireActionPerformed);
		}
	}
	,restart: function() {
		this.reset();
		this.start();
	}
	,stop: function() {
		this.running = false;
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,setDelay: function(delay) {
		this.delay = delay;
		if(this.running) {
			this.stop();
			this.start();
		}
	}
	,getDelay: function() {
		return this.delay;
	}
	,fireActionPerformed: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new org_aswing_event_AWEvent("act"));
			this.dispatchEvent(new org_aswing_event_AWEvent("act_complete"));
		} else this.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,__class__: org_aswing_util_Timer
});
var org_aswing_error_Error = function(inMessage,id) {
	if(id == null) id = 0;
	this.message = inMessage;
	this.errorID = id;
};
$hxClasses["org.aswing.error.Error"] = org_aswing_error_Error;
org_aswing_error_Error.__name__ = ["org","aswing","error","Error"];
org_aswing_error_Error.prototype = {
	toString: function() {
		return this.message;
	}
	,getStackTrace: function() {
		return "";
	}
	,__class__: org_aswing_error_Error
};
var org_aswing_dnd_DragManager = function() { };
$hxClasses["org.aswing.dnd.DragManager"] = org_aswing_dnd_DragManager;
org_aswing_dnd_DragManager.__name__ = ["org","aswing","dnd","DragManager"];
org_aswing_dnd_DragManager.s_dragListener = null;
org_aswing_dnd_DragManager.s_dragInitiator = null;
org_aswing_dnd_DragManager.s_sourceData = null;
org_aswing_dnd_DragManager.s_dragImage = null;
org_aswing_dnd_DragManager.dropMotion = null;
org_aswing_dnd_DragManager.runningMotion = null;
org_aswing_dnd_DragManager.dragProxyMC = null;
org_aswing_dnd_DragManager.mouseOffset = null;
org_aswing_dnd_DragManager.enteredComponent = null;
org_aswing_dnd_DragManager.curStage = null;
org_aswing_dnd_DragManager.setDragingImageContainerRoot = function(theRoot) {
	org_aswing_dnd_DragManager.root = theRoot;
};
org_aswing_dnd_DragManager.startDrag = function(dragInitiator,sourceData,dragImage,dragListener) {
	if(org_aswing_dnd_DragManager.s_isDragging) {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("The last dragging action is not finished, can't start a new one!"));
		return;
	}
	var stage = dragInitiator.stage;
	if(stage == null) {
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("The drag initiator is not on stage!"));
		return;
	}
	org_aswing_dnd_DragManager.curStage = stage;
	if(dragImage == null) dragImage = new org_aswing_dnd_DefaultDragImage(dragInitiator);
	org_aswing_dnd_DragManager.s_isDragging = true;
	org_aswing_dnd_DragManager.s_dragInitiator = dragInitiator;
	org_aswing_dnd_DragManager.s_sourceData = sourceData;
	org_aswing_dnd_DragManager.s_dragImage = dragImage;
	org_aswing_dnd_DragManager.s_dragListener = dragListener;
	if(org_aswing_dnd_DragManager.s_dragListener != null) org_aswing_dnd_DragManager.addDragListener(org_aswing_dnd_DragManager.s_dragListener);
	if(org_aswing_dnd_DragManager.runningMotion != null) {
		org_aswing_dnd_DragManager.runningMotion.forceStop();
		org_aswing_dnd_DragManager.runningMotion = null;
	}
	var container = stage;
	if(org_aswing_dnd_DragManager.dragProxyMC == null) {
		org_aswing_dnd_DragManager.dragProxyMC = new openfl_display_Sprite();
		org_aswing_dnd_DragManager.dragProxyMC.mouseEnabled = false;
		org_aswing_dnd_DragManager.dragProxyMC.set_name("drag_image");
	} else if(org_aswing_dnd_DragManager.dragProxyMC.parent != null) org_aswing_dnd_DragManager.dragProxyMC.parent.removeChild(org_aswing_dnd_DragManager.dragProxyMC);
	if(org_aswing_dnd_DragManager.dragProxyMC.get_numChildren() > 0) org_aswing_dnd_DragManager.dragProxyMC.removeChildAt(0);
	container.addChild(org_aswing_dnd_DragManager.dragProxyMC);
	var globalPos = org_aswing_AsWingUtils.getStageMousePosition(stage);
	var dp = container.globalToLocal(dragInitiator.getGlobalLocation().toPoint());
	org_aswing_dnd_DragManager.dragProxyMC.set_x(dp.x);
	org_aswing_dnd_DragManager.dragProxyMC.set_y(dp.y);
	org_aswing_dnd_DragManager.dragProxyMC.addChild(dragImage.getDisplay());
	org_aswing_dnd_DragManager.dragProxyMC.startDrag(false);
	org_aswing_dnd_DragManager.mouseOffset = new org_aswing_geom_IntPoint(Std["int"](container.get_mouseX() - dp.x),Std["int"](container.get_mouseY() - dp.y));
	org_aswing_dnd_DragManager.fireDragStartEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos);
	org_aswing_dnd_DragManager.enteredComponent = null;
	org_aswing_dnd_DragManager.s_dragImage.switchToRejectImage();
	org_aswing_dnd_DragManager.__onMouseMoveOnStage(stage);
	org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,org_aswing_dnd_DragManager.__onMouseMove,false,0,true);
	org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,org_aswing_dnd_DragManager.__onMouseDown,false,0,true);
	org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_UP,org_aswing_dnd_DragManager.__onMouseUp,false,0,true);
};
org_aswing_dnd_DragManager.addDragListener = function(lis) {
	org_aswing_dnd_DragManager.listeners.push(lis);
};
org_aswing_dnd_DragManager.removeDragListener = function(lis) {
	org_aswing_util_ArrayUtils.removeFromArray(org_aswing_dnd_DragManager.listeners,lis);
};
org_aswing_dnd_DragManager.setDropMotion = function(motion) {
	if(motion == null) motion = org_aswing_dnd_DragManager.DEFAULT_DROP_MOTION;
	org_aswing_dnd_DragManager.dropMotion = motion;
};
org_aswing_dnd_DragManager.getCurrentDragImage = function() {
	return org_aswing_dnd_DragManager.s_dragImage;
};
org_aswing_dnd_DragManager.getCurrentDropTarget = function() {
	return org_aswing_dnd_DragManager.getDropTarget(org_aswing_dnd_DragManager.curStage);
};
org_aswing_dnd_DragManager.getDropTargetComponent = function(pos) {
	return org_aswing_AsWingUtils["as"](org_aswing_dnd_DragManager.getDropTarget(org_aswing_dnd_DragManager.curStage,pos,org_aswing_Component),org_aswing_Component);
};
org_aswing_dnd_DragManager.getCurrentDropTargetComponent = function() {
	return org_aswing_AsWingUtils["as"](org_aswing_dnd_DragManager.getDropTarget(org_aswing_dnd_DragManager.curStage,null,org_aswing_Component),org_aswing_Component);
};
org_aswing_dnd_DragManager.getDropTragetDropTriggerComponent = function(pos) {
	return org_aswing_AsWingUtils["as"](org_aswing_dnd_DragManager.getDropTarget(org_aswing_dnd_DragManager.curStage,pos,org_aswing_Component,org_aswing_dnd_DragManager.____dropTargetCheck),org_aswing_Component);
};
org_aswing_dnd_DragManager.getCurrentDropTargetDropTriggerComponent = function() {
	return org_aswing_AsWingUtils["as"](org_aswing_dnd_DragManager.getDropTarget(org_aswing_dnd_DragManager.curStage,null,org_aswing_Component,org_aswing_dnd_DragManager.____dropTargetCheck),org_aswing_Component);
};
org_aswing_dnd_DragManager.____dropTargetCheck = function(tar) {
	return tar.isDropTrigger();
};
org_aswing_dnd_DragManager.getDropTarget = function(stage,pos,targetType,addtionCheck) {
	if(stage == null) return null;
	if(pos == null) pos = new openfl_geom_Point(org_aswing_AsWingManager.getStage().get_mouseX(),org_aswing_AsWingManager.getStage().get_mouseY());
	if(targetType == null) targetType = openfl_display_DisplayObject;
	if(addtionCheck == null) {
	}
	var targets = org_aswing_AsWingManager.getStage().getObjectsUnderPoint(pos);
	var n = targets.length;
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		var tar = targets[i];
		if(js_Boot.__instanceof(tar,targetType) && tar != org_aswing_dnd_DragManager.dragProxyMC && !org_aswing_dnd_DragManager.dragProxyMC.contains(tar)) {
			if(addtionCheck == null) return tar; else if(addtionCheck(tar)) return tar;
		}
	}
	return null;
};
org_aswing_dnd_DragManager.__onMouseMoveOnStage = function(stage) {
	org_aswing_dnd_DragManager.onMouseMove(org_aswing_AsWingManager.getStage().get_mouseX(),org_aswing_AsWingManager.getStage().get_mouseY());
};
org_aswing_dnd_DragManager.onMouseMove = function(mx,my) {
	var globalPos = new org_aswing_geom_IntPoint(mx | 0,my | 0);
	var dropC = org_aswing_dnd_DragManager.getCurrentDropTargetDropTriggerComponent();
	if(dropC != org_aswing_dnd_DragManager.enteredComponent) {
		if(org_aswing_dnd_DragManager.enteredComponent != null) {
			org_aswing_dnd_DragManager.s_dragImage.switchToRejectImage();
			org_aswing_dnd_DragManager.fireDragExitEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,org_aswing_dnd_DragManager.enteredComponent,dropC);
			org_aswing_dnd_DragManager.enteredComponent.fireDragExitEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,dropC);
		}
		if(dropC != null) {
			if(dropC.isDragAcceptableInitiator(org_aswing_dnd_DragManager.s_dragInitiator)) org_aswing_dnd_DragManager.s_dragImage.switchToAcceptImage();
			org_aswing_dnd_DragManager.fireDragEnterEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,dropC,org_aswing_dnd_DragManager.enteredComponent);
			dropC.fireDragEnterEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,org_aswing_dnd_DragManager.enteredComponent);
		}
		org_aswing_dnd_DragManager.enteredComponent = dropC;
	} else if(org_aswing_dnd_DragManager.enteredComponent != null) {
		org_aswing_dnd_DragManager.fireDragOverringEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,org_aswing_dnd_DragManager.enteredComponent);
		org_aswing_dnd_DragManager.enteredComponent.fireDragOverringEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos);
	}
};
org_aswing_dnd_DragManager.__onMouseMove = function(e) {
	org_aswing_dnd_DragManager.onMouseMove(e.stageX,e.stageY);
};
org_aswing_dnd_DragManager.__onMouseUp = function(e) {
	org_aswing_dnd_DragManager.drop();
};
org_aswing_dnd_DragManager.__onMouseDown = function(e) {
	org_aswing_dnd_DragManager.drop();
};
org_aswing_dnd_DragManager.drop = function() {
	org_aswing_dnd_DragManager.dragProxyMC.stopDrag();
	var globalPos = org_aswing_AsWingUtils.getStageMousePosition();
	var stage = org_aswing_dnd_DragManager.curStage;
	org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,org_aswing_dnd_DragManager.__onMouseMove);
	org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,org_aswing_dnd_DragManager.__onMouseDown);
	org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,org_aswing_dnd_DragManager.__onMouseUp);
	org_aswing_dnd_DragManager.s_isDragging = false;
	if(org_aswing_dnd_DragManager.enteredComponent != null) org_aswing_dnd_DragManager.setDropMotion(org_aswing_dnd_DragManager.DEFAULT_DROP_MOTION); else org_aswing_dnd_DragManager.setDropMotion(org_aswing_dnd_DragManager.DEFAULT_REJECT_DROP_MOTION);
	org_aswing_dnd_DragManager.fireDragDropEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos,org_aswing_dnd_DragManager.enteredComponent);
	if(org_aswing_dnd_DragManager.enteredComponent != null) org_aswing_dnd_DragManager.enteredComponent.fireDragDropEvent(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.s_sourceData,globalPos);
	org_aswing_dnd_DragManager.runningMotion = org_aswing_dnd_DragManager.dropMotion;
	org_aswing_dnd_DragManager.runningMotion.startMotionAndLaterRemove(org_aswing_dnd_DragManager.s_dragInitiator,org_aswing_dnd_DragManager.dragProxyMC);
	if(org_aswing_dnd_DragManager.s_dragListener != null) org_aswing_dnd_DragManager.removeDragListener(org_aswing_dnd_DragManager.s_dragListener);
	org_aswing_dnd_DragManager.curStage = null;
	org_aswing_dnd_DragManager.s_dragImage = null;
	org_aswing_dnd_DragManager.s_dragListener = null;
	org_aswing_dnd_DragManager.s_sourceData = null;
	org_aswing_dnd_DragManager.enteredComponent = null;
};
org_aswing_dnd_DragManager.fireDragStartEvent = function(dragInitiator,sourceData,pos) {
	var e = new org_aswing_event_DragAndDropEvent("dragStart",dragInitiator,sourceData,pos);
	var _g1 = 0;
	var _g = org_aswing_dnd_DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org_aswing_dnd_DragManager.listeners[i];
		lis.onDragStart(e);
	}
};
org_aswing_dnd_DragManager.fireDragEnterEvent = function(dragInitiator,sourceData,pos,targetComponent,relatedTarget) {
	var e = new org_aswing_event_DragAndDropEvent("dragEnter",dragInitiator,sourceData,pos,targetComponent,relatedTarget);
	var _g1 = 0;
	var _g = org_aswing_dnd_DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org_aswing_dnd_DragManager.listeners[i];
		lis.onDragEnter(e);
	}
};
org_aswing_dnd_DragManager.fireDragOverringEvent = function(dragInitiator,sourceData,pos,targetComponent) {
	var e = new org_aswing_event_DragAndDropEvent("dragOverring",dragInitiator,sourceData,pos,targetComponent);
	var _g1 = 0;
	var _g = org_aswing_dnd_DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org_aswing_dnd_DragManager.listeners[i];
		lis.onDragOverring(e);
	}
};
org_aswing_dnd_DragManager.fireDragExitEvent = function(dragInitiator,sourceData,pos,targetComponent,relatedTarget) {
	var e = new org_aswing_event_DragAndDropEvent("dragExit",dragInitiator,sourceData,pos,targetComponent,relatedTarget);
	var _g1 = 0;
	var _g = org_aswing_dnd_DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org_aswing_dnd_DragManager.listeners[i];
		lis.onDragExit(e);
	}
};
org_aswing_dnd_DragManager.fireDragDropEvent = function(dragInitiator,sourceData,pos,targetComponent) {
	var e = new org_aswing_event_DragAndDropEvent("dragDrop",dragInitiator,sourceData,pos,targetComponent);
	var _g1 = 0;
	var _g = org_aswing_dnd_DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org_aswing_dnd_DragManager.listeners[i];
		lis.onDragDrop(e);
	}
};
var org_aswing_dnd_SourceData = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["org.aswing.dnd.SourceData"] = org_aswing_dnd_SourceData;
org_aswing_dnd_SourceData.__name__ = ["org","aswing","dnd","SourceData"];
org_aswing_dnd_SourceData.prototype = {
	getName: function() {
		return this.name;
	}
	,getData: function() {
		return this.data;
	}
	,__class__: org_aswing_dnd_SourceData
};
var org_aswing_error_AsWingManagerNotInited = function() {
	org_aswing_error_Error.call(this,"You have not call AsWingManager.setRoot() yet!");
};
$hxClasses["org.aswing.error.AsWingManagerNotInited"] = org_aswing_error_AsWingManagerNotInited;
org_aswing_error_AsWingManagerNotInited.__name__ = ["org","aswing","error","AsWingManagerNotInited"];
org_aswing_error_AsWingManagerNotInited.__super__ = org_aswing_error_Error;
org_aswing_error_AsWingManagerNotInited.prototype = $extend(org_aswing_error_Error.prototype,{
	__class__: org_aswing_error_AsWingManagerNotInited
});
var org_aswing_error_ImpMissError = function() {
	org_aswing_error_Error.call(this,"Subclass should override this method to do implementation!!");
};
$hxClasses["org.aswing.error.ImpMissError"] = org_aswing_error_ImpMissError;
org_aswing_error_ImpMissError.__name__ = ["org","aswing","error","ImpMissError"];
org_aswing_error_ImpMissError.__super__ = org_aswing_error_Error;
org_aswing_error_ImpMissError.prototype = $extend(org_aswing_error_Error.prototype,{
	__class__: org_aswing_error_ImpMissError
});
var org_aswing_event_AWEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["org.aswing.event.AWEvent"] = org_aswing_event_AWEvent;
org_aswing_event_AWEvent.__name__ = ["org","aswing","event","AWEvent"];
org_aswing_event_AWEvent.__super__ = openfl_events_Event;
org_aswing_event_AWEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new org_aswing_event_AWEvent(this.type,this.bubbles,this.cancelable);
	}
	,__class__: org_aswing_event_AWEvent
});
var org_aswing_event_ClickCountEvent = function(type,count) {
	org_aswing_event_AWEvent.call(this,type,false,false);
	this.count = count;
};
$hxClasses["org.aswing.event.ClickCountEvent"] = org_aswing_event_ClickCountEvent;
org_aswing_event_ClickCountEvent.__name__ = ["org","aswing","event","ClickCountEvent"];
org_aswing_event_ClickCountEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_ClickCountEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	getCount: function() {
		return this.count;
	}
	,clone: function() {
		return new org_aswing_event_ClickCountEvent(this.type,this.count);
	}
	,__class__: org_aswing_event_ClickCountEvent
});
var org_aswing_event_ContainerEvent = function(type,container,child) {
	org_aswing_event_AWEvent.call(this,type,false,false);
	this.container = container;
	this.child = child;
};
$hxClasses["org.aswing.event.ContainerEvent"] = org_aswing_event_ContainerEvent;
org_aswing_event_ContainerEvent.__name__ = ["org","aswing","event","ContainerEvent"];
org_aswing_event_ContainerEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_ContainerEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_ContainerEvent(this.type,this.container,this.child);
	}
	,getContainer: function() {
		return this.container;
	}
	,getChild: function() {
		return this.child;
	}
	,__class__: org_aswing_event_ContainerEvent
});
var org_aswing_event_DragAndDropEvent = function(type,dragInitiator,sourceData,mousePos,targetComponent,relatedTargetComponent) {
	org_aswing_event_AWEvent.call(this,type,false,false);
	this.dragInitiator = dragInitiator;
	this.sourceData = sourceData;
	this.mousePos = mousePos.clone();
	this.targetComponent = targetComponent;
	this.relatedTargetComponent = relatedTargetComponent;
};
$hxClasses["org.aswing.event.DragAndDropEvent"] = org_aswing_event_DragAndDropEvent;
org_aswing_event_DragAndDropEvent.__name__ = ["org","aswing","event","DragAndDropEvent"];
org_aswing_event_DragAndDropEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_DragAndDropEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_DragAndDropEvent(this.type,this.dragInitiator,this.sourceData,this.mousePos,this.targetComponent);
	}
	,getDragInitiator: function() {
		return this.dragInitiator;
	}
	,getSourceData: function() {
		return this.sourceData;
	}
	,getMousePosition: function() {
		return this.mousePos;
	}
	,getTargetComponent: function() {
		return this.targetComponent;
	}
	,getRelatedTargetComponent: function() {
		return this.relatedTargetComponent;
	}
	,__class__: org_aswing_event_DragAndDropEvent
});
var org_aswing_event_FocusKeyEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(keyCode == null) keyCode = 0;
	if(charCode == null) charCode = 0;
	openfl_events_KeyboardEvent.call(this,type,false,false,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey);
};
$hxClasses["org.aswing.event.FocusKeyEvent"] = org_aswing_event_FocusKeyEvent;
org_aswing_event_FocusKeyEvent.__name__ = ["org","aswing","event","FocusKeyEvent"];
org_aswing_event_FocusKeyEvent.__super__ = openfl_events_KeyboardEvent;
org_aswing_event_FocusKeyEvent.prototype = $extend(openfl_events_KeyboardEvent.prototype,{
	clone: function() {
		return new org_aswing_event_FocusKeyEvent(this.type,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey);
	}
	,__class__: org_aswing_event_FocusKeyEvent
});
var org_aswing_event_InteractiveEvent = function(type,programmatic,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	if(programmatic == null) programmatic = false;
	org_aswing_event_AWEvent.call(this,type,bubbles,cancelable);
	this.programmatic = programmatic;
};
$hxClasses["org.aswing.event.InteractiveEvent"] = org_aswing_event_InteractiveEvent;
org_aswing_event_InteractiveEvent.__name__ = ["org","aswing","event","InteractiveEvent"];
org_aswing_event_InteractiveEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_InteractiveEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	isProgrammatic: function() {
		return this.programmatic;
	}
	,clone: function() {
		return new org_aswing_event_InteractiveEvent(this.type,this.isProgrammatic(),this.bubbles,this.cancelable);
	}
	,__class__: org_aswing_event_InteractiveEvent
});
var org_aswing_event_FrameEvent = function(type,programmatic) {
	if(programmatic == null) programmatic = false;
	org_aswing_event_InteractiveEvent.call(this,type,programmatic,this.bubbles,this.cancelable);
};
$hxClasses["org.aswing.event.FrameEvent"] = org_aswing_event_FrameEvent;
org_aswing_event_FrameEvent.__name__ = ["org","aswing","event","FrameEvent"];
org_aswing_event_FrameEvent.__super__ = org_aswing_event_InteractiveEvent;
org_aswing_event_FrameEvent.prototype = $extend(org_aswing_event_InteractiveEvent.prototype,{
	clone: function() {
		return new org_aswing_event_FrameEvent(this.type,this.isProgrammatic());
	}
	,__class__: org_aswing_event_FrameEvent
});
var org_aswing_event_ModelEvent = function(source) {
	this.source = source;
};
$hxClasses["org.aswing.event.ModelEvent"] = org_aswing_event_ModelEvent;
org_aswing_event_ModelEvent.__name__ = ["org","aswing","event","ModelEvent"];
org_aswing_event_ModelEvent.prototype = {
	getSource: function() {
		return this.source;
	}
	,__class__: org_aswing_event_ModelEvent
};
var org_aswing_event_ListDataEvent = function(source,index0,index1,removedItems) {
	org_aswing_event_ModelEvent.call(this,source);
	this.index0 = index0;
	this.index1 = index1;
	this.removedItems = removedItems.slice();
};
$hxClasses["org.aswing.event.ListDataEvent"] = org_aswing_event_ListDataEvent;
org_aswing_event_ListDataEvent.__name__ = ["org","aswing","event","ListDataEvent"];
org_aswing_event_ListDataEvent.__super__ = org_aswing_event_ModelEvent;
org_aswing_event_ListDataEvent.prototype = $extend(org_aswing_event_ModelEvent.prototype,{
	getIndex0: function() {
		return this.index0;
	}
	,getIndex1: function() {
		return this.index1;
	}
	,getRemovedItems: function() {
		return this.removedItems.slice();
	}
	,__class__: org_aswing_event_ListDataEvent
});
var org_aswing_event_ListItemEvent = function(type,value,cell,e) {
	openfl_events_MouseEvent.call(this,type,false,false,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown);
	this.value = value;
	this.cell = cell;
};
$hxClasses["org.aswing.event.ListItemEvent"] = org_aswing_event_ListItemEvent;
org_aswing_event_ListItemEvent.__name__ = ["org","aswing","event","ListItemEvent"];
org_aswing_event_ListItemEvent.__super__ = openfl_events_MouseEvent;
org_aswing_event_ListItemEvent.prototype = $extend(openfl_events_MouseEvent.prototype,{
	getValue: function() {
		return this.value;
	}
	,getCell: function() {
		return this.cell;
	}
	,clone: function() {
		return new org_aswing_event_ListItemEvent(this.type,this.value,this.cell,this);
	}
	,__class__: org_aswing_event_ListItemEvent
});
var org_aswing_event_MovedEvent = function(oldPos,newPos) {
	org_aswing_event_AWEvent.call(this,"moved",false,false);
	this.oldPos = oldPos.clone();
	this.newPos = newPos.clone();
};
$hxClasses["org.aswing.event.MovedEvent"] = org_aswing_event_MovedEvent;
org_aswing_event_MovedEvent.__name__ = ["org","aswing","event","MovedEvent"];
org_aswing_event_MovedEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_MovedEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_MovedEvent(this.oldPos,this.newPos);
	}
	,getOldLocation: function() {
		return this.oldPos.clone();
	}
	,getNewLocation: function() {
		return this.newPos.clone();
	}
	,__class__: org_aswing_event_MovedEvent
});
var org_aswing_event_PopupEvent = function(type) {
	org_aswing_event_AWEvent.call(this,type,false,false);
};
$hxClasses["org.aswing.event.PopupEvent"] = org_aswing_event_PopupEvent;
org_aswing_event_PopupEvent.__name__ = ["org","aswing","event","PopupEvent"];
org_aswing_event_PopupEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_PopupEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_PopupEvent(this.type);
	}
	,__class__: org_aswing_event_PopupEvent
});
var org_aswing_event_PropertyChangeEvent = function(propertyName,oldValue,newValue) {
	org_aswing_event_AWEvent.call(this,"propertyChange",false,false);
	this.propertyName = propertyName;
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.PropertyChangeEvent"] = org_aswing_event_PropertyChangeEvent;
org_aswing_event_PropertyChangeEvent.__name__ = ["org","aswing","event","PropertyChangeEvent"];
org_aswing_event_PropertyChangeEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_PropertyChangeEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	getPropertyName: function() {
		return this.propertyName;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org_aswing_event_PropertyChangeEvent(this.propertyName,this.oldValue,this.newValue);
	}
	,__class__: org_aswing_event_PropertyChangeEvent
});
var org_aswing_event_ReleaseEvent = function(type,pressTarget,releasedOutSide,e) {
	openfl_events_MouseEvent.call(this,type,false,false,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown);
	this.pressTarget = pressTarget;
	this.releasedOutSide = releasedOutSide;
};
$hxClasses["org.aswing.event.ReleaseEvent"] = org_aswing_event_ReleaseEvent;
org_aswing_event_ReleaseEvent.__name__ = ["org","aswing","event","ReleaseEvent"];
org_aswing_event_ReleaseEvent.__super__ = openfl_events_MouseEvent;
org_aswing_event_ReleaseEvent.prototype = $extend(openfl_events_MouseEvent.prototype,{
	getPressTarget: function() {
		return this.pressTarget;
	}
	,isReleasedOutSide: function() {
		return this.releasedOutSide;
	}
	,clone: function() {
		return new org_aswing_event_ReleaseEvent(this.type,this.getPressTarget(),this.isReleasedOutSide(),this);
	}
	,__class__: org_aswing_event_ReleaseEvent
});
var org_aswing_event_ResizedEvent = function(oldSize,newSize) {
	org_aswing_event_AWEvent.call(this,"resized",false,false);
	this.oldSize = oldSize.clone();
	this.newSize = newSize.clone();
};
$hxClasses["org.aswing.event.ResizedEvent"] = org_aswing_event_ResizedEvent;
org_aswing_event_ResizedEvent.__name__ = ["org","aswing","event","ResizedEvent"];
org_aswing_event_ResizedEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_ResizedEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_ResizedEvent(this.oldSize,this.newSize);
	}
	,getOldSize: function() {
		return this.oldSize.clone();
	}
	,getNewSize: function() {
		return this.newSize.clone();
	}
	,__class__: org_aswing_event_ResizedEvent
});
var org_aswing_event_ScrollPaneEvent = function(type,programmatic,scrollbar,viewportChanged) {
	if(viewportChanged == null) viewportChanged = false;
	if(programmatic == null) programmatic = false;
	org_aswing_event_InteractiveEvent.call(this,type,programmatic,false,false);
};
$hxClasses["org.aswing.event.ScrollPaneEvent"] = org_aswing_event_ScrollPaneEvent;
org_aswing_event_ScrollPaneEvent.__name__ = ["org","aswing","event","ScrollPaneEvent"];
org_aswing_event_ScrollPaneEvent.__super__ = org_aswing_event_InteractiveEvent;
org_aswing_event_ScrollPaneEvent.prototype = $extend(org_aswing_event_InteractiveEvent.prototype,{
	clone: function() {
		return new org_aswing_event_ScrollPaneEvent(this.type,this.isProgrammatic(),this.scrollbar,this.viewportChanged);
	}
	,getScrollBar: function() {
		return this.scrollbar;
	}
	,isViewportChanged: function() {
		return this.viewportChanged;
	}
	,__class__: org_aswing_event_ScrollPaneEvent
});
var org_aswing_event_SelectionEvent = function(type,firstIndex,lastIndex,programmatic) {
	org_aswing_event_InteractiveEvent.call(this,type,programmatic);
	this.firstIndex = firstIndex;
	this.lastIndex = lastIndex;
};
$hxClasses["org.aswing.event.SelectionEvent"] = org_aswing_event_SelectionEvent;
org_aswing_event_SelectionEvent.__name__ = ["org","aswing","event","SelectionEvent"];
org_aswing_event_SelectionEvent.__super__ = org_aswing_event_InteractiveEvent;
org_aswing_event_SelectionEvent.prototype = $extend(org_aswing_event_InteractiveEvent.prototype,{
	getFirstIndex: function() {
		return this.firstIndex;
	}
	,getLastIndex: function() {
		return this.lastIndex;
	}
	,clone: function() {
		return new org_aswing_event_SelectionEvent(this.type,this.firstIndex,this.lastIndex,this.isProgrammatic());
	}
	,__class__: org_aswing_event_SelectionEvent
});
var org_aswing_event_TableCellEditEvent = function(type,row,column,oldValue,newValue) {
	org_aswing_event_AWEvent.call(this,type,false,false);
	this.row = row;
	this.column = column;
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.TableCellEditEvent"] = org_aswing_event_TableCellEditEvent;
org_aswing_event_TableCellEditEvent.__name__ = ["org","aswing","event","TableCellEditEvent"];
org_aswing_event_TableCellEditEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_TableCellEditEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	getRow: function() {
		return this.row;
	}
	,getColumn: function() {
		return this.column;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org_aswing_event_TableCellEditEvent(this.type,this.row,this.column,this.oldValue,this.newValue);
	}
	,__class__: org_aswing_event_TableCellEditEvent
});
var org_aswing_event_TableModelEvent = function(source,firstRow,lastRow,column,type) {
	if(type == null) type = "update";
	if(column == null) column = -1;
	if(lastRow == null) lastRow = -2;
	if(firstRow == null) firstRow = -2;
	org_aswing_event_ModelEvent.call(this,source);
	if(firstRow == -2) this.init(0,2147483647,column,type); else if(lastRow == -2) this.init(firstRow,firstRow,column,type); else this.init(firstRow,lastRow,column,type);
};
$hxClasses["org.aswing.event.TableModelEvent"] = org_aswing_event_TableModelEvent;
org_aswing_event_TableModelEvent.__name__ = ["org","aswing","event","TableModelEvent"];
org_aswing_event_TableModelEvent.__super__ = org_aswing_event_ModelEvent;
org_aswing_event_TableModelEvent.prototype = $extend(org_aswing_event_ModelEvent.prototype,{
	init: function(firstRow,lastRow,column,type) {
		this.firstRow = firstRow;
		this.lastRow = lastRow;
		this.column = column;
		this.type = type;
	}
	,getType: function() {
		return this.type;
	}
	,getFirstRow: function() {
		return this.firstRow;
	}
	,getLastRow: function() {
		return this.lastRow;
	}
	,getColumn: function() {
		return this.column;
	}
	,__class__: org_aswing_event_TableModelEvent
});
var org_aswing_event_ToolTipEvent = function(type) {
	org_aswing_event_AWEvent.call(this,type);
};
$hxClasses["org.aswing.event.ToolTipEvent"] = org_aswing_event_ToolTipEvent;
org_aswing_event_ToolTipEvent.__name__ = ["org","aswing","event","ToolTipEvent"];
org_aswing_event_ToolTipEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_ToolTipEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	clone: function() {
		return new org_aswing_event_ToolTipEvent(this.type);
	}
	,__class__: org_aswing_event_ToolTipEvent
});
var org_aswing_event_TreeCellEditEvent = function(type,path,oldValue,newValue) {
	org_aswing_event_AWEvent.call(this,type,this.bubbles,this.cancelable);
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.TreeCellEditEvent"] = org_aswing_event_TreeCellEditEvent;
org_aswing_event_TreeCellEditEvent.__name__ = ["org","aswing","event","TreeCellEditEvent"];
org_aswing_event_TreeCellEditEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_TreeCellEditEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	getPath: function() {
		return this.path;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org_aswing_event_TreeCellEditEvent(this.type,this.path,this.oldValue,this.newValue);
	}
	,__class__: org_aswing_event_TreeCellEditEvent
});
var org_aswing_event_TreeEvent = function(type,path) {
	org_aswing_event_AWEvent.call(this,type,false,false);
	this.path = path;
};
$hxClasses["org.aswing.event.TreeEvent"] = org_aswing_event_TreeEvent;
org_aswing_event_TreeEvent.__name__ = ["org","aswing","event","TreeEvent"];
org_aswing_event_TreeEvent.__super__ = org_aswing_event_AWEvent;
org_aswing_event_TreeEvent.prototype = $extend(org_aswing_event_AWEvent.prototype,{
	getPath: function() {
		return this.path;
	}
	,clone: function() {
		return new org_aswing_event_TreeEvent(this.type,this.path);
	}
	,__class__: org_aswing_event_TreeEvent
});
var org_aswing_event_TreeModelEvent = function(source,path,childIndices,children) {
	org_aswing_event_ModelEvent.call(this,source);
	this.path = path;
	this.childIndices = childIndices;
	this.children = children;
};
$hxClasses["org.aswing.event.TreeModelEvent"] = org_aswing_event_TreeModelEvent;
org_aswing_event_TreeModelEvent.__name__ = ["org","aswing","event","TreeModelEvent"];
org_aswing_event_TreeModelEvent.__super__ = org_aswing_event_ModelEvent;
org_aswing_event_TreeModelEvent.prototype = $extend(org_aswing_event_ModelEvent.prototype,{
	getTreePath: function() {
		return this.path;
	}
	,getPath: function() {
		if(this.path != null) return this.path.getPath();
		return null;
	}
	,getChildren: function() {
		if(this.children != null) return this.children.slice();
		return null;
	}
	,getChildIndices: function() {
		if(this.childIndices != null) return this.childIndices.slice();
		return null;
	}
	,toString: function() {
		return "TreeModelEvent[Path:" + Std.string(this.getPath()) + ", childIndices:" + Std.string(this.childIndices) + ", children:" + Std.string(this.children) + "]";
	}
	,__class__: org_aswing_event_TreeModelEvent
});
var org_aswing_event_TreeSelectionEvent = function(source,programmatic,paths,areNew,oldLeadSelectionPath,newLeadSelectionPath) {
	org_aswing_event_InteractiveEvent.call(this,"treeSelectionChanged",programmatic);
	this.source = source;
	this.paths = paths;
	this.areNew = areNew;
	this.oldLeadSelectionPath = oldLeadSelectionPath;
	this.newLeadSelectionPath = newLeadSelectionPath;
};
$hxClasses["org.aswing.event.TreeSelectionEvent"] = org_aswing_event_TreeSelectionEvent;
org_aswing_event_TreeSelectionEvent.__name__ = ["org","aswing","event","TreeSelectionEvent"];
org_aswing_event_TreeSelectionEvent.__super__ = org_aswing_event_InteractiveEvent;
org_aswing_event_TreeSelectionEvent.prototype = $extend(org_aswing_event_InteractiveEvent.prototype,{
	getSource: function() {
		return this.source;
	}
	,getPaths: function() {
		return this.paths.slice();
	}
	,getPath: function() {
		return this.paths[0];
	}
	,isAddedPath: function() {
		return this.areNew[0] == true;
	}
	,isAddedPathOfPath: function(path) {
		var _g1 = 0;
		var _g = this.paths.length;
		while(_g1 < _g) {
			var counter = _g1++;
			if(this.paths[counter].equals(path)) return this.areNew[counter] == true;
		}
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("path is not a path identified by the TreeSelectionEvent"));
	}
	,isAddedPathOfIndex: function(index) {
		if(this.paths == null || index < 0 || index >= this.paths.length) throw new js__$Boot_HaxeError(new org_aswing_error_Error("index is beyond range of added paths identified by TreeSelectionEvent"));
		return this.areNew[index] == true;
	}
	,getOldLeadSelectionPath: function() {
		return this.oldLeadSelectionPath;
	}
	,getNewLeadSelectionPath: function() {
		return this.newLeadSelectionPath;
	}
	,cloneWithSource: function(newSource) {
		return new org_aswing_event_TreeSelectionEvent(newSource,this.isProgrammatic(),this.paths,this.areNew,this.oldLeadSelectionPath,this.newLeadSelectionPath);
	}
	,clone: function() {
		return new org_aswing_event_TreeSelectionEvent(this.source,this.isProgrammatic(),this.paths,this.areNew,this.oldLeadSelectionPath,this.newLeadSelectionPath);
	}
	,__class__: org_aswing_event_TreeSelectionEvent
});
var org_aswing_event_WindowEvent = function(type,programmatic) {
	if(programmatic == null) programmatic = false;
	org_aswing_event_InteractiveEvent.call(this,type,programmatic);
};
$hxClasses["org.aswing.event.WindowEvent"] = org_aswing_event_WindowEvent;
org_aswing_event_WindowEvent.__name__ = ["org","aswing","event","WindowEvent"];
org_aswing_event_WindowEvent.__super__ = org_aswing_event_InteractiveEvent;
org_aswing_event_WindowEvent.prototype = $extend(org_aswing_event_InteractiveEvent.prototype,{
	clone: function() {
		return new org_aswing_event_WindowEvent(this.type,this.isProgrammatic());
	}
	,__class__: org_aswing_event_WindowEvent
});
var org_aswing_geom_IntDimension = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.width = 0;
	this.height = 0;
	this.width = width;
	this.height = height;
};
$hxClasses["org.aswing.geom.IntDimension"] = org_aswing_geom_IntDimension;
org_aswing_geom_IntDimension.__name__ = ["org","aswing","geom","IntDimension"];
org_aswing_geom_IntDimension.createBigDimension = function() {
	return new org_aswing_geom_IntDimension(100000,100000);
};
org_aswing_geom_IntDimension.createNullDimension = function() {
	return new org_aswing_geom_IntDimension(-1,-1);
};
org_aswing_geom_IntDimension.prototype = {
	setSize: function(dim) {
		this.width = dim.width;
		this.height = dim.height;
	}
	,setSizeWH: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,increaseSize: function(s) {
		this.width += s.width;
		this.height += s.height;
		return this;
	}
	,decreaseSize: function(s) {
		this.width -= s.width;
		this.height -= s.height;
		return this;
	}
	,change: function(deltaW,deltaH) {
		this.width += deltaW;
		this.height += deltaH;
		return this;
	}
	,changedSize: function(deltaW,deltaH) {
		var s = new org_aswing_geom_IntDimension(deltaW,deltaH);
		return s;
	}
	,combine: function(d) {
		this.width = Std["int"](Math.max(this.width,d.width));
		this.height = Std["int"](Math.max(this.height,d.height));
		return this;
	}
	,combineSize: function(d) {
		return this.clone().combine(d);
	}
	,getBounds: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		var p = new org_aswing_geom_IntPoint(x,y);
		var r = new org_aswing_geom_IntRectangle();
		r.setLocation(p);
		r.setSize(this);
		return r;
	}
	,equals: function(o) {
		var d;
		d = js_Boot.__instanceof(o,org_aswing_geom_IntDimension)?o:null;
		if(d == null) return false;
		return this.width == d.width && this.height == d.height;
	}
	,clone: function() {
		return new org_aswing_geom_IntDimension(this.width,this.height);
	}
	,toString: function() {
		return "IntDimension[" + this.width + "," + this.height + "]";
	}
	,__class__: org_aswing_geom_IntDimension
};
var org_aswing_geom_IntPoint = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = 0;
	this.y = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["org.aswing.geom.IntPoint"] = org_aswing_geom_IntPoint;
org_aswing_geom_IntPoint.__name__ = ["org","aswing","geom","IntPoint"];
org_aswing_geom_IntPoint.creatWithPoint = function(p) {
	return new org_aswing_geom_IntPoint(p.x | 0,p.y | 0);
};
org_aswing_geom_IntPoint.prototype = {
	toPoint: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,setWithPoint: function(p) {
		this.x = p.x | 0;
		this.y = p.y | 0;
	}
	,setLocation: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,setLocationXY: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,moveRadians: function(direction,distance) {
		this.x += Math.round(Math.cos(direction) * distance);
		this.y += Math.round(Math.sin(direction) * distance);
		return this;
	}
	,nextPoint: function(direction,distance) {
		return new org_aswing_geom_IntPoint(Std["int"](this.x + Math.cos(direction) * distance),Std["int"](this.y + Math.sin(direction) * distance));
	}
	,distanceSq: function(p) {
		var xx = p.x;
		var yy = p.y;
		return (this.x - xx) * (this.x - xx) + (this.y - yy) * (this.y - yy);
	}
	,distance: function(p) {
		return Std["int"](Math.sqrt(this.distanceSq(p)));
	}
	,equals: function(o) {
		var toCompare;
		toCompare = js_Boot.__instanceof(o,org_aswing_geom_IntPoint)?o:null;
		if(toCompare == null) return false;
		return this.x == toCompare.x && this.y == toCompare.y;
	}
	,clone: function() {
		return new org_aswing_geom_IntPoint(this.x,this.y);
	}
	,toString: function() {
		return "IntPoint[" + this.x + "," + this.y + "]";
	}
	,__class__: org_aswing_geom_IntPoint
};
var org_aswing_graphics_GradientBrush = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	this.fillType = fillType;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
};
$hxClasses["org.aswing.graphics.GradientBrush"] = org_aswing_graphics_GradientBrush;
org_aswing_graphics_GradientBrush.__name__ = ["org","aswing","graphics","GradientBrush"];
org_aswing_graphics_GradientBrush.__interfaces__ = [org_aswing_graphics_IBrush];
org_aswing_graphics_GradientBrush.prototype = {
	getFillType: function() {
		return this.fillType;
	}
	,setFillType: function(t) {
		this.fillType = t;
	}
	,getColors: function() {
		return this.colors;
	}
	,setColors: function(cs) {
		this.colors = cs;
	}
	,getAlphas: function() {
		return this.alphas;
	}
	,setAlphas: function(alphas) {
		this.alphas = alphas;
	}
	,getRatios: function() {
		return this.ratios;
	}
	,setRatios: function(ratios) {
		this.ratios = ratios;
	}
	,getMatrix: function() {
		return this.matrix;
	}
	,setMatrix: function(m) {
		this.matrix = m;
	}
	,beginFill: function(target) {
		target.beginGradientFill(this.fillType,this.colors,this.alphas,this.ratios,this.matrix,this.spreadMethod,this.interpolationMethod,this.focalPointRatio);
	}
	,endFill: function(target) {
		target.endFill();
	}
	,__class__: org_aswing_graphics_GradientBrush
};
var org_aswing_graphics_Graphics2D = function(target) {
	this.target = target;
};
$hxClasses["org.aswing.graphics.Graphics2D"] = org_aswing_graphics_Graphics2D;
org_aswing_graphics_Graphics2D.__name__ = ["org","aswing","graphics","Graphics2D"];
org_aswing_graphics_Graphics2D.prototype = {
	setTarget: function(target) {
		this.target = target;
	}
	,dispose: function() {
		this.target = null;
	}
	,startPen: function(p) {
		p.setTo(this.target);
	}
	,endPen: function() {
		this.target.lineStyle();
		this.target.moveTo(0,0);
	}
	,startBrush: function(b) {
		this.brush = b;
		b.beginFill(this.target);
	}
	,endBrush: function() {
		this.brush.endFill(this.target);
		this.target.moveTo(0,0);
	}
	,clear: function() {
		if(this.target != null) this.target.clear();
	}
	,drawLine: function(p,x1,y1,x2,y2) {
		this.startPen(p);
		this.line(x1,y1,x2,y2);
		this.endPen();
	}
	,drawPolyline: function(p,points) {
		this.startPen(p);
		this.polyline(points);
		this.endPen();
	}
	,fillPolyline: function(b,points) {
		this.startBrush(b);
		this.polyline(points);
		this.endBrush();
	}
	,drawPolygon: function(pen,points) {
		this.startPen(pen);
		this.polygon(points);
		this.endPen();
	}
	,fillPolygon: function(brush,points) {
		this.startBrush(brush);
		this.polygon(points);
		this.endBrush();
	}
	,fillPolygonRing: function(brush,points1,points2) {
		this.startBrush(brush);
		this.polygon(points1);
		this.polygon(points2);
		this.endBrush();
	}
	,drawRectangle: function(pen,x,y,width,height) {
		this.startPen(pen);
		this.rectangle(x,y,width,height);
		this.endPen();
	}
	,fillRectangle: function(brush,x,y,width,height) {
		this.startBrush(brush);
		this.rectangle(x,y,width,height);
		this.endBrush();
	}
	,fillRectangleRing: function(brush,centerX,centerY,width1,height1,width2,height2) {
		this.startBrush(brush);
		this.rectangle(centerX - width1 / 2,centerY - height1 / 2,width1,height1);
		this.rectangle(centerX - width2 / 2,centerY - height2 / 2,width2,height2);
		this.endBrush();
	}
	,fillRectangleRingWithThickness: function(brush,x,y,width,height,thickness) {
		this.startBrush(brush);
		this.rectangle(x,y,width,height);
		this.rectangle(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2);
		this.endBrush();
	}
	,drawCircle: function(pen,centerX,centerY,radius) {
		this.startPen(pen);
		this.circle(centerX,centerY,radius);
		this.endPen();
	}
	,fillCircle: function(brush,centerX,centerY,radius) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius);
		this.endBrush();
	}
	,fillCircleRing: function(brush,centerX,centerY,radius1,radius2) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius1);
		this.circle(centerX,centerY,radius2);
		this.endBrush();
	}
	,fillCircleRingWithThickness: function(brush,centerX,centerY,radius,thickness) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius);
		radius -= thickness;
		this.circle(centerX,centerY,radius);
		this.endBrush();
	}
	,drawEllipse: function(pen,x,y,width,height) {
		this.startPen(pen);
		this.ellipse(x,y,width,height);
		this.endPen();
	}
	,fillEllipse: function(brush,x,y,width,height) {
		this.startBrush(brush);
		this.ellipse(x,y,width,height);
		this.endBrush();
	}
	,fillEllipseRing: function(brush,centerX,centerY,width1,height1,width2,height2) {
		this.startBrush(brush);
		this.ellipse(centerX - width1 / 2,centerY - height1 / 2,width1,height1);
		this.ellipse(centerX - width2 / 2,centerY - height2 / 2,width2,height2);
		this.endBrush();
	}
	,fillEllipseRingWithThickness: function(brush,x,y,width,height,thickness) {
		this.startBrush(brush);
		this.ellipse(x,y,width,height);
		this.ellipse(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2);
		this.endBrush();
	}
	,drawRoundRect: function(pen,x,y,width,height,radius,trR,blR,brR) {
		if(brR == null) brR = -1;
		if(blR == null) blR = -1;
		if(trR == null) trR = -1;
		this.startPen(pen);
		this.roundRect(x,y,width,height,radius,trR,blR,brR);
		this.endPen();
	}
	,fillRoundRect: function(brush,x,y,width,height,radius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(bottomRightRadius == null) bottomRightRadius = -1;
		if(bottomLeftRadius == null) bottomLeftRadius = -1;
		if(topRightRadius == null) topRightRadius = -1;
		this.startBrush(brush);
		this.roundRect(x,y,width,height,radius,topRightRadius,bottomLeftRadius,bottomRightRadius);
		this.endBrush();
	}
	,fillRoundRectRing: function(brush,centerX,centerY,width1,height1,radius1,width2,height2,radius2) {
		this.startBrush(brush);
		this.roundRect(centerX - width1 / 2,centerY - height1 / 2,width1,height1,radius1);
		this.roundRect(centerX - width2 / 2,centerY - height2 / 2,width2,height2,radius2);
		this.endBrush();
	}
	,fillRoundRectRingWithThickness: function(brush,x,y,width,height,radius,thickness,innerRadius) {
		if(innerRadius == null) innerRadius = -1;
		this.startBrush(brush);
		this.roundRect(x,y,width,height,radius);
		if(innerRadius == -1) innerRadius = radius - thickness;
		this.roundRect(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,innerRadius);
		this.endBrush();
	}
	,beginFill: function(brush) {
		this.startBrush(brush);
	}
	,endFill: function() {
		this.endBrush();
		this.target.moveTo(0,0);
	}
	,beginDraw: function(pen) {
		this.startPen(pen);
	}
	,endDraw: function() {
		this.endPen();
		this.target.moveTo(0,0);
	}
	,moveTo: function(x,y) {
		this.target.moveTo(x,y);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.target.curveTo(controlX,controlY,anchorX,anchorY);
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.target.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
	}
	,lineTo: function(x,y) {
		this.target.lineTo(x,y);
	}
	,line: function(x1,y1,x2,y2) {
		this.target.moveTo(x1,y1);
		this.target.lineTo(x2,y2);
	}
	,polygon: function(points) {
		if(points.length > 1) {
			this.polyline(points);
			this.target.lineTo(points[0].x,points[0].y);
		}
	}
	,polyline: function(points) {
		if(points.length > 1) {
			this.target.moveTo(points[0].x,points[0].y);
			var _g1 = 1;
			var _g = points.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.target.lineTo(points[i].x,points[i].y);
			}
		}
	}
	,rectangle: function(x,y,width,height) {
		this.target.drawRect(x,y,width,height);
	}
	,ellipse: function(x,y,width,height) {
		this.target.drawEllipse(x,y,width,height);
	}
	,circle: function(centerX,centerY,radius) {
		this.target.drawCircle(centerX,centerY,radius);
	}
	,roundRect: function(x,y,width,height,radius,trR,blR,brR) {
		if(brR == null) brR = -1;
		if(blR == null) blR = -1;
		if(trR == null) trR = -1;
		var tlR = radius;
		if(trR == -1) trR = radius;
		if(blR == -1) blR = radius;
		if(brR == -1) brR = radius;
		this.target.moveTo(x + blR,y + height);
		this.target.lineTo(x + width - brR,y + height);
		this.target.curveTo(x + width,y + height,x + width,y + height - blR);
		this.target.lineTo(x + width,y + trR);
		this.target.curveTo(x + width,y,x + width - trR,y);
		this.target.lineTo(x + tlR,y);
		this.target.curveTo(x,y,x,y + tlR);
		this.target.lineTo(x,y + height - blR);
		this.target.curveTo(x,y + height,x + blR,y + height);
	}
	,wedge: function(radius,x,y,angle) {
		this.target.moveTo(0,0);
		this.target.lineTo(radius,0);
		var nSeg = Std["int"](Math.floor(angle / 30));
		var pSeg = angle - nSeg * 30;
		var a = 0.268;
		var endx;
		var endy;
		var ax;
		var ay;
		var storeCount = 0.0;
		var _g = 0;
		while(_g < nSeg) {
			var i = _g++;
			endx = radius * Math.cos((i + 1) * 30 * (Math.PI / 180));
			endy = radius * Math.sin((i + 1) * 30 * (Math.PI / 180));
			ax = endx + radius * a * Math.cos(((i + 1) * 30 - 90) * (Math.PI / 180));
			ay = endy + radius * a * Math.sin(((i + 1) * 30 - 90) * (Math.PI / 180));
			this.target.curveTo(ax,ay,endx,endy);
			storeCount = i + 1;
		}
		if(pSeg > 0) {
			a = Math.tan(pSeg / 2 * (Math.PI / 180));
			endx = radius * Math.cos((storeCount * 30 + pSeg) * (Math.PI / 180));
			endy = radius * Math.sin((storeCount * 30 + pSeg) * (Math.PI / 180));
			ax = endx + radius * a * Math.cos((storeCount * 30 + pSeg - 90) * (Math.PI / 180));
			ay = endy + radius * a * Math.sin((storeCount * 30 + pSeg - 90) * (Math.PI / 180));
			this.target.curveTo(ax,ay,endx,endy);
		}
		this.target.lineTo(0,0);
	}
	,__class__: org_aswing_graphics_Graphics2D
};
var org_aswing_graphics_IPen = function() { };
$hxClasses["org.aswing.graphics.IPen"] = org_aswing_graphics_IPen;
org_aswing_graphics_IPen.__name__ = ["org","aswing","graphics","IPen"];
org_aswing_graphics_IPen.prototype = {
	__class__: org_aswing_graphics_IPen
};
var org_aswing_graphics_Pen = function(color,thickness,pixelHinting,scaleMode,caps,joints,miterLimit) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 1;
	this._color = color;
	this._thickness = thickness;
	this._pixelHinting = pixelHinting;
	this._scaleMode = scaleMode;
	this._caps = caps;
	this._joints = joints;
	this._miterLimit = miterLimit;
};
$hxClasses["org.aswing.graphics.Pen"] = org_aswing_graphics_Pen;
org_aswing_graphics_Pen.__name__ = ["org","aswing","graphics","Pen"];
org_aswing_graphics_Pen.__interfaces__ = [org_aswing_graphics_IPen];
org_aswing_graphics_Pen.prototype = {
	getColor: function() {
		return this._color;
	}
	,setColor: function(color) {
		this._color = color;
	}
	,getThickness: function() {
		return this._thickness;
	}
	,setThickness: function(thickness) {
		this._thickness = thickness;
	}
	,getPixelHinting: function() {
		return this._pixelHinting;
	}
	,setPixelHinting: function(pixelHinting) {
		this._pixelHinting = pixelHinting;
	}
	,getScaleMode: function() {
		return this._scaleMode;
	}
	,setScaleMode: function(scaleMode) {
		this._scaleMode = scaleMode;
	}
	,getCaps: function() {
		return this._caps;
	}
	,setCaps: function(caps) {
		this._caps = caps;
	}
	,getJoints: function() {
		return this._joints;
	}
	,setJoints: function(joints) {
		this._joints = joints;
	}
	,getMiterLimit: function() {
		return this._miterLimit;
	}
	,setMiterLimit: function(miterLimit) {
		this._miterLimit = miterLimit;
	}
	,setTo: function(target) {
		target.lineStyle(this._thickness,this._color.getRGB(),this._color.getAlpha(),this._pixelHinting,this._scaleMode,this._caps,this._joints,this._miterLimit);
	}
	,__class__: org_aswing_graphics_Pen
};
var org_aswing_plaf_ASColorUIResource = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	org_aswing_ASColor.call(this,color,alpha);
};
$hxClasses["org.aswing.plaf.ASColorUIResource"] = org_aswing_plaf_ASColorUIResource;
org_aswing_plaf_ASColorUIResource.__name__ = ["org","aswing","plaf","ASColorUIResource"];
org_aswing_plaf_ASColorUIResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_ASColorUIResource.createResourceColor = function(color) {
	return new org_aswing_plaf_ASColorUIResource(color.getRGB(),color.getAlpha());
};
org_aswing_plaf_ASColorUIResource.__super__ = org_aswing_ASColor;
org_aswing_plaf_ASColorUIResource.prototype = $extend(org_aswing_ASColor.prototype,{
	__class__: org_aswing_plaf_ASColorUIResource
});
var org_aswing_plaf_ASFontUIResource = function(name,size,bold,italic,underline,embedFontsOrAdvancedPros) {
	if(underline == null) underline = false;
	if(italic == null) italic = false;
	if(bold == null) bold = false;
	if(size == null) size = 11;
	if(name == null) name = "Tahoma";
	org_aswing_ASFont.call(this,name,size,bold,italic,underline,embedFontsOrAdvancedPros);
};
$hxClasses["org.aswing.plaf.ASFontUIResource"] = org_aswing_plaf_ASFontUIResource;
org_aswing_plaf_ASFontUIResource.__name__ = ["org","aswing","plaf","ASFontUIResource"];
org_aswing_plaf_ASFontUIResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_ASFontUIResource.createResourceFont = function(font) {
	return new org_aswing_plaf_ASFontUIResource(font.getName(),font.getSize(),font.isBold(),font.isItalic(),font.isUnderline(),font.getAdvancedProperties());
};
org_aswing_plaf_ASFontUIResource.__super__ = org_aswing_ASFont;
org_aswing_plaf_ASFontUIResource.prototype = $extend(org_aswing_ASFont.prototype,{
	__class__: org_aswing_plaf_ASFontUIResource
});
var org_aswing_plaf_ArrayUIResource = function() { };
$hxClasses["org.aswing.plaf.ArrayUIResource"] = org_aswing_plaf_ArrayUIResource;
org_aswing_plaf_ArrayUIResource.__name__ = ["org","aswing","plaf","ArrayUIResource"];
var org_aswing_plaf_UIStyleTune = function(cg,bo,bg,sa,r,ma) {
	if(r == null) r = 0;
	if(sa == null) sa = 0.2;
	if(bg == null) bg = 0.35;
	if(bo == null) bo = 0.15;
	if(cg == null) cg = 0.2;
	org_aswing_StyleTune.call(this,cg,bo,bg,sa,r,ma);
};
$hxClasses["org.aswing.plaf.UIStyleTune"] = org_aswing_plaf_UIStyleTune;
org_aswing_plaf_UIStyleTune.__name__ = ["org","aswing","plaf","UIStyleTune"];
org_aswing_plaf_UIStyleTune.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_UIStyleTune.__super__ = org_aswing_StyleTune;
org_aswing_plaf_UIStyleTune.prototype = $extend(org_aswing_StyleTune.prototype,{
	__class__: org_aswing_plaf_UIStyleTune
});
var org_aswing_plaf_DefaultEmptyDecoraterResource = function() {
};
$hxClasses["org.aswing.plaf.DefaultEmptyDecoraterResource"] = org_aswing_plaf_DefaultEmptyDecoraterResource;
org_aswing_plaf_DefaultEmptyDecoraterResource.__name__ = ["org","aswing","plaf","DefaultEmptyDecoraterResource"];
org_aswing_plaf_DefaultEmptyDecoraterResource.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator,org_aswing_Border,org_aswing_Icon];
org_aswing_plaf_DefaultEmptyDecoraterResource.__properties__ = {get_NULL_FONT:"get_NULL_FONT",get_DEFAULT_FONT:"get_DEFAULT_FONT"}
org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_FONT = null;
org_aswing_plaf_DefaultEmptyDecoraterResource._DEFAULT_FONT = null;
org_aswing_plaf_DefaultEmptyDecoraterResource.get_DEFAULT_FONT = function() {
	if(null == org_aswing_plaf_DefaultEmptyDecoraterResource._DEFAULT_FONT) org_aswing_plaf_DefaultEmptyDecoraterResource._DEFAULT_FONT = new org_aswing_plaf_ASFontUIResource();
	return org_aswing_plaf_DefaultEmptyDecoraterResource._DEFAULT_FONT;
};
org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_FONT = null;
org_aswing_plaf_DefaultEmptyDecoraterResource._NULL_FONT = null;
org_aswing_plaf_DefaultEmptyDecoraterResource.get_NULL_FONT = function() {
	if(null == org_aswing_plaf_DefaultEmptyDecoraterResource._NULL_FONT) org_aswing_plaf_DefaultEmptyDecoraterResource._NULL_FONT = new org_aswing_ASFont();
	return org_aswing_plaf_DefaultEmptyDecoraterResource._NULL_FONT;
};
org_aswing_plaf_DefaultEmptyDecoraterResource.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,getIconWidth: function(c) {
		return 0;
	}
	,getIconHeight: function(c) {
		return 0;
	}
	,updateIcon: function(com,g,x,y) {
	}
	,updateBorder: function(com,g,bounds) {
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(0,0,0,0);
	}
	,updateDecorator: function(com,g,bounds) {
	}
	,__class__: org_aswing_plaf_DefaultEmptyDecoraterResource
};
var org_aswing_plaf_EmptyLayoutUIResourse = function() {
	org_aswing_EmptyLayout.call(this);
};
$hxClasses["org.aswing.plaf.EmptyLayoutUIResourse"] = org_aswing_plaf_EmptyLayoutUIResourse;
org_aswing_plaf_EmptyLayoutUIResourse.__name__ = ["org","aswing","plaf","EmptyLayoutUIResourse"];
org_aswing_plaf_EmptyLayoutUIResourse.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_EmptyLayoutUIResourse.__super__ = org_aswing_EmptyLayout;
org_aswing_plaf_EmptyLayoutUIResourse.prototype = $extend(org_aswing_EmptyLayout.prototype,{
	__class__: org_aswing_plaf_EmptyLayoutUIResourse
});
var org_aswing_plaf_InsetsUIResource = function(top,left,bottom,right) {
	if(right == null) right = 0;
	if(bottom == null) bottom = 0;
	if(left == null) left = 0;
	if(top == null) top = 0;
	org_aswing_Insets.call(this,top,left,bottom,right);
};
$hxClasses["org.aswing.plaf.InsetsUIResource"] = org_aswing_plaf_InsetsUIResource;
org_aswing_plaf_InsetsUIResource.__name__ = ["org","aswing","plaf","InsetsUIResource"];
org_aswing_plaf_InsetsUIResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_InsetsUIResource.__super__ = org_aswing_Insets;
org_aswing_plaf_InsetsUIResource.prototype = $extend(org_aswing_Insets.prototype,{
	createInsetsResource: function(insets) {
		return new org_aswing_plaf_InsetsUIResource(insets.top,insets.left,insets.bottom,insets.right);
	}
	,__class__: org_aswing_plaf_InsetsUIResource
});
var org_aswing_plaf_EmptyUIResources = function() { };
$hxClasses["org.aswing.plaf.EmptyUIResources"] = org_aswing_plaf_EmptyUIResources;
org_aswing_plaf_EmptyUIResources.__name__ = ["org","aswing","plaf","EmptyUIResources"];
org_aswing_plaf_EmptyUIResources.__properties__ = {get_FONT:"get_FONT"}
org_aswing_plaf_EmptyUIResources.FONT = null;
org_aswing_plaf_EmptyUIResources._FONT = null;
org_aswing_plaf_EmptyUIResources.get_FONT = function() {
	if(null == org_aswing_plaf_EmptyUIResources._FONT) org_aswing_plaf_EmptyUIResources._FONT = new org_aswing_plaf_ASFontUIResource();
	return org_aswing_plaf_EmptyUIResources._FONT;
};
var org_aswing_plaf_FrameUI = function() { };
$hxClasses["org.aswing.plaf.FrameUI"] = org_aswing_plaf_FrameUI;
org_aswing_plaf_FrameUI.__name__ = ["org","aswing","plaf","FrameUI"];
org_aswing_plaf_FrameUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_FrameUI.prototype = {
	__class__: org_aswing_plaf_FrameUI
};
var org_aswing_plaf_TreeUI = function() { };
$hxClasses["org.aswing.plaf.TreeUI"] = org_aswing_plaf_TreeUI;
org_aswing_plaf_TreeUI.__name__ = ["org","aswing","plaf","TreeUI"];
org_aswing_plaf_TreeUI.__interfaces__ = [org_aswing_plaf_ComponentUI];
org_aswing_plaf_TreeUI.prototype = {
	__class__: org_aswing_plaf_TreeUI
};
var org_aswing_plaf_basic_BasicAccordionUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicAccordionUI"] = org_aswing_plaf_basic_BasicAccordionUI;
org_aswing_plaf_basic_BasicAccordionUI.__name__ = ["org","aswing","plaf","basic","BasicAccordionUI"];
org_aswing_plaf_basic_BasicAccordionUI.__interfaces__ = [org_aswing_LayoutManager];
org_aswing_plaf_basic_BasicAccordionUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicAccordionUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.headers = [];
		this.destSize = new org_aswing_geom_IntDimension();
		this.accordion = js_Boot.__instanceof(c,org_aswing_JAccordion)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.accordion = js_Boot.__instanceof(c,org_aswing_JAccordion)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Accordion.";
	}
	,installDefaults: function() {
		this.accordion.setLayout(this);
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.accordion,pp);
		org_aswing_LookAndFeel.installColorsAndFont(this.accordion,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.accordion,pp);
		this.motionSpeed = this.getInt(pp + "motionSpeed");
		if(this.motionSpeed <= 0 || this.motionSpeed == 0) this.motionSpeed = org_aswing_plaf_basic_BasicAccordionUI.MOTION_SPEED;
		var tabMargin = this.getInsets(pp + "tabMargin");
		if(tabMargin == null) tabMargin = new org_aswing_plaf_InsetsUIResource(1,1,1,1);
		var i = this.accordion.getMargin();
		if(i == null || js_Boot.__instanceof(i,org_aswing_plaf_UIResource)) this.accordion.setMargin(tabMargin);
		this.accordion.itemContainerClass = this.getClass(pp + "itemContainer");
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.accordion);
	}
	,installComponents: function() {
		this.headerContainer = new openfl_display_Sprite();
		this.accordion.addChild(this.headerContainer);
		this.synTabs();
		this.synHeaderProperties();
	}
	,uninstallComponents: function() {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getHeader(i);
			this.headerContainer.removeChild(header.getTabComponent());
			header.getTabComponent().removeEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__tabClick));
		}
		this.headers.slice(0);
		this.accordion.removeChild(this.headerContainer);
	}
	,installListeners: function() {
		this.accordion.addStateListener($bind(this,this.__onSelectionChanged));
		this.accordion.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.motionTimer = new org_aswing_util_Timer(40);
		this.motionTimer.addEventListener("act",$bind(this,this.__onMotion));
	}
	,uninstallListeners: function() {
		this.accordion.removeStateListener($bind(this,this.__onSelectionChanged));
		this.accordion.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.motionTimer.stop();
		this.motionTimer = null;
	}
	,paintFocus: function(c,g,b) {
		var header = this.getSelectedHeader();
		if(header != null) header.getTabComponent().paintFocusRect(true); else org_aswing_plaf_BaseComponentUI.prototype.paintFocus.call(this,c,g,b);
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
	}
	,createNewHeader: function() {
		var header = org_aswing_AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "header"),org_aswing_plaf_basic_tabbedpane_Tab);
		if(header == null) header = new org_aswing_plaf_basic_accordion_BasicAccordionHeader();
		header.initTab(this.accordion);
		header.getTabComponent().setFocusable(false);
		return header;
	}
	,getHeader: function(i) {
		return org_aswing_AsWingUtils["as"](this.headers[i],org_aswing_plaf_basic_tabbedpane_Tab);
	}
	,synTabs: function() {
		var comCount = this.accordion.getComponentCount();
		if(comCount != this.headers.length) {
			var i;
			var header;
			if(comCount > this.headers.length) {
				var _g = this.headers.length;
				while(_g < comCount) {
					var i1 = _g++;
					header = this.createNewHeader();
					header.setTextAndIcon(this.accordion.getTitleAt(i1),this.accordion.getIconAt(i1));
					this.setHeaderProperties(header);
					header.getTabComponent().setToolTipText(this.accordion.getTipAt(i1));
					header.getTabComponent().addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__tabClick));
					this.headerContainer.addChild(header.getTabComponent());
					this.headers.push(header);
				}
			} else {
				var _g1 = 0;
				var _g2 = this.headers.length - comCount;
				while(_g1 < _g2) {
					var i2 = _g1++;
					header = org_aswing_AsWingUtils["as"](this.headers.pop(),org_aswing_plaf_basic_tabbedpane_Tab);
					header.getTabComponent().removeEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__tabClick));
					this.headerContainer.removeChild(header.getTabComponent());
				}
			}
		}
	}
	,synHeaderProperties: function() {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getHeader(i);
			header.setTextAndIcon(this.accordion.getTitleAt(i),this.accordion.getIconAt(i));
			this.setHeaderProperties(header);
			header.getTabComponent().setUIElement(true);
			header.getTabComponent().setEnabled(this.accordion.isEnabledAt(i));
			header.getTabComponent().setVisible(this.accordion.isVisibleAt(i));
			header.getTabComponent().setToolTipText(this.accordion.getTipAt(i));
			header.setTabPlacement(i);
			var h;
			h = js_Boot.__instanceof(header,org_aswing_plaf_basic_accordion_BasicAccordionHeader)?header:null;
			if(null == h) return;
			h.set_maxPlacement(this.headers.length - 1);
		}
	}
	,setHeaderProperties: function(header) {
		header.setHorizontalAlignment(this.accordion.getHorizontalAlignment());
		header.setHorizontalTextPosition(this.accordion.getHorizontalTextPosition());
		header.setIconTextGap(this.accordion.getIconTextGap());
		header.setMargin(this.accordion.getMargin());
		header.setVerticalAlignment(this.accordion.getVerticalAlignment());
		header.setVerticalTextPosition(this.accordion.getVerticalTextPosition());
		header.setFont(this.accordion.getFont());
		header.setForeground(this.accordion.getForeground());
	}
	,ensureHeadersOnTopDepths: function() {
		this.accordion.bringToTop(this.headerContainer);
	}
	,getSelectedHeader: function() {
		if(this.accordion.getSelectedIndex() >= 0) return this.getHeader(this.accordion.getSelectedIndex()); else return null;
	}
	,indexOfHeaderComponent: function(tab) {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getHeader(i).getTabComponent() == tab) return i;
		}
		return -1;
	}
	,__tabClick: function(e) {
		this.accordion.setSelectedIndex(this.indexOfHeaderComponent(org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_Component)));
	}
	,__onSelectionChanged: function(e) {
		this.accordion.revalidate();
		this.accordion.repaint();
	}
	,__onKeyDown: function(e) {
		if(this.headers.length > 0) {
			var n = this.accordion.getComponentCount();
			var code = e.keyCode;
			var index;
			if(code == org_aswing_AWKeyboard.DOWN) {
				this.setTraversingTrue();
				index = this.accordion.getSelectedIndex();
				index++;
				while(index < n && (!this.accordion.isEnabledAt(index) || !this.accordion.isVisibleAt(index))) index++;
				if(index >= n) return;
				this.accordion.setSelectedIndex(index);
			} else if(code == org_aswing_AWKeyboard.UP) {
				this.setTraversingTrue();
				index = this.accordion.getSelectedIndex();
				index--;
				while(index >= 0 && (!this.accordion.isEnabledAt(index) || !this.accordion.isVisibleAt(index))) index--;
				if(index < 0) return;
				this.accordion.setSelectedIndex(index);
			}
		}
	}
	,setTraversingTrue: function() {
		var fm = org_aswing_FocusManager.getManager(this.accordion.stage);
		if(fm != null) fm.setTraversing(true);
	}
	,__onMotion: function(e) {
		var isFinished = true;
		var n = this.headerDestinations.length;
		var selected = this.accordion.getSelectedIndex();
		var i = 0;
		var child;
		var _g = 0;
		while(_g < n) {
			var i1 = _g++;
			var header = this.getHeader(i1);
			var tab = header.getTabComponent();
			var curY = tab.getY();
			var desY = this.headerDestinations[i1];
			var toY;
			if(Math.abs(desY - curY) <= this.motionSpeed) toY = desY; else {
				if(desY > curY) toY = curY + this.motionSpeed; else toY = curY - this.motionSpeed;
				isFinished = false;
			}
			tab.setLocationXY(tab.getX(),toY);
			tab.validate();
			child = this.accordion.getComponent(i1);
			child.setLocationXY(child.getX(),toY + tab.getHeight());
		}
		this.adjustClipSizes();
		if(isFinished) {
			this.motionTimer.stop();
			var _g1 = 0;
			while(_g1 < n) {
				var i2 = _g1++;
				child = this.accordion.getComponent(i2);
				if(selected == i2) child.setVisible(true); else child.setVisible(false);
			}
		}
		var _g2 = 0;
		while(_g2 < n) {
			var i3 = _g2++;
			child = this.accordion.getComponent(i3);
			child.validate();
		}
	}
	,adjustClipSizes: function() {
		var n = this.headerDestinations.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var child = this.accordion.getComponent(i);
			var orderY = this.childrenOrderYs[i];
			if(child.isVisible()) child.setClipSize(new org_aswing_geom_IntDimension(this.destSize.width,this.destSize.height - (child.getY() - orderY)));
		}
	}
	,addLayoutComponent: function(comp,constraints) {
		this.synTabs();
	}
	,removeLayoutComponent: function(comp) {
		this.synTabs();
	}
	,invalidateLayout: function(target) {
	}
	,layoutContainer: function(target) {
		this.synHeaderProperties();
		var insets = this.accordion.getInsets();
		var i = 0;
		var x = insets.left;
		var y = insets.top;
		var w = this.accordion.getWidth() - x - insets.right;
		var h = this.accordion.getHeight() - y - insets.bottom;
		var header;
		var tab;
		var size;
		var count = this.accordion.getComponentCount();
		var selected = this.accordion.getSelectedIndex();
		if(selected < 0) {
			if(count > 0) this.accordion.setSelectedIndex(0);
			return;
		}
		this.headerDestinations = [];
		this.childrenOrderYs = [];
		var vX;
		var vY;
		var vWidth;
		var vHeight;
		vHeight = h;
		vWidth = w;
		vX = x;
		var _g1 = 0;
		var _g = selected + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(!this.accordion.isVisibleAt(i1)) continue;
			header = this.getHeader(i1);
			tab = header.getTabComponent();
			size = tab.getPreferredSize();
			tab.setSizeWH(w,size.height);
			tab.setLocationXY(x,tab.getY());
			this.accordion.getComponent(i1).setLocationXY(x,tab.getY() + size.height);
			this.headerDestinations[i1] = y;
			y += size.height;
			this.childrenOrderYs[i1] = y;
			vHeight -= size.height;
			if(i1 == selected) {
				header.setSelected(true);
				this.accordion.getComponent(i1).setVisible(true);
			} else header.setSelected(false);
			tab.validate();
		}
		vY = y;
		var _g2 = selected + 1;
		while(_g2 < count) {
			var i2 = _g2++;
			if(!this.accordion.isVisibleAt(i2)) continue;
			header = this.getHeader(i2);
			tab = header.getTabComponent();
			y += tab.getPreferredSize().height;
			this.childrenOrderYs[i2] = y;
		}
		y = this.accordion.getHeight() - insets.bottom;
		i = count - 1;
		while(i > selected) {
			if(!this.accordion.isVisibleAt(i)) continue;
			header = this.getHeader(i);
			tab = header.getTabComponent();
			size = tab.getPreferredSize();
			y -= size.height;
			this.headerDestinations[i] = y;
			tab.setSizeWH(w,size.height);
			tab.setLocationXY(x,tab.getY());
			this.accordion.getComponent(i).setLocationXY(x,tab.getY() + size.height);
			header.setSelected(false);
			vHeight -= size.height;
			tab.validate();
			i--;
		}
		this.destSize.setSizeWH(vWidth,vHeight);
		var _g3 = 0;
		while(_g3 < count) {
			var i3 = _g3++;
			if(!this.accordion.isVisibleAt(i3)) continue;
			if(this.accordion.getComponent(i3).isVisible()) this.accordion.getComponent(i3).setSize(this.destSize);
		}
		this.motionTimer.start();
		this.__onMotion(null);
		this.ensureHeadersOnTopDepths();
	}
	,preferredLayoutSize: function(target) {
		if(target == this.accordion) {
			this.synHeaderProperties();
			var insets = this.accordion.getInsets();
			var w = 0;
			var h = 0;
			var i = 0;
			var size;
			var _g1 = 0;
			var _g = this.accordion.getComponentCount();
			while(_g1 < _g) {
				var i1 = _g1++;
				size = this.accordion.getComponent(i1).getPreferredSize();
				w = Std["int"](Math.max(w,size.width));
				h = Std["int"](Math.max(h,size.height));
			}
			var _g11 = 0;
			var _g2 = this.accordion.getComponentCount();
			while(_g11 < _g2) {
				var i2 = _g11++;
				size = this.getHeader(i2).getTabComponent().getPreferredSize();
				w = Std["int"](Math.max(w,size.width));
				h += size.height;
			}
			return insets.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		}
		return null;
	}
	,minimumLayoutSize: function(target) {
		if(target == this.accordion) {
			this.synHeaderProperties();
			var insets = this.accordion.getInsets();
			var w = 0;
			var h = 0;
			var i = 0;
			var size;
			var _g1 = 0;
			var _g = this.accordion.getComponentCount();
			while(_g1 < _g) {
				var i1 = _g1++;
				size = this.accordion.getComponent(i1).getMinimumSize();
				w = Std["int"](Math.max(w,size.width));
				h = Std["int"](Math.max(h,size.height));
			}
			var _g11 = 0;
			var _g2 = this.accordion.getComponentCount();
			while(_g11 < _g2) {
				var i2 = _g11++;
				size = this.getHeader(i2).getTabComponent().getMinimumSize();
				w = Std["int"](Math.max(w,size.width));
				h += size.height;
			}
			return insets.getOutsideSize(new org_aswing_geom_IntDimension(w,h));
		}
		return null;
	}
	,maximumLayoutSize: function(target) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,getMaximumSize: function(c) {
		return this.maximumLayoutSize(this.accordion);
	}
	,getMinimumSize: function(c) {
		return this.minimumLayoutSize(this.accordion);
	}
	,getPreferredSize: function(c) {
		return this.preferredLayoutSize(this.accordion);
	}
	,__class__: org_aswing_plaf_basic_BasicAccordionUI
});
var org_aswing_plaf_basic_BasicAdjusterUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.inputText = new org_aswing_JTextField("",3);
	this.inputText.setFocusable(false);
	this.popupSlider = new org_aswing_JSlider();
	this.popupSlider.setFocusable(false);
	this.popupSlider.setOpaque(false);
};
$hxClasses["org.aswing.plaf.basic.BasicAdjusterUI"] = org_aswing_plaf_basic_BasicAdjusterUI;
org_aswing_plaf_basic_BasicAdjusterUI.__name__ = ["org","aswing","plaf","basic","BasicAdjusterUI"];
org_aswing_plaf_basic_BasicAdjusterUI.__interfaces__ = [org_aswing_plaf_AdjusterUI];
org_aswing_plaf_basic_BasicAdjusterUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicAdjusterUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPopupSlider: function() {
		return this.popupSlider;
	}
	,getInputText: function() {
		return this.inputText;
	}
	,installUI: function(c) {
		this.adjuster = js_Boot.__instanceof(c,org_aswing_JAdjuster)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.adjuster = js_Boot.__instanceof(c,org_aswing_JAdjuster)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.adjuster,pp);
		org_aswing_LookAndFeel.installColorsAndFont(this.adjuster,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.adjuster,pp);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.adjuster);
	}
	,installComponents: function() {
		this.initInputText();
		this.initPopupSlider();
		this.arrowButton = this.createArrowButton();
		this.arrowButton.setUIElement(true);
		this.popupSlider.setUIElement(true);
		this.popupSliderUI = this.createPopupSliderUI();
		this.popupSlider.setUI(this.popupSliderUI);
		this.popupSlider.setModel(this.adjuster.getModel());
		this.adjuster.addChild(this.inputText);
		this.adjuster.addChild(this.arrowButton);
		this.inputText.getTextField().addEventListener(openfl_events_Event.CHANGE,$bind(this,this.__textChanged));
		this.inputText.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.arrowButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onArrowButtonPressed));
		this.arrowButton.addEventListener("release",$bind(this,this.__onArrowButtonReleased));
	}
	,uninstallComponents: function() {
		this.inputText.getTextField().removeEventListener(openfl_events_Event.CHANGE,$bind(this,this.__textChanged));
		this.inputText.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.arrowButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onArrowButtonPressed));
		this.arrowButton.removeEventListener("release",$bind(this,this.__onArrowButtonReleased));
		this.adjuster.removeChild(this.arrowButton);
		this.adjuster.removeChild(this.inputText);
		if(this.popup != null && this.popup.isVisible()) this.popup.dispose();
	}
	,installListeners: function() {
		this.adjuster.addStateListener($bind(this,this.__onValueChanged));
		this.adjuster.addEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.addEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.addEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,uninstallListeners: function() {
		this.adjuster.removeStateListener($bind(this,this.__onValueChanged));
		this.adjuster.removeEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.removeEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.fillInputTextWithCurrentValue();
		this.layoutAdjuster();
		this.getInputText().setEditable(this.adjuster.isEditable());
		this.getInputText().setEnabled(this.adjuster.isEnabled());
		this.arrowButton.setEnabled(this.adjuster.isEnabled());
		this.inputText.setFont(this.adjuster.getFont());
		this.inputText.setForeground(this.adjuster.getForeground());
	}
	,paintBackGround: function(c,g,b) {
	}
	,getInternalFocusObject: function(c) {
		return this.inputText.getTextField();
	}
	,initInputText: function() {
		this.inputText.setForeground(null);
		this.inputText.setColumns(this.adjuster.getColumns());
		this.inputText.setBackgroundDecorator(null);
		this.inputText.setOpaque(false);
		this.inputText.setBorder(null);
		this.inputText.setFont(this.adjuster.getFont());
	}
	,initPopupSlider: function() {
		this.popupSlider.setOrientation(this.adjuster.getOrientation());
	}
	,createArrowButton: function() {
		var btn = new org_aswing_JButton("",this.createArrowIcon());
		btn.setFocusable(false);
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org_aswing_Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		btn.setForeground(null);
		btn.setBackground(null);
		btn.setFont(null);
		return btn;
	}
	,createPopupSliderUI: function() {
		return new org_aswing_plaf_basic_adjuster_PopupSliderUI();
	}
	,createArrowIcon: function() {
		return new org_aswing_plaf_basic_icon_ArrowIcon(Math.PI / 2,16);
	}
	,getPopup: function() {
		if(this.popup == null) {
			this.popup = new org_aswing_JPopup();
			this.popup.append(this.popupSlider,"Center");
			this.popup.set_filters([new openfl_filters_DropShadowFilter(4,45,0,0.3)]);
		}
		return this.popup;
	}
	,fillInputTextWithCurrentValue: function() {
		this.inputText.setText(this.getShouldFilledText());
	}
	,getShouldFilledText: function() {
		var value = this.adjuster.getValue();
		var text = (this.adjuster.getValueTranslator())(value);
		return text;
	}
	,getTextButtonGap: function() {
		return 1;
	}
	,layoutAdjuster: function() {
		var td = this.adjuster.getSize();
		var insets = this.adjuster.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var gap = this.getTextButtonGap();
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.arrowButton.getPreferredSize();
		this.arrowButton.setSizeWH(buttonSize.width,height);
		this.arrowButton.setLocationXY(right - buttonSize.width,top);
		this.inputText.setLocationXY(left,top);
		this.inputText.setSizeWH(td.width - insets.left - insets.right - buttonSize.width - gap,height);
	}
	,getPreferredSize: function(c) {
		var insets = this.adjuster.getInsets();
		var textSize = this.inputText.getPreferredSize();
		var btnSize = this.arrowButton.getPreferredSize();
		var size = new org_aswing_geom_IntDimension(textSize.width + this.getTextButtonGap() + btnSize.width,Std["int"](Math.max(textSize.height,btnSize.height)));
		return insets.getOutsideSize(size);
	}
	,getMinimumSize: function(c) {
		return this.adjuster.getInsets().getOutsideSize(this.arrowButton.getPreferredSize());
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__onValueChanged: function(e) {
		if(this.textInputing != true) this.fillInputTextWithCurrentValue();
	}
	,__onInputTextMouseWheel: function(e) {
		this.adjuster.setValue(this.adjuster.getValue() + e.delta * this.getUnitIncrement());
	}
	,__textChanged: function(e) {
		this.textInputing = true;
		var text = this.inputText.getText();
		var value = Std["int"]((this.adjuster.getValueParser())(text));
		this.adjuster.setValue(value);
		this.textInputing = false;
	}
	,__inputTextAction: function(fireActOnlyIfChanged) {
		if(fireActOnlyIfChanged == null) fireActOnlyIfChanged = false;
		var text = this.inputText.getText();
		var value = Std["int"]((this.adjuster.getValueParser())(text));
		this.adjuster.setValue(value);
		this.fillInputTextWithCurrentValue();
		if(fireActOnlyIfChanged != true) this.fireActionEvent(); else if(value != this.startEditingValue) this.fireActionEvent();
	}
	,fireActionEvent: function() {
		this.startEditingValue = this.adjuster.getValue();
		this.adjuster.dispatchEvent(new org_aswing_event_AWEvent("act"));
	}
	,__onFocusGained: function(e) {
		this.startEditingValue = this.adjuster.getValue();
	}
	,__onFocusLost: function(e) {
		this.__inputTextAction(true);
	}
	,__onInputTextKeyDown: function(e) {
		var code = e.keyCode;
		var unit = this.getUnitIncrement();
		var block;
		if(this.popupSlider.getMajorTickSpacing() > 0) block = this.popupSlider.getMajorTickSpacing(); else block = unit * 10;
		var delta = 0;
		if(code == org_aswing_AWKeyboard.ENTER) {
			this.__inputTextAction(false);
			return;
		}
		if(code == org_aswing_AWKeyboard.UP) delta = unit; else if(code == org_aswing_AWKeyboard.DOWN) delta = -unit; else if(code == org_aswing_AWKeyboard.PAGE_UP) delta = block; else if(code == org_aswing_AWKeyboard.PAGE_DOWN) delta = -block; else if(code == org_aswing_AWKeyboard.HOME) {
			this.adjuster.setValue(this.adjuster.getMinimum());
			return;
		} else if(code == org_aswing_AWKeyboard.END) {
			this.adjuster.setValue(this.adjuster.getMaximum() - this.adjuster.getExtent());
			return;
		}
		this.adjuster.setValue(this.adjuster.getValue() + delta);
	}
	,__onArrowButtonPressed: function(e) {
		var popupWindow = this.getPopup();
		if(popupWindow.isOnStage()) popupWindow.dispose();
		popupWindow.changeOwner(org_aswing_AsWingUtils.getOwnerAncestor(this.adjuster));
		popupWindow.pack();
		popupWindow.show();
		var max = this.adjuster.getMaximum();
		var min = this.adjuster.getMinimum();
		var pw = popupWindow.getWidth();
		var ph = popupWindow.getHeight();
		var sw = this.getSliderTrackWidth();
		var sh = this.getSliderTrackHeight();
		var insets = popupWindow.getInsets();
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		insets.top += sliderInsets.top;
		insets.left += sliderInsets.left;
		insets.bottom += sliderInsets.bottom;
		insets.right += sliderInsets.right;
		var mouseP = this.adjuster.getMousePosition();
		var windowP = new org_aswing_geom_IntPoint(mouseP.x - pw / 2 | 0,mouseP.y - ph / 2 | 0);
		var value = this.adjuster.getValue();
		var valueL;
		if(this.adjuster.getOrientation() == 1) {
			valueL = (value - min) / (max - min) * sh;
			windowP.y = mouseP.y - (sh - valueL) - insets.top | 0;
		} else {
			valueL = (value - min) / (max - min) * sw;
			windowP.x = mouseP.x - valueL - insets.left | 0;
			windowP.y += Std["int"](this.adjuster.getHeight() / 4);
		}
		var agp = this.adjuster.getGlobalLocation();
		agp.move(windowP.x,windowP.y);
		popupWindow.setLocation(agp);
		this.startMousePoint = this.adjuster.getMousePosition();
		this.startValue = this.adjuster.getValue();
		if(org_aswing_AsWingManager.getStage() != null) {
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoveOnSlider),false,0,false);
			this.adjuster.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onMouseMoveOnSliderRemovedFromStage),false,0,false);
		}
	}
	,__onMouseMoveOnSliderRemovedFromStage: function(e) {
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoveOnSlider));
		this.adjuster.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onMouseMoveOnSliderRemovedFromStage));
	}
	,__onArrowButtonReleased: function(e) {
		if(this.adjuster.stage != null) this.__onMouseMoveOnSliderRemovedFromStage(null);
		this.popup.dispose();
		this.fireActionEvent();
	}
	,__onMouseMoveOnSlider: function(e) {
		var delta = 0;
		var valueDelta = 0;
		var range = this.adjuster.getMaximum() - this.adjuster.getMinimum();
		var p = this.adjuster.getMousePosition();
		if(this.adjuster.getOrientation() == 1) {
			delta = -p.y + this.startMousePoint.y;
			valueDelta = delta / this.getSliderTrackHeight() * range;
		} else {
			delta = p.x - this.startMousePoint.x;
			valueDelta = delta / this.getSliderTrackWidth() * range;
		}
		this.adjuster.setValue(this.startValue + valueDelta | 0);
		e.updateAfterEvent();
	}
	,getUnitIncrement: function() {
		var unit = 0;
		if(this.popupSlider.getMinorTickSpacing() > 0) unit = this.popupSlider.getMinorTickSpacing(); else if(this.popupSlider.getMajorTickSpacing() > 0) unit = this.popupSlider.getMajorTickSpacing(); else {
			var range = this.popupSlider.getMaximum() - this.popupSlider.getMinimum();
			if(range > 2) unit = Std["int"](Math.max(1,Math.round(range / 500))); else unit = range / 100 | 0;
		}
		return unit;
	}
	,getSliderTrackWidth: function() {
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		var w = this.popupSlider.getWidth();
		if(w == 0) w = this.popupSlider.getPreferredWidth();
		return w - sliderInsets.left - sliderInsets.right;
	}
	,getSliderTrackHeight: function() {
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		var h = this.popupSlider.getHeight();
		if(h == 0) h = this.popupSlider.getPreferredHeight();
		return h - sliderInsets.top - sliderInsets.bottom;
	}
	,__class__: org_aswing_plaf_basic_BasicAdjusterUI
});
var org_aswing_plaf_basic_BasicToggleButtonUI = function() {
	org_aswing_plaf_basic_BasicButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicToggleButtonUI"] = org_aswing_plaf_basic_BasicToggleButtonUI;
org_aswing_plaf_basic_BasicToggleButtonUI.__name__ = ["org","aswing","plaf","basic","BasicToggleButtonUI"];
org_aswing_plaf_basic_BasicToggleButtonUI.__super__ = org_aswing_plaf_basic_BasicButtonUI;
org_aswing_plaf_basic_BasicToggleButtonUI.prototype = $extend(org_aswing_plaf_basic_BasicButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "ToggleButton.";
	}
	,paintIcon: function(b,g,iconRect) {
		var model = b.getModel();
		var icon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(!model.isEnabled()) {
			if(model.isSelected()) icon = b.getDisabledSelectedIcon(); else icon = b.getDisabledIcon();
		} else if(model.isPressed() && model.isArmed()) {
			icon = b.getPressedIcon();
			if(icon == null) icon = b.getSelectedIcon();
		} else if(model.isSelected()) {
			if(b.isRollOverEnabled() && model.isRollOver()) {
				icon = b.getRollOverSelectedIcon();
				if(icon == null) icon = b.getSelectedIcon();
			} else icon = b.getSelectedIcon();
		} else if(b.isRollOverEnabled() && model.isRollOver()) icon = b.getRollOverIcon();
		if(icon == null) icon = b.getIcon();
		if(icon == null) icon = this.getIconToLayout();
		if(icon != null) {
			this.setIconVisible(icon,true);
			icon.updateIcon(b,g,iconRect.x,iconRect.y);
		}
	}
	,__class__: org_aswing_plaf_basic_BasicToggleButtonUI
});
var org_aswing_plaf_basic_BasicRadioButtonUI = function() {
	org_aswing_plaf_basic_BasicToggleButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicRadioButtonUI"] = org_aswing_plaf_basic_BasicRadioButtonUI;
org_aswing_plaf_basic_BasicRadioButtonUI.__name__ = ["org","aswing","plaf","basic","BasicRadioButtonUI"];
org_aswing_plaf_basic_BasicRadioButtonUI.__super__ = org_aswing_plaf_basic_BasicToggleButtonUI;
org_aswing_plaf_basic_BasicRadioButtonUI.prototype = $extend(org_aswing_plaf_basic_BasicToggleButtonUI.prototype,{
	installDefaults: function(b) {
		org_aswing_plaf_basic_BasicToggleButtonUI.prototype.installDefaults.call(this,b);
		this.defaultIcon = this.getIcon(this.getPropertyPrefix() + "icon");
	}
	,uninstallDefaults: function(b) {
		org_aswing_plaf_basic_BasicToggleButtonUI.prototype.uninstallDefaults.call(this,b);
		if(this.defaultIcon.getDisplay(b) != null) {
			if(this.button.contains(this.defaultIcon.getDisplay(b))) this.button.removeChild(this.defaultIcon.getDisplay(b));
		}
	}
	,getPropertyPrefix: function() {
		return "RadioButton.";
	}
	,getDefaultIcon: function() {
		return this.defaultIcon;
	}
	,getIconToLayout: function() {
		if(this.button.getIcon() == null) {
			if(this.defaultIcon.getDisplay(this.button) != null) {
				if(!this.button.contains(this.defaultIcon.getDisplay(this.button))) this.button.addChild(this.defaultIcon.getDisplay(this.button));
			}
			return this.defaultIcon;
		} else return this.button.getIcon();
	}
	,paintBackGround: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,__class__: org_aswing_plaf_basic_BasicRadioButtonUI
});
var org_aswing_plaf_basic_BasicCheckBoxUI = function() {
	org_aswing_plaf_basic_BasicRadioButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicCheckBoxUI"] = org_aswing_plaf_basic_BasicCheckBoxUI;
org_aswing_plaf_basic_BasicCheckBoxUI.__name__ = ["org","aswing","plaf","basic","BasicCheckBoxUI"];
org_aswing_plaf_basic_BasicCheckBoxUI.__super__ = org_aswing_plaf_basic_BasicRadioButtonUI;
org_aswing_plaf_basic_BasicCheckBoxUI.prototype = $extend(org_aswing_plaf_basic_BasicRadioButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "CheckBox.";
	}
	,__class__: org_aswing_plaf_basic_BasicCheckBoxUI
});
var org_aswing_plaf_basic_BasicFrameTitleBarUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicFrameTitleBarUI"] = org_aswing_plaf_basic_BasicFrameTitleBarUI;
org_aswing_plaf_basic_BasicFrameTitleBarUI.__name__ = ["org","aswing","plaf","basic","BasicFrameTitleBarUI"];
org_aswing_plaf_basic_BasicFrameTitleBarUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicFrameTitleBarUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.bar = js_Boot.__instanceof(c,org_aswing_FrameTitleBar)?c:null;
		this.installDefaults();
		this.installComponent();
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponent();
		this.bar = null;
	}
	,installDefaults: function() {
		var pp = "FrameTitleBar.";
		org_aswing_LookAndFeel.installColorsAndFont(this.bar.getSelf(),pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.bar.getSelf(),pp);
		org_aswing_LookAndFeel.installBasicProperties(this.bar.getSelf(),pp);
	}
	,installComponent: function() {
		if(this.bar.getIconifiedButton() != null) this.bar.getIconifiedButton().setIcon(this.getIcon("FrameTitleBar.iconifiedIcon"));
		if(this.bar.getMaximizeButton() != null) this.bar.getMaximizeButton().setIcon(this.getIcon("FrameTitleBar.maximizeIcon"));
		if(this.bar.getRestoreButton() != null) this.bar.getRestoreButton().setIcon(this.getIcon("FrameTitleBar.normalIcon"));
		if(this.bar.getCloseButton() != null) this.bar.getCloseButton().setIcon(this.getIcon("FrameTitleBar.closeIcon"));
		this.bar.setButtonIconGap(this.getInt("FrameTitleBar.buttonGap"));
		this.bar.setMinimizeHeight(this.getInt("FrameTitleBar.titleBarHeight"));
		this.bar.getSelf().revalidateIfNecessary();
	}
	,uninstallComponent: function() {
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.bar.getSelf());
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		var cl = this.bar.getSelf().getForeground();
		var colors = new org_aswing_StyleResult(cl,this.bar.getSelf().getStyleTune());
		this.bar.getLabel().setForeground(this.bar.isActive()?colors.bdark:colors.blight);
		this.bar.getLabel().setFont(this.bar.getSelf().getFont());
		this.bar.getLabel().paintImmediately();
	}
	,paintBackGround: function(c,g,b) {
	}
	,__class__: org_aswing_plaf_basic_BasicFrameTitleBarUI
});
var org_aswing_plaf_basic_BasicFrameUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicFrameUI"] = org_aswing_plaf_basic_BasicFrameUI;
org_aswing_plaf_basic_BasicFrameUI.__name__ = ["org","aswing","plaf","basic","BasicFrameUI"];
org_aswing_plaf_basic_BasicFrameUI.__interfaces__ = [org_aswing_plaf_FrameUI];
org_aswing_plaf_basic_BasicFrameUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicFrameUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.frame = js_Boot.__instanceof(c,org_aswing_JFrame)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "Frame.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.frame,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.frame,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.frame,pp);
		this.resizeArrowColor = this.getColor("resizeArrow");
		this.resizeArrowLightColor = this.getColor("resizeArrowLight");
		this.resizeArrowDarkColor = this.getColor("resizeArrowDark");
		var ico = this.frame.getIcon();
		if(js_Boot.__instanceof(ico,org_aswing_plaf_UIResource)) this.frame.setIcon(this.getIcon(this.getPropertyPrefix() + "icon"));
		if(Std["is"](this.frame.getResizerMargin(),org_aswing_plaf_UIResource)) this.frame.setResizerMargin(this.getInsets(this.getPropertyPrefix() + "resizerMargin"));
	}
	,installComponents: function() {
		if(this.frame.getResizer() == null || Std["is"](this.frame.getResizer(),org_aswing_plaf_UIResource)) {
			var resizer = org_aswing_AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "resizer"),org_aswing_resizer_Resizer);
			this.frame.setResizer(resizer);
		}
		if(!this.frame.isDragDirectlySet()) {
			this.frame.setDragDirectly(this.getBoolean(this.getPropertyPrefix() + "dragDirectly"));
			this.frame.setDragDirectlySet(false);
		}
		this.boundsMC = new openfl_display_Sprite();
		this.boundsMC.set_name("drag_bounds");
	}
	,installListeners: function() {
		this.frame.addEventListener("propertyChange",$bind(this,this.__titleBarChanged));
		this.frame.addEventListener("windowActived",$bind(this,this.__activeChange));
		this.frame.addEventListener("windowDeactived",$bind(this,this.__activeChange));
		this.frame.addEventListener("popupClosed",$bind(this,this.__frameClosed));
		this.frame.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__frameClosed));
		this.__titleBarChanged(null);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.frame);
		this.frame.set_filters([]);
	}
	,uninstallComponents: function() {
		this.removeBoundsMC();
	}
	,uninstallListeners: function() {
		this.frame.removeEventListener("propertyChange",$bind(this,this.__titleBarChanged));
		this.frame.removeEventListener("windowActived",$bind(this,this.__activeChange));
		this.frame.removeEventListener("windowDeactived",$bind(this,this.__activeChange));
		this.frame.removeEventListener("popupClosed",$bind(this,this.__frameClosed));
		this.frame.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__frameClosed));
		this.removeTitleBarListeners();
		if(this.flashTimer != null) {
			this.flashTimer.stop();
			this.flashTimer = null;
		}
	}
	,flashModalFrame: function() {
		if(this.flashTimer == null) {
			this.flashTimer = new org_aswing_util_Timer(50,8);
			this.flashTimer.addEventListener("act",$bind(this,this.__flashTick));
			this.flashTimer.addEventListener("act_complete",$bind(this,this.__flashComplete));
		}
		this.flashing = true;
		this.flashingActivedColor = false;
		this.flashTimer.restart();
	}
	,__flashTick: function(e) {
		this.flashingActivedColor = !this.flashingActivedColor;
		this.frame.repaint();
		this.titleBar.getSelf().repaint();
	}
	,__flashComplete: function(e) {
		this.flashing = false;
		this.frame.repaint();
		this.titleBar.getSelf().repaint();
	}
	,isPaintActivedFrame: function() {
		if(this.flashing) return this.flashingActivedColor; else return this.frame.isActive();
	}
	,paintBackGround: function(c,g,b) {
	}
	,__titleBarChanged: function(e) {
		if(e != null && e.getPropertyName() != "titleBar") return;
		var oldTC = null;
		if(e != null && e.getOldValue() != null) {
			var oldT = e.getOldValue();
			oldTC = oldT.getSelf();
		}
		if(oldTC != null) {
			oldTC.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress));
			oldTC.removeEventListener("release",$bind(this,this.__onTitleBarRelease));
			oldTC.removeEventListener(openfl_events_MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick));
		}
		this.titleBar = this.frame.getTitleBar();
		this.addTitleBarListeners();
	}
	,addTitleBarListeners: function() {
		if(this.titleBar != null) {
			var titleBarC = this.titleBar.getSelf();
			titleBarC.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress),false,0,false);
			titleBarC.addEventListener("release",$bind(this,this.__onTitleBarRelease),false,0,false);
			titleBarC.doubleClickEnabled = true;
			titleBarC.addEventListener(openfl_events_MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick),false,0,false);
		}
	}
	,removeTitleBarListeners: function() {
		if(this.titleBar != null) {
			var titleBarC = this.titleBar.getSelf();
			titleBarC.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress));
			titleBarC.removeEventListener("release",$bind(this,this.__onTitleBarRelease));
			titleBarC.doubleClickEnabled = false;
			titleBarC.removeEventListener(openfl_events_MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick));
		}
	}
	,isMaximizedFrame: function() {
		var state = this.frame.getState();
		return (state & 4) == 4 || (state & 8) == 8;
	}
	,__activeChange: function(e) {
		this.frame.repaint();
	}
	,__onTitleBarPress: function(e) {
		if(e.target != this.titleBar && e.target != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		if(this.frame.isDragable() && !this.isMaximizedFrame()) {
			if(this.frame.isDragDirectly()) {
				var db = this.frame.getInsets().getInsideBounds(this.frame.getMaximizedBounds()).toRectangle();
				var gap = this.titleBar.getSelf().getHeight();
				db.x -= this.frame.getWidth() - gap;
				db.y -= this.frame.getInsets().top;
				db.width += this.frame.getWidth() - gap * 2;
				db.height -= gap;
				this.frame.startDrag(false,db);
			} else {
				this.startMousePos = this.frame.getMousePosition();
				this.startPos = this.frame.getLocation();
				if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove),false,0,false);
			}
		}
	}
	,__onTitleBarRelease: function(e) {
		if(org_aswing_AsWingUtils["as"](e.getPressTarget(),org_aswing_FrameTitleBar) != this.titleBar && e.getPressTarget() != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		this.frame.stopDrag();
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove));
		if(this.frame.isDragable() && !this.isMaximizedFrame() && !this.frame.isDragDirectly()) {
			var dest = this.representMoveBounds();
			this.frame.setLocation(dest);
			this.frame.validate();
		}
		this.removeBoundsMC();
	}
	,__onTitleBarDoubleClick: function(e) {
		if(e.target != this.titleBar && e.target != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		if(this.frame.isResizable()) {
			var state = this.frame.getState();
			if((state & 4) == 4 || (state & 8) == 8 || (state & 2) == 2) this.frame.setState(0,false); else this.frame.setState(12,false);
		}
	}
	,__frameClosed: function(e) {
		this.removeBoundsMC();
		if(this.flashTimer != null) {
			this.flashTimer.stop();
			this.flashTimer = null;
		}
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove));
	}
	,removeBoundsMC: function() {
		if(this.frame.parent != null && this.frame.parent.contains(this.boundsMC)) this.frame.parent.removeChild(this.boundsMC);
	}
	,representMoveBounds: function(e) {
		var par = this.frame.parent;
		if(this.boundsMC.parent != par) par.addChild(this.boundsMC);
		var currentMousePos = this.frame.getMousePosition();
		var bounds = this.frame.getComBounds();
		bounds.x = this.startPos.x + currentMousePos.x - this.startMousePos.x;
		bounds.y = this.startPos.y + currentMousePos.y - this.startMousePos.y;
		var gap = this.titleBar.getSelf().getHeight();
		var frameMaxBounds = this.frame.getMaximizedBounds();
		var topLeft = frameMaxBounds.leftTop();
		var topRight = frameMaxBounds.rightTop();
		var bottomLeft = frameMaxBounds.leftBottom();
		if(bounds.x < topLeft.x - bounds.width + gap) bounds.x = topLeft.x - bounds.width + gap | 0;
		if(bounds.x > topRight.x - gap) bounds.x = topRight.x - gap | 0;
		if(bounds.y < topLeft.y) bounds.y = topLeft.y;
		if(bounds.y > bottomLeft.y - gap) bounds.y = bottomLeft.y - gap | 0;
		var margin = this.frame.getResizerMargin();
		var db = bounds.clone();
		db.x += margin.left;
		db.y += margin.top;
		db.width -= margin.getMarginWidth();
		db.height -= margin.getMarginHeight();
		var x = db.x;
		var y = db.y;
		var w = db.width;
		var h = db.height;
		var g = new org_aswing_graphics_Graphics2D(this.boundsMC.get_graphics());
		this.boundsMC.get_graphics().clear();
		g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowLightColor,1),x - 1,y - 1,w + 2,h + 2);
		g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowColor,1),x,y,w,h);
		g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowDarkColor,1),x + 1,y + 1,w - 2,h - 2);
		return bounds.leftTop();
	}
	,__onMouseMove: function(e) {
		this.representMoveBounds(e);
	}
	,__class__: org_aswing_plaf_basic_BasicFrameUI
});
var org_aswing_plaf_basic_BasicGraphicsUtils = function() { };
$hxClasses["org.aswing.plaf.basic.BasicGraphicsUtils"] = org_aswing_plaf_basic_BasicGraphicsUtils;
org_aswing_plaf_basic_BasicGraphicsUtils.__name__ = ["org","aswing","plaf","basic","BasicGraphicsUtils"];
org_aswing_plaf_basic_BasicGraphicsUtils.getGradientBrush = function(tune,matrix,border,ratios) {
	if(border == null) border = false;
	var light;
	var dark;
	if(border) {
		light = tune.blight;
		dark = tune.bdark;
	} else {
		light = tune.clight;
		dark = tune.cdark;
	}
	if(ratios == null) ratios = org_aswing_plaf_basic_BasicGraphicsUtils.gradientRatio;
	return new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[light.getRGB(),dark.getRGB()],[light.getAlpha(),dark.getAlpha()],ratios,matrix);
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRect = function(g,x,y,w,h,r) {
	var fix;
	if(r > 5) fix = 0; else fix = org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix;
	g.roundRect(x,y,w,h,r,r,r + fix,r + fix);
};
org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect = function(g,b,tune,direction,border,matrixB,ratios) {
	if(border == null) border = false;
	if(direction == null) direction = 1.5707963267948966;
	if(matrixB == null) matrixB = b;
	org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org_aswing_plaf_basic_BasicGraphicsUtils.getGradientBrush(tune,org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix,border,ratios));
	var r = tune.round;
	if(r < org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix) g.rectangle(b.x,b.y,b.width,b.height); else {
		var fix = org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(b.x,b.y,b.width,b.height,r,r,r + fix,r + fix);
	}
	g.endFill();
};
org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientCircle = function(g,b,tune,direction) {
	if(direction == null) direction = 1.5707963267948966;
	var matrixB = b;
	org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org_aswing_plaf_basic_BasicGraphicsUtils.getGradientBrush(tune,org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix,false,null));
	org_aswing_plaf_basic_BasicGraphicsUtils.drawCircle(g,b);
	g.endFill();
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawCircle = function(g,b) {
	g.circle(b.x + b.width / 2,b.y + b.height / 2,Math.floor(Math.min(b.width,b.height) / 2) - 1);
};
org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRectBottomRightAngle = function(g,b,tune,direction,border,matrixB) {
	if(border == null) border = false;
	if(direction == null) direction = 1.5707963267948966;
	if(matrixB == null) matrixB = b;
	org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org_aswing_plaf_basic_BasicGraphicsUtils.getGradientBrush(tune,org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix,border));
	var r = tune.round;
	if(r < org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix) g.rectangle(b.x,b.y,b.width,b.height); else {
		var fix = org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(b.x,b.y,b.width,b.height,r,r,0,0);
	}
	g.endFill();
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine = function(g,x,y,w,h,r,t) {
	if(r < org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix) {
		g.rectangle(x,y,w,h);
		g.rectangle(x + t,y + t,w - t * 2,h - t * 2);
	} else {
		var fix = org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(x,y,w,h,r,r,r + fix,r + fix);
		r -= t / 2;
		g.roundRect(x + t,y + t,w - t * 2,h - t * 2,r,r,r + fix,r + fix);
	}
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine = function(g,b,t,tune,direction,border,matrixB) {
	if(border == null) border = true;
	if(direction == null) direction = 1.5707963267948966;
	var w = b.width;
	var h = b.height;
	var x = b.x;
	var y = b.y;
	var r = tune.round;
	if(matrixB == null) matrixB = b;
	org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org_aswing_plaf_basic_BasicGraphicsUtils.getGradientBrush(tune,org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix,border));
	org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine(g,b.x,b.y,b.width,b.height,r,t);
	g.endFill();
};
org_aswing_plaf_basic_BasicGraphicsUtils.getArrowPath = function(width,direction,centerX,centerY,round) {
	if(round == null) round = true;
	var center = new openfl_geom_Point(centerX,centerY);
	var w = width;
	var ps1 = [];
	ps1.push(org_aswing_plaf_basic_BasicGraphicsUtils.nextPoint(center,direction,w / 2 / 2,round));
	var back = org_aswing_plaf_basic_BasicGraphicsUtils.nextPoint(center,direction + Math.PI,w / 2 / 2);
	ps1.push(org_aswing_plaf_basic_BasicGraphicsUtils.nextPoint(back,direction - Math.PI / 2,w / 2,round));
	ps1.push(org_aswing_plaf_basic_BasicGraphicsUtils.nextPoint(back,direction + Math.PI / 2,w / 2,round));
	return ps1;
};
org_aswing_plaf_basic_BasicGraphicsUtils.nextPoint = function(p,dir,dis,round) {
	if(round == null) round = false;
	if(round) return new openfl_geom_Point(Math.round(p.x + Math.cos(dir) * dis),Math.round(p.y + Math.sin(dir) * dis)); else return new openfl_geom_Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
};
org_aswing_plaf_basic_BasicGraphicsUtils.getDisabledColor = function(c) {
	var bg = c.getBackground();
	if(bg == null) bg = org_aswing_ASColor.BLACK;
	return org_aswing_plaf_basic_BasicGraphicsUtils.disabledColor(bg);
};
org_aswing_plaf_basic_BasicGraphicsUtils.disabledColor = function(cl) {
	var bg = cl;
	var hue = bg.getHue();
	var lum = bg.getLuminance();
	var sat = bg.getSaturation();
	if(lum < 0.8) lum += 0.15; else lum -= 0.15;
	sat -= 0.2;
	return org_aswing_ASColor.getASColorWithHLS(hue,lum,sat,bg.getAlpha());
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawUpperedBezel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var x1 = r.x;
	var y1 = r.y;
	var w = r.width;
	var h = r.height;
	var brush = new org_aswing_graphics_SolidBrush(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w,h,1);
	brush.setColor(lightHighlight);
	g.fillRectangleRingWithThickness(brush,x1,y1,w - 1,h - 1,1);
	brush.setColor(highlight);
	g.fillRectangleRingWithThickness(brush,x1 + 1,y1 + 1,w - 2,h - 2,1);
	brush.setColor(shadow);
	g.fillRectangle(brush,x1 + w - 2,y1 + 1,1,h - 2);
	g.fillRectangle(brush,x1 + 1,y1 + h - 2,w - 2,1);
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawLoweredBezel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var x1 = r.x;
	var y1 = r.y;
	var w = r.width;
	var h = r.height;
	var brush = new org_aswing_graphics_SolidBrush(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w,h,1);
	brush.setColor(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w - 1,h - 1,1);
	brush.setColor(highlight);
	g.fillRectangleRingWithThickness(brush,x1 + 1,y1 + 1,w - 2,h - 2,1);
	brush.setColor(highlight);
	g.fillRectangle(brush,x1 + w - 2,y1 + 1,1,h - 2);
	g.fillRectangle(brush,x1 + 1,y1 + h - 2,w - 2,1);
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawBezel = function(g,r,isPressed,shadow,darkShadow,highlight,lightHighlight) {
	if(isPressed) org_aswing_plaf_basic_BasicGraphicsUtils.drawLoweredBezel(g,r,shadow,darkShadow,highlight,lightHighlight); else org_aswing_plaf_basic_BasicGraphicsUtils.drawUpperedBezel(g,r,shadow,darkShadow,highlight,lightHighlight);
};
org_aswing_plaf_basic_BasicGraphicsUtils.paintBezel = function(g,r,isPressed,shadow,darkShadow,highlight,lightHighlight) {
	if(isPressed) org_aswing_plaf_basic_BasicGraphicsUtils.paintLoweredBevel(g,r,shadow,darkShadow,highlight,lightHighlight); else org_aswing_plaf_basic_BasicGraphicsUtils.paintRaisedBevel(g,r,shadow,darkShadow,highlight,lightHighlight);
};
org_aswing_plaf_basic_BasicGraphicsUtils.paintRaisedBevel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var h = r.height - 1;
	var w = r.width - 1;
	var x = r.x + 0.5;
	var y = r.y + 0.5;
	var pen = new org_aswing_graphics_Pen(lightHighlight,1,false,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE,openfl_display_JointStyle.MITER);
	g.drawLine(pen,x,y,x,y + h - 2);
	g.drawLine(pen,x + 1,y,x + w - 2,y);
	pen.setColor(highlight);
	g.drawLine(pen,x + 1,y + 1,x + 1,y + h - 3);
	g.drawLine(pen,x + 2,y + 1,x + w - 3,y + 1);
	pen.setColor(darkShadow);
	g.drawLine(pen,x,y + h - 1,x + w - 1,y + h - 1);
	g.drawLine(pen,x + w - 1,y,x + w - 1,y + h - 2);
	pen.setColor(shadow);
	g.drawLine(pen,x + 1,y + h - 2,x + w - 2,y + h - 2);
	g.drawLine(pen,x + w - 2,y + 1,x + w - 2,y + h - 3);
};
org_aswing_plaf_basic_BasicGraphicsUtils.paintLoweredBevel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var h = r.height - 1;
	var w = r.width - 1;
	var x = r.x + 0.5;
	var y = r.y + 0.5;
	var pen = new org_aswing_graphics_Pen(shadow,1,false,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.SQUARE,openfl_display_JointStyle.MITER);
	g.drawLine(pen,x,y,x,y + h - 1);
	g.drawLine(pen,x + 1,y,x + w - 1,y);
	pen.setColor(darkShadow);
	g.drawLine(pen,x + 1,y + 1,x + 1,y + h - 2);
	g.drawLine(pen,x + 2,y + 1,x + w - 2,y + 1);
	pen.setColor(lightHighlight);
	g.drawLine(pen,x + 1,y + h - 1,x + w - 1,y + h - 1);
	g.drawLine(pen,x + w - 1,y + 1,x + w - 1,y + h - 2);
	pen.setColor(highlight);
	g.drawLine(pen,x + 2,y + h - 2,x + w - 2,y + h - 2);
	g.drawLine(pen,x + w - 2,y + 2,x + w - 2,y + h - 3);
};
org_aswing_plaf_basic_BasicGraphicsUtils.paintButtonBackGround = function(c,g,b) {
	var bgColor;
	if(c.getBackground() == null) bgColor = org_aswing_ASColor.WHITE; else bgColor = c.getBackground();
	if(c.isOpaque()) {
		if(c.getModel().isArmed() || c.getModel().isSelected() || !c.isEnabled()) g.fillRectangle(new org_aswing_graphics_SolidBrush(bgColor),b.x,b.y,b.width,b.height); else org_aswing_plaf_basic_BasicGraphicsUtils.drawControlBackground(g,b,bgColor,Math.PI / 2);
	}
};
org_aswing_plaf_basic_BasicGraphicsUtils.drawControlBackground = function(g,b,bgColor,direction) {
	g.fillRectangle(new org_aswing_graphics_SolidBrush(bgColor),b.x,b.y,b.width,b.height);
	var x = b.x;
	var y = b.y;
	var w = b.width;
	var h = b.height;
	var colors = [16777215,16777215];
	var alphas = [0.75,0];
	var ratios = [0,100];
	var matrix = new openfl_geom_Matrix();
	matrix.createGradientBox(w,h,direction,x,y);
	var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,colors,alphas,ratios,matrix);
	g.fillRectangle(brush,x,y,w,h);
};
org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRect = function(g,b,c1,c2,direction,ratios) {
	var x = b.x;
	var y = b.y;
	var w = b.width;
	var h = b.height;
	var colors = [c1.getRGB(),c2.getRGB()];
	var alphas = [c1.getAlpha(),c2.getAlpha()];
	if(ratios == null) ratios = [0,255];
	var matrix = new openfl_geom_Matrix();
	matrix.createGradientBox(w,h,direction,x,y);
	var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,colors,alphas,ratios,matrix);
	g.fillRectangle(brush,x,y,w,h);
};
var org_aswing_plaf_basic_BasicLabelUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicLabelUI"] = org_aswing_plaf_basic_BasicLabelUI;
org_aswing_plaf_basic_BasicLabelUI.__name__ = ["org","aswing","plaf","basic","BasicLabelUI"];
org_aswing_plaf_basic_BasicLabelUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicLabelUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Label.";
	}
	,installUI: function(c) {
		this.label = js_Boot.__instanceof(c,org_aswing_JLabel)?c:null;
		this.installDefaults(this.label);
		this.installComponents(this.label);
		this.installListeners(this.label);
	}
	,uninstallUI: function(c) {
		this.label = js_Boot.__instanceof(c,org_aswing_JLabel)?c:null;
		this.uninstallDefaults(this.label);
		this.uninstallComponents(this.label);
		this.uninstallListeners(this.label);
	}
	,installDefaults: function(b) {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(b,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(b,pp);
		org_aswing_LookAndFeel.installBasicProperties(b,pp);
	}
	,uninstallDefaults: function(b) {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(b);
	}
	,installComponents: function(b) {
		this.textField = new openfl_text_TextField();
		this.textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		this.textField.set_selectable(false);
		this.textField.mouseEnabled = false;
		b.addChild(this.textField);
		b.setFontValidated(false);
	}
	,uninstallComponents: function(b) {
		b.removeChild(this.textField);
	}
	,installListeners: function(b) {
	}
	,uninstallListeners: function(b) {
	}
	,paint: function(c,g,r) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,r);
		var b;
		b = js_Boot.__instanceof(c,org_aswing_JLabel)?c:null;
		org_aswing_plaf_basic_BasicLabelUI.viewRect.setRect(r);
		org_aswing_plaf_basic_BasicLabelUI.textRect.x = org_aswing_plaf_basic_BasicLabelUI.textRect.y = org_aswing_plaf_basic_BasicLabelUI.textRect.width = org_aswing_plaf_basic_BasicLabelUI.textRect.height = 0;
		org_aswing_plaf_basic_BasicLabelUI.iconRect.x = org_aswing_plaf_basic_BasicLabelUI.iconRect.y = org_aswing_plaf_basic_BasicLabelUI.iconRect.width = org_aswing_plaf_basic_BasicLabelUI.iconRect.height = 0;
		var text = org_aswing_AsWingUtils.layoutCompoundLabel(c,c.getFont(),b.getText(),this.getIconToLayout(),Std["int"](b.getVerticalAlignment()),Std["int"](b.getHorizontalAlignment()),Std["int"](b.getVerticalTextPosition()),Std["int"](b.getHorizontalTextPosition()),org_aswing_plaf_basic_BasicLabelUI.viewRect,org_aswing_plaf_basic_BasicLabelUI.iconRect,org_aswing_plaf_basic_BasicLabelUI.textRect,Std["int"](b.getText() == null?0:b.getIconTextGap()));
		this.paintIcon(b,g,org_aswing_plaf_basic_BasicLabelUI.iconRect);
		if(text != null && text != "") {
			this.textField.set_visible(true);
			this.paintText(b,org_aswing_plaf_basic_BasicLabelUI.textRect,text);
		} else {
			this.textField.set_text("");
			this.textField.set_visible(false);
		}
		this.textField.set_selectable(b.isSelectable());
		this.textField.mouseEnabled = b.isSelectable();
	}
	,getIconToLayout: function() {
		return this.label.getIcon();
	}
	,paintText: function(b,textRect,text) {
		var font = b.getFont();
		if(this.textField.get_text() != text) this.textField.set_text(text);
		if(!b.isFontValidated()) {
			org_aswing_AsWingUtils.applyTextFont(this.textField,font);
			b.setFontValidated(true);
		}
		org_aswing_AsWingUtils.applyTextColor(this.textField,b.getForeground());
		this.textField.set_x(textRect.x);
		this.textField.set_y(textRect.y);
		if(!b.isEnabled()) {
			var f = [];
			f.push(new openfl_filters_BlurFilter(2,2,2));
			b.set_filters(f);
		} else b.set_filters([]);
		this.textField.set_filters(this.label.getTextFilters());
	}
	,paintIcon: function(b,g,iconRect) {
		var icon = b.getIcon();
		var tmpIcon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon == null) return;
		if(!b.isEnabled()) tmpIcon = b.getDisabledIcon();
		if(tmpIcon != null) icon = tmpIcon;
		this.setIconVisible(icon,true);
		icon.updateIcon(b,g,iconRect.x,iconRect.y);
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.label) != null) icon.getDisplay(this.label).set_visible(visible);
	}
	,getIcons: function() {
		var arr = [];
		if(this.label.getIcon() != null) arr.push(this.label.getIcon());
		if(this.label.getDisabledIcon() != null) arr.push(this.label.getDisabledIcon());
		return arr;
	}
	,getLabelPreferredSize: function(b,icon,text) {
		org_aswing_plaf_basic_BasicLabelUI.viewRect.setRectXYWH(0,0,100000,100000);
		org_aswing_plaf_basic_BasicLabelUI.textRect.x = org_aswing_plaf_basic_BasicLabelUI.textRect.y = org_aswing_plaf_basic_BasicLabelUI.textRect.width = org_aswing_plaf_basic_BasicLabelUI.textRect.height = 0;
		org_aswing_plaf_basic_BasicLabelUI.iconRect.x = org_aswing_plaf_basic_BasicLabelUI.iconRect.y = org_aswing_plaf_basic_BasicLabelUI.iconRect.width = org_aswing_plaf_basic_BasicLabelUI.iconRect.height = 0;
		org_aswing_AsWingUtils.layoutCompoundLabel(b,b.getFont(),text,icon,Std["int"](b.getVerticalAlignment()),Std["int"](b.getHorizontalAlignment()),Std["int"](b.getVerticalTextPosition()),Std["int"](b.getHorizontalTextPosition()),org_aswing_plaf_basic_BasicLabelUI.viewRect,org_aswing_plaf_basic_BasicLabelUI.iconRect,org_aswing_plaf_basic_BasicLabelUI.textRect,Std["int"](b.getText() == null?0:b.getIconTextGap()));
		var size;
		if(icon == null) size = org_aswing_plaf_basic_BasicLabelUI.textRect.getSize(); else if(b.getText() == null || b.getText() == "") size = org_aswing_plaf_basic_BasicLabelUI.iconRect.getSize(); else {
			var r = org_aswing_plaf_basic_BasicLabelUI.iconRect.union(org_aswing_plaf_basic_BasicLabelUI.textRect);
			size = r.getSize();
		}
		size = b.getInsets().getOutsideSize(size);
		return size;
	}
	,getPreferredSize: function(c) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_JLabel)?c:null;
		return this.getLabelPreferredSize(b,this.getIconToLayout(),b.getText());
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__class__: org_aswing_plaf_basic_BasicLabelUI
});
var org_aswing_plaf_basic_BasicListUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicListUI"] = org_aswing_plaf_basic_BasicListUI;
org_aswing_plaf_basic_BasicListUI.__name__ = ["org","aswing","plaf","basic","BasicListUI"];
org_aswing_plaf_basic_BasicListUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicListUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.list = js_Boot.__instanceof(c,org_aswing_JList)?c:null;
		this.installDefaults();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "List.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.list,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.list,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.list,pp);
		var sbg = this.list.getSelectionBackground();
		if(sbg == null || js_Boot.__instanceof(sbg,org_aswing_plaf_UIResource)) this.list.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.list.getSelectionForeground();
		if(sfg == null || js_Boot.__instanceof(sfg,org_aswing_plaf_UIResource)) this.list.setSelectionForeground(this.getColor(pp + "selectionForeground"));
	}
	,installListeners: function() {
		this.list.addEventListener("itemClick",$bind(this,this.__onItemClick),false,0,false);
		this.list.addEventListener("itemMouseDown",$bind(this,this.__onItemMouseDown),false,0,false);
		this.list.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown),false,0,false);
		this.list.addEventListener("focusLost",$bind(this,this.__onFocusLost),false,0,false);
		this.list.addEventListener("listSelectionChanged",$bind(this,this.__onSelectionChanged),false,0,false);
		this.list.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel),false,0,false);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.list);
	}
	,uninstallListeners: function() {
		this.list.removeEventListener("itemClick",$bind(this,this.__onItemClick));
		this.list.removeEventListener("itemMouseDown",$bind(this,this.__onItemMouseDown));
		this.list.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.list.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.list.removeEventListener("listSelectionChanged",$bind(this,this.__onSelectionChanged));
		this.list.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,paintFocus: function(c,g,b) {
		var fm = org_aswing_FocusManager.getManager(this.list.stage);
		if(fm != null) {
			this.focusGraphics = g;
			this.focusRectangle = b;
			this.focusGraphicsOwner = fm.moveFocusRectUpperTo(this.list).get_graphics();
			this.paintCurrentCellFocus();
		}
	}
	,paintCurrentCellFocus: function() {
		if(this.paintFocusedCell != null) this.paintCellFocus(this.paintFocusedCell.getCellComponent()); else org_aswing_plaf_BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.focusRectangle);
	}
	,paintCellFocusWithIndex: function(index) {
		if(index < 0 || index >= this.list.getModel().getSize()) return;
		this.paintFocusedCell = this.list.getCellByIndex(index);
		this.paintFocusedIndex = index;
		if(this.paintFocusedCell != null) this.paintCellFocus(this.paintFocusedCell.getCellComponent());
	}
	,paintCellFocus: function(cellComponent) {
		if(this.focusGraphicsOwner != null) this.focusGraphicsOwner.clear();
		org_aswing_plaf_BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.focusRectangle);
		org_aswing_plaf_BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.paintFocusedCell.getCellComponent().getComBounds());
	}
	,__onMouseWheel: function(e) {
		if(!this.list.isEnabled()) return;
		var viewPos = this.list.getViewPosition();
		if(e.shiftKey) viewPos.x -= e.delta * this.list.getHorizontalUnitIncrement(); else viewPos.y -= e.delta * this.list.getVerticalUnitIncrement();
		this.list.setViewPosition(viewPos);
	}
	,__onFocusLost: function(e) {
		if(this.focusGraphicsOwner != null) this.focusGraphicsOwner.clear();
	}
	,__onKeyDown: function(e) {
		if(!this.list.isEnabled()) return;
		var code = e.keyCode;
		var dir = 0;
		if(code == org_aswing_AWKeyboard.UP || code == org_aswing_AWKeyboard.DOWN || code == org_aswing_AWKeyboard.SPACE) {
			var fm = org_aswing_FocusManager.getManager(this.list.stage);
			if(fm != null) fm.setTraversing(true);
		}
		if(code == org_aswing_AWKeyboard.UP) dir = -1; else if(code == org_aswing_AWKeyboard.DOWN) dir = 1;
		if(this.paintFocusedIndex == -1) this.paintFocusedIndex = this.list.getSelectedIndex();
		if(this.paintFocusedIndex < -1) this.paintFocusedIndex = -1; else if(this.paintFocusedIndex > this.list.getModel().getSize()) this.paintFocusedIndex = this.list.getModel().getSize();
		var index = this.paintFocusedIndex + dir | 0;
		if(code == org_aswing_AWKeyboard.HOME) index = 0; else if(code == org_aswing_AWKeyboard.END) index = this.list.getModel().getSize() - 1;
		if(index < 0 || index >= this.list.getModel().getSize()) return;
		if(dir != 0 || (code == org_aswing_AWKeyboard.HOME || code == org_aswing_AWKeyboard.END)) {
			this.list.ensureIndexIsVisible(index);
			this.list.validate();
			if(e.shiftKey) {
				var archor = this.list.getAnchorSelectionIndex();
				if(archor < 0) archor = index;
				this.list.setSelectionInterval(archor,index,false);
			} else if(e.ctrlKey) {
			} else this.list.setSelectionInterval(index,index,false);
			this.paintCellFocusWithIndex(index);
		} else if(code == org_aswing_AWKeyboard.SPACE) {
			this.list.addSelectionInterval(index,index,false);
			this.paintCellFocusWithIndex(index);
			this.list.ensureIndexIsVisible(index);
		}
	}
	,__onSelectionChanged: function(e) {
		var fm = org_aswing_FocusManager.getManager(this.list.stage);
		if(fm != null && fm.isTraversing() && this.list.isFocusOwner()) {
			if(this.focusGraphics == null) this.list.paintFocusRect(true);
			this.paintCellFocusWithIndex(this.list.getLeadSelectionIndex());
		}
	}
	,__onItemMouseDown: function(e) {
		var index = this.list.getItemIndexByCell(e.getCell());
		this.pressedIndex = index;
		this.pressedCtrl = e.ctrlKey;
		this.pressedShift = e.shiftKey;
		this.doSelectionWhenRelease = false;
		if(this.list.getSelectionMode() == 1) {
			if(this.list.isSelectedIndex(index)) this.doSelectionWhenRelease = true; else this.doSelection();
		} else this.list.setSelectionInterval(index,index,false);
	}
	,doSelection: function() {
		var index = this.pressedIndex | 0;
		if(this.pressedShift) {
			var archor = this.list.getAnchorSelectionIndex();
			if(archor < 0) archor = index;
			this.list.setSelectionInterval(archor,index,false);
		} else if(this.pressedCtrl) {
			if(!this.list.isSelectedIndex(index)) this.list.addSelectionInterval(index,index,false); else this.list.removeSelectionInterval(index,index,false);
		} else this.list.setSelectionInterval(index,index,false);
	}
	,__onItemClick: function(e) {
		if(this.doSelectionWhenRelease) {
			this.doSelection();
			this.doSelectionWhenRelease = false;
		}
	}
	,__class__: org_aswing_plaf_basic_BasicListUI
});
var org_aswing_plaf_basic_BasicLookAndFeel = function() {
	this.NULL_COLOR = org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR;
	this.NULL_FONT = org_aswing_plaf_DefaultEmptyDecoraterResource.get_NULL_FONT();
};
$hxClasses["org.aswing.plaf.basic.BasicLookAndFeel"] = org_aswing_plaf_basic_BasicLookAndFeel;
org_aswing_plaf_basic_BasicLookAndFeel.__name__ = ["org","aswing","plaf","basic","BasicLookAndFeel"];
org_aswing_plaf_basic_BasicLookAndFeel.__super__ = org_aswing_LookAndFeel;
org_aswing_plaf_basic_BasicLookAndFeel.prototype = $extend(org_aswing_LookAndFeel.prototype,{
	getDefaults: function() {
		var table = new org_aswing_UIDefaults();
		this.initClassDefaults(table);
		this.initSystemColorDefaults(table);
		this.initSystemFontDefaults(table);
		this.initCommonUtils(table);
		this.initComponentDefaults(table);
		return table;
	}
	,initClassDefaults: function(table) {
		var uiDefaults = [];
		table.putDefaults(uiDefaults);
	}
	,initSystemColorDefaults: function(table) {
		var defaultSystemColors = ["window",15132390,"windowText",16777214,"menu",15395562,"menuText",6118749,"control",0,"controlMide",3127274,"controlText",5066061,"selectionForeground",16777215];
		var _g1 = 0;
		var _g = defaultSystemColors.length;
		while(_g1 < _g) {
			var i = _g1++;
			table.set(defaultSystemColors[i],new org_aswing_plaf_ASColorUIResource(defaultSystemColors[i + 1]));
		}
		table.set("selectionBackground",new org_aswing_plaf_ASColorUIResource(9680984,0.9));
		table.set("focusInner",new org_aswing_plaf_ASColorUIResource(4259648,0.3));
		table.set("focusOutter",new org_aswing_plaf_ASColorUIResource(4259648,0.4));
	}
	,initSystemFontDefaults: function(table) {
		var defaultSystemFonts = ["systemFont",new org_aswing_plaf_ASFontUIResource("Arial",12),"menuFont",new org_aswing_plaf_ASFontUIResource("Arial",12),"controlFont",new org_aswing_plaf_ASFontUIResource("Arial",12,false),"windowFont",new org_aswing_plaf_ASFontUIResource("Arial",12,true)];
		table.putDefaults(defaultSystemFonts);
	}
	,initCommonUtils: function(table) {
		org_aswing_resizer_ResizerController.setDefaultResizerClass(org_aswing_resizer_DefaultResizer);
		var arrowColors = ["resizeArrow",new org_aswing_plaf_ASColorUIResource(5095888),"resizeArrowLight",new org_aswing_plaf_ASColorUIResource(10674150),"resizeArrowDark",new org_aswing_plaf_ASColorUIResource(2790817)];
		table.putDefaults(arrowColors);
		var cursors = ["System.hResizeCursor",org_aswing_plaf_basic_cursor_H_$ResizeCursor,"System.vResizeCursor",org_aswing_plaf_basic_cursor_V_$ResizeCursor,"System.hvResizeCursor",org_aswing_plaf_basic_cursor_HV_$ResizeCursor,"System.hMoveCursor",org_aswing_plaf_basic_cursor_H_$ResizeCursor,"System.vMoveCursor",org_aswing_plaf_basic_cursor_V_$ResizeCursor,"System.hvMoveCursor",org_aswing_plaf_basic_cursor_HV_$ResizeCursor];
		table.putDefaults(cursors);
	}
	,initComponentDefaults: function(table) {
		var buttonBG = new org_aswing_plaf_ASColorUIResource(4103381);
		var textBG = new org_aswing_plaf_ASColorUIResource(16448250);
		var f;
		f = [];
		f.push(new openfl_filters_DropShadowFilter(1,45,0,0.3,1,1,1,1));
		var comDefaults = ["Button.background",buttonBG,"Button.foreground",new org_aswing_plaf_ASColorUIResource(16777214),"Button.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Button.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,-0.02,0.34,0.22,5),"Button.opaque",true,"Button.focusable",true,"Button.font",table.getFont("controlFont"),"Button.bg",org_aswing_plaf_basic_background_ButtonBackground,"Button.margin",new org_aswing_plaf_InsetsUIResource(2,3,5,3),"Button.textShiftOffset",0,"Button.textFilters",f];
		table.putDefaults(comDefaults);
		f = [];
		f.push(new openfl_filters_DropShadowFilter(1,45,0,0.0,1,1,1,1));
		comDefaults = ["LabelButton.background",buttonBG,"LabelButton.foreground",new org_aswing_plaf_ASColorUIResource(22039),"LabelButton.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"LabelButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.26,0.05,0.20,0.20),"LabelButton.opaque",false,"LabelButton.focusable",true,"LabelButton.font",table.getFont("controlFont"),"LabelButton.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"LabelButton.textShiftOffset",0,"LabelButton.textFilters",f];
		table.putDefaults(comDefaults);
		comDefaults = ["Panel.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Panel.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Panel.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Panel.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Panel.opaque",false,"Panel.focusable",false,"Panel.bg",org_aswing_plaf_basic_background_PanelBackground,"Panel.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		f = [];
		f.push(new openfl_filters_DropShadowFilter(1,45,0,0.3,1,1,1,1));
		comDefaults = ["ToggleButton.background",buttonBG,"ToggleButton.foreground",new org_aswing_plaf_ASColorUIResource(16777214),"ToggleButton.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ToggleButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,-0.02,0.34,0.22,5),"ToggleButton.opaque",true,"ToggleButton.focusable",true,"ToggleButton.font",table.getFont("controlFont"),"ToggleButton.bg",org_aswing_plaf_basic_background_ToggleButtonBackground,"ToggleButton.margin",new org_aswing_plaf_InsetsUIResource(2,3,5,3),"ToggleButton.textShiftOffset",1,"ToggleButton.textFilters",f];
		table.putDefaults(comDefaults);
		comDefaults = ["RadioButton.background",new org_aswing_plaf_ASColorUIResource(14804453),"RadioButton.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"RadioButton.mideground",new org_aswing_plaf_ASColorUIResource(3780607),"RadioButton.colorAdjust",new org_aswing_plaf_UIStyleTune(0.8,0.01,0.4,0.30,0,new org_aswing_plaf_UIStyleTune(0.4,0.1,0.1,0.00)),"RadioButton.opaque",false,"RadioButton.focusable",true,"RadioButton.font",table.getFont("controlFont"),"RadioButton.icon",org_aswing_plaf_basic_icon_RadioButtonIcon,"RadioButton.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"RadioButton.textShiftOffset",0,"RadioButton.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["TextField.background",textBG,"TextField.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"TextField.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"TextField.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.30,3),"TextField.opaque",true,"TextField.focusable",true,"TextField.font",table.getFont("controlFont"),"TextField.bg",org_aswing_plaf_basic_background_TextComponentBackBround,"TextField.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["CheckBox.background",new org_aswing_plaf_ASColorUIResource(14804453),"CheckBox.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"CheckBox.mideground",new org_aswing_plaf_ASColorUIResource(3780607),"CheckBox.colorAdjust",new org_aswing_plaf_UIStyleTune(0.8,0.01,0.4,0.30,2,new org_aswing_plaf_UIStyleTune(0.5,-0.2,0.5,0.70)),"CheckBox.opaque",false,"CheckBox.focusable",true,"CheckBox.font",table.getFont("controlFont"),"CheckBox.icon",org_aswing_plaf_basic_icon_CheckBoxIcon,"CheckBox.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"CheckBox.textShiftOffset",0,"CheckBox.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["Separator.background",new org_aswing_plaf_ASColorUIResource(3507061,0.3),"Separator.foreground",this.NULL_COLOR,"Separator.mideground",this.NULL_COLOR,"Separator.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Separator.opaque",false,"Separator.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollBar.background",new org_aswing_plaf_ASColorUIResource(11053224,0.3),"ScrollBar.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ScrollBar.mideground",new org_aswing_plaf_ASColorUIResource(15198183,0.8),"ScrollBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.08,0.20,0.50,2,new org_aswing_plaf_UIStyleTune(0.08,-0.3,0.08,0.20,2)),"ScrollBar.opaque",true,"ScrollBar.focusable",true,"ScrollBar.barWidth",14,"ScrollBar.minimumThumbLength",24,"ScrollBar.font",table.getFont("controlFont"),"ScrollBar.bg",org_aswing_plaf_basic_background_ScrollBarBackground,"ScrollBar.thumbDecorator",org_aswing_plaf_basic_background_ScrollBarThumb];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollPane.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"ScrollPane.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ScrollPane.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ScrollPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ScrollPane.opaque",false,"ScrollPane.focusable",false,"ScrollPane.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["ProgressBar.background",new org_aswing_plaf_ASColorUIResource(11908533,0.3),"ProgressBar.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ProgressBar.mideground",new org_aswing_plaf_ASColorUIResource(13563487),"ProgressBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.50,4,new org_aswing_plaf_UIStyleTune(0.34,-0.4,0.01,0.50,4)),"ProgressBar.opaque",true,"ProgressBar.focusable",false,"ProgressBar.barWidth",11,"ProgressBar.font",new org_aswing_plaf_ASFontUIResource("Tahoma",9),"ProgressBar.bg",org_aswing_plaf_basic_background_ProgressBarBackground,"ProgressBar.fg",org_aswing_plaf_basic_background_ProgressBarIcon,"ProgressBar.progressColor",new org_aswing_plaf_ASColorUIResource(3368652),"ProgressBar.indeterminateDelay",40];
		table.putDefaults(comDefaults);
		comDefaults = ["Viewport.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Viewport.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"Viewport.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Viewport.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Viewport.opaque",false,"Viewport.focusable",true,"Viewport.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["Label.background",__map_reserved.control != null?table.getReserved("control"):table.h["control"],"Label.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Label.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Label.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Label.opaque",false,"Label.focusable",false,"Label.font",table.getFont("controlFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["TextArea.background",textBG,"TextArea.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"TextArea.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"TextArea.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.30,3),"TextArea.opaque",true,"TextArea.focusable",true,"TextArea.font",table.getFont("controlFont"),"TextArea.bg",org_aswing_plaf_basic_background_TextComponentBackBround,"TextArea.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Frame.background",new org_aswing_plaf_ASColorUIResource(15132390),"Frame.foreground",new org_aswing_plaf_ASColorUIResource(6710886),"Frame.mideground",new org_aswing_plaf_ASColorUIResource(11195674),"Frame.colorAdjust",new org_aswing_plaf_UIStyleTune(0.10,0.0,0.0,0.30,10,new org_aswing_plaf_UIStyleTune(0.10,0.0,0.0,0.60,10)),"Frame.opaque",true,"Frame.focusable",true,"Frame.dragDirectly",true,"Frame.resizeArrow",new org_aswing_plaf_ASColorUIResource(2977161),"Frame.resizeArrowLight",new org_aswing_plaf_ASColorUIResource(14869214),"Frame.resizeArrowDark",new org_aswing_plaf_ASColorUIResource(3042698),"Frame.resizer",org_aswing_resizer_DefaultResizer,"Frame.font",__map_reserved.windowFont != null?table.getReserved("windowFont"):table.h["windowFont"],"Frame.resizerMargin",new org_aswing_plaf_InsetsUIResource(2,1,6,6),"Frame.bg",org_aswing_plaf_basic_background_FrameBackground,"Frame.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(0,6,12,12)),"Frame.icon",org_aswing_plaf_basic_icon_TitleIcon,"Frame.iconifiedIcon",org_aswing_plaf_basic_icon_FrameIconifiedIcon,"Frame.normalIcon",org_aswing_plaf_basic_icon_FrameNormalIcon,"Frame.maximizeIcon",org_aswing_plaf_basic_icon_FrameMaximizeIcon,"Frame.closeIcon",org_aswing_plaf_basic_icon_FrameCloseIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["FrameTitleBar.background",new org_aswing_plaf_ASColorUIResource(12902502),"FrameTitleBar.foreground",new org_aswing_plaf_ASColorUIResource(33965),"FrameTitleBar.mideground",new org_aswing_plaf_ASColorUIResource(12507997),"FrameTitleBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.24,0.01,0.18,0.50,0,new org_aswing_plaf_UIStyleTune(0.2,-0.28,0.08,0.10,1)),"FrameTitleBar.opaque",true,"FrameTitleBar.focusable",false,"FrameTitleBar.titleBarHeight",25,"FrameTitleBar.buttonGap",2,"FrameTitleBar.font",__map_reserved.windowFont != null?table.getReserved("windowFont"):table.h["windowFont"],"FrameTitleBar.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(7,0,0,0)),"FrameTitleBar.icon",org_aswing_plaf_basic_icon_TitleIcon,"FrameTitleBar.iconifiedIcon",org_aswing_plaf_basic_icon_FrameIconifiedIcon,"FrameTitleBar.normalIcon",org_aswing_plaf_basic_icon_FrameNormalIcon,"FrameTitleBar.maximizeIcon",org_aswing_plaf_basic_icon_FrameMaximizeIcon,"FrameTitleBar.closeIcon",org_aswing_plaf_basic_icon_FrameCloseIcon];
		table.putDefaults(comDefaults);
		f = [];
		f.push(new openfl_filters_DropShadowFilter(4.0,45,0,0.3,2.0,2.0,0.5));
		comDefaults = ["ToolTip.background",new org_aswing_plaf_ASColorUIResource(15531260),"ToolTip.foreground",new org_aswing_plaf_ASColorUIResource(13124),"ToolTip.mideground",new org_aswing_plaf_ASColorUIResource(2975875),"ToolTip.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20,2),"ToolTip.opaque",true,"ToolTip.focusable",false,"ToolTip.font",table.getFont("controlFont"),"ToolTip.filters",f,"ToolTip.bg",org_aswing_plaf_basic_background_ToolTipBackground,"ToolTip.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,1,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["List.font",table.getFont("controlFont"),"List.background",new org_aswing_plaf_ASColorUIResource(3376538,0),"List.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"List.mideground",new org_aswing_plaf_ASColorUIResource(3376794),"List.colorAdjust",new org_aswing_plaf_UIStyleTune(0.08,0.05,0.20,0.20,0),"List.opaque",false,"List.focusable",true,"List.bg",org_aswing_plaf_basic_background_ListBackground,"List.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"List.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"]];
		table.putDefaults(comDefaults);
		comDefaults = ["SplitPane.background",new org_aswing_plaf_ASColorUIResource(2515580),"SplitPane.foreground",new org_aswing_plaf_ASColorUIResource(5287642),"SplitPane.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"SplitPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"SplitPane.opaque",false,"SplitPane.focusable",true,"SplitPane.defaultDividerSize",10,"SplitPane.font",table.getFont("windowFont"),"SplitPane.border",null,"SplitPane.presentDragColor",new org_aswing_plaf_ASColorUIResource(4560312,0.4)];
		table.putDefaults(comDefaults);
		comDefaults = ["Spacer.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Spacer.foreground",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Spacer.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Spacer.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Spacer.opaque",false,"Spacer.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ComboBox.font",table.getFont("controlFont"),"ComboBox.background",textBG,"ComboBox.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ComboBox.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"ComboBox.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.32,3,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"ComboBox.opaque",true,"ComboBox.focusable",true,"ComboBox.popupBorder",org_aswing_plaf_basic_border_ComboBoxPopupBorder,"ComboBox.bg",org_aswing_plaf_basic_background_InputBackground,"ComboBox.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Slider.font",table.getFont("controlFont"),"Slider.background",new org_aswing_plaf_ASColorUIResource(7334137,0.34),"Slider.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Slider.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Slider.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.50,6,new org_aswing_plaf_UIStyleTune(0.2,0.00,0.4,0.00,0)),"Slider.opaque",false,"Slider.focusable",true,"Slider.thumbIcon",org_aswing_plaf_basic_icon_SliderThumbIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["Adjuster.background",textBG,"Adjuster.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Adjuster.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"Adjuster.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.32,3,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"Adjuster.opaque",true,"Adjuster.focusable",true,"Adjuster.font",table.getFont("controlFont"),"Adjuster.thumbIcon",org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon,"Adjuster.bg",org_aswing_plaf_basic_background_InputBackground,"Adjuster.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Stepper.font",table.getFont("controlFont"),"Stepper.background",textBG,"Stepper.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Stepper.mideground",new org_aswing_plaf_ASColorUIResource(9026304),"Stepper.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,-0.30,0.0,0.32,3,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"Stepper.opaque",true,"Stepper.focusable",true,"Stepper.bg",org_aswing_plaf_basic_background_InputBackground,"Stepper.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorSwatches.background",new org_aswing_plaf_ASColorUIResource(15658734),"ColorSwatches.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorSwatches.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorSwatches.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorSwatches.opaque",false,"ColorSwatches.focusable",false,"ColorSwatches.font",table.getFont("controlFont"),"ColorSwatches.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorMixer.background",new org_aswing_plaf_ASColorUIResource(15658734),"ColorMixer.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorMixer.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorMixer.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorMixer.opaque",false,"ColorMixer.focusable",false,"ColorMixer.font",table.getFont("controlFont"),"ColorMixer.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorChooser.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"ColorChooser.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ColorChooser.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ColorChooser.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ColorChooser.opaque",false,"ColorChooser.focusable",false,"ColorChooser.font",table.getFont("controlFont"),"ColorChooser.border",org_aswing_plaf_basic_border_ColorChooserBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["Accordion.font",table.getFont("controlFont"),"Accordion.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"Accordion.foreground",new org_aswing_plaf_ASColorUIResource(16777214),"Accordion.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Accordion.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Accordion.opaque",false,"Accordion.focusable",true,"Accordion.motionSpeed",50,"Accordion.tabMargin",new org_aswing_plaf_InsetsUIResource(2,3,3,2)];
		table.putDefaults(comDefaults);
		comDefaults = ["TabbedPane.background",__map_reserved.window != null?table.getReserved("window"):table.h["window"],"TabbedPane.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"TabbedPane.mideground",new org_aswing_plaf_ASColorUIResource(13290443),"TabbedPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.01,-0.14,0.01,0.50,4,new org_aswing_plaf_UIStyleTune(0.05,-0.23,0.01,0.50,4)),"TabbedPane.opaque",false,"TabbedPane.focusable",true,"TabbedPane.arrowShadowColor",new org_aswing_plaf_ASColorUIResource(0),"TabbedPane.arrowLightColor",new org_aswing_plaf_ASColorUIResource(4473924),"TabbedPane.font",table.getFont("controlFont"),"TabbedPane.tabMargin",new org_aswing_plaf_InsetsUIResource(3,8,2,8),"TabbedPane.contentMargin",new org_aswing_plaf_InsetsUIResource(10,2,2,2),"TabbedPane.selectedTabExpandInsets",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"TabbedPane.tabBorderInsets",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"TabbedPane.contentRoundLineThickness",0,"TabbedPane.tabGap",2,"TabbedPane.topBlankSpace",0,"TabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults);
		comDefaults = ["ClosableTabbedPane.background",new org_aswing_plaf_ASColorUIResource(15198181),"ClosableTabbedPane.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"ClosableTabbedPane.mideground",new org_aswing_plaf_ASColorUIResource(5095888),"ClosableTabbedPane.colorAdjust",new org_aswing_plaf_UIStyleTune(0.01,-0.24,0.01,0.50,4),"ClosableTabbedPane.opaque",false,"ClosableTabbedPane.focusable",true,"ClosableTabbedPane.shadow",new org_aswing_plaf_ASColorUIResource(8947848),"ClosableTabbedPane.darkShadow",new org_aswing_plaf_ASColorUIResource(4473924),"ClosableTabbedPane.light",table.getColor("controlHighlight"),"ClosableTabbedPane.highlight",new org_aswing_plaf_ASColorUIResource(16777215),"ClosableTabbedPane.arrowShadowColor",new org_aswing_plaf_ASColorUIResource(0),"ClosableTabbedPane.arrowLightColor",new org_aswing_plaf_ASColorUIResource(4473924),"ClosableTabbedPane.font",table.getFont("controlFont"),"ClosableTabbedPane.tabMargin",new org_aswing_plaf_InsetsUIResource(2,3,1,3),"ClosableTabbedPane.contentMargin",new org_aswing_plaf_InsetsUIResource(8,2,2,2),"ClosableTabbedPane.contentRoundLineThickness",2,"ClosableTabbedPane.topBlankSpace",4,"ClosableTabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults);
		comDefaults = ["Table.background",new org_aswing_plaf_ASColorUIResource(3182497,0.0),"Table.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Table.mideground",new org_aswing_plaf_ASColorUIResource(15461355),"Table.colorAdjust",new org_aswing_plaf_UIStyleTune(0.10,-0.2,0.10,0.20,0),"Table.opaque",true,"Table.focusable",true,"Table.font",table.getFont("controlFont"),"Table.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"Table.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"Table.gridColor",new org_aswing_plaf_ASColorUIResource(14079702),"Table.bg",org_aswing_plaf_basic_background_TableBackground,"Table.border",new org_aswing_plaf_basic_border_EmptyBorderResource(null,new org_aswing_Insets(2,2,2,2))];
		table.putDefaults(comDefaults);
		comDefaults = ["TableHeader.font",table.getFont("controlFont"),"TableHeader.background",new org_aswing_plaf_ASColorUIResource(14408667),"TableHeader.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"TableHeader.mideground",new org_aswing_plaf_ASColorUIResource(10329501),"TableHeader.colorAdjust",new org_aswing_plaf_UIStyleTune(0.06,0.2,0.10,0.5,0,new org_aswing_plaf_UIStyleTune(0.04,0.05,0.20,0.1)),"TableHeader.opaque",true,"TableHeader.focusable",true,"TableHeader.gridColor",new org_aswing_plaf_ASColorUIResource(14079702),"TableHeader.bg",org_aswing_plaf_basic_background_TableHeaderBackground,"TableHeader.border",null,"TableHeader.cellBorder",org_aswing_plaf_basic_border_TableHeaderCellBorder,"TableHeader.sortableCellBorder",org_aswing_plaf_basic_border_TableHeaderCellBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["Tree.background",new org_aswing_plaf_ASColorUIResource(3376538,0),"Tree.foreground",__map_reserved.controlText != null?table.getReserved("controlText"):table.h["controlText"],"Tree.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"Tree.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"Tree.opaque",false,"Tree.focusable",true,"Tree.font",table.getFont("controlFont"),"Tree.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"Tree.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"Tree.leafIcon",org_aswing_tree_TreeLeafIcon,"Tree.folderExpandedIcon",org_aswing_tree_TreeFolderIcon,"Tree.folderCollapsedIcon",org_aswing_tree_TreeFolderIcon,"Tree.leftChildIndent",10,"Tree.rightChildIndent",0,"Tree.rowHeight",16,"Tree.expandControl",org_aswing_plaf_basic_tree_BasicExpandControl,"Tree.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ToolBar.background",new org_aswing_plaf_ASColorUIResource(10866204),"ToolBar.foreground",__map_reserved.windowText != null?table.getReserved("windowText"):table.h["windowText"],"ToolBar.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"ToolBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"ToolBar.opaque",true,"ToolBar.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["MenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuItem.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"MenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,2),"MenuItem.opaque",false,"MenuItem.focusable",false,"MenuItem.font",table.getFont("menuFont"),"MenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"MenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"MenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"MenuItem.acceleratorFont",table.getFont("menuFont"),"MenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuItem.border",null,"MenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"MenuItem.checkIcon",org_aswing_plaf_basic_icon_MenuItemCheckIcon,"MenuItem.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["CheckBoxMenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"CheckBoxMenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"CheckBoxMenuItem.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"CheckBoxMenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,2),"CheckBoxMenuItem.opaque",false,"CheckBoxMenuItem.focusable",false,"CheckBoxMenuItem.font",table.getFont("menuFont"),"CheckBoxMenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"CheckBoxMenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"CheckBoxMenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"CheckBoxMenuItem.acceleratorFont",table.getFont("menuFont"),"CheckBoxMenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"CheckBoxMenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"CheckBoxMenuItem.border",null,"CheckBoxMenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"CheckBoxMenuItem.checkIcon",org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon,"CheckBoxMenuItem.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["RadioButtonMenuItem.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"RadioButtonMenuItem.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"RadioButtonMenuItem.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"RadioButtonMenuItem.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,2),"RadioButtonMenuItem.opaque",false,"RadioButtonMenuItem.focusable",false,"RadioButtonMenuItem.font",table.getFont("menuFont"),"RadioButtonMenuItem.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"RadioButtonMenuItem.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"RadioButtonMenuItem.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"RadioButtonMenuItem.acceleratorFont",table.getFont("menuFont"),"RadioButtonMenuItem.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"RadioButtonMenuItem.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"RadioButtonMenuItem.border",null,"RadioButtonMenuItem.arrowIcon",org_aswing_plaf_basic_icon_MenuItemArrowIcon,"RadioButtonMenuItem.checkIcon",org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon,"RadioButtonMenuItem.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["Menu.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"Menu.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"Menu.mideground",new org_aswing_plaf_ASColorUIResource(6118749),"Menu.colorAdjust",new org_aswing_plaf_UIStyleTune(0.0,0.0,0.0,0.0,2),"Menu.opaque",false,"Menu.focusable",false,"Menu.font",table.getFont("menuFont"),"Menu.selectionBackground",__map_reserved.selectionBackground != null?table.getReserved("selectionBackground"):table.h["selectionBackground"],"Menu.selectionForeground",__map_reserved.selectionForeground != null?table.getReserved("selectionForeground"):table.h["selectionForeground"],"Menu.disabledForeground",new org_aswing_plaf_ASColorUIResource(8947848),"Menu.acceleratorFont",table.getFont("menuFont"),"Menu.acceleratorForeground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"Menu.acceleratorSelectionForeground",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"Menu.border",null,"Menu.arrowIcon",org_aswing_plaf_basic_icon_MenuArrowIcon,"Menu.checkIcon",org_aswing_plaf_basic_icon_MenuCheckIcon,"Menu.margin",new org_aswing_plaf_InsetsUIResource(0,0,0,0),"Menu.useMenuBarBackgroundForTopLevel",true,"Menu.menuPopupOffsetX",0,"Menu.menuPopupOffsetY",0,"Menu.submenuPopupOffsetX",-4,"Menu.submenuPopupOffsetY",0];
		table.putDefaults(comDefaults);
		comDefaults = ["PopupMenu.background",new org_aswing_plaf_ASColorUIResource(15790320,0.95),"PopupMenu.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"PopupMenu.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"PopupMenu.colorAdjust",new org_aswing_plaf_UIStyleTune(0.14,-0.14,0.06,0.20,0),"PopupMenu.opaque",true,"PopupMenu.focusable",false,"PopupMenu.font",table.getFont("menuFont"),"PopupMenu.borderColor",__map_reserved.controlDkShadow != null?table.getReserved("controlDkShadow"):table.h["controlDkShadow"],"PopupMenu.border",org_aswing_plaf_basic_border_PopupMenuBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["MenuBar.background",__map_reserved.menu != null?table.getReserved("menu"):table.h["menu"],"MenuBar.foreground",__map_reserved.menuText != null?table.getReserved("menuText"):table.h["menuText"],"MenuBar.mideground",__map_reserved.controlMide != null?table.getReserved("controlMide"):table.h["controlMide"],"MenuBar.colorAdjust",new org_aswing_plaf_UIStyleTune(0.18,0.05,0.20,0.20),"MenuBar.opaque",false,"MenuBar.focusable",true,"MenuBar.font",table.getFont("menuFont"),"MenuBar.border",null];
		table.putDefaults(comDefaults);
	}
	,__class__: org_aswing_plaf_basic_BasicLookAndFeel
});
var org_aswing_plaf_basic_BasicMenuBarUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuBarUI"] = org_aswing_plaf_basic_BasicMenuBarUI;
org_aswing_plaf_basic_BasicMenuBarUI.__name__ = ["org","aswing","plaf","basic","BasicMenuBarUI"];
org_aswing_plaf_basic_BasicMenuBarUI.__interfaces__ = [org_aswing_plaf_MenuElementUI];
org_aswing_plaf_basic_BasicMenuBarUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicMenuBarUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.menuBar = js_Boot.__instanceof(c,org_aswing_JMenuBar)?c:null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.menuBar = js_Boot.__instanceof(c,org_aswing_JMenuBar)?c:null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "MenuBar.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.menuBar,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.menuBar,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.menuBar,pp);
		var layout = this.menuBar.getLayout();
		if(layout == null || js_Boot.__instanceof(layout,org_aswing_plaf_UIResource)) this.menuBar.setLayout(new org_aswing_plaf_basic_DefaultMenuLayout(0));
	}
	,installListeners: function() {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null) menu.addSelectionListener($bind(this,this.__menuSelectionChanged));
		}
		this.menuBar.addEventListener("comAdded",$bind(this,this.__childAdded));
		this.menuBar.addEventListener("comRemoved",$bind(this,this.__childRemoved));
		this.menuBar.addEventListener("focusGained",$bind(this,this.__barFocusGained));
		this.menuBar.addEventListener("focusKeyDown",$bind(this,this.__barKeyDown));
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.menuBar);
	}
	,uninstallListeners: function() {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null) menu.removeSelectionListener($bind(this,this.__menuSelectionChanged));
		}
		this.menuBar.removeEventListener("comAdded",$bind(this,this.__childAdded));
		this.menuBar.removeEventListener("comRemoved",$bind(this,this.__childRemoved));
		this.menuBar.removeEventListener("focusGained",$bind(this,this.__barFocusGained));
		this.menuBar.removeEventListener("focusKeyDown",$bind(this,this.__barKeyDown));
	}
	,processKeyEvent: function(code) {
		var manager = org_aswing_MenuSelectionManager.defaultManager();
		if(manager.isNavigatingKey(code)) {
			var subs = this.menuBar.getSubElements();
			var path = [this.menuBar];
			if(subs.length > 0) {
				if(manager.isNextItemKey(code) || manager.isNextPageKey(code)) path.push(subs[0]); else path.push(subs[subs.length - 1]);
				var smu = org_aswing_AsWingUtils["as"](path[1],org_aswing_MenuElement);
				if(smu.getSubElements().length > 0) path.push(smu.getSubElements()[0]);
				manager.setSelectedPath(this.menuBar.stage,path,false);
			}
		}
	}
	,__barKeyDown: function(e) {
		if(org_aswing_MenuSelectionManager.defaultManager().getSelectedPath().length == 0) this.processKeyEvent(e.keyCode);
	}
	,__menuSelectionChanged: function(e) {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null && menu.isSelected()) {
				this.menuBar.getSelectionModel().setSelectedIndex(i,e.isProgrammatic());
				break;
			}
		}
	}
	,__barFocusGained: function(e) {
		org_aswing_MenuSelectionManager.defaultManager().setSelectedPath(this.menuBar.stage,[this.menuBar],false);
	}
	,__childAdded: function(e) {
		if(Std["is"](e.getChild(),org_aswing_JMenu)) org_aswing_AsWingUtils["as"](e.getChild(),org_aswing_JMenu).addSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,__childRemoved: function(e) {
		if(Std["is"](e.getChild(),org_aswing_JMenu)) org_aswing_AsWingUtils["as"](e.getChild(),org_aswing_JMenu).removeSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,__class__: org_aswing_plaf_basic_BasicMenuBarUI
});
var org_aswing_plaf_basic_BasicPanelUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicPanelUI"] = org_aswing_plaf_basic_BasicPanelUI;
org_aswing_plaf_basic_BasicPanelUI.__name__ = ["org","aswing","plaf","basic","BasicPanelUI"];
org_aswing_plaf_basic_BasicPanelUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicPanelUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		var p;
		p = js_Boot.__instanceof(c,org_aswing_JPanel)?c:null;
		this.installDefaults(p);
	}
	,uninstallUI: function(c) {
		var p;
		p = js_Boot.__instanceof(c,org_aswing_JPanel)?c:null;
		this.uninstallDefaults(p);
	}
	,installDefaults: function(p) {
		var pp = "Panel.";
		org_aswing_LookAndFeel.installColorsAndFont(p,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(p,pp);
		org_aswing_LookAndFeel.installBasicProperties(p,pp);
	}
	,uninstallDefaults: function(p) {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(p);
	}
	,paintBackGround: function(c,g,b) {
	}
	,__class__: org_aswing_plaf_basic_BasicPanelUI
});
var org_aswing_plaf_basic_BasicPopupMenuUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicPopupMenuUI"] = org_aswing_plaf_basic_BasicPopupMenuUI;
org_aswing_plaf_basic_BasicPopupMenuUI.__name__ = ["org","aswing","plaf","basic","BasicPopupMenuUI"];
org_aswing_plaf_basic_BasicPopupMenuUI.__interfaces__ = [org_aswing_plaf_MenuElementUI];
org_aswing_plaf_basic_BasicPopupMenuUI.getFirstPopup = function() {
	var msm = org_aswing_MenuSelectionManager.defaultManager();
	var p = msm.getSelectedPath();
	var me = null;
	var _g1 = 0;
	var _g = p.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(js_Boot.__instanceof(p[i],org_aswing_JPopupMenu)) me = p[i];
	}
	return me;
};
org_aswing_plaf_basic_BasicPopupMenuUI.getLastPopup = function() {
	var msm = org_aswing_MenuSelectionManager.defaultManager();
	var p = msm.getSelectedPath();
	var me = null;
	var i = p.length - 1;
	while(i >= 0) {
		if(js_Boot.__instanceof(p[i],org_aswing_JPopupMenu)) me = p[i];
		i--;
	}
	return me;
};
org_aswing_plaf_basic_BasicPopupMenuUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicPopupMenuUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.popupMenu = js_Boot.__instanceof(c,org_aswing_JPopupMenu)?c:null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.popupMenu = js_Boot.__instanceof(c,org_aswing_JPopupMenu)?c:null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "PopupMenu.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.popupMenu,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.popupMenu,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.popupMenu,pp);
		var layout = this.popupMenu.getLayout();
		if(layout == null || js_Boot.__instanceof(layout,org_aswing_plaf_UIResource)) this.popupMenu.setLayout(new org_aswing_plaf_basic_DefaultMenuLayout(1));
	}
	,installListeners: function() {
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.popupMenu);
	}
	,uninstallListeners: function() {
	}
	,paintBackGround: function(c,g,b) {
	}
	,processKeyEvent: function(code) {
		var manager = org_aswing_MenuSelectionManager.defaultManager();
		var path = manager.getSelectedPath();
		if(path[path.length - 1] != this.popupMenu) return;
		var root;
		var prev;
		var subs;
		if(manager.isPrevPageKey(code)) {
			if(path.length > 2) path.pop();
			if(path.length == 2 && !js_Boot.__instanceof(path[0],org_aswing_JPopupMenu)) {
				root = org_aswing_AsWingUtils["as"](path[0],org_aswing_MenuElement);
				prev = manager.prevSubElement(root,org_aswing_AsWingUtils["as"](path[1],org_aswing_MenuElement));
				path.pop();
				path.push(prev);
				if(prev.getSubElements().length > 0) {
					var prevPop = org_aswing_AsWingUtils["as"](prev.getSubElements()[0],org_aswing_MenuElement);
					path.push(prevPop);
					if(prevPop.getSubElements().length > 0) path.push(prevPop.getSubElements()[0]);
				}
			} else {
				subs = this.popupMenu.getSubElements();
				if(subs.length > 0) path.push(subs[subs.length - 1]);
			}
			manager.setSelectedPath(this.popupMenu.stage,path,false);
		} else if(manager.isNextPageKey(code)) {
			root = org_aswing_AsWingUtils["as"](path[0],org_aswing_MenuElement);
			if(root.getSubElements().length > 1 && !js_Boot.__instanceof(root,org_aswing_JPopupMenu)) {
				var next = manager.nextSubElement(root,org_aswing_AsWingUtils["as"](path[1],org_aswing_MenuElement));
				path = [root];
				path.push(next);
				if(next.getSubElements().length > 0) {
					var nextPop = org_aswing_AsWingUtils["as"](next.getSubElements()[0],org_aswing_MenuElement);
					path.push(nextPop);
					if(nextPop.getSubElements().length > 0) path.push(nextPop.getSubElements()[0]);
				}
			} else {
				subs = this.popupMenu.getSubElements();
				if(subs.length > 0) path.push(subs[0]);
			}
			manager.setSelectedPath(this.popupMenu.stage,path,false);
		} else if(manager.isNextItemKey(code)) {
			subs = this.popupMenu.getSubElements();
			if(subs.length > 0) {
				if(manager.isPrevItemKey(code)) path.push(subs[subs.length - 1]); else path.push(subs[0]);
			}
			manager.setSelectedPath(this.popupMenu.stage,path,false);
		}
	}
	,__class__: org_aswing_plaf_basic_BasicPopupMenuUI
});
var org_aswing_plaf_basic_BasicProgressBarUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.barSize = 12;
};
$hxClasses["org.aswing.plaf.basic.BasicProgressBarUI"] = org_aswing_plaf_basic_BasicProgressBarUI;
org_aswing_plaf_basic_BasicProgressBarUI.__name__ = ["org","aswing","plaf","basic","BasicProgressBarUI"];
org_aswing_plaf_basic_BasicProgressBarUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicProgressBarUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "ProgressBar.";
	}
	,installUI: function(c) {
		this.progressBar = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.progressBar = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.progressBar,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.progressBar,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.progressBar,pp);
		this.barSize = this.getInt(pp + "barWidth");
		if(this.barSize == -1) this.barSize = 1000;
		if(!this.progressBar.isIndeterminateDelaySet()) {
			this.progressBar.setIndeterminateDelay(this.getUint(pp + "indeterminateDelay"));
			this.progressBar.setIndeterminateDelaySet(false);
		}
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.progressBar);
	}
	,installComponents: function() {
		this.stringText = new openfl_text_TextField();
		this.stringText.mouseEnabled = false;
		this.stringText.set_selectable(false);
		this.progressBar.addChild(this.stringText);
	}
	,uninstallComponents: function() {
		if(this.stringText.parent != null) this.stringText.parent.removeChild(this.stringText);
		this.stringText = null;
		this.iconDecorator = null;
	}
	,installListeners: function() {
		this.progressBar.addEventListener("stateChanged",$bind(this,this.__stateChanged));
	}
	,uninstallListeners: function() {
		this.progressBar.removeEventListener("stateChanged",$bind(this,this.__stateChanged));
	}
	,__stateChanged: function(source) {
		source.repaint();
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		var sp;
		sp = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
		if(sp.getString() != null && sp.getString().length > 0) {
			this.stringText.set_text(sp.getString());
			org_aswing_AsWingUtils.applyTextFontAndColor(this.stringText,sp.getFont(),sp.getForeground());
			if(sp.getOrientation() == 1) {
				this.stringText.set_rotation(-90);
				this.stringText.set_x(Math.round(b.x + (b.width - this.stringText.get_width()) / 2));
				this.stringText.set_y(Math.round(b.y + (b.height - this.stringText.get_height()) / 2 + this.stringText.get_height()));
			} else {
				this.stringText.set_rotation(0);
				this.stringText.set_x(Math.round(b.x + (b.width - this.stringText.get_width()) / 2));
				this.stringText.set_y(Math.round(b.y + (b.height - this.stringText.get_height()) / 2));
			}
			org_aswing_util_DepthManager.bringToTop(this.stringText);
		} else this.stringText.set_text("");
	}
	,paintBackGround: function(c,g,b) {
	}
	,getPreferredSize: function(c) {
		var sp;
		sp = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
		var size;
		if(sp.getOrientation() == 1) size = this.getPreferredInnerVertical(); else size = this.getPreferredInnerHorizontal();
		if(sp.getString() != null) {
			var textSize = c.getFont().computeTextSize(sp.getString(),false);
			if(sp.getOrientation() == 1) {
				size.width = Std["int"](Math.max(size.width,textSize.height));
				size.height = Std["int"](Math.max(size.height,textSize.width));
			} else {
				size.width = Std["int"](Math.max(size.width,textSize.width));
				size.height = Std["int"](Math.max(size.height,textSize.height));
			}
		}
		return sp.getInsets().getOutsideSize(size);
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(1,1));
	}
	,getPreferredInnerHorizontal: function() {
		return new org_aswing_geom_IntDimension(80,this.barSize);
	}
	,getPreferredInnerVertical: function() {
		return new org_aswing_geom_IntDimension(this.barSize,80);
	}
	,__class__: org_aswing_plaf_basic_BasicProgressBarUI
});
var org_aswing_plaf_basic_BasicScrollPaneUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicScrollPaneUI"] = org_aswing_plaf_basic_BasicScrollPaneUI;
org_aswing_plaf_basic_BasicScrollPaneUI.__name__ = ["org","aswing","plaf","basic","BasicScrollPaneUI"];
org_aswing_plaf_basic_BasicScrollPaneUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicScrollPaneUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.scrollPane = js_Boot.__instanceof(c,org_aswing_JScrollPane)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.scrollPane = js_Boot.__instanceof(c,org_aswing_JScrollPane)?c:null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "ScrollPane.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.scrollPane,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.scrollPane,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.scrollPane,pp);
		if(!this.scrollPane.getVerticalScrollBar().isFocusableSet()) {
			this.scrollPane.getVerticalScrollBar().setFocusable(false);
			this.scrollPane.getVerticalScrollBar().setFocusableSet(false);
		}
		if(!this.scrollPane.getHorizontalScrollBar().isFocusableSet()) {
			this.scrollPane.getHorizontalScrollBar().setFocusable(false);
			this.scrollPane.getHorizontalScrollBar().setFocusableSet(false);
		}
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.scrollPane);
	}
	,installComponents: function() {
	}
	,uninstallComponents: function() {
	}
	,installListeners: function() {
		this.scrollPane.addAdjustmentListener($bind(this,this.__adjustChanged));
		this.scrollPane.addEventListener("viewportChanged",$bind(this,this.__viewportChanged));
		this.__viewportChanged(null);
	}
	,uninstallListeners: function() {
		this.scrollPane.removeAdjustmentListener($bind(this,this.__adjustChanged));
		this.scrollPane.removeEventListener("viewportChanged",$bind(this,this.__viewportChanged));
		if(this.lastViewport != null) this.lastViewport.removeStateListener($bind(this,this.__viewportStateChanged));
	}
	,syncScrollPaneWithViewport: function() {
		var viewport = this.scrollPane.getViewport();
		var vsb = this.scrollPane.getVerticalScrollBar();
		var hsb = this.scrollPane.getHorizontalScrollBar();
		if(viewport != null) {
			var extentSize = viewport.getExtentSize();
			if(extentSize.width <= 0 || extentSize.height <= 0) return;
			var viewSize = viewport.getViewSize();
			var viewPosition = viewport.getViewPosition();
			var extent;
			var max;
			var value;
			if(vsb != null) {
				extent = extentSize.height;
				max = viewSize.height;
				value = Std["int"](Math.max(0,Math.min(viewPosition.y,max - extent)));
				vsb.setValues(value,extent,0,max);
				vsb.setUnitIncrement(viewport.getVerticalUnitIncrement());
				vsb.setBlockIncrement(viewport.getVerticalBlockIncrement());
			}
			if(hsb != null) {
				extent = extentSize.width;
				max = viewSize.width;
				value = Std["int"](Math.max(0,Math.min(viewPosition.x,max - extent)));
				hsb.setValues(value,extent,0,max);
				hsb.setUnitIncrement(viewport.getHorizontalUnitIncrement());
				hsb.setBlockIncrement(viewport.getHorizontalBlockIncrement());
			}
		}
	}
	,__viewportChanged: function(e) {
		if(this.lastViewport != null) this.lastViewport.removeStateListener($bind(this,this.__viewportStateChanged));
		this.lastViewport = this.scrollPane.getViewport();
		this.lastViewport.addStateListener($bind(this,this.__viewportStateChanged));
	}
	,__viewportStateChanged: function(e) {
		this.syncScrollPaneWithViewport();
	}
	,__adjustChanged: function(e) {
		var viewport = this.scrollPane.getViewport();
		viewport.scrollRectToVisible(this.scrollPane.getVisibleRect(),e.isProgrammatic());
	}
	,__class__: org_aswing_plaf_basic_BasicScrollPaneUI
});
var org_aswing_plaf_basic_BasicTableHeaderUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	this.mouseXOffset = 0;
	this.resizing = false;
	this.resizeCursor = org_aswing_Cursor.createCursor("System.hMoveCursor");
};
$hxClasses["org.aswing.plaf.basic.BasicTableHeaderUI"] = org_aswing_plaf_basic_BasicTableHeaderUI;
org_aswing_plaf_basic_BasicTableHeaderUI.__name__ = ["org","aswing","plaf","basic","BasicTableHeaderUI"];
org_aswing_plaf_basic_BasicTableHeaderUI.setCellComponentProperties = function(com) {
	com.setFocusable(false);
	if(js_Boot.__instanceof(com,org_aswing_Container)) {
		var con;
		con = js_Boot.__instanceof(com,org_aswing_Container)?com:null;
		var _g1 = 0;
		var _g = con.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			org_aswing_plaf_basic_BasicTableHeaderUI.setCellComponentProperties(con.getComponent(i));
		}
	}
};
org_aswing_plaf_basic_BasicTableHeaderUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicTableHeaderUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TableHeader.";
	}
	,installUI: function(c) {
		this.header = js_Boot.__instanceof(c,org_aswing_table_JTableHeader)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.header,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.header,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.header,pp);
		this.header.setOpaque(true);
	}
	,installComponents: function() {
		this.cells = [];
	}
	,installListeners: function() {
		this.header.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__onHeaderRollover));
		this.header.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__onHeaderRollout));
		this.header.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onHeaderPressed));
		this.header.addEventListener("release",$bind(this,this.__onHeaderReleased));
		this.header.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__headerRemovedFromStage));
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.header);
	}
	,uninstallComponents: function() {
		this.removeAllCells();
		this.cells = null;
	}
	,uninstallListeners: function() {
		this.header.removeEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__onHeaderRollover));
		this.header.removeEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__onHeaderRollout));
		this.header.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onHeaderPressed));
		this.header.removeEventListener("release",$bind(this,this.__onHeaderReleased));
		this.header.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__headerRemovedFromStage));
	}
	,__headerRemovedFromStage: function(e) {
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving));
		org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving));
	}
	,__onHeaderRollover: function(e) {
		if(e.buttonDown != true) {
			if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving),false,0,false);
		}
	}
	,__onHeaderRollout: function(e) {
		if(e == null || !e.buttonDown) {
			org_aswing_CursorManager.getManager(org_aswing_AsWingManager.getStage()).hideCustomCursor(this.resizeCursor);
			if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving));
		}
	}
	,__onRollOverMouseMoving: function(e) {
		if(this.resizing) return;
		var p = this.header.getMousePosition();
		if(this.header.getTable().hitTestMouse() && this.canResize(this.getResizingColumn(p,this.header.columnAtPoint(p)))) org_aswing_CursorManager.getManager(org_aswing_AsWingManager.getStage()).showCustomCursor(this.resizeCursor,true); else org_aswing_CursorManager.getManager(org_aswing_AsWingManager.getStage()).hideCustomCursor(this.resizeCursor);
	}
	,__onHeaderPressed: function(e) {
		this.header.setResizingColumn(null);
		if(this.header.getTable().getCellEditor() != null) this.header.getTable().getCellEditor().cancelCellEditing();
		var p = this.header.getMousePosition();
		var index = this.header.columnAtPoint(p);
		if(index >= 0) {
			var resizingColumn = this.getResizingColumn(p,index);
			if(this.canResize(resizingColumn)) {
				this.header.setResizingColumn(resizingColumn);
				this.mouseXOffset = p.x - resizingColumn.getWidth();
				if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving),false,0,false);
				this.resizing = true;
			}
		}
	}
	,__onHeaderReleased: function(e) {
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving));
		this.header.setResizingColumn(null);
		this.resizing = false;
		this.__onRollOverMouseMoving(null);
	}
	,__onMouseMoving: function(e) {
		var mouseX = this.header.getMousePosition().x;
		var resizingColumn = this.header.getResizingColumn();
		if(resizingColumn != null) {
			var newWidth;
			newWidth = mouseX - this.mouseXOffset;
			resizingColumn.setWidth(newWidth);
			e.updateAfterEvent();
		}
	}
	,canResize: function(column) {
		return column != null && this.header.getResizingAllowed() && column.getResizable();
	}
	,getResizingColumn: function(p,column) {
		if(column < 0) return null;
		var r = this.header.getHeaderRect(column);
		r.grow(-3,0);
		if(p.x > r.x && p.x < r.x + r.width) return null;
		var midPoint = r.x + r.width / 2 | 0;
		var columnIndex;
		if(p.x < midPoint) columnIndex = column - 1; else columnIndex = column;
		if(columnIndex == -1) return null;
		return this.header.getColumnModel().getColumn(columnIndex);
	}
	,getHeaderRenderer: function(columnIndex) {
		var aColumn = this.header.getColumnModel().getColumn(columnIndex);
		var renderer = aColumn.getHeaderCellFactory();
		if(renderer == null) renderer = this.header.getDefaultRenderer();
		return renderer;
	}
	,paintBackGround: function(c,g,b) {
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		if(this.header.getColumnModel().getColumnCount() <= 0) return;
		this.synCreateCellInstances();
		var cm = this.header.getColumnModel();
		var cMin = 0;
		var cMax = cm.getColumnCount() - 1;
		var columnWidth;
		var cellRect = this.header.getHeaderRect(cMin);
		cellRect.x += Std["int"](this.header.getTable().getColumnModel().getColumnMargin() / 2);
		var aColumn;
		var _g1 = cMin;
		var _g = cMax + 1;
		while(_g1 < _g) {
			var column = _g1++;
			aColumn = cm.getColumn(column);
			columnWidth = aColumn.getWidth();
			cellRect.width = columnWidth | 0;
			var cell = this.cells[column];
			cell.setCellValue(aColumn.getHeaderValue());
			cell.setTableCellStatus(this.header.getTable(),false,-1,column);
			cell.getCellComponent().setBounds(cellRect);
			cell.getCellComponent().setVisible(true);
			cell.getCellComponent().validate();
			cellRect.x += columnWidth | 0;
		}
	}
	,synCreateCellInstances: function() {
		var columnCount = this.header.getColumnModel().getColumnCount();
		var i;
		if(this.lastColumnCellFactories == null || this.lastColumnCellFactories.length != columnCount) this.removeAllCells(); else {
			var _g = 0;
			while(_g < columnCount) {
				var i1 = _g++;
				if(this.lastColumnCellFactories[i1] != this.getHeaderRenderer(i1)) {
					this.removeAllCells();
					break;
				}
			}
		}
		if(this.cells.length == 0) {
			this.lastColumnCellFactories = [];
			var _g1 = 0;
			while(_g1 < columnCount) {
				var i2 = _g1++;
				var factory = this.getHeaderRenderer(i2);
				this.lastColumnCellFactories[i2] = factory;
				var cell = factory.createNewCell(false);
				this.header.append(cell.getCellComponent());
				org_aswing_plaf_basic_BasicTableHeaderUI.setCellComponentProperties(cell.getCellComponent());
				this.cells.push(cell);
			}
		}
	}
	,removeAllCells: function() {
		var _g1 = 0;
		var _g = this.cells.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org_aswing_AsWingUtils["as"](this.cells[i],org_aswing_table_TableCell);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells = [];
	}
	,createHeaderSize: function(width) {
		return this.header.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(width,this.header.getRowHeight()));
	}
	,getMinimumSize: function(c) {
		var width = 0;
		return this.createHeaderSize(width);
	}
	,getPreferredSize: function(c) {
		var width = 0;
		var enumeration = this.header.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = org_aswing_AsWingUtils["as"](enumeration[i],org_aswing_table_TableColumn);
			width = width + aColumn.getPreferredWidth();
		}
		return this.createHeaderSize(width);
	}
	,getMaximumSize: function(c) {
		var width = 100000;
		return this.createHeaderSize(width);
	}
	,toString: function() {
		return "BasicTableHeaderUI[]";
	}
	,__class__: org_aswing_plaf_basic_BasicTableHeaderUI
});
var org_aswing_plaf_basic_BasicTextAreaUI = function() {
	org_aswing_plaf_basic_BasicTextComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextAreaUI"] = org_aswing_plaf_basic_BasicTextAreaUI;
org_aswing_plaf_basic_BasicTextAreaUI.__name__ = ["org","aswing","plaf","basic","BasicTextAreaUI"];
org_aswing_plaf_basic_BasicTextAreaUI.__super__ = org_aswing_plaf_basic_BasicTextComponentUI;
org_aswing_plaf_basic_BasicTextAreaUI.prototype = $extend(org_aswing_plaf_basic_BasicTextComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TextArea.";
	}
	,__class__: org_aswing_plaf_basic_BasicTextAreaUI
});
var org_aswing_plaf_basic_BasicTextFieldUI = function() {
	org_aswing_plaf_basic_BasicTextComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextFieldUI"] = org_aswing_plaf_basic_BasicTextFieldUI;
org_aswing_plaf_basic_BasicTextFieldUI.__name__ = ["org","aswing","plaf","basic","BasicTextFieldUI"];
org_aswing_plaf_basic_BasicTextFieldUI.__super__ = org_aswing_plaf_basic_BasicTextComponentUI;
org_aswing_plaf_basic_BasicTextFieldUI.prototype = $extend(org_aswing_plaf_basic_BasicTextComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TextField.";
	}
	,__class__: org_aswing_plaf_basic_BasicTextFieldUI
});
var org_aswing_plaf_basic_BasicToolTipUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicToolTipUI"] = org_aswing_plaf_basic_BasicToolTipUI;
org_aswing_plaf_basic_BasicToolTipUI.__name__ = ["org","aswing","plaf","basic","BasicToolTipUI"];
org_aswing_plaf_basic_BasicToolTipUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicToolTipUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.tooltip = js_Boot.__instanceof(c,org_aswing_JToolTip)?c:null;
		this.installDefaults();
		this.initallComponents();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "ToolTip.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.tooltip,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.tooltip,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.tooltip,pp);
		var filters = this.getInstance(this.getPropertyPrefix() + "filters");
		this.tooltip.set_filters(filters);
	}
	,initallComponents: function() {
		var b = this.tooltip;
		b.setLayout(new org_aswing_BorderLayout());
		this.label = new org_aswing_JLabel(b.getTipText());
		this.label.setOpaque(false);
		this.label.setFont(null);
		this.label.setForeground(null);
		this.label.setUIElement(true);
		b.append(this.label,"Center");
	}
	,installListeners: function() {
		this.tooltip.addEventListener("tipTextChanged",$bind(this,this.__tipTextChanged));
	}
	,paintBackGround: function(c,g,b) {
	}
	,__tipTextChanged: function(e) {
		this.label.setText(this.tooltip.getTipText());
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
		this.uninstallComponents();
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.tooltip);
		this.tooltip.set_filters([]);
	}
	,uninstallComponents: function() {
		this.tooltip.remove(this.label);
		this.label = null;
	}
	,uninstallListeners: function() {
		this.tooltip.removeEventListener("tipTextChanged",$bind(this,this.__tipTextChanged));
	}
	,__class__: org_aswing_plaf_basic_BasicToolTipUI
});
var org_aswing_tree_NodeDimensions = function() { };
$hxClasses["org.aswing.tree.NodeDimensions"] = org_aswing_tree_NodeDimensions;
org_aswing_tree_NodeDimensions.__name__ = ["org","aswing","tree","NodeDimensions"];
org_aswing_tree_NodeDimensions.prototype = {
	__class__: org_aswing_tree_NodeDimensions
};
var org_aswing_plaf_basic_BasicTreeUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
	if(org_aswing_plaf_basic_BasicTreeUI.EMPTY_INSETS == null) org_aswing_plaf_basic_BasicTreeUI.EMPTY_INSETS = new org_aswing_Insets(0,0,0,0);
	this.totalChildIndent = 0;
	this.depthOffset = 0;
	this.leftChildIndent = 0;
	this.rightChildIndent = 0;
	this.paintFocusedIndex = -1;
	this.cells = new org_aswing_util_ArrayList();
	this.lastViewPosition = new org_aswing_geom_IntPoint();
	this.viewSize = new org_aswing_geom_IntDimension();
	this.validCachedViewSize = false;
};
$hxClasses["org.aswing.plaf.basic.BasicTreeUI"] = org_aswing_plaf_basic_BasicTreeUI;
org_aswing_plaf_basic_BasicTreeUI.__name__ = ["org","aswing","plaf","basic","BasicTreeUI"];
org_aswing_plaf_basic_BasicTreeUI.__interfaces__ = [org_aswing_event_TreeModelListener,org_aswing_tree_NodeDimensions,org_aswing_plaf_TreeUI];
org_aswing_plaf_basic_BasicTreeUI.EMPTY_INSETS = null;
org_aswing_plaf_basic_BasicTreeUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicTreeUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.tree = js_Boot.__instanceof(c,org_aswing_JTree)?c:null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Tree.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.tree,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.tree,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.tree,pp);
		var sbg = this.tree.getSelectionBackground();
		if(sbg == null || js_Boot.__instanceof(sbg,org_aswing_plaf_UIResource)) this.tree.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.tree.getSelectionForeground();
		if(sfg == null || js_Boot.__instanceof(sfg,org_aswing_plaf_UIResource)) this.tree.setSelectionForeground(this.getColor(pp + "selectionForeground"));
		this.tree.setRowHeight(this.getInt(pp + "rowHeight"));
		this.tree.setRowHeightSet(false);
		this.setLeftChildIndent(this.getInt(pp + "leftChildIndent"));
		this.setRightChildIndent(this.getInt(pp + "rightChildIndent"));
		this.updateDepthOffset();
		this.treeState = new org_aswing_tree_FixedHeightLayoutCache();
		this.treeState.setModel(this.tree.getModel());
		this.treeState.setSelectionModel(this.tree.getSelectionModel());
		this.treeState.setNodeDimensions(this);
		this.treeState.setRowHeight(this.tree.getRowHeight());
		this.editor = this.tree.getCellEditor();
		this.setRootVisible(this.tree.isRootVisible());
		this.expandControl = org_aswing_AsWingUtils["as"](this.getInstance(pp + "expandControl"),org_aswing_plaf_basic_tree_ExpandControl);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.tree);
	}
	,installComponents: function() {
		this.rendererPane = new org_aswing_CellPane();
		this.rendererPane.setLayout(new org_aswing_EmptyLayout());
		this.tree.append(this.rendererPane);
	}
	,uninstallComponents: function() {
		this.tree.remove(this.rendererPane);
		this.cells.clear();
		this.rendererPane = null;
	}
	,installListeners: function() {
		this.tree.addEventListener("treeExpanded",$bind(this,this.__treeExpanded));
		this.tree.addEventListener("treeCollapsed",$bind(this,this.__treeCollapsed));
		this.tree.addStateListener($bind(this,this.__viewportStateChanged));
		this.tree.addEventListener("propertyChange",$bind(this,this.__propertyChanged));
		this.tree.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onPressed));
		this.tree.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__onReleased));
		this.tree.addEventListener("clickCount",$bind(this,this.__onClicked));
		this.tree.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.tree.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.setModel(this.tree.getModel());
		this.setSelectionModel(this.tree.getSelectionModel());
	}
	,uninstallListeners: function() {
		this.tree.removeEventListener("treeExpanded",$bind(this,this.__treeExpanded));
		this.tree.removeEventListener("treeCollapsed",$bind(this,this.__treeCollapsed));
		this.tree.removeStateListener($bind(this,this.__viewportStateChanged));
		this.tree.removeEventListener("propertyChange",$bind(this,this.__propertyChanged));
		this.tree.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onPressed));
		this.tree.removeEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__onReleased));
		this.tree.removeEventListener("clickCount",$bind(this,this.__onClicked));
		this.tree.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.tree.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.setModel(null);
		this.setSelectionModel(null);
	}
	,setModel: function(tm) {
		this.cancelEditing(this.tree);
		if(this.treeModel != null) this.treeModel.removeTreeModelListener(this);
		this.treeModel = tm;
		if(this.treeModel != null) this.treeModel.addTreeModelListener(this);
		if(this.treeState != null) {
			this.treeState.setModel(tm);
			this.updateLayoutCacheExpandedNodes();
			this.updateSize();
		}
	}
	,setSelectionModel: function(sm) {
		if(this.selectionModel != null) {
			this.selectionModel.removePropertyChangeListener($bind(this,this.__selectionModelPropertyChanged));
			this.selectionModel.removeTreeSelectionListener($bind(this,this.__selectionChanged));
		}
		this.selectionModel = sm;
		if(this.selectionModel != null) {
			this.selectionModel.addPropertyChangeListener($bind(this,this.__selectionModelPropertyChanged));
			this.selectionModel.addTreeSelectionListener($bind(this,this.__selectionChanged));
		}
		if(this.treeState != null) this.treeState.setSelectionModel(this.selectionModel);
		this.tree.repaint();
	}
	,setRootVisible: function(newValue) {
		this.cancelEditing(this.tree);
		this.updateDepthOffset();
		if(this.treeState != null) {
			this.treeState.setRootVisible(newValue);
			this.treeState.invalidateSizes();
			this.updateSize();
		}
	}
	,setRowHeight: function(rowHeight) {
		this.cancelEditing(this.tree);
		if(this.treeState != null) {
			this.treeState.setRowHeight(rowHeight);
			this.updateSize();
		}
	}
	,setCellEditor: function(editor) {
		this.cancelEditing(this.tree);
		this.editor = editor;
	}
	,setEditable: function(newValue) {
		this.cancelEditing(this.tree);
		if(newValue) this.editor = this.tree.getCellEditor(); else this.editor = null;
	}
	,repaintPath: function(path) {
	}
	,cellFactoryChanged: function() {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org_aswing_AsWingUtils["as"](this.cells.get(i),org_aswing_tree_TreeCell);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells.clear();
		this.treeState.invalidateSizes();
		this.updateSize();
	}
	,updateLayoutCacheExpandedNodes: function() {
		if(this.treeModel != null && this.treeModel.getRoot() != null) this.updateExpandedDescendants(new org_aswing_tree_TreePath([this.treeModel.getRoot()]));
	}
	,isLocationInExpandControl: function(path,mouseX,mouseY) {
		if(path != null && !this.treeModel.isLeaf(path.getLastPathComponent())) {
			var boxWidth;
			boxWidth = this.leftChildIndent;
			var boxLeftX = this.getRowX(this.tree.getRowForPath(path),path.getPathCount() - 1) - boxWidth;
			var boxRightX = boxLeftX + boxWidth;
			return mouseX >= boxLeftX && mouseX <= boxRightX;
		}
		return false;
	}
	,toggleExpandState: function(path) {
		if(!this.tree.isExpanded(path)) {
			var row = this.getRowForPath(this.tree,path);
			this.tree.expandPath(path);
			this.updateSize();
			if(row != -1) {
				if(this.tree.isScrollsOnExpand()) this.ensureRowsAreVisible(row,row + this.treeState.getVisibleChildCount(path)); else this.ensureRowsAreVisible(row,row);
			}
		} else {
			this.tree.collapsePath(path);
			this.updateSize();
		}
	}
	,ensureRowsAreVisible: function(beginRow,endRow) {
		if(this.tree != null && beginRow >= 0 && endRow < this.getRowCount(this.tree)) {
			this.tree.scrollRowToVisible(endRow);
			this.tree.scrollRowToVisible(beginRow);
		}
	}
	,handleExpandControlClick: function(path,mouseX,mouseY) {
		this.toggleExpandState(path);
	}
	,selectPathForEvent: function(path,e) {
		this.doSelectWhenRelease = false;
		this.pressedPath = path;
		if(this.tree.isPathSelected(path)) this.doSelectWhenRelease = true; else this.doSelectPathForEvent(e);
		this.paintFocusedIndex = this.tree.getRowForPath(path);
	}
	,doSelectPathForEvent: function(e) {
		var path = this.pressedPath;
		var ctrl = false;
		var shift = false;
		ctrl = e.ctrlKey;
		shift = e.shiftKey;
		if(shift) {
			var anchor = this.tree.getAnchorSelectionPath();
			var anchorRow;
			if(anchor == null) anchorRow = -1; else anchorRow = this.getRowForPath(this.tree,anchor);
			if(anchorRow == -1 || this.selectionModel.getSelectionMode() == 1) this.tree.setSelectionPath(path,false); else {
				var row = this.getRowForPath(this.tree,path);
				var lastAnchorPath = anchor;
				if(ctrl) {
					if(this.tree.isRowSelected(anchorRow)) this.tree.addSelectionInterval(anchorRow,row,false); else {
						this.tree.removeSelectionInterval(anchorRow,row,false);
						this.tree.addSelectionInterval(row,row,false);
					}
				} else if(row < anchorRow) this.tree.setSelectionInterval(row,anchorRow,false); else this.tree.setSelectionInterval(anchorRow,row,false);
				this.ignoreLAChange = true;
				this.tree.setAnchorSelectionPath(lastAnchorPath);
				this.tree.setLeadSelectionPath(path);
				this.ignoreLAChange = false;
			}
		} else if(ctrl) {
			if(this.tree.isPathSelected(path)) this.tree.removeSelectionPath(path,false); else this.tree.addSelectionPath(path,false);
			this.ignoreLAChange = true;
			this.tree.setAnchorSelectionPath(path);
			this.tree.setLeadSelectionPath(path);
			this.ignoreLAChange = false;
		} else this.tree.setSelectionPath(path,false);
	}
	,__selectionModelPropertyChanged: function(e) {
		this.selectionModel.resetRowSelection();
	}
	,__selectionChanged: function(event) {
		this.stopEditing(this.tree);
		if(this.tree.isExpandsSelectedPaths() && this.selectionModel != null) {
			var paths = this.selectionModel.getSelectionPaths();
			if(paths != null) {
				var _g1 = 0;
				var _g = paths.length;
				while(_g1 < _g) {
					var counter = _g1++;
					var path = paths[counter].getParentPath();
					var expand = true;
					while(path != null) if(this.treeModel.isLeaf(path.getLastPathComponent())) {
						expand = false;
						path = null;
					} else path = path.getParentPath();
					if(expand) this.tree.makePathVisible(paths[counter]);
				}
			}
		}
		this.paintFocusedIndex = this.tree.getMinSelectionRow();
		var lead = this.tree.getSelectionModel().getLeadSelectionPath();
		this.ignoreLAChange = true;
		this.tree.setAnchorSelectionPath(lead);
		this.tree.setLeadSelectionPath(lead);
		this.ignoreLAChange = false;
		this.tree.repaint();
	}
	,__onClicked: function(e) {
		var edit = this.tree.isEditable() && this.editor != null && this.editor.isCellEditable(e.getCount());
		var toggle = e.getCount() == this.tree.getToggleClickCount();
		if(!(edit || toggle)) return;
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		if(path != null) {
			var bounds = this.getPathBounds(this.tree,path);
			if(p.x > bounds.x && p.x <= bounds.x + bounds.width) {
				if(edit) this.tree.startEditingAtPath(path); else this.toggleExpandState(path);
			}
		}
	}
	,__onPressed: function(e) {
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		if(path != null) {
			if(this.isLocationInExpandControl(path,p.x,p.y)) this.handleExpandControlClick(path,p.x,p.y);
			var bounds = this.getPathBounds(this.tree,path);
			if(p.x > bounds.x && p.x <= bounds.x + bounds.width) this.selectPathForEvent(path,e);
		}
	}
	,__onReleased: function(e) {
		if(this.doSelectWhenRelease) {
			this.doSelectPathForEvent(e);
			this.doSelectWhenRelease = false;
		}
	}
	,__onMouseWheel: function(e) {
		var pos = this.tree.getViewPosition();
		if(e.shiftKey) pos.x -= this.tree.getHorizontalUnitIncrement() * e.delta; else pos.y -= this.tree.getVerticalUnitIncrement() * e.delta;
		this.tree.setViewPosition(pos);
	}
	,__onKeyDown: function(e) {
		if(!this.tree.isEnabled()) return;
		var code = e.keyCode;
		var dir = 0;
		if(this.isControlKey(code)) {
			var fm = org_aswing_FocusManager.getManager(this.tree.stage);
			if(fm != null) fm.setTraversing(true);
		} else return;
		if(code == org_aswing_AWKeyboard.UP) dir = -1; else if(code == org_aswing_AWKeyboard.DOWN) dir = 1;
		if(this.paintFocusedIndex == -1) this.paintFocusedIndex = this.tree.getSelectionModel().getMinSelectionRow();
		if(this.paintFocusedIndex < -1) this.paintFocusedIndex = -1; else if(this.paintFocusedIndex > this.tree.getRowCount()) this.paintFocusedIndex = this.tree.getRowCount();
		var index = this.paintFocusedIndex + dir;
		if(code == org_aswing_AWKeyboard.HOME) index = 0; else if(code == org_aswing_AWKeyboard.END) index = this.tree.getRowCount() - 1;
		if(index < 0 || index >= this.tree.getRowCount()) return;
		var path = this.tree.getPathForRow(index);
		if(code == org_aswing_AWKeyboard.LEFT) this.tree.collapseRow(index); else if(code == org_aswing_AWKeyboard.RIGHT) this.tree.expandRow(index); else if(dir != 0 || (code == org_aswing_AWKeyboard.HOME || code == org_aswing_AWKeyboard.END)) {
			if(e.shiftKey) {
				var anchor = this.tree.getAnchorSelectionPath();
				var anchorRow;
				if(anchor == null) anchorRow = -1; else anchorRow = this.getRowForPath(this.tree,anchor);
				var lastAnchorPath = anchor;
				if(index < anchorRow) this.tree.setSelectionInterval(index,anchorRow); else this.tree.setSelectionInterval(anchorRow,index);
				this.ignoreLAChange = true;
				this.tree.setAnchorSelectionPath(lastAnchorPath);
				this.tree.setLeadSelectionPath(path);
				this.ignoreLAChange = false;
				this.paintFocusedIndex = index;
			} else if(e.ctrlKey) this.paintFocusedIndex = index; else this.tree.setSelectionInterval(index,index);
			this.tree.scrollRowToVisible(index);
		} else if(code == org_aswing_AWKeyboard.SPACE) {
			this.tree.addSelectionInterval(index,index);
			this.tree.scrollRowToVisible(index);
			this.ignoreLAChange = true;
			this.tree.setAnchorSelectionPath(path);
			this.tree.setLeadSelectionPath(path);
			this.ignoreLAChange = false;
		} else if(code == this.getEditionKey()) {
			var edit = this.tree.isEditable() && this.editor != null;
			if(edit) this.tree.startEditingAtPath(path);
			return;
		}
		this.tree.repaint();
	}
	,isControlKey: function(code) {
		return code == org_aswing_AWKeyboard.UP || code == org_aswing_AWKeyboard.DOWN || code == org_aswing_AWKeyboard.SPACE || code == org_aswing_AWKeyboard.LEFT || code == org_aswing_AWKeyboard.RIGHT || code == org_aswing_AWKeyboard.HOME || code == org_aswing_AWKeyboard.END || code == this.getEditionKey();
	}
	,getEditionKey: function() {
		return org_aswing_AWKeyboard.ENTER;
	}
	,__viewportStateChanged: function(e) {
		var viewPosition = this.tree.getViewPosition();
		if(!this.lastViewPosition.equals(viewPosition)) {
			if(this.lastViewPosition.y == viewPosition.y) {
				this.positRendererPaneX(viewPosition.x);
				this.lastViewPosition.setLocation(viewPosition);
				return;
			}
			this.tree.repaint();
		}
	}
	,__propertyChanged: function(e) {
		var changeName = e.getPropertyName();
		var ov = e.getOldValue();
		var nv = e.getNewValue();
		if(changeName == "leadSelectionPath") {
			if(this.ignoreLAChange != true) {
				this.updateLeadRow();
				this.repaintPath(js_Boot.__instanceof(ov,org_aswing_tree_TreePath)?ov:null);
				this.repaintPath(js_Boot.__instanceof(nv,org_aswing_tree_TreePath)?nv:null);
			}
		} else if(changeName == "anchorSelectionPath") {
			if(this.ignoreLAChange != true) {
				this.repaintPath(js_Boot.__instanceof(ov,org_aswing_tree_TreePath)?ov:null);
				this.repaintPath(js_Boot.__instanceof(nv,org_aswing_tree_TreePath)?nv:null);
			}
		} else if(changeName == "cellFactory") this.cellFactoryChanged(); else if(changeName == "model") this.setModel(js_Boot.__instanceof(nv,org_aswing_tree_TreeModel)?nv:null); else if(changeName == "rootVisible") this.setRootVisible(nv == true); else if(changeName == "rowHeight") this.setRowHeight(nv); else if(changeName == "cellEditor") this.setCellEditor(js_Boot.__instanceof(nv,org_aswing_tree_TreeCellEditor)?nv:null); else if(changeName == "editable") this.setEditable(nv == true); else if(changeName == "selectionModel") this.setSelectionModel(this.tree.getSelectionModel()); else if(changeName == "font") {
			this.cancelEditing(this.tree);
			if(this.treeState != null) this.treeState.invalidateSizes();
			this.updateSize();
		}
	}
	,positRendererPaneX: function(viewX) {
		this.rendererPane.setX(this.tree.getInsets().left - viewX);
		this.rendererPane.validate();
	}
	,setLeftChildIndent: function(newAmount) {
		this.leftChildIndent = newAmount;
		this.totalChildIndent = this.leftChildIndent + this.rightChildIndent;
		if(this.treeState != null) this.treeState.invalidateSizes();
		this.updateSize();
	}
	,getLeftChildIndent: function() {
		return this.leftChildIndent;
	}
	,setRightChildIndent: function(newAmount) {
		this.rightChildIndent = newAmount;
		this.totalChildIndent = this.leftChildIndent + this.rightChildIndent;
		if(this.treeState != null) this.treeState.invalidateSizes();
		this.updateSize();
	}
	,getRightChildIndent: function() {
		return this.rightChildIndent;
	}
	,updateDepthOffset: function() {
		if(this.tree.isRootVisible()) this.depthOffset = 1; else this.depthOffset = 0;
	}
	,updateSize: function() {
		this.validCachedViewSize = false;
		this.tree.treeDidChange();
	}
	,paintFocus: function(c,g,b) {
		var ib = this.treeState.getBounds(this.tree.getPathForRow(this.paintFocusedIndex),null);
		if(ib != null) {
			b = ib;
			b.setLocation(this.tree.getPixelLocationFromLogicLocation(b.getLocation()));
		}
		g.drawRectangle(new org_aswing_graphics_Pen(this.getDefaultFocusColorInner(),1),b.x + 0.5,b.y + 0.5,b.width - 1,b.height - 1);
		g.drawRectangle(new org_aswing_graphics_Pen(this.getDefaultFocusColorOutter(),1),b.x + 1.5,b.y + 1.5,b.width - 3,b.height - 3);
	}
	,createRendererPaneGraphics: function() {
		if(this.rendererShape == null) {
			this.rendererShape = new openfl_display_Shape();
			this.rendererPane.addChild(this.rendererShape);
		}
		this.rendererShape.get_graphics().clear();
		return new org_aswing_graphics_Graphics2D(this.rendererShape.get_graphics());
	}
	,paint: function(c,g,b) {
		org_aswing_plaf_BaseComponentUI.prototype.paint.call(this,c,g,b);
		var viewSize = this.getViewSize(this.tree);
		this.rendererPane.setComBoundsXYWH(0,b.y,viewSize.width,b.height);
		this.rendererPane.validate();
		this.checkCreateCells();
		var viewPosition = this.tree.getViewPosition();
		this.lastViewPosition.setLocation(viewPosition);
		var x = viewPosition.x;
		var y = viewPosition.y;
		var ih = this.tree.getRowHeight();
		var startIndex = y / ih | 0;
		var startY = startIndex * ih - y;
		var rowCount = this.getRowCount(this.tree);
		this.positRendererPaneX(x);
		var cy = startY;
		var showBounds = b.clone();
		showBounds.y = y;
		showBounds.x = x;
		var showRowCount = Std["int"](Math.min(this.cells.size(),rowCount));
		var initialPath = this.getClosestPathForLocation(this.tree,0,showBounds.y);
		var paintingEnumerator = this.treeState.getVisiblePathsFrom(initialPath,showRowCount);
		if(paintingEnumerator == null) paintingEnumerator = [];
		var row = this.treeState.getRowContainingYLocation(showBounds.y);
		var expanded;
		var leaf;
		var selected;
		var bounds = new org_aswing_geom_IntRectangle();
		var boundsBuffer = new org_aswing_geom_IntRectangle();
		var treeModel = this.tree.getModel();
		g = this.createRendererPaneGraphics();
		var n = this.cells.getSize();
		var paintingN = paintingEnumerator.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var cell = this.cells.get(i);
			var path = paintingEnumerator[i];
			var cellCom = cell.getCellComponent();
			if(i < paintingN) {
				leaf = treeModel.isLeaf(path.getLastPathComponent());
				if(leaf) expanded = false; else expanded = this.treeState.getExpandedState(path);
				selected = this.tree.getSelectionModel().isPathSelected(path);
				bounds = this.treeState.getBounds(path,bounds);
				if(bounds == null) bounds = new org_aswing_geom_IntRectangle();
				cell.setCellValue(path.getLastPathComponent());
				cellCom.setVisible(true);
				cell.setTreeCellStatus(this.tree,selected,expanded,leaf,row);
				boundsBuffer.setRectXYWH(bounds.x,cy,bounds.width,ih);
				cellCom.setBounds(boundsBuffer);
				cellCom.validate();
				cellCom.paintImmediately();
				boundsBuffer.x += b.x;
				boundsBuffer.y += b.y;
				this.paintExpandControl(g,boundsBuffer,path,row,expanded,leaf);
				cy += ih;
				row++;
			} else {
				cellCom.setVisible(false);
				cellCom.validate();
			}
		}
	}
	,paintExpandControl: function(g,bounds,path,row,expanded,leaf) {
		if(this.expandControl != null) this.expandControl.paintExpandControl(this.tree,g,bounds,this.totalChildIndent,path,row,expanded,leaf);
	}
	,checkCreateCells: function() {
		var ih = this.tree.getRowHeight();
		var needNum = Math.floor(this.tree.getExtentSize().height / ih) + 2;
		if(this.cells.getSize() == needNum) return;
		var i;
		var cell;
		if(this.cells.getSize() < needNum) {
			var addNum = needNum - this.cells.getSize();
			var _g = 0;
			while(_g < addNum) {
				var i1 = _g++;
				cell = this.tree.getCellFactory().createNewCell();
				this.rendererPane.append(cell.getCellComponent());
				this.cells.append(cell);
			}
		} else if(this.cells.getSize() > needNum) {
			var removeIndex = needNum;
			var removed = this.cells.removeRange(removeIndex,this.cells.getSize() - 1);
			var _g1 = 0;
			var _g2 = removed.length;
			while(_g1 < _g2) {
				var i2 = _g1++;
				cell = org_aswing_AsWingUtils["as"](removed[i2],org_aswing_tree_TreeCell);
				this.rendererPane.remove(cell.getCellComponent());
			}
		}
	}
	,updateLeadRow: function() {
		this.paintFocusedIndex = this.getRowForPath(this.tree,this.tree.getLeadSelectionPath());
	}
	,getRowX: function(row,depth) {
		return this.totalChildIndent * (depth + this.depthOffset);
	}
	,updateExpandedDescendants: function(path) {
		if(this.treeState != null) {
			this.treeState.setExpandedState(path,true);
			var descendants = this.tree.getExpandedDescendants(path);
			if(descendants != null) {
				var _g1 = 0;
				var _g = descendants.length;
				while(_g1 < _g) {
					var i = _g1++;
					this.treeState.setExpandedState(org_aswing_AsWingUtils["as"](descendants[i],org_aswing_tree_TreePath),true);
				}
			}
			this.updateLeadRow();
			this.updateSize();
		}
	}
	,countNodeDimensions: function(value,row,depth,expanded,size) {
		var prefSize;
		if(this.tree.getFixedCellWidth() >= 0) prefSize = new org_aswing_geom_IntDimension(this.tree.getFixedCellWidth(),this.tree.getRowHeight()); else {
			if(this.currentCellRenderer == null) this.currentCellRenderer = this.tree.getCellFactory().createNewCell();
			this.currentCellRenderer.setCellValue(value);
			this.currentCellRenderer.setTreeCellStatus(this.tree,false,expanded,this.tree.getModel().isLeaf(value),row);
			prefSize = this.currentCellRenderer.getCellComponent().getPreferredSize();
		}
		if(size != null) {
			size.x = this.getRowX(row,depth);
			size.width = prefSize.width;
			size.height = prefSize.height;
		} else size = new org_aswing_geom_IntRectangle(this.getRowX(row,depth),0,prefSize.width,prefSize.height);
		return size;
	}
	,getPathBounds: function(tree,path) {
		if(tree != null && this.treeState != null) {
			var i = tree.getInsets();
			var bounds = this.treeState.getBounds(path,null);
			if(bounds != null && i != null) {
				bounds.x += i.left;
				bounds.y += i.top;
			}
			return bounds;
		}
		return null;
	}
	,getPathForRow: function(tree,row) {
		if(this.treeState != null) return this.treeState.getPathForRow(row); else return null;
	}
	,getRowForPath: function(tree,path) {
		if(this.treeState != null) return this.treeState.getRowForPath(path); else return -1;
	}
	,getRowCount: function(tree) {
		if(this.treeState != null) return this.treeState.getRowCount(); else return 0;
	}
	,getClosestPathForLocation: function(tree,x,y) {
		if(tree != null && this.treeState != null) {
			var i = tree.getInsets();
			if(i == null) i = org_aswing_plaf_basic_BasicTreeUI.EMPTY_INSETS;
			return this.treeState.getPathClosestTo(x - i.left,y - i.top);
		}
		return null;
	}
	,getMousePointedPath: function() {
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		return path;
	}
	,isEditing: function(tree) {
		return this.editor.isCellEditing();
	}
	,stopEditing: function(tree) {
		if(this.editor != null && this.editor.isCellEditing()) return this.editor.stopCellEditing();
		return false;
	}
	,cancelEditing: function(tree) {
		if(this.editor != null && this.editor.isCellEditing()) this.editor.cancelCellEditing();
	}
	,startEditingAtPath: function(tree,path) {
		if(this.editor == null) return false;
		tree.scrollPathToVisible(path);
		if(path != null && tree.isPathVisible(path)) {
			var editor = tree.getCellEditor();
			if(editor.isCellEditing()) {
				if(!editor.stopCellEditing()) return false;
			}
			this.editingPath = path;
			var bounds = tree.getPathBounds(path);
			bounds.setLocation(tree.getPixelLocationFromLogicLocation(bounds.getLocation()));
			editor.startCellEditing(tree,path.getLastPathComponent(),bounds);
			return true;
		}
		return false;
	}
	,getEditingPath: function(tree) {
		return this.editingPath;
	}
	,updateCachedViewSize: function() {
		if(this.treeState != null) {
			this.viewSize.width = this.treeState.getPreferredWidth(null);
			this.viewSize.height = this.treeState.getPreferredHeight();
		}
		this.validCachedViewSize = true;
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,getPreferredSize: function(c) {
		var height = this.tree.getVisibleRowCount() * this.tree.getRowHeight();
		var width = this.getViewSize(this.tree).width;
		return c.getInsets().getOutsideSize(new org_aswing_geom_IntDimension(width,height));
	}
	,getViewSize: function(theTree) {
		if(this.validCachedViewSize != true) this.updateCachedViewSize();
		if(this.tree != null) return new org_aswing_geom_IntDimension(this.viewSize.width,this.viewSize.height); else return new org_aswing_geom_IntDimension(0,0);
	}
	,getMaximumSize: function(c) {
		return org_aswing_geom_IntDimension.createBigDimension();
	}
	,__treeExpanded: function(e) {
		if(e.getPath() != null) this.updateExpandedDescendants(e.getPath());
	}
	,__treeCollapsed: function(e) {
		if(e.getPath() != null) {
			if(e.getPath() != null && this.tree.isPathVisible(e.getPath())) {
				this.treeState.setExpandedState(e.getPath(),false);
				this.updateLeadRow();
				this.updateSize();
			}
		}
	}
	,treeNodesChanged: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesChanged(e);
			var pPath = e.getTreePath().getParentPath();
			if(pPath == null || this.treeState.isExpanded(pPath)) this.updateSize();
		}
	}
	,treeNodesInserted: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesInserted(e);
			this.updateLeadRow();
			var path = e.getTreePath();
			if(this.treeState.isExpanded(path)) this.updateSize(); else {
				var indices = e.getChildIndices();
				var childCount = this.tree.getModel().getChildCount(path.getLastPathComponent());
				if(indices != null && childCount - indices.length == 0) this.updateSize();
			}
		}
	}
	,treeNodesRemoved: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesRemoved(e);
			this.updateLeadRow();
			var path = e.getTreePath();
			if(this.treeState.isExpanded(path) || this.tree.getModel().getChildCount(path.getLastPathComponent()) == 0) this.updateSize();
		}
	}
	,treeStructureChanged: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeStructureChanged(e);
			this.updateLeadRow();
			var pPath = e.getTreePath();
			if(pPath != null) pPath = pPath.getParentPath();
			if(pPath == null || this.treeState.isExpanded(pPath)) this.updateSize();
		}
	}
	,toString: function() {
		return "BasicTreeUI[]";
	}
	,__class__: org_aswing_plaf_basic_BasicTreeUI
});
var org_aswing_plaf_basic_BasicViewportUI = function() {
	org_aswing_plaf_BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicViewportUI"] = org_aswing_plaf_basic_BasicViewportUI;
org_aswing_plaf_basic_BasicViewportUI.__name__ = ["org","aswing","plaf","basic","BasicViewportUI"];
org_aswing_plaf_basic_BasicViewportUI.__super__ = org_aswing_plaf_BaseComponentUI;
org_aswing_plaf_basic_BasicViewportUI.prototype = $extend(org_aswing_plaf_BaseComponentUI.prototype,{
	installUI: function(c) {
		this.viewport = js_Boot.__instanceof(c,org_aswing_JViewport)?c:null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.viewport = js_Boot.__instanceof(c,org_aswing_JViewport)?c:null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Viewport.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org_aswing_LookAndFeel.installColorsAndFont(this.viewport,pp);
		org_aswing_LookAndFeel.installBorderAndBFDecorators(this.viewport,pp);
		org_aswing_LookAndFeel.installBasicProperties(this.viewport,pp);
	}
	,uninstallDefaults: function() {
		org_aswing_LookAndFeel.uninstallBorderAndBFDecorators(this.viewport);
	}
	,installListeners: function() {
		this.viewport.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.viewport.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,uninstallListeners: function() {
		this.viewport.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.viewport.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,__onMouseWheel: function(e) {
		if(!(this.viewport.isEnabled() && this.viewport.isShowing())) return;
		var viewPos = this.viewport.getViewPosition();
		if(e.shiftKey) viewPos.x -= e.delta * this.viewport.getHorizontalUnitIncrement(); else viewPos.y -= e.delta * this.viewport.getVerticalUnitIncrement();
		this.viewport.setViewPosition(viewPos);
	}
	,__onKeyDown: function(e) {
		if(!(this.viewport.isEnabled() && this.viewport.isShowing())) return;
		var code = e.keyCode;
		var viewpos = this.viewport.getViewPosition();
		switch(code) {
		case 38:
			viewpos.move(0,-this.viewport.getVerticalUnitIncrement());
			break;
		case 40:
			viewpos.move(0,this.viewport.getVerticalUnitIncrement());
			break;
		case 37:
			viewpos.move(-this.viewport.getHorizontalUnitIncrement(),0);
			break;
		case 39:
			viewpos.move(this.viewport.getHorizontalUnitIncrement(),0);
			break;
		case 33:
			if(e.shiftKey) viewpos.move(-this.viewport.getHorizontalBlockIncrement(),0); else viewpos.move(0,-this.viewport.getVerticalBlockIncrement());
			break;
		case 34:
			if(e.shiftKey) viewpos.move(this.viewport.getHorizontalBlockIncrement(),0); else viewpos.move(0,this.viewport.getVerticalBlockIncrement());
			break;
		case 36:
			viewpos.setLocationXY(0,0);
			break;
		case 35:
			viewpos.setLocationXY(2147483647,2147483647);
			break;
		}
		this.viewport.setViewPosition(viewpos);
	}
	,__class__: org_aswing_plaf_basic_BasicViewportUI
});
var org_aswing_plaf_basic_DefaultMenuLayout = function(axis,gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	org_aswing_SoftBoxLayout.call(this,axis,gap,align);
};
$hxClasses["org.aswing.plaf.basic.DefaultMenuLayout"] = org_aswing_plaf_basic_DefaultMenuLayout;
org_aswing_plaf_basic_DefaultMenuLayout.__name__ = ["org","aswing","plaf","basic","DefaultMenuLayout"];
org_aswing_plaf_basic_DefaultMenuLayout.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_basic_DefaultMenuLayout.__super__ = org_aswing_SoftBoxLayout;
org_aswing_plaf_basic_DefaultMenuLayout.prototype = $extend(org_aswing_SoftBoxLayout.prototype,{
	__class__: org_aswing_plaf_basic_DefaultMenuLayout
});
var org_aswing_plaf_basic_icon_SliderThumbIcon = function() {
	this.thumb = new openfl_display_Sprite();
};
$hxClasses["org.aswing.plaf.basic.icon.SliderThumbIcon"] = org_aswing_plaf_basic_icon_SliderThumbIcon;
org_aswing_plaf_basic_icon_SliderThumbIcon.__name__ = ["org","aswing","plaf","basic","icon","SliderThumbIcon"];
org_aswing_plaf_basic_icon_SliderThumbIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_SliderThumbIcon.prototype = {
	getPropertyPrefix: function() {
		return "Slider.";
	}
	,initThumb: function(c) {
		var upState = new openfl_display_Shape();
		var g = new org_aswing_graphics_Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,true,false);
		var overState = new openfl_display_Shape();
		g = new org_aswing_graphics_Graphics2D(overState.get_graphics());
		this.paintThumb(g,c,true,true);
		this.enabledButton = new org_aswing_SimpleButton();
		this.enabledButton.upState = upState;
		this.enabledButton.overState = overState;
		this.enabledButton.downState = overState;
		this.enabledButton.hitTestState = upState;
		this.enabledButton.useHandCursor = false;
		this.enabledButton.show();
		this.thumb.addChild(this.enabledButton);
		upState = new openfl_display_Shape();
		g = new org_aswing_graphics_Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,false,false);
		this.disabledButton = new org_aswing_SimpleButton();
		this.disabledButton.upState = upState;
		this.disabledButton.overState = upState;
		this.disabledButton.downState = upState;
		this.disabledButton.hitTestState = upState;
		this.disabledButton.useHandCursor = false;
		this.disabledButton.show();
		this.thumb.addChild(this.disabledButton);
		this.disabledButton.set_visible(false);
	}
	,paintThumb: function(g,c,enabled,over) {
		var tune = c.getStyleTune().get_mide();
		var cl = c.getMideground();
		if(enabled != true) {
			cl = cl.offsetHLS(0,-0.1,-0.1);
			tune = tune.sharpen(0.2);
		} else if(over) cl = cl.offsetHLS(-0.20,0,0);
		var style = new org_aswing_StyleResult(cl,tune);
		var w = this.getIconWidth(null);
		var h = this.getIconHeight(null);
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(w,h,Math.PI / 2,0,0);
		var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[style.blight.getRGB(),style.bdark.getRGB()],[style.blight.getAlpha(),style.bdark.getAlpha()],[0,255],matrix);
		g.fillEllipse(brush,0,0,w,h);
		matrix.createGradientBox(w,h,-Math.PI / 2,0,0);
		brush.setColors([style.clight.getRGB(),style.cdark.getRGB()]);
		brush.setAlphas([style.clight.getAlpha(),style.cdark.getAlpha()]);
		g.fillEllipse(brush,1,1,w - 2,h - 2);
	}
	,updateIcon: function(c,g,x,y) {
		if(this.enabledButton == null) this.initThumb(c);
		this.thumb.set_x(x);
		this.thumb.set_y(y);
		this.disabledButton.set_visible(!c.isEnabled());
		this.enabledButton.set_visible(c.isEnabled());
	}
	,getIconHeight: function(c) {
		return 14;
	}
	,getIconWidth: function(c) {
		return 14;
	}
	,getDisplay: function(c) {
		return this.thumb;
	}
	,__class__: org_aswing_plaf_basic_icon_SliderThumbIcon
};
var org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon = function() {
	org_aswing_plaf_basic_icon_SliderThumbIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon"] = org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon;
org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon.__name__ = ["org","aswing","plaf","basic","adjuster","PopupSliderThumbIcon"];
org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon.__super__ = org_aswing_plaf_basic_icon_SliderThumbIcon;
org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon.prototype = $extend(org_aswing_plaf_basic_icon_SliderThumbIcon.prototype,{
	getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,getIconHeight: function(c) {
		return 12;
	}
	,getIconWidth: function(c) {
		return 12;
	}
	,__class__: org_aswing_plaf_basic_adjuster_PopupSliderThumbIcon
});
var org_aswing_plaf_basic_adjuster_PopupSliderUI = function() {
	org_aswing_plaf_basic_BasicSliderUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.adjuster.PopupSliderUI"] = org_aswing_plaf_basic_adjuster_PopupSliderUI;
org_aswing_plaf_basic_adjuster_PopupSliderUI.__name__ = ["org","aswing","plaf","basic","adjuster","PopupSliderUI"];
org_aswing_plaf_basic_adjuster_PopupSliderUI.__super__ = org_aswing_plaf_basic_BasicSliderUI;
org_aswing_plaf_basic_adjuster_PopupSliderUI.prototype = $extend(org_aswing_plaf_basic_BasicSliderUI.prototype,{
	getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,countTrackRect: function(b) {
		var thumbSize = this.getThumbSize();
		var h_margin;
		var v_margin;
		if(this.isVertical()) {
			v_margin = Math.ceil(thumbSize.height / 2.0);
			h_margin = (thumbSize.width - 4) / 2 | 0;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,thumbSize.width - h_margin * 2,b.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x,b.y + v_margin,thumbSize.width,b.height - v_margin * 2);
		} else {
			h_margin = Math.ceil(thumbSize.width / 2.0);
			v_margin = (thumbSize.height - 4) / 2 | 0;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,b.width - h_margin * 2,thumbSize.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x + h_margin,b.y,b.width - h_margin * 2,thumbSize.height);
		}
	}
	,paintTrack: function(g,drawRect) {
		this.trackCanvas.get_graphics().clear();
		if(!this.slider.getPaintTrack()) return;
		g = new org_aswing_graphics_Graphics2D(this.trackCanvas.get_graphics());
		var verticle = this.slider.getOrientation() == 1;
		var style = this.slider.getStyleTune();
		var b = drawRect.clone();
		var radius = 0;
		if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(this.slider.getBackground()),b.x,b.y,b.width,b.height,radius);
		var f = [];
		f.push(new openfl_filters_GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
		f.push(new openfl_filters_DropShadowFilter(1,45,16777215,0.3,1,1,1,1));
		this.trackCanvas.set_filters(f);
	}
	,getPrefferedLength: function() {
		return 100;
	}
	,__class__: org_aswing_plaf_basic_adjuster_PopupSliderUI
});
var org_aswing_plaf_basic_background_ButtonBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ButtonBackground"] = org_aswing_plaf_basic_background_ButtonBackground;
org_aswing_plaf_basic_background_ButtonBackground.__name__ = ["org","aswing","plaf","basic","background","ButtonBackground"];
org_aswing_plaf_basic_background_ButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(b == null) return;
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		bounds = bounds.clone();
		bounds.width -= 2;
		bounds.height -= 2;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		if(c.isOpaque()) {
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var shadowScale = 1;
			var bo = bounds.clone();
			var matrix = new openfl_geom_Matrix();
			var cDir = Math.PI / 2;
			var paintDefault = false;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.2,-0.06);
				adjuster = adjuster.sharpen(0.4);
			} else if(isPressing) cDir = -Math.PI / 2; else if(model.isRollOver()) cl = cl.offsetHLS(0,0.1,0); else if(js_Boot.__instanceof(b,org_aswing_JButton)) {
				var _b;
				_b = js_Boot.__instanceof(b,org_aswing_JButton)?b:null;
				if(_b.isDefaultButton()) paintDefault = true;
			}
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,cDir);
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 2,bo.x,bo.y);
			g.beginFill(new org_aswing_graphics_GradientBrush(openfl_display_GradientType.LINEAR,[style.bdark.getRGB(),style.bdark.getRGB()],[1,0.6],[0,255],matrix));
			org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round,1);
			g.endFill();
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 6,bo.x,bo.y);
			g.beginFill(new org_aswing_graphics_GradientBrush(openfl_display_GradientType.LINEAR,[style.blight.getRGB(),style.blight.getRGB()],[1,0.5],[0,255],matrix));
			bo.grow(-1,-1);
			org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round - 1,1);
			g.endFill();
			if(paintDefault) {
				cl = cl.offsetHLS(0,-0.05,0);
				var db = bounds.clone();
				db.grow(-2,-2);
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,db,new org_aswing_StyleResult(cl,adjuster));
			}
			var shape_f = [];
			shape_f.push(new openfl_filters_DropShadowFilter(1,45,0,style.shadow * shadowScale,2,2,1,1));
			this.shape.set_filters(shape_f);
		} else this.shape.set_filters([]);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_background_ButtonBackground
};
var org_aswing_plaf_basic_background_FrameBackground = function() {
	this.shape = new openfl_display_Sprite();
	this.bar = new openfl_display_Shape();
	this.shape.mouseChildren = false;
	this.shape.mouseEnabled = false;
	this.shape.addChild(this.bar);
};
$hxClasses["org.aswing.plaf.basic.background.FrameBackground"] = org_aswing_plaf_basic_background_FrameBackground;
org_aswing_plaf_basic_background_FrameBackground.__name__ = ["org","aswing","plaf","basic","background","FrameBackground"];
org_aswing_plaf_basic_background_FrameBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_FrameBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		this.bar.get_graphics().clear();
		if(c.isOpaque()) {
			var shadowW = 6;
			var shadowH = 6;
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune().get_mide();
			var shadowScale = 1;
			b = new org_aswing_geom_IntRectangle(1,2,Std["int"](c.getWidth() - shadowW - 1),Std["int"](c.getHeight() - shadowH - 2));
			g = new org_aswing_graphics_Graphics2D(this.bar.get_graphics());
			var barHeight = 24;
			if(js_Boot.__instanceof(c,org_aswing_JFrame)) {
				var cf;
				cf = js_Boot.__instanceof(c,org_aswing_JFrame)?c:null;
				barHeight = cf.getTitleBar().getSelf().getHeight();
			}
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRectBottomRightAngle(g,new org_aswing_geom_IntRectangle(b.x,b.y,b.width,Std["int"](Math.min(barHeight - 2,b.height))),style,Math.PI / 2);
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var ui = org_aswing_AsWingUtils["as"](c.getUI(),org_aswing_plaf_FrameUI);
			if(ui != null) {
				if(!ui.isPaintActivedFrame()) shadowScale = 0.5;
			}
			cl = c.getBackground();
			adjuster = c.getStyleTune();
			style = new org_aswing_StyleResult(cl,adjuster);
			var ratioScale = Math.min(1,barHeight * 2.2 / b.height);
			var ratios = [255 * (1 - ratioScale),255];
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2,false,null,ratios);
			var shape_f = [];
			shape_f.push(new openfl_filters_DropShadowFilter(2,45,0,style.shadow * shadowScale,shadowW,shadowH,1,1));
			this.shape.set_filters(shape_f);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org_aswing_plaf_basic_background_FrameBackground
};
var org_aswing_plaf_basic_background_TextComponentBackBround = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TextComponentBackBround"] = org_aswing_plaf_basic_background_TextComponentBackBround;
org_aswing_plaf_basic_background_TextComponentBackBround.__name__ = ["org","aswing","plaf","basic","background","TextComponentBackBround"];
org_aswing_plaf_basic_background_TextComponentBackBround.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_TextComponentBackBround.prototype = {
	updateDecorator: function(c,g,r) {
		this.shape.set_visible(c.isOpaque());
		if(c.isOpaque()) {
			this.shape.get_graphics().clear();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var cl = c.getBackground();
			var tune = c.getStyleTune();
			var result = new org_aswing_StyleResult(cl,tune);
			var ml = result.bdark;
			var ed;
			ed = js_Boot.__instanceof(c,org_aswing_EditableComponent)?c:null;
			var editable = true;
			if(ed != null) editable = ed.isEditable();
			if(!c.isEnabled() || !editable) {
				ml = ml.changeAlpha(ml.getAlpha() * this.getChangeSharpen(c.isEnabled(),editable));
				cl = cl.changeAlpha(cl.getAlpha() * this.getChangeAlpha(c.isEnabled(),editable));
			}
			var tf;
			tf = js_Boot.__instanceof(c,org_aswing_JTextField)?c:null;
			r = new org_aswing_geom_IntRectangle(0,0,Std["int"](c.getWidth() - 1),Std["int"](c.getHeight() - 1));
			var round = tune.round;
			if(round >= 1) {
				g.fillRoundRect(new org_aswing_graphics_SolidBrush(cl),r.x,r.y,r.width,r.height,round);
				g.fillRoundRectRingWithThickness(new org_aswing_graphics_SolidBrush(ml),r.x,r.y,r.width,r.height,round,1,round - 1);
			} else {
				g.fillRectangle(new org_aswing_graphics_SolidBrush(cl),r.x,r.y,r.width,r.height);
				g.fillRectangleRingWithThickness(new org_aswing_graphics_SolidBrush(ml),r.x,r.y,r.width,r.height,1);
			}
			var f = [];
			f.push(new openfl_filters_DropShadowFilter(1,45,cl.getRGB(),tune.shadowAlpha * cl.getAlpha(),0,0,1,1));
			this.shape.set_filters(f);
		}
	}
	,getChangeSharpen: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 1; else return 1;
	}
	,getChangeAlpha: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 0.3; else return 1;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_background_TextComponentBackBround
};
var org_aswing_plaf_basic_background_InputBackground = function() {
	org_aswing_plaf_basic_background_TextComponentBackBround.call(this);
};
$hxClasses["org.aswing.plaf.basic.background.InputBackground"] = org_aswing_plaf_basic_background_InputBackground;
org_aswing_plaf_basic_background_InputBackground.__name__ = ["org","aswing","plaf","basic","background","InputBackground"];
org_aswing_plaf_basic_background_InputBackground.__super__ = org_aswing_plaf_basic_background_TextComponentBackBround;
org_aswing_plaf_basic_background_InputBackground.prototype = $extend(org_aswing_plaf_basic_background_TextComponentBackBround.prototype,{
	getChangeSharpen: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 1; else return 1;
	}
	,getChangeAlpha: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 0.5; else return 1;
	}
	,__class__: org_aswing_plaf_basic_background_InputBackground
});
var org_aswing_plaf_basic_background_ListBackground = function() {
};
$hxClasses["org.aswing.plaf.basic.background.ListBackground"] = org_aswing_plaf_basic_background_ListBackground;
org_aswing_plaf_basic_background_ListBackground.__name__ = ["org","aswing","plaf","basic","background","ListBackground"];
org_aswing_plaf_basic_background_ListBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ListBackground.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,updateDecorator: function(c,g,b) {
		if(c.isOpaque()) {
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune();
			if(!c.isEnabled()) {
				adjuster = adjuster.sharpen(0.5);
				cl = cl.changeAlpha(0.6);
			}
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2);
		}
	}
	,__class__: org_aswing_plaf_basic_background_ListBackground
};
var org_aswing_plaf_basic_background_PanelBackground = function() {
};
$hxClasses["org.aswing.plaf.basic.background.PanelBackground"] = org_aswing_plaf_basic_background_PanelBackground;
org_aswing_plaf_basic_background_PanelBackground.__name__ = ["org","aswing","plaf","basic","background","PanelBackground"];
org_aswing_plaf_basic_background_PanelBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_PanelBackground.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,updateDecorator: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org_aswing_graphics_SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,__class__: org_aswing_plaf_basic_background_PanelBackground
};
var org_aswing_plaf_basic_background_ProgressBarBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ProgressBarBackground"] = org_aswing_plaf_basic_background_ProgressBarBackground;
org_aswing_plaf_basic_background_ProgressBarBackground.__name__ = ["org","aswing","plaf","basic","background","ProgressBarBackground"];
org_aswing_plaf_basic_background_ProgressBarBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ProgressBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_Orientable) && c.isOpaque()) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_Orientable)?c:null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			b = b.clone();
			var radius = 0;
			if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
			if(radius > style.round) radius = style.round;
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.getBackground().changeAlpha(1)),b.x,b.y,b.width,b.height,radius);
			var f = [];
			f.push(new openfl_filters_GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
			this.shape.set_filters(f);
			this.shape.set_alpha(c.getBackground().getAlpha());
		}
	}
	,__class__: org_aswing_plaf_basic_background_ProgressBarBackground
};
var org_aswing_plaf_basic_background_ProgressBarIcon = function() {
	this.shape = new openfl_display_Shape();
	this.indeterminatePercent = 0;
};
$hxClasses["org.aswing.plaf.basic.background.ProgressBarIcon"] = org_aswing_plaf_basic_background_ProgressBarIcon;
org_aswing_plaf_basic_background_ProgressBarIcon.__name__ = ["org","aswing","plaf","basic","background","ProgressBarIcon"];
org_aswing_plaf_basic_background_ProgressBarIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ProgressBarIcon.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_JProgressBar)) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_JProgressBar)?c:null;
			b = b.clone();
			var percent;
			if(bar.isIndeterminate()) {
				percent = this.indeterminatePercent;
				this.indeterminatePercent += 0.1;
				if(this.indeterminatePercent > 1) this.indeterminatePercent = 0;
			} else percent = bar.getPercentComplete();
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune().get_mide();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var radius = 0;
			var direction;
			if(verticle) {
				radius = Math.floor(b.width / 2);
				direction = 0;
				b.height = b.height * percent | 0;
			} else {
				radius = Math.floor(b.height / 2);
				direction = Math.PI / 2;
				b.width = b.width * percent | 0;
			}
			if(radius > style.round) radius = style.round;
			if(b.width > 1) {
				var result = new org_aswing_StyleResult(c.getMideground(),style);
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,result,direction);
				org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,result,direction);
				if(b.width - radius * 2 > 0) g.fillRectangle(new org_aswing_graphics_SolidBrush(c.getMideground().changeAlpha(0.3)),radius,b.height - 2.5,b.width - radius * 2,1.5);
			}
		}
	}
	,__class__: org_aswing_plaf_basic_background_ProgressBarIcon
};
var org_aswing_plaf_basic_background_ScrollBarBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ScrollBarBackground"] = org_aswing_plaf_basic_background_ScrollBarBackground;
org_aswing_plaf_basic_background_ScrollBarBackground.__name__ = ["org","aswing","plaf","basic","background","ScrollBarBackground"];
org_aswing_plaf_basic_background_ScrollBarBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ScrollBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js_Boot.__instanceof(c,org_aswing_Orientable) && c.isOpaque()) {
			var bar;
			bar = js_Boot.__instanceof(c,org_aswing_Orientable)?c:null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			b = b.clone();
			g.fillRoundRect(new org_aswing_graphics_SolidBrush(c.getBackground().changeAlpha(1)),b.x,b.y,b.width,b.height,style.round);
			var f = [];
			f.push(new openfl_filters_GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
			this.shape.set_filters(f);
			this.shape.set_alpha(c.getBackground().getAlpha());
		}
	}
	,__class__: org_aswing_plaf_basic_background_ScrollBarBackground
};
var org_aswing_plaf_basic_background_TableHeaderBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TableHeaderBackground"] = org_aswing_plaf_basic_background_TableHeaderBackground;
org_aswing_plaf_basic_background_TableHeaderBackground.__name__ = ["org","aswing","plaf","basic","background","TableHeaderBackground"];
org_aswing_plaf_basic_background_TableHeaderBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_TableHeaderBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var cl = c.getBackground();
			var turn = c.getStyleTune();
			var style = new org_aswing_StyleResult(cl,turn);
			var matrixB = b.clone();
			var graphicB = b.clone();
			graphicB.height += style.round * 2 | 0;
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,graphicB,style,Math.PI / 2,false,matrixB);
			var matrix = new openfl_geom_Matrix();
			matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
			g.fillRoundRect(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[16777215,16777215],[0.2,0.04],[0,255],matrix),b.x,b.y,b.width,b.height / 2 - 1,style.round,style.round,0,0);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org_aswing_plaf_basic_background_TableHeaderBackground
};
var org_aswing_plaf_basic_background_ToggleButtonBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ToggleButtonBackground"] = org_aswing_plaf_basic_background_ToggleButtonBackground;
org_aswing_plaf_basic_background_ToggleButtonBackground.__name__ = ["org","aswing","plaf","basic","background","ToggleButtonBackground"];
org_aswing_plaf_basic_background_ToggleButtonBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ToggleButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(b == null) return;
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		bounds = bounds.clone();
		bounds.width -= 2;
		bounds.height -= 2;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		if(c.isOpaque()) {
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var shadowScale = 1;
			var bo = bounds.clone();
			var matrix = new openfl_geom_Matrix();
			var cDir = Math.PI / 2;
			var paintDefault = false;
			if(isPressing) {
				if(!b.isEnabled()) {
					cl = cl.offsetHLS(0,0.2,-0.06);
					adjuster = adjuster.sharpen(0.4);
					shadowScale = 2;
				} else if(model.isRollOver()) cl = cl.offsetHLS(0,0.025,0);
				bounds.width += b.getShiftOffset();
				bounds.height += b.getShiftOffset();
				shadowScale *= 2.5;
				cDir = -Math.PI / 2;
			} else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.2,-0.06);
				adjuster = adjuster.sharpen(0.4);
			} else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0); else {
			}
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,cDir);
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 2,bo.x,bo.y);
			g.beginFill(new org_aswing_graphics_GradientBrush(openfl_display_GradientType.LINEAR,[style.bdark.getRGB(),style.bdark.getRGB()],[1,0.6],[0,255],matrix));
			org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round,1);
			g.endFill();
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 6,bo.x,bo.y);
			g.beginFill(new org_aswing_graphics_GradientBrush(openfl_display_GradientType.LINEAR,[style.blight.getRGB(),style.blight.getRGB()],[1,0.5],[0,255],matrix));
			bo.grow(-1,-1);
			org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round - 1,1);
			g.endFill();
			var f = [];
			f.push(new openfl_filters_DropShadowFilter(isPressing?2:1,45,0,style.shadow * shadowScale,2,2,1,1,isPressing));
			this.shape.set_filters(f);
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_background_ToggleButtonBackground
};
var org_aswing_plaf_basic_background_ToolTipBackground = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ToolTipBackground"] = org_aswing_plaf_basic_background_ToolTipBackground;
org_aswing_plaf_basic_background_ToolTipBackground.__name__ = ["org","aswing","plaf","basic","background","ToolTipBackground"];
org_aswing_plaf_basic_background_ToolTipBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_background_ToolTipBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.set_visible(c.isOpaque());
		if(c.isOpaque()) {
			this.shape.get_graphics().clear();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var cc = c.getBackground();
			var bc = c.getMideground();
			var tune = c.getStyleTune();
			g.beginFill(new org_aswing_graphics_SolidBrush(bc));
			var r = tune.round;
			b = new org_aswing_geom_IntRectangle(0,0,c.getWidth(),c.getHeight());
			if(r < 1) g.rectangle(b.x,b.y,b.width,b.height); else org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRect(g,b.x,b.y,b.width,b.height,r);
			g.endFill();
			g.beginFill(new org_aswing_graphics_SolidBrush(cc));
			r -= 0.5;
			b.grow(-1,-1);
			if(r < 1) g.rectangle(b.x,b.y,b.width,b.height); else org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRect(g,b.x,b.y,b.width,b.height,r);
			g.endFill();
		}
	}
	,__class__: org_aswing_plaf_basic_background_ToolTipBackground
};
var org_aswing_plaf_basic_border_ColorChooserBorder = function() {
	org_aswing_border_EmptyBorder.call(this,null,new org_aswing_Insets(6,6,6,6));
};
$hxClasses["org.aswing.plaf.basic.border.ColorChooserBorder"] = org_aswing_plaf_basic_border_ColorChooserBorder;
org_aswing_plaf_basic_border_ColorChooserBorder.__name__ = ["org","aswing","plaf","basic","border","ColorChooserBorder"];
org_aswing_plaf_basic_border_ColorChooserBorder.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_basic_border_ColorChooserBorder.__super__ = org_aswing_border_EmptyBorder;
org_aswing_plaf_basic_border_ColorChooserBorder.prototype = $extend(org_aswing_border_EmptyBorder.prototype,{
	__class__: org_aswing_plaf_basic_border_ColorChooserBorder
});
var org_aswing_plaf_basic_border_ComboBoxPopupBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.border.ComboBoxPopupBorder"] = org_aswing_plaf_basic_border_ComboBoxPopupBorder;
org_aswing_plaf_basic_border_ComboBoxPopupBorder.__name__ = ["org","aswing","plaf","basic","border","ComboBoxPopupBorder"];
org_aswing_plaf_basic_border_ComboBoxPopupBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
org_aswing_plaf_basic_border_ComboBoxPopupBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var cl = c.getBackground();
		cl = cl.changeAlpha(1);
		var tune = c.getStyleTune();
		var result = new org_aswing_StyleResult(cl,tune);
		var ml = result.bdark;
		var round = result.round;
		var clTop = cl.changeLuminance(cl.getLuminance() - 0.07);
		var light = cl.changeLuminance(cl.getLuminance() + 0.01);
		b = b.clone();
		b.width -= 4;
		b.height -= 4;
		var brush = new org_aswing_graphics_SolidBrush(cl);
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(ml),b.x,b.y,b.width,b.height,round);
		b.grow(-1,-1);
		round--;
		if(round < 0) round = 0;
		g.fillRoundRect(new org_aswing_graphics_SolidBrush(light),b.x,b.y,b.width,b.height,round);
		b.grow(-1,-1);
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
		if(round < 0) round = 0;
		g.fillRoundRect(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[clTop.getRGB(),cl.getRGB()],[1,1],[0,100],matrix),b.x,b.y,b.width,b.height,round);
		var f = [];
		f.push(new openfl_filters_DropShadowFilter(1,45,0,0.3,4,4));
		this.shape.set_filters(f);
	}
	,getBorderInsets: function(c,b) {
		return new org_aswing_Insets(2,2,6,6);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_border_ComboBoxPopupBorder
};
var org_aswing_plaf_basic_border_EmptyBorderResource = function(interior,margin) {
	org_aswing_border_EmptyBorder.call(this,interior,margin);
};
$hxClasses["org.aswing.plaf.basic.border.EmptyBorderResource"] = org_aswing_plaf_basic_border_EmptyBorderResource;
org_aswing_plaf_basic_border_EmptyBorderResource.__name__ = ["org","aswing","plaf","basic","border","EmptyBorderResource"];
org_aswing_plaf_basic_border_EmptyBorderResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_basic_border_EmptyBorderResource.__super__ = org_aswing_border_EmptyBorder;
org_aswing_plaf_basic_border_EmptyBorderResource.prototype = $extend(org_aswing_border_EmptyBorder.prototype,{
	__class__: org_aswing_plaf_basic_border_EmptyBorderResource
});
var org_aswing_plaf_basic_border_PopupMenuBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.border.PopupMenuBorder"] = org_aswing_plaf_basic_border_PopupMenuBorder;
org_aswing_plaf_basic_border_PopupMenuBorder.__name__ = ["org","aswing","plaf","basic","border","PopupMenuBorder"];
org_aswing_plaf_basic_border_PopupMenuBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
org_aswing_plaf_basic_border_PopupMenuBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			b = b.clone();
			b.height -= 4;
			b.width -= 4;
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var tune = c.getStyleTune();
			var cl = c.getBackground();
			var style = new org_aswing_StyleResult(cl.changeAlpha(1),tune);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,Math.PI / 2);
			org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,Math.PI / 2);
			var f = [];
			f.push(new openfl_filters_DropShadowFilter(1,45,0,style.shadow,4,4,1,1));
			this.shape.set_filters(f);
			this.shape.set_alpha(cl.getAlpha());
		}
		this.shape.set_visible(c.isOpaque());
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(2,2,6,6);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_border_PopupMenuBorder
};
var org_aswing_plaf_basic_border_TableHeaderCellBorder = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.border.TableHeaderCellBorder"] = org_aswing_plaf_basic_border_TableHeaderCellBorder;
org_aswing_plaf_basic_border_TableHeaderCellBorder.__name__ = ["org","aswing","plaf","basic","border","TableHeaderCellBorder"];
org_aswing_plaf_basic_border_TableHeaderCellBorder.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Border];
org_aswing_plaf_basic_border_TableHeaderCellBorder.prototype = {
	updateBorder: function(c,g,b) {
		b = b.clone();
		b.height -= 4;
		b.y += 2;
		if(js_Boot.__instanceof(c,org_aswing_AbstractButton)) haxe_Log.trace("header AbstractButton",{ fileName : "TableHeaderCellBorder.hx", lineNumber : 40, className : "org.aswing.plaf.basic.border.TableHeaderCellBorder", methodName : "updateBorder"});
		var headerCell;
		headerCell = js_Boot.__instanceof(c,org_aswing_table_DefaultTextHeaderCell)?c:null;
		if(null == headerCell) return;
		if(b.height > 0 && headerCell.columnIndex < headerCell.table.getColumnCount() - 1) {
			var cl = c.getBackground();
			var dark = cl.offsetHLS(0,-0.2,0);
			var light = cl.offsetHLS(0,0.06,0);
			this.shape.get_graphics().clear();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var height = b.height;
			var matrix = new openfl_geom_Matrix();
			matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB(),dark.getRGB()],[0,1,0],[0,122,255],matrix),b.x + b.width - 2,b.y,1,b.height);
			g.fillRectangle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[light.getRGB(),light.getRGB(),light.getRGB()],[0,1,0],[0,122,255],matrix),b.x + b.width - 1,b.y,1,b.height);
		}
	}
	,getBorderInsets: function(com,bounds) {
		return new org_aswing_Insets(0,0,1,1);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_border_TableHeaderCellBorder
};
var org_aswing_plaf_basic_cursor_HV_$ResizeCursor = function() {
	openfl_display_Shape.call(this);
	this.resizeArrowColor = org_aswing_UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org_aswing_UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org_aswing_UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ y : -r * 2, x : 0},{ y : -r, x : -r},{ y : -r, x : -w},{ y : -w, x : -w},{ y : -w, x : -r},{ y : -r, x : -r},{ y : 0, x : -2 * r},{ y : r, x : -r},{ y : w, x : -r},{ y : w, x : -w},{ y : r, x : -w},{ y : r, x : -r},{ y : r * 2, x : 0},{ y : r, x : r},{ y : r, x : w},{ y : w, x : w},{ y : w, x : r},{ y : r, x : r},{ y : 0, x : 2 * r},{ y : -r, x : r},{ y : -w, x : r},{ y : -w, x : w},{ y : -r, x : w},{ y : -r, x : r}];
	var gdi = new org_aswing_graphics_Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org_aswing_graphics_SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.HV_ResizeCursor"] = org_aswing_plaf_basic_cursor_HV_$ResizeCursor;
org_aswing_plaf_basic_cursor_HV_$ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","HV_ResizeCursor"];
org_aswing_plaf_basic_cursor_HV_$ResizeCursor.__super__ = openfl_display_Shape;
org_aswing_plaf_basic_cursor_HV_$ResizeCursor.prototype = $extend(openfl_display_Shape.prototype,{
	__class__: org_aswing_plaf_basic_cursor_HV_$ResizeCursor
});
var org_aswing_plaf_basic_cursor_H_$ResizeCursor = function() {
	openfl_display_Shape.call(this);
	this.resizeArrowColor = org_aswing_UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org_aswing_UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org_aswing_UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ x : -r * 2, y : 0},{ x : -r, y : -r},{ x : -r, y : -w},{ x : r, y : -w},{ x : r, y : -r},{ x : r * 2, y : 0},{ x : r, y : r},{ x : r, y : w},{ x : -r, y : w},{ x : -r, y : r}];
	var gdi = new org_aswing_graphics_Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org_aswing_graphics_SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.H_ResizeCursor"] = org_aswing_plaf_basic_cursor_H_$ResizeCursor;
org_aswing_plaf_basic_cursor_H_$ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","H_ResizeCursor"];
org_aswing_plaf_basic_cursor_H_$ResizeCursor.__super__ = openfl_display_Shape;
org_aswing_plaf_basic_cursor_H_$ResizeCursor.prototype = $extend(openfl_display_Shape.prototype,{
	__class__: org_aswing_plaf_basic_cursor_H_$ResizeCursor
});
var org_aswing_plaf_basic_cursor_V_$ResizeCursor = function() {
	openfl_display_Shape.call(this);
	this.resizeArrowColor = org_aswing_UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org_aswing_UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org_aswing_UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ y : -r * 2, x : 0},{ y : -r, x : -r},{ y : -r, x : -w},{ y : r, x : -w},{ y : r, x : -r},{ y : r * 2, x : 0},{ y : r, x : r},{ y : r, x : w},{ y : -r, x : w},{ y : -r, x : r}];
	var gdi = new org_aswing_graphics_Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org_aswing_graphics_SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org_aswing_graphics_Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.V_ResizeCursor"] = org_aswing_plaf_basic_cursor_V_$ResizeCursor;
org_aswing_plaf_basic_cursor_V_$ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","V_ResizeCursor"];
org_aswing_plaf_basic_cursor_V_$ResizeCursor.__super__ = openfl_display_Shape;
org_aswing_plaf_basic_cursor_V_$ResizeCursor.prototype = $extend(openfl_display_Shape.prototype,{
	__class__: org_aswing_plaf_basic_cursor_V_$ResizeCursor
});
var org_aswing_plaf_basic_icon_ArrowIcon = function(arrow,size) {
	this.arrow = arrow;
	this.width = size;
	this.height = size;
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.ArrowIcon"] = org_aswing_plaf_basic_icon_ArrowIcon;
org_aswing_plaf_basic_icon_ArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","ArrowIcon"];
org_aswing_plaf_basic_icon_ArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_ArrowIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var center = new openfl_geom_Point(c.getWidth() / 2,c.getHeight() / 2);
		var w = this.width - 6;
		var ps1 = [];
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		if(js_Boot.__instanceof(c,org_aswing_AbstractButton)) {
			var b;
			b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var hue = cl.getHue();
			var offHue = hue + 0.21;
			if(offHue > 1) offHue = offHue - 1;
			if(offHue < 0) offHue = offHue + 1;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,-0.06,-0.03);
				adjuster = adjuster.sharpen(0.4);
				cl = cl.offsetHLS(0,-0.10,-0.10);
			} else if(isPressing) {
				adjuster = adjuster.sharpen(0.8);
				cl = cl.offsetHLS(offHue - hue,-0.06,0);
			} else if(model.isRollOver()) cl = cl.offsetHLS(offHue - hue,0.1,0.3);
		}
		style = new org_aswing_StyleResult(cl,adjuster);
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(w + 1,w + 1,0.333333333333333315 * Math.PI,x + w / 8 - 0.5,y + w / 8 - 0.5);
		var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.RADIAL,[style.clight.getRGB(),style.cdark.getRGB()],[style.clight.getAlpha(),style.cdark.getAlpha()],[0,255],matrix);
		g.fillPolygon(brush,ps1);
	}
	,nextPoint: function(p,dir,dis) {
		return new openfl_geom_Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,getIconWidth: function(c) {
		return this.height;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_ArrowIcon
};
var org_aswing_plaf_basic_icon_CheckBoxIcon = function() {
	this.sprite = new openfl_display_Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl_display_Sprite();
	this.dot = new openfl_display_Sprite();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["org.aswing.plaf.basic.icon.CheckBoxIcon"] = org_aswing_plaf_basic_icon_CheckBoxIcon;
org_aswing_plaf_basic_icon_CheckBoxIcon.__name__ = ["org","aswing","plaf","basic","icon","CheckBoxIcon"];
org_aswing_plaf_basic_icon_CheckBoxIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_CheckBoxIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		var model = b.getModel();
		var drawDot = model.isSelected();
		this.box.get_graphics().clear();
		var g1 = new org_aswing_graphics_Graphics2D(this.box.get_graphics());
		var w = this.getIconWidth(c) - 5;
		var h = this.getIconHeight(c) - 5;
		x += 1;
		y += 3;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		var innerDis = 2;
		var alpha = 1;
		if(isPressing) {
			innerDis = 3;
			adjuster = adjuster.clone();
			adjuster.bGradient *= 0.8;
			adjuster.cGradient *= 0.8;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.6);
				alpha = 0.5;
			} else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.06);
				adjuster = adjuster.sharpen(0.8);
				innerDis = 4;
			} else if(model.isArmed()) adjuster = adjuster.sharpen(0.8);
		} else if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.6);
			alpha = 0.5;
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0.06);
			innerDis = 4;
		} else {
		}
		style = new org_aswing_StyleResult(cl,adjuster);
		g1.beginFill(new org_aswing_graphics_SolidBrush(style.bdark));
		org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRect(g1,x,y,w,h,style.round);
		g1.endFill();
		g1.beginFill(new org_aswing_graphics_SolidBrush(style.clight));
		var r2 = style.round - 1;
		r2 = Math.max(0,r2);
		org_aswing_plaf_basic_BasicGraphicsUtils.drawRoundRect(g1,x + 1,y + 1,w - 2,h - 2,r2);
		g1.endFill();
		this.dot.get_graphics().clear();
		if(drawDot) {
			g1 = new org_aswing_graphics_Graphics2D(this.dot.get_graphics());
			cl = c.getMideground();
			adjuster = c.getStyleTune().get_mide();
			if(model.isArmed()) cl = cl.offsetHLS(0,-0.04,0.03); else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.00);
				adjuster = adjuster.sharpen(0.8);
			} else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.0,-0.3);
				adjuster = adjuster.sharpen(0.6);
			} else {
			}
			var mcls = new org_aswing_StyleResult(cl,adjuster);
			var matrix = new openfl_geom_Matrix();
			matrix.createGradientBox(w / 2 - 3,h * 3 / 4 - 5,Math.PI * 3 / 4,x + 3,y + 5);
			g1.beginDraw(new org_aswing_graphics_Pen(cl,1.5));
			g1.moveTo(x + 4,y + 5);
			g1.lineTo(x + w / 2 + 1,y + h * 3 / 4 - 1);
			matrix.createGradientBox(w / 2,h * 3 / 4 - 2,Math.PI / 4,x + w / 2,y + 2);
			g1.lineTo(x + w + 2.5,y);
			g1.endDraw();
			var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,[mcls.clight.getRGB(),mcls.cdark.getRGB()],[mcls.clight.getAlpha(),mcls.cdark.getAlpha()],[0,255],matrix);
			var f = [];
			f.push(new openfl_filters_DropShadowFilter(0,45,mcls.bdark.getRGB(),mcls.shadow,2,2,4,1,false));
			this.dot.set_filters(f);
		}
		this.dot.set_visible(drawDot);
		this.box.set_alpha(alpha);
		var box_f = [];
		box_f.push(new openfl_filters_DropShadowFilter(innerDis,45,0,style.shadow * shadowScale,5,5,1,1,true));
		this.box.set_filters(box_f);
	}
	,getIconHeight: function(c) {
		return 17;
	}
	,getIconWidth: function(c) {
		return 17;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: org_aswing_plaf_basic_icon_CheckBoxIcon
};
var org_aswing_plaf_basic_icon_MenuCheckIcon = function() {
};
$hxClasses["org.aswing.plaf.basic.icon.MenuCheckIcon"] = org_aswing_plaf_basic_icon_MenuCheckIcon;
org_aswing_plaf_basic_icon_MenuCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuCheckIcon"];
org_aswing_plaf_basic_icon_MenuCheckIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_MenuCheckIcon.prototype = {
	updateIcon: function(c,g,x,y) {
	}
	,getIconHeight: function(c) {
		return 8;
	}
	,getIconWidth: function(c) {
		return 8;
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: org_aswing_plaf_basic_icon_MenuCheckIcon
};
var org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon = function() {
	this.shape = new openfl_display_Shape();
	org_aswing_plaf_basic_icon_MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon"] = org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon;
org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","CheckBoxMenuItemCheckIcon"];
org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon.__super__ = org_aswing_plaf_basic_icon_MenuCheckIcon;
org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon.prototype = $extend(org_aswing_plaf_basic_icon_MenuCheckIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var menu;
		menu = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(menu.isSelected()) {
			g.beginDraw(new org_aswing_graphics_Pen(c.getMideground(),2));
			g.moveTo(x,y + 4);
			g.lineTo(x + 3,y + 7);
			g.lineTo(x + 8,y + 2);
			g.endDraw();
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_CheckBoxMenuItemCheckIcon
});
var org_aswing_plaf_basic_icon_FrameIcon = function(width) {
	if(width == null) width = 16;
	this.width = width;
	this.height = width;
	this.sprite = new openfl_display_Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl_display_Shape();
	this.dot = new openfl_display_Shape();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameIcon"] = org_aswing_plaf_basic_icon_FrameIcon;
org_aswing_plaf_basic_icon_FrameIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameIcon"];
org_aswing_plaf_basic_icon_FrameIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_FrameIcon.prototype = {
	getColor: function(c) {
		return c.getMideground();
	}
	,updateIcon: function(c,g,x,y) {
		this.box.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.box.get_graphics());
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(b == null) return;
		var bounds = new org_aswing_geom_IntRectangle(x,y,this.width,this.height);
		bounds.width -= 1;
		bounds.height -= 1;
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		var model = b.getModel();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.4);
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		} else if(isPressing) {
			adjuster = adjuster.sharpen(0.8);
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,-Math.PI / 2);
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0);
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		} else {
			style = new org_aswing_StyleResult(cl,adjuster);
			org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		}
		org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,bounds,1,style);
		var box_f = [];
		box_f.push(new openfl_filters_DropShadowFilter(1,45,16777215,style.shadow * shadowScale,1,1,1,1));
		this.box.set_filters(box_f);
		this.dot.get_graphics().clear();
		this.updateIconImp(style,new org_aswing_graphics_Graphics2D(this.dot.get_graphics()),x,y);
	}
	,updateIconImp: function(style,g,x,y) {
	}
	,getSize: function() {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,getIconWidth: function(c) {
		return this.height;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: org_aswing_plaf_basic_icon_FrameIcon
};
var org_aswing_plaf_basic_icon_FrameCloseIcon = function() {
	org_aswing_plaf_basic_icon_FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameCloseIcon"] = org_aswing_plaf_basic_icon_FrameCloseIcon;
org_aswing_plaf_basic_icon_FrameCloseIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameCloseIcon"];
org_aswing_plaf_basic_icon_FrameCloseIcon.__super__ = org_aswing_plaf_basic_icon_FrameIcon;
org_aswing_plaf_basic_icon_FrameCloseIcon.prototype = $extend(org_aswing_plaf_basic_icon_FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 5;
		var w = this.width - 1 - gap * 2;
		var h = this.height - 1 - gap * 2;
		var x1 = x + gap;
		var y1 = y + gap;
		var cl = c.bdark;
		var lightPane = new org_aswing_graphics_Pen(cl,2,true,openfl_display_LineScaleMode.NORMAL,openfl_display_CapsStyle.ROUND);
		g.drawLine(lightPane,x1,y1,x1 + w,y1 + h);
		g.drawLine(lightPane,x1 + w,y1,x1,y1 + h);
	}
	,__class__: org_aswing_plaf_basic_icon_FrameCloseIcon
});
var org_aswing_plaf_basic_icon_FrameIconifiedIcon = function() {
	org_aswing_plaf_basic_icon_FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameIconifiedIcon"] = org_aswing_plaf_basic_icon_FrameIconifiedIcon;
org_aswing_plaf_basic_icon_FrameIconifiedIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameIconifiedIcon"];
org_aswing_plaf_basic_icon_FrameIconifiedIcon.__super__ = org_aswing_plaf_basic_icon_FrameIcon;
org_aswing_plaf_basic_icon_FrameIconifiedIcon.prototype = $extend(org_aswing_plaf_basic_icon_FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var w = this.width - 8 - 1;
		var h = 2;
		y = Math.round(y + Math.floor((this.height - 2) * 3 / 4 - 2));
		x = x + 4;
		g.fillRectangle(new org_aswing_graphics_SolidBrush(c.bdark),x,y,w,h);
	}
	,__class__: org_aswing_plaf_basic_icon_FrameIconifiedIcon
});
var org_aswing_plaf_basic_icon_FrameMaximizeIcon = function() {
	org_aswing_plaf_basic_icon_FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameMaximizeIcon"] = org_aswing_plaf_basic_icon_FrameMaximizeIcon;
org_aswing_plaf_basic_icon_FrameMaximizeIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameMaximizeIcon"];
org_aswing_plaf_basic_icon_FrameMaximizeIcon.__super__ = org_aswing_plaf_basic_icon_FrameIcon;
org_aswing_plaf_basic_icon_FrameMaximizeIcon.prototype = $extend(org_aswing_plaf_basic_icon_FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 4;
		x = x + gap;
		y = y + gap;
		var w = this.width - 1 - gap * 2;
		var h = this.height - 1 - gap * 2 - 2;
		g.fillRectangle(new org_aswing_graphics_SolidBrush(c.bdark),x,y,w,1);
		var darkBrush = new org_aswing_graphics_SolidBrush(c.bdark);
		g.fillRectangle(darkBrush,x,y + 1,w,1);
		g.fillRectangleRingWithThickness(darkBrush,x,y + 2,w,h,1);
	}
	,__class__: org_aswing_plaf_basic_icon_FrameMaximizeIcon
});
var org_aswing_plaf_basic_icon_FrameNormalIcon = function() {
	org_aswing_plaf_basic_icon_FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameNormalIcon"] = org_aswing_plaf_basic_icon_FrameNormalIcon;
org_aswing_plaf_basic_icon_FrameNormalIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameNormalIcon"];
org_aswing_plaf_basic_icon_FrameNormalIcon.__super__ = org_aswing_plaf_basic_icon_FrameIcon;
org_aswing_plaf_basic_icon_FrameNormalIcon.prototype = $extend(org_aswing_plaf_basic_icon_FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 4;
		var w = 5;
		var h = 4;
		var x1 = x + gap;
		var y2 = y + gap;
		var x2 = x1 + 3;
		var y1 = y2 + 3;
		var lightBrush = new org_aswing_graphics_SolidBrush(c.bdark);
		var darkBrush = new org_aswing_graphics_SolidBrush(c.bdark);
		g.fillRectangle(lightBrush,x2,y2,w,1);
		g.fillRectangle(darkBrush,x2,y2 + 1,w,1);
		g.fillRectangle(darkBrush,x2 + w - 1,y2 + 2,1,h - 1);
		g.fillRectangle(darkBrush,x2 + w - 2,y2 + h,1,1);
		g.fillRectangle(lightBrush,x1,y1,w,1);
		g.fillRectangleRingWithThickness(darkBrush,x1,y1 + 1,w,h,1);
	}
	,__class__: org_aswing_plaf_basic_icon_FrameNormalIcon
});
var org_aswing_plaf_basic_icon_MenuArrowIcon = function() {
	org_aswing_plaf_basic_icon_SolidArrowIcon.call(this,0,8,org_aswing_ASColor.BLACK);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuArrowIcon"] = org_aswing_plaf_basic_icon_MenuArrowIcon;
org_aswing_plaf_basic_icon_MenuArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuArrowIcon"];
org_aswing_plaf_basic_icon_MenuArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_plaf_basic_icon_MenuArrowIcon.__super__ = org_aswing_plaf_basic_icon_SolidArrowIcon;
org_aswing_plaf_basic_icon_MenuArrowIcon.prototype = $extend(org_aswing_plaf_basic_icon_SolidArrowIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		org_aswing_plaf_basic_icon_SolidArrowIcon.prototype.updateIcon.call(this,c,g,x,y);
		this.paintIconWithColor(c.getMideground());
	}
	,__class__: org_aswing_plaf_basic_icon_MenuArrowIcon
});
var org_aswing_plaf_basic_icon_MenuItemArrowIcon = function() {
	org_aswing_plaf_basic_icon_MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuItemArrowIcon"] = org_aswing_plaf_basic_icon_MenuItemArrowIcon;
org_aswing_plaf_basic_icon_MenuItemArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuItemArrowIcon"];
org_aswing_plaf_basic_icon_MenuItemArrowIcon.__super__ = org_aswing_plaf_basic_icon_MenuCheckIcon;
org_aswing_plaf_basic_icon_MenuItemArrowIcon.prototype = $extend(org_aswing_plaf_basic_icon_MenuCheckIcon.prototype,{
	__class__: org_aswing_plaf_basic_icon_MenuItemArrowIcon
});
var org_aswing_plaf_basic_icon_MenuItemCheckIcon = function() {
	org_aswing_plaf_basic_icon_MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuItemCheckIcon"] = org_aswing_plaf_basic_icon_MenuItemCheckIcon;
org_aswing_plaf_basic_icon_MenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuItemCheckIcon"];
org_aswing_plaf_basic_icon_MenuItemCheckIcon.__super__ = org_aswing_plaf_basic_icon_MenuCheckIcon;
org_aswing_plaf_basic_icon_MenuItemCheckIcon.prototype = $extend(org_aswing_plaf_basic_icon_MenuCheckIcon.prototype,{
	__class__: org_aswing_plaf_basic_icon_MenuItemCheckIcon
});
var org_aswing_plaf_basic_icon_RadioButtonIcon = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.RadioButtonIcon"] = org_aswing_plaf_basic_icon_RadioButtonIcon;
org_aswing_plaf_basic_icon_RadioButtonIcon.__name__ = ["org","aswing","plaf","basic","icon","RadioButtonIcon"];
org_aswing_plaf_basic_icon_RadioButtonIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_RadioButtonIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		var model = b.getModel();
		var drawDot = model.isSelected();
		this.shape.get_graphics().clear();
		var g1 = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var w = this.getIconWidth(c) - 2;
		var h = this.getIconHeight(c) - 4;
		x += 1;
		y += 3;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		var innerDis = 2;
		var alpha = 1;
		if(isPressing) {
			innerDis = 3;
			adjuster = adjuster.clone();
			adjuster.bGradient *= 0.8;
			adjuster.cGradient *= 0.8;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.6);
				alpha = 0.5;
			} else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.06);
				adjuster = adjuster.sharpen(0.8);
				innerDis = 4;
			} else if(model.isArmed()) adjuster = adjuster.sharpen(0.8);
		} else if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.6);
			alpha = 0.5;
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0.06);
			innerDis = 4;
		} else {
		}
		style = new org_aswing_StyleResult(cl,adjuster);
		g1.fillEllipse(new org_aswing_graphics_SolidBrush(style.bdark),x,y,w,h);
		g1.fillEllipse(new org_aswing_graphics_SolidBrush(style.clight),x + 1,y + 1,w - 2,h - 2);
		if(drawDot) {
			cl = c.getMideground();
			adjuster = c.getStyleTune().get_mide();
			if(model.isArmed()) cl = cl.offsetHLS(0,-0.06,0.03); else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0.06); else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.4);
			} else {
			}
			var mcls = new org_aswing_StyleResult(cl,adjuster);
			var matrix = new openfl_geom_Matrix();
			var r = w / 4;
			matrix.createGradientBox(r * 2,r * 2,Math.PI / 5,x + r - r / 2,y + r - r / 2);
			g1.fillCircle(new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.RADIAL,[mcls.clight.getRGB(),mcls.cdark.getRGB()],[mcls.clight.getAlpha(),mcls.cdark.getAlpha()],[0,200],matrix),x + w / 2,y + h / 2,r);
		}
		this.shape.set_alpha(alpha);
		var f = [];
		f.push(new openfl_filters_DropShadowFilter(innerDis,45,0,style.shadow * shadowScale,5,5,1,1,true));
		this.shape.set_filters(f);
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,getIconWidth: function(c) {
		return 14;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_RadioButtonIcon
};
var org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon = function() {
	this.shape = new openfl_display_Shape();
	org_aswing_plaf_basic_icon_MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon"] = org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon;
org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","RadioButtonMenuItemCheckIcon"];
org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon.__super__ = org_aswing_plaf_basic_icon_MenuCheckIcon;
org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon.prototype = $extend(org_aswing_plaf_basic_icon_MenuCheckIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var menu;
		menu = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(menu.isSelected()) g.fillCircle(new org_aswing_graphics_SolidBrush(c.getMideground()),x + 4,y + 5,3);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_RadioButtonMenuItemCheckIcon
});
var org_aswing_plaf_basic_icon_ScrollBarArrowIcon = function(direction,width,height) {
	this.direction = direction;
	this.width = width;
	this.height = height;
	if(Math.abs(direction % Math.PI) < 0.2) this.verticle = false; else this.verticle = true;
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.ScrollBarArrowIcon"] = org_aswing_plaf_basic_icon_ScrollBarArrowIcon;
org_aswing_plaf_basic_icon_ScrollBarArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","ScrollBarArrowIcon"];
org_aswing_plaf_basic_icon_ScrollBarArrowIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_ScrollBarArrowIcon.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,updateIcon: function(c,g,x,y) {
		x = 0;
		y = 0;
		var w = this.width;
		var h = this.height;
		this.shape.get_graphics().clear();
		var bar;
		bar = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		var g1 = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var b = new org_aswing_geom_IntRectangle(x,y,w | 0,h | 0);
		var gradientDir = 0;
		if(this.verticle) gradientDir = Math.PI / 2; else gradientDir = 0;
		var tune = c.getStyleTune().get_mide();
		var style;
		var cl = c.getMideground().changeAlpha(1);
		var model = bar.getModel();
		var isPressing = model.isArmed() || model.isSelected();
		if(!bar.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			tune = tune.sharpen(0.4);
		} else if(isPressing) tune = tune.sharpen(0.8); else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0);
		style = new org_aswing_StyleResult(cl,tune);
		org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g1,b,style,gradientDir);
		org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g1,b,1,style,gradientDir);
		b = b.clone();
		b.grow(-1,-1);
		var innerStyle = new org_aswing_StyleResult(cl,tune);
		innerStyle.bdark = innerStyle.cdark.offsetHLS(0,0.06,0);
		innerStyle.blight = innerStyle.clight.offsetHLS(0,0.06,0);
		org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g1,b,1,innerStyle,gradientDir);
		var light = new org_aswing_graphics_SolidBrush(innerStyle.blight);
		var dark = new org_aswing_graphics_SolidBrush(style.blight);
		var cx = w / 2;
		var cy = h / 2;
		var arrowW = Math.round(w / 2);
		if(this.verticle) {
			cy += 1;
			g1.fillPolygon(light,org_aswing_plaf_basic_BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
			cy -= 1;
			g1.fillPolygon(dark,org_aswing_plaf_basic_BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
		} else {
			cx += 1;
			g1.fillPolygon(light,org_aswing_plaf_basic_BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
			cx -= 1;
			g1.fillPolygon(dark,org_aswing_plaf_basic_BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
		}
	}
	,__class__: org_aswing_plaf_basic_icon_ScrollBarArrowIcon
};
var org_aswing_plaf_basic_icon_TitleIcon = function() {
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.TitleIcon"] = org_aswing_plaf_basic_icon_TitleIcon;
org_aswing_plaf_basic_icon_TitleIcon.__name__ = ["org","aswing","plaf","basic","icon","TitleIcon"];
org_aswing_plaf_basic_icon_TitleIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_plaf_basic_icon_TitleIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		return;
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var outterRect = c.getUI().getColor("Frame.activeCaptionBorder");
		var innerRect = new org_aswing_ASColor(16777215);
		x = x + 2;
		var width = org_aswing_plaf_basic_icon_TitleIcon.WIDTH;
		var height = org_aswing_plaf_basic_icon_TitleIcon.HEIGHT;
		var w4 = width / 4;
		var h23 = 2 * height / 3;
		var w2 = width / 2;
		var h = height;
		var w = width;
		var points = [];
		points.push(new openfl_geom_Point(x,y));
		points.push(new openfl_geom_Point(x + w4,y + h));
		points.push(new openfl_geom_Point(x + w2,y + h23));
		points.push(new openfl_geom_Point(x + w4 * 3,y + h));
		points.push(new openfl_geom_Point(x + w,y));
		points.push(new openfl_geom_Point(x + w2,y + h23));
		g.drawPolygon(new org_aswing_graphics_Pen(outterRect,2),points);
		g.fillPolygon(new org_aswing_graphics_SolidBrush(innerRect),points);
	}
	,getIconHeight: function(c) {
		return 0;
	}
	,getIconWidth: function(c) {
		return 0;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_plaf_basic_icon_TitleIcon
};
var org_aswing_plaf_basic_tabbedpane_TabBackground = function(tab) {
	this.tab = tab;
	this.shape = new openfl_display_Shape();
};
$hxClasses["org.aswing.plaf.basic.tabbedpane.TabBackground"] = org_aswing_plaf_basic_tabbedpane_TabBackground;
org_aswing_plaf_basic_tabbedpane_TabBackground.__name__ = ["org","aswing","plaf","basic","tabbedpane","TabBackground"];
org_aswing_plaf_basic_tabbedpane_TabBackground.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_GroundDecorator];
org_aswing_plaf_basic_tabbedpane_TabBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		var btn;
		btn = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
		if(btn != null) {
			var model = btn.getModel();
			var isPressing = model.isPressed() || model.isSelected();
			g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune().get_mide().clone();
			if(!c.isEnabled()) adjuster = adjuster.sharpen(0.4); else if(isPressing) cl = cl.offsetHLS(0,0.08,0); else if(model.isRollOver()) cl = cl.offsetHLS(-0.2,0,0.37);
			style = new org_aswing_StyleResult(cl,adjuster);
			if(isPressing) style.cdark = style.cdark.changeAlpha(0);
			var direction = Math.PI / 2;
			var matrixB = b.clone();
			b = b.clone();
			var placement = this.tab.getTabPlacement();
			var highlightBrush = new org_aswing_graphics_SolidBrush(style.clight.offsetHLS(0,0.14,0.1));
			if(placement == 1) {
				direction = Math.PI / 2;
				b.height += style.round * 2 | 0;
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.width - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + style.round,b.y + 1,b.width - style.round * 2,1);
			} else if(placement == 3) {
				direction = -Math.PI / 2;
				b.height += style.round * 2 | 0;
				b.y -= style.round * 2 | 0;
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.width - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + style.round,b.y + b.height - 2,b.width - style.round * 2,1);
			} else if(placement == 2) {
				direction = 0;
				b.width += style.round * 2 | 0;
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.height - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + 1,b.y + style.round,1,b.height - style.round * 2);
			} else {
				direction = Math.PI;
				b.width += style.round * 2 | 0;
				b.x -= style.round * 2 | 0;
				org_aswing_plaf_basic_BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org_aswing_plaf_basic_BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.height - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + b.width - 2,b.y + style.round,1,b.height - style.round * 2);
			}
		}
	}
	,__class__: org_aswing_plaf_basic_tabbedpane_TabBackground
};
var org_aswing_plaf_basic_tree_ExpandControl = function() { };
$hxClasses["org.aswing.plaf.basic.tree.ExpandControl"] = org_aswing_plaf_basic_tree_ExpandControl;
org_aswing_plaf_basic_tree_ExpandControl.__name__ = ["org","aswing","plaf","basic","tree","ExpandControl"];
org_aswing_plaf_basic_tree_ExpandControl.prototype = {
	__class__: org_aswing_plaf_basic_tree_ExpandControl
};
var org_aswing_plaf_basic_tree_BasicExpandControl = function() { };
$hxClasses["org.aswing.plaf.basic.tree.BasicExpandControl"] = org_aswing_plaf_basic_tree_BasicExpandControl;
org_aswing_plaf_basic_tree_BasicExpandControl.__name__ = ["org","aswing","plaf","basic","tree","BasicExpandControl"];
org_aswing_plaf_basic_tree_BasicExpandControl.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_plaf_basic_tree_ExpandControl];
org_aswing_plaf_basic_tree_BasicExpandControl.prototype = {
	paintExpandControl: function(c,g,bounds,totalChildIndent,path,row,expanded,leaf) {
		if(leaf) return;
		var w = totalChildIndent;
		var cx = bounds.x - w / 2;
		var cy = bounds.y + bounds.height / 2;
		var r = 4;
		var trig;
		if(expanded != true) {
			cx -= 2;
			trig = [new org_aswing_geom_IntPoint(cx | 0,cy - r | 0),new org_aswing_geom_IntPoint(cx | 0,cy + r | 0),new org_aswing_geom_IntPoint(cx + r | 0,cy | 0)];
		} else {
			cy -= 2;
			trig = [new org_aswing_geom_IntPoint(cx - r | 0,cy | 0),new org_aswing_geom_IntPoint(cx + r | 0,cy | 0),new org_aswing_geom_IntPoint(cx | 0,cy + r | 0)];
		}
		g.fillPolygon(new org_aswing_graphics_SolidBrush(org_aswing_ASColor.BLACK),trig);
	}
	,__class__: org_aswing_plaf_basic_tree_BasicExpandControl
};
var org_aswing_resizer_DefaultResizeBarHandler = function(resizer,barMC,arrowRotation,strategy) {
	this.resizer = resizer;
	this.mc = barMC;
	this.arrowRotation = arrowRotation;
	this.strategy = strategy;
	this.handle();
};
$hxClasses["org.aswing.resizer.DefaultResizeBarHandler"] = org_aswing_resizer_DefaultResizeBarHandler;
org_aswing_resizer_DefaultResizeBarHandler.__name__ = ["org","aswing","resizer","DefaultResizeBarHandler"];
org_aswing_resizer_DefaultResizeBarHandler.createHandler = function(resizer,barMC,arrowRotation,strategy) {
	return new org_aswing_resizer_DefaultResizeBarHandler(resizer,barMC,arrowRotation,strategy);
};
org_aswing_resizer_DefaultResizeBarHandler.prototype = {
	handle: function() {
		this.mc.addEventListener(openfl_events_MouseEvent.ROLL_OVER,$bind(this,this.__onRollOver));
		this.mc.addEventListener(openfl_events_MouseEvent.ROLL_OUT,$bind(this,this.__onRollOut));
		this.mc.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__onPress));
		this.mc.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.__onUp));
		this.mc.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.__onRelease));
		this.mc.addEventListener("releaseOutSide",$bind(this,this.__onReleaseOutside));
		this.mc.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.__onDestroy));
	}
	,__onRollOver: function(e) {
		if(!this.resizer.isResizing() && (e == null || !e.buttonDown)) {
			this.resizer.startArrowCursor();
			this.__rotateArrow();
			if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow),false,0,true);
		}
	}
	,__onRollOut: function(e) {
		if(!this.resizer.isResizing() && !e.buttonDown) {
			if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
			this.resizer.stopArrowCursor();
		}
	}
	,__onPress: function(e) {
		this.resizer.setResizing(true);
		this.startResize(e);
		if(org_aswing_AsWingManager.getStage() != null) {
			org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
			org_aswing_AsWingManager.getStage().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.resizing),false,0,true);
		}
	}
	,__onUp: function(e) {
		this.__onRollOver(null);
	}
	,__onRelease: function(e) {
		this.resizer.setResizing(false);
		this.resizer.stopArrowCursor();
		if(org_aswing_AsWingManager.getStage() != null) org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.resizing));
		this.finishResize();
	}
	,__onReleaseOutside: function(e) {
		this.__onRelease(e);
	}
	,__onDestroy: function(e) {
		if(org_aswing_AsWingManager.getStage() != null) {
			org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.resizing));
			org_aswing_AsWingManager.getStage().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
		}
	}
	,__rotateArrow: function(e) {
		this.resizer.setArrowRotation(this.arrowRotation);
	}
	,startResize: function(e) {
		this.resizer.startResize(this.strategy,e);
	}
	,resizing: function(e) {
		this.resizer.resizing(this.strategy,e);
	}
	,finishResize: function() {
		this.resizer.finishResize(this.strategy);
	}
	,__class__: org_aswing_resizer_DefaultResizeBarHandler
};
var org_aswing_resizer_Resizer = function() { };
$hxClasses["org.aswing.resizer.Resizer"] = org_aswing_resizer_Resizer;
org_aswing_resizer_Resizer.__name__ = ["org","aswing","resizer","Resizer"];
org_aswing_resizer_Resizer.prototype = {
	__class__: org_aswing_resizer_Resizer
};
var org_aswing_resizer_DefaultResizer = function() {
	this.enabled = true;
	this.resizeDirectly = false;
	this.startX = 0;
	this.startY = 0;
	this.startBounds = new org_aswing_geom_IntRectangle();
	this.resizeArrowColor = org_aswing_UIManager.getColor("resizeArrow");
	this.resizeArrowLightColor = org_aswing_UIManager.getColor("resizeArrowLight");
	this.resizeArrowDarkColor = org_aswing_UIManager.getColor("resizeArrowDark");
};
$hxClasses["org.aswing.resizer.DefaultResizer"] = org_aswing_resizer_DefaultResizer;
org_aswing_resizer_DefaultResizer.__name__ = ["org","aswing","resizer","DefaultResizer"];
org_aswing_resizer_DefaultResizer.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_resizer_Resizer];
org_aswing_resizer_DefaultResizer.prototype = {
	setResizeArrowColor: function(c) {
		this.resizeArrowColor = c;
	}
	,setResizeArrowLightColor: function(c) {
		this.resizeArrowLightColor = c;
	}
	,setResizeArrowDarkColor: function(c) {
		this.resizeArrowDarkColor = c;
	}
	,setOwner: function(c) {
		if(this.owner != null) {
			this.owner.removeEventListener("paint",$bind(this,this.locate));
			if(this.resizeMC != null) this.owner.removeChild(this.resizeMC);
			this.hideBoundsMC();
		}
		this.owner = c;
		if(this.owner != null) {
			this.owner.addEventListener("paint",$bind(this,this.locate));
			if(this.resizeMC == null) this.createResizeMCs();
			this.owner.addChildAt(this.resizeMC,this.owner.get_numChildren());
		}
		this.locate();
	}
	,setResizeDirectly: function(r) {
		this.resizeDirectly = r;
	}
	,isResizeDirectly: function() {
		return this.resizeDirectly;
	}
	,setArrowRotation: function(r) {
		this.resizeArrowCursor.set_rotation(r);
	}
	,startArrowCursor: function() {
		if(this.resizeMC != null && this.resizeMC.stage != null) org_aswing_CursorManager.getManager(this.resizeMC.stage).showCustomCursor(this.resizeArrowCursor);
	}
	,stopArrowCursor: function() {
		if(this.resizeMC != null && this.resizeMC.stage != null) org_aswing_CursorManager.getManager(this.resizeMC.stage).hideCustomCursor(this.resizeArrowCursor);
	}
	,setResizing: function(b) {
		this.resizingNow = b;
	}
	,isResizing: function() {
		return this.resizingNow;
	}
	,startResize: function(strategy,e) {
		if(this.resizeDirectly != true) this.representRect(this.owner.getComBounds());
		this.startX = e.stageX;
		this.startY = e.stageY;
		this.startBounds = this.owner.getComBounds();
	}
	,resizing: function(strategy,e) {
		var bounds = strategy.getBounds(this.startBounds,this.owner.getMinimumSize(),this.owner.getMaximumSize(),e.stageX - this.startX | 0,e.stageY - this.startY | 0);
		if(this.resizeDirectly) {
			this.owner.setBounds(bounds);
			this.owner.revalidate();
			e.updateAfterEvent();
		} else this.representRect(bounds);
	}
	,finishResize: function(strategy) {
		if(this.resizeDirectly != true) {
			this.owner.setComBounds(this.lastRepresentedBounds);
			this.hideBoundsMC();
			this.owner.revalidate();
		}
	}
	,hideBoundsMC: function() {
		var par = this.owner.parent;
		if(this.boundsShape != null && par != null && par.contains(this.boundsShape)) par.removeChild(this.boundsShape);
	}
	,representRect: function(bounds) {
		if(this.resizeDirectly != true) {
			var par = this.owner.parent;
			if(!par.contains(this.boundsShape)) par.addChild(this.boundsShape);
			org_aswing_util_DepthManager.bringToTop(this.boundsShape);
			var margin = this.owner.getResizerMargin();
			var db = bounds.clone();
			db.x += margin.left;
			db.y += margin.top;
			db.width -= margin.getMarginWidth();
			db.height -= margin.getMarginHeight();
			var x = db.x;
			var y = db.y;
			var w = db.width;
			var h = db.height;
			var g = new org_aswing_graphics_Graphics2D(this.boundsShape.get_graphics());
			this.boundsShape.get_graphics().clear();
			g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowLightColor),x - 1,y - 1,w + 2,h + 2);
			g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowColor),x,y,w,h);
			g.drawRectangle(new org_aswing_graphics_Pen(this.resizeArrowDarkColor),x + 1,y + 1,w - 2,h - 2);
			this.lastRepresentedBounds = bounds;
		}
	}
	,createResizeMCs: function() {
		var r = org_aswing_resizer_DefaultResizer.RESIZE_MC_WIDTH;
		this.resizeMC = new openfl_display_Sprite();
		this.resizeMC.set_name("resizer");
		this.resizeArrowCursor = org_aswing_Cursor.createCursor("System.hResizeCursor");
		this.resizeArrowCursor.set_name("resizeCursor");
		this.boundsShape = new openfl_display_Shape();
		this.boundsShape.set_name("bounds");
		this.topResizeMC = new org_aswing_AWSprite();
		this.leftResizeMC = new org_aswing_AWSprite();
		this.rightResizeMC = new org_aswing_AWSprite();
		this.bottomResizeMC = new org_aswing_AWSprite();
		this.topLeftResizeMC = new org_aswing_AWSprite();
		this.topRightResizeMC = new org_aswing_AWSprite();
		this.bottomLeftResizeMC = new org_aswing_AWSprite();
		this.bottomRightResizeMC = new org_aswing_AWSprite();
		this.resizeMC.addChild(this.topResizeMC);
		this.resizeMC.addChild(this.leftResizeMC);
		this.resizeMC.addChild(this.rightResizeMC);
		this.resizeMC.addChild(this.bottomResizeMC);
		this.resizeMC.addChild(this.topLeftResizeMC);
		this.resizeMC.addChild(this.topRightResizeMC);
		this.resizeMC.addChild(this.bottomLeftResizeMC);
		this.resizeMC.addChild(this.bottomRightResizeMC);
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.topResizeMC,90,this.createResizeStrategy(0,-1));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.leftResizeMC,0,this.createResizeStrategy(-1,0));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.rightResizeMC,0,this.createResizeStrategy(1,0));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.bottomResizeMC,90,this.createResizeStrategy(0,1));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.topLeftResizeMC,45,this.createResizeStrategy(-1,-1));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.topRightResizeMC,-45,this.createResizeStrategy(1,-1));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.bottomLeftResizeMC,-45,this.createResizeStrategy(-1,1));
		org_aswing_resizer_DefaultResizeBarHandler.createHandler(this,this.bottomRightResizeMC,45,this.createResizeStrategy(1,1));
		var brush = new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(0,0));
		var gdi = new org_aswing_graphics_Graphics2D(this.topResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r,r);
		gdi = new org_aswing_graphics_Graphics2D(this.leftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r,r);
		gdi = new org_aswing_graphics_Graphics2D(this.rightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r,0,r,r);
		gdi = new org_aswing_graphics_Graphics2D(this.bottomResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,-r,r,r);
		gdi = new org_aswing_graphics_Graphics2D(this.topLeftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r * 2,r);
		gdi.fillRectangle(brush,0,0,r,r * 2);
		gdi = new org_aswing_graphics_Graphics2D(this.topRightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r * 2,0,r * 2,r);
		gdi.fillRectangle(brush,-r,0,r,r * 2);
		gdi = new org_aswing_graphics_Graphics2D(this.bottomLeftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,-r,r * 2,r);
		gdi.fillRectangle(brush,0,-r * 2,r,r * 2);
		gdi = new org_aswing_graphics_Graphics2D(this.bottomRightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r * 2,-r,r * 2,r);
		gdi.fillRectangle(brush,-r,-r * 2,r,r * 2);
		this.resizeMC.set_visible(this.enabled);
	}
	,createResizeStrategy: function(wSign,hSign) {
		return new org_aswing_resizer_ResizeStrategyImp(wSign,hSign);
	}
	,setEnabled: function(e) {
		this.enabled = e;
		this.resizeMC.set_visible(this.enabled);
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,locate: function(e) {
		if(this.owner == null) return;
		if(this.owner.getChildIndex(this.resizeMC) < this.owner.getHighestIndexUnderForeground() - 1) this.owner.bringToTop(this.resizeMC);
		var margin = this.owner.getResizerMargin();
		var x = margin.left;
		var y = margin.top;
		var w = this.owner.getWidth() - margin.right - margin.left;
		var h = this.owner.getHeight() - margin.bottom - margin.top;
		var r = org_aswing_resizer_DefaultResizer.RESIZE_MC_WIDTH;
		this.topResizeMC.set_width(Math.max(0,w - r * 2));
		this.topResizeMC.set_x(r);
		this.topResizeMC.set_y(y);
		this.leftResizeMC.set_height(Math.max(0,h - r * 2));
		this.leftResizeMC.set_x(x);
		this.leftResizeMC.set_y(r);
		this.rightResizeMC.set_height(Math.max(0,h - r * 2));
		this.rightResizeMC.set_x(x + w);
		this.rightResizeMC.set_y(r);
		this.bottomResizeMC.set_width(Math.max(0,w - r * 2));
		this.bottomResizeMC.set_x(r);
		this.bottomResizeMC.set_y(y + h);
		this.topLeftResizeMC.set_x(x);
		this.topLeftResizeMC.set_y(y);
		this.topRightResizeMC.set_x(x + w);
		this.topRightResizeMC.set_y(y);
		this.bottomLeftResizeMC.set_x(x);
		this.bottomLeftResizeMC.set_y(y + h);
		this.bottomRightResizeMC.set_x(x + w);
		this.bottomRightResizeMC.set_y(y + h);
	}
	,__class__: org_aswing_resizer_DefaultResizer
};
var org_aswing_resizer_ResizeStrategy = function() { };
$hxClasses["org.aswing.resizer.ResizeStrategy"] = org_aswing_resizer_ResizeStrategy;
org_aswing_resizer_ResizeStrategy.__name__ = ["org","aswing","resizer","ResizeStrategy"];
org_aswing_resizer_ResizeStrategy.prototype = {
	__class__: org_aswing_resizer_ResizeStrategy
};
var org_aswing_resizer_ResizeStrategyImp = function(wSign,hSign) {
	this.wSign = wSign;
	this.hSign = hSign;
};
$hxClasses["org.aswing.resizer.ResizeStrategyImp"] = org_aswing_resizer_ResizeStrategyImp;
org_aswing_resizer_ResizeStrategyImp.__name__ = ["org","aswing","resizer","ResizeStrategyImp"];
org_aswing_resizer_ResizeStrategyImp.__interfaces__ = [org_aswing_resizer_ResizeStrategy];
org_aswing_resizer_ResizeStrategyImp.prototype = {
	getBounds: function(origBounds,minSize,maxSize,movedX,movedY) {
		var currentBounds = origBounds.clone();
		if(minSize == null) minSize = new org_aswing_geom_IntDimension(0,0);
		if(maxSize == null) maxSize = org_aswing_geom_IntDimension.createBigDimension();
		var newX;
		var newY;
		var newW;
		var newH;
		if(this.wSign == 0) newW = currentBounds.width; else {
			newW = currentBounds.width + this.wSign * movedX;
			newW = Math.min(maxSize.width,Math.max(minSize.width,newW));
		}
		if(this.wSign < 0) newX = currentBounds.x + (currentBounds.width - newW); else newX = currentBounds.x;
		if(this.hSign == 0) newH = currentBounds.height; else {
			newH = currentBounds.height + this.hSign * movedY;
			newH = Math.min(maxSize.height,Math.max(minSize.height,newH));
		}
		if(this.hSign < 0) newY = currentBounds.y + (currentBounds.height - newH); else newY = currentBounds.y;
		newX = Math.round(newX);
		newY = Math.round(newY);
		newW = Math.round(newW);
		newH = Math.round(newH);
		return new org_aswing_geom_IntRectangle(newX | 0,newY | 0,newW | 0,newH | 0);
	}
	,__class__: org_aswing_resizer_ResizeStrategyImp
};
var org_aswing_resizer_ResizerController = function(comp,resizer) {
	if(comp == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("illegal component when insert to ResizerContainer")); else this._registerComponent(comp,resizer);
};
$hxClasses["org.aswing.resizer.ResizerController"] = org_aswing_resizer_ResizerController;
org_aswing_resizer_ResizerController.__name__ = ["org","aswing","resizer","ResizerController"];
org_aswing_resizer_ResizerController.defaultResizerClass = null;
org_aswing_resizer_ResizerController.setDefaultResizerClass = function(cl) {
	org_aswing_resizer_ResizerController.defaultResizerClass = cl;
};
org_aswing_resizer_ResizerController.getDefaultResizerClass = function() {
	return org_aswing_resizer_ResizerController.defaultResizerClass;
};
org_aswing_resizer_ResizerController.create = function(comp,resizer) {
	return new org_aswing_resizer_ResizerController(comp,resizer);
};
org_aswing_resizer_ResizerController.prototype = {
	getComponent: function() {
		return this._component;
	}
	,isResizable: function() {
		return this._resizable;
	}
	,setResizable: function(b) {
		if(this._resizable != b) {
			this._resizable = b;
			this._resizer.setEnabled(this.isResizable());
		}
	}
	,getResizer: function() {
		return this._resizer;
	}
	,setResizer: function(r) {
		if(r != this._resizer) {
			this._destroyResizer();
			this._resizer = r;
			this._initResizer();
		}
	}
	,isResizeDirectly: function() {
		return this._resizableDirectly;
	}
	,setResizeDirectly: function(b) {
		this._resizableDirectly = b;
		this._resizer.setResizeDirectly(b);
	}
	,_registerComponent: function(comp,resizer) {
		this._component = comp;
		this._resizable = true;
		this._resizableDirectly = false;
		if(resizer == null) {
			if(org_aswing_resizer_ResizerController.getDefaultResizerClass() == null) org_aswing_resizer_ResizerController.setDefaultResizerClass(org_aswing_resizer_DefaultResizer);
			var cl = org_aswing_resizer_ResizerController.getDefaultResizerClass();
			resizer = Type.createInstance(cl,[]);
			if(resizer == null) throw new js__$Boot_HaxeError(new org_aswing_error_Error("The defaultResizerClass is set wrong!!"));
		}
		this.setResizer(resizer);
	}
	,_initResizer: function() {
		this._resizer.setOwner(this.getComponent());
		this._resizer.setEnabled(this.isResizable());
		this._resizer.setResizeDirectly(this.isResizeDirectly());
	}
	,_destroyResizer: function() {
		if(this._resizer != null) {
			this._resizer.setOwner(null);
			this._resizer = null;
		}
	}
	,destroy: function() {
		this._destroyResizer();
		this._component = null;
	}
	,__class__: org_aswing_resizer_ResizerController
};
var org_aswing_table_TableModel = function() { };
$hxClasses["org.aswing.table.TableModel"] = org_aswing_table_TableModel;
org_aswing_table_TableModel.__name__ = ["org","aswing","table","TableModel"];
org_aswing_table_TableModel.prototype = {
	__class__: org_aswing_table_TableModel
};
var org_aswing_table_AbstractTableModel = function() {
	this.listenerList = [];
	this.columnClasses = [];
};
$hxClasses["org.aswing.table.AbstractTableModel"] = org_aswing_table_AbstractTableModel;
org_aswing_table_AbstractTableModel.__name__ = ["org","aswing","table","AbstractTableModel"];
org_aswing_table_AbstractTableModel.__interfaces__ = [org_aswing_table_TableModel];
org_aswing_table_AbstractTableModel.prototype = {
	getRowCount: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return -1;
	}
	,getColumnCount: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return -1;
	}
	,getValueAt: function(rowIndex,columnIndex) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getColumnName: function(column) {
		return String.fromCharCode(32 + column % 26);
	}
	,findColumn: function(columnName) {
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var i = _g1++;
			if(columnName == this.getColumnName(i)) return i;
		}
		return -1;
	}
	,getColumnClass: function(columnIndex) {
		if(this.columnClasses[columnIndex] == null) return "Object"; else return this.columnClasses[columnIndex];
	}
	,setColumnClass: function(columnIndex,className) {
		this.columnClasses[columnIndex] = className;
	}
	,isCellEditable: function(rowIndex,columnIndex) {
		return false;
	}
	,setValueAt: function(aValue,rowIndex,columnIndex) {
	}
	,addTableModelListener: function(l) {
		this.listenerList.push(l);
	}
	,removeTableModelListener: function(l) {
		org_aswing_util_ArrayUtils.removeFromArray(this.listenerList,l);
	}
	,getTableModelListeners: function() {
		return this.listenerList.slice();
	}
	,fireTableDataChanged: function() {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this));
	}
	,fireTableStructureChanged: function() {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this,-1));
	}
	,fireTableRowsInserted: function(firstRow,lastRow) {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this,firstRow,lastRow,-1,"insert"));
	}
	,fireTableRowsUpdated: function(firstRow,lastRow) {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this,firstRow,lastRow,-1,"update"));
	}
	,fireTableRowsDeleted: function(firstRow,lastRow) {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this,firstRow,lastRow,-1,"delete"));
	}
	,fireTableCellUpdated: function(row,column) {
		this.fireTableChanged(new org_aswing_event_TableModelEvent(this,row,row,column));
	}
	,fireTableChanged: function(e) {
		var _g1 = 0;
		var _g = this.listenerList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](this.listenerList[i],org_aswing_event_TableModelListener);
			lis.tableChanged(e);
		}
	}
	,toString: function() {
		return "AbstractTableModel[]";
	}
	,__class__: org_aswing_table_AbstractTableModel
};
var org_aswing_table_TableColumnModel = function() { };
$hxClasses["org.aswing.table.TableColumnModel"] = org_aswing_table_TableColumnModel;
org_aswing_table_TableColumnModel.__name__ = ["org","aswing","table","TableColumnModel"];
org_aswing_table_TableColumnModel.prototype = {
	__class__: org_aswing_table_TableColumnModel
};
var org_aswing_table_DefaultTableColumnModel = function() {
	this.tableColumns = [];
	this.listenerList = [];
	this.setSelectionModel(this.createSelectionModel());
	this.setColumnMargin(1);
	this.invalidateWidthCache();
	this.setColumnSelectionAllowed(false);
};
$hxClasses["org.aswing.table.DefaultTableColumnModel"] = org_aswing_table_DefaultTableColumnModel;
org_aswing_table_DefaultTableColumnModel.__name__ = ["org","aswing","table","DefaultTableColumnModel"];
org_aswing_table_DefaultTableColumnModel.__interfaces__ = [org_aswing_table_TableColumnModel];
org_aswing_table_DefaultTableColumnModel.prototype = {
	addColumn: function(aColumn) {
		if(aColumn == null) {
			haxe_Log.trace("Adding null column ignored",{ fileName : "DefaultTableColumnModel.hx", lineNumber : 60, className : "org.aswing.table.DefaultTableColumnModel", methodName : "addColumn"});
			return;
		}
		this.tableColumns.push(aColumn);
		aColumn.addPropertyChangeListener($bind(this,this.__propertyChanged));
		this.invalidateWidthCache();
		this.checkLeadAnchor();
		this.fireColumnAdded(new org_aswing_table_TableColumnModelEvent(this,0,this.getColumnCount() - 1));
	}
	,removeColumn: function(column) {
		var columnIndex = org_aswing_util_ArrayUtils.indexInArray(this.tableColumns,column);
		if(columnIndex != -1) {
			if(this.selectionModel != null) this.selectionModel.removeIndexInterval(columnIndex,columnIndex);
			this.checkLeadAnchor();
			column.removePropertyChangeListener($bind(this,this.__propertyChanged));
			this.tableColumns.splice(columnIndex,1);
			this.invalidateWidthCache();
			this.fireColumnRemoved(new org_aswing_table_TableColumnModelEvent(this,columnIndex,0));
		}
	}
	,moveColumn: function(columnIndex,newIndex) {
		if(columnIndex < 0 || columnIndex >= this.getColumnCount() || newIndex < 0 || newIndex >= this.getColumnCount()) {
			haxe_Log.trace("Error : moveColumn() - Index out of range",{ fileName : "DefaultTableColumnModel.hx", lineNumber : 113, className : "org.aswing.table.DefaultTableColumnModel", methodName : "moveColumn"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("moveColumn() - Index out of range"));
			return;
		}
		var aColumn;
		if(columnIndex == newIndex) {
			this.fireColumnMoved(new org_aswing_table_TableColumnModelEvent(this,columnIndex,newIndex));
			return;
		}
		aColumn = org_aswing_AsWingUtils["as"](this.tableColumns[columnIndex],org_aswing_table_TableColumn);
		this.tableColumns.splice(columnIndex,1);
		var selected = this.selectionModel.isSelectedIndex(columnIndex);
		this.selectionModel.removeIndexInterval(columnIndex,columnIndex);
		this.tableColumns.splice(newIndex,0,aColumn);
		this.selectionModel.insertIndexInterval(newIndex,1,true);
		if(selected) this.selectionModel.addSelectionInterval(newIndex,newIndex); else this.selectionModel.removeSelectionInterval(newIndex,newIndex);
		this.fireColumnMoved(new org_aswing_table_TableColumnModelEvent(this,columnIndex,newIndex));
	}
	,setColumnMargin: function(newMargin) {
		if(newMargin != this.columnMargin) {
			this.columnMargin = newMargin;
			this.fireColumnMarginChanged();
		}
	}
	,getColumnCount: function() {
		return this.tableColumns.length;
	}
	,getColumns: function() {
		return this.tableColumns.slice();
	}
	,getColumnIndex: function(identifier) {
		if(identifier == null) {
			haxe_Log.trace("Error : Identifier is null",{ fileName : "DefaultTableColumnModel.hx", lineNumber : 187, className : "org.aswing.table.DefaultTableColumnModel", methodName : "getColumnIndex"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("Identifier is null"));
		}
		var enumeration = this.getColumns();
		var aColumn;
		var index = 0;
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			aColumn = org_aswing_AsWingUtils["as"](enumeration[i],org_aswing_table_TableColumn);
			if(identifier == aColumn.getIdentifier()) return index;
			index++;
		}
		haxe_Log.trace("Error : Identifier is null",{ fileName : "DefaultTableColumnModel.hx", lineNumber : 200, className : "org.aswing.table.DefaultTableColumnModel", methodName : "getColumnIndex"});
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("Identifier not found"));
	}
	,getColumn: function(columnIndex) {
		return org_aswing_AsWingUtils["as"](this.tableColumns[columnIndex],org_aswing_table_TableColumn);
	}
	,getColumnMargin: function() {
		return this.columnMargin;
	}
	,getColumnIndexAtX: function(x) {
		if(x < 0) return -1;
		var cc = this.getColumnCount();
		var _g = 0;
		while(_g < cc) {
			var column = _g++;
			x = x - this.getColumn(column).getWidth();
			if(x < 0) return column;
		}
		return -1;
	}
	,getTotalColumnWidth: function() {
		if(this.totalColumnWidth == -1) this.recalcWidthCache();
		return this.totalColumnWidth;
	}
	,setSelectionModel: function(newModel) {
		if(newModel == null) {
			haxe_Log.trace("Setting null ListSelectionModel ignored",{ fileName : "DefaultTableColumnModel.hx", lineNumber : 286, className : "org.aswing.table.DefaultTableColumnModel", methodName : "setSelectionModel"});
			return;
		}
		var oldModel = this.selectionModel;
		if(newModel != oldModel) {
			if(oldModel != null) oldModel.removeListSelectionListener($bind(this,this.__selectionChanged));
			this.selectionModel = newModel;
			newModel.addListSelectionListener($bind(this,this.__selectionChanged));
			this.checkLeadAnchor();
		}
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,checkLeadAnchor: function() {
		var lead = this.selectionModel.getLeadSelectionIndex();
		var count = this.tableColumns.length;
		if(count == 0) {
			if(lead != -1) {
				this.selectionModel.setAnchorSelectionIndex(-1);
				this.selectionModel.setLeadSelectionIndex(-1);
			}
		} else if(lead == -1) {
			if(this.selectionModel.isSelectedIndex(0)) this.selectionModel.addSelectionInterval(0,0); else this.selectionModel.removeSelectionInterval(0,0);
		}
	}
	,setColumnSelectionAllowed: function(flag) {
		this.columnSelectionAllowed = flag;
	}
	,getColumnSelectionAllowed: function() {
		return this.columnSelectionAllowed;
	}
	,getSelectedColumns: function() {
		if(this.selectionModel != null) {
			var iMin = this.selectionModel.getMinSelectionIndex();
			var iMax = this.selectionModel.getMaxSelectionIndex();
			if(iMin == -1 || iMax == -1) return [];
			var rv = [];
			var _g1 = iMin;
			var _g = iMax + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.selectionModel.isSelectedIndex(i)) rv.push(i);
			}
			return rv;
		}
		return [];
	}
	,getSelectedColumnCount: function() {
		if(this.selectionModel != null) {
			var iMin = this.selectionModel.getMinSelectionIndex();
			var iMax = this.selectionModel.getMaxSelectionIndex();
			var count = 0;
			var _g1 = iMin;
			var _g = iMax + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.selectionModel.isSelectedIndex(i)) count++;
			}
			return count;
		}
		return 0;
	}
	,addColumnModelListener: function(x) {
		this.listenerList.push(x);
	}
	,removeColumnModelListener: function(x) {
		org_aswing_util_ArrayUtils.removeFromArray(this.listenerList,x);
	}
	,getColumnModelListeners: function() {
		return this.listenerList.slice();
	}
	,fireColumnAdded: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_table_TableColumnModelListener);
			lis.columnAdded(e);
		}
	}
	,fireColumnRemoved: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_table_TableColumnModelListener);
			lis.columnRemoved(e);
		}
	}
	,fireColumnMoved: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_table_TableColumnModelListener);
			lis.columnMoved(e);
		}
	}
	,fireColumnSelectionChanged: function(firstIndex,lastIndex,programmatic) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_table_TableColumnModelListener);
			lis.columnSelectionChanged(this,firstIndex,lastIndex,programmatic);
		}
	}
	,fireColumnMarginChanged: function() {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_table_TableColumnModelListener);
			lis.columnMarginChanged(this);
		}
	}
	,getListeners: function() {
		return this.listenerList.slice();
	}
	,__propertyChanged: function(e) {
		if(e.getPropertyName() == "width" || e.getPropertyName() == "preferredWidth") {
			this.invalidateWidthCache();
			this.fireColumnMarginChanged();
		}
	}
	,__selectionChanged: function(e) {
		this.fireColumnSelectionChanged(e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic());
	}
	,createSelectionModel: function() {
		return new org_aswing_DefaultListSelectionModel();
	}
	,recalcWidthCache: function() {
		var enumeration = this.tableColumns;
		this.totalColumnWidth = 0;
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = enumeration[i];
			this.totalColumnWidth += c.getWidth();
		}
	}
	,invalidateWidthCache: function() {
		this.totalColumnWidth = -1;
	}
	,toString: function() {
		return "DefaultTableColumnModel[]";
	}
	,__class__: org_aswing_table_DefaultTableColumnModel
};
var org_aswing_table_DefaultTableModel = function() {
	org_aswing_table_AbstractTableModel.call(this);
	this.columnNames = [];
	this.columnsEditable = [];
};
$hxClasses["org.aswing.table.DefaultTableModel"] = org_aswing_table_DefaultTableModel;
org_aswing_table_DefaultTableModel.__name__ = ["org","aswing","table","DefaultTableModel"];
org_aswing_table_DefaultTableModel.nonNullArray = function(v) {
	if(v != null) return v; else return [];
};
org_aswing_table_DefaultTableModel.gcd = function(i,j) {
	if(j == 0) return i; else return org_aswing_table_DefaultTableModel.gcd(j,i % j);
};
org_aswing_table_DefaultTableModel.rotate = function(v,a,b,shift) {
	var size = b - a;
	var r = size - shift;
	var g = org_aswing_table_DefaultTableModel.gcd(size,r);
	var _g = 0;
	while(_g < g) {
		var i = _g++;
		var _to = i;
		var tmp = v[a + _to];
		var from = (_to + r) % size;
		while(from != i) {
			v[a + _to] = v[a + from];
			_to = from;
			from = (_to + r) % size;
		}
		v[a + _to] = tmp;
	}
};
org_aswing_table_DefaultTableModel.__super__ = org_aswing_table_AbstractTableModel;
org_aswing_table_DefaultTableModel.prototype = $extend(org_aswing_table_AbstractTableModel.prototype,{
	get_data: function() {
		return this.getData();
	}
	,set_data: function(v) {
		this.setData(v);
		return v;
	}
	,initWithRowcountColumncount: function(rowCount,columnCount) {
		return this.initWithNamesRowcount([],rowCount);
	}
	,initWithNamesRowcount: function(columnNames,rowCount) {
		this.setDataNames([],columnNames);
		return this;
	}
	,initWithDataNames: function(data,columnNames) {
		this.setDataNames(data,columnNames);
		return this;
	}
	,getData: function() {
		return this.dataArray;
	}
	,setData: function(dataArray) {
		this.setDataNames(dataArray,this.columnNames);
	}
	,setDataNames: function(dataArray,columnNames) {
		if(dataArray != null) this.dataArray = dataArray; else this.dataArray = [];
		this.columnNames = org_aswing_table_DefaultTableModel.nonNullArray(columnNames);
		this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,newDataAvailable: function(event) {
		this.fireTableChanged(event);
	}
	,justifyRows: function(from,_to) {
		org_aswing_util_ArrayUtils.setSize(this.dataArray,this.getRowCount());
		var _g = from;
		while(_g < _to) {
			var i = _g++;
			if(this.dataArray[i] == null) this.dataArray[i] = [];
		}
	}
	,newRowsAdded: function(e) {
		this.justifyRows(e.getFirstRow(),e.getLastRow() + 1);
		this.fireTableChanged(e);
	}
	,rowsRemoved: function(e) {
		this.fireTableChanged(e);
	}
	,setNumRows: function(rowCount) {
		var old = this.getRowCount();
		if(old == rowCount) return;
		org_aswing_util_ArrayUtils.setSize(this.dataArray,rowCount);
		if(rowCount <= old) this.fireTableRowsDeleted(rowCount,old - 1); else {
			this.justifyRows(old,rowCount);
			this.fireTableRowsInserted(old,rowCount - 1);
		}
	}
	,setRowCount: function(rowCount) {
		this.setNumRows(rowCount);
	}
	,addRow: function(rowData) {
		this.insertRow(this.getRowCount(),rowData);
	}
	,insertRow: function(row,rowData) {
		this.dataArray.splice(row,0,rowData);
		this.justifyRows(row,row + 1);
		this.fireTableRowsInserted(row,row);
	}
	,moveRow: function(start,end,_to) {
		var shift = _to - start;
		var first;
		var last;
		if(shift < 0) {
			first = _to;
			last = end;
		} else {
			first = start;
			last = _to + end - start;
		}
		org_aswing_table_DefaultTableModel.rotate(this.dataArray,first,last + 1,shift);
		this.fireTableRowsUpdated(first,last);
	}
	,removeRow: function(row) {
		if(row >= 0 && row < this.getRowCount()) {
			this.dataArray.splice(row,1);
			this.fireTableRowsDeleted(row,row);
		}
	}
	,clearRows: function() {
		var length = this.dataArray.length;
		if(length > 0) {
			this.dataArray.splice(0,length);
			this.fireTableRowsDeleted(0,length - 1);
		}
	}
	,setColumnNames: function(columnNames) {
		this.setDataNames(this.dataArray,columnNames);
	}
	,setColumnCount: function(columnCount) {
		org_aswing_util_ArrayUtils.setSize(this.columnNames,columnCount);
		this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,addColumn: function(columnName,columnData) {
		this.columnNames.push(columnName);
		if(columnData != null) {
			var columnSize = columnData.length;
			if(columnSize > this.getRowCount()) org_aswing_util_ArrayUtils.setSize(this.dataArray,columnSize);
			this.justifyRows(0,this.getRowCount());
			var newColumn = this.getColumnCount() - 1;
			var _g = 0;
			while(_g < columnSize) {
				var i = _g++;
				var row = this.dataArray[i];
				row[newColumn] = columnData[i];
			}
		} else this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,getRowCount: function() {
		if(this.dataArray != null) return this.dataArray.length; else return 0;
	}
	,getColumnCount: function() {
		return this.columnNames.length;
	}
	,getColumnName: function(column) {
		var id = null;
		if(column < this.columnNames.length) id = this.columnNames[column];
		if(id == null) return org_aswing_table_AbstractTableModel.prototype.getColumnName.call(this,column); else return id.toString();
	}
	,isCellEditable: function(row,column) {
		if(this.columnsEditable[column] == null) return true; else return this.columnsEditable[column] == true;
	}
	,isColumnEditable: function(column) {
		return this.isCellEditable(0,column);
	}
	,setColumnEditable: function(column,editable) {
		this.columnsEditable[column] = editable;
	}
	,setAllCellEditable: function(editable) {
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.columnsEditable[i] = editable;
		}
	}
	,getValueAt: function(row,column) {
		return this.dataArray[row][column];
	}
	,setValueAt: function(aValue,row,column) {
		this.dataArray[row][column] = aValue;
		this.fireTableCellUpdated(row,column);
	}
	,toString: function() {
		return "DefaultTableModel[dataArray:" + Std.string(this.dataArray) + ",\n names:" + Std.string(this.columnNames) + "]";
	}
	,__class__: org_aswing_table_DefaultTableModel
	,__properties__: {set_data:"set_data",get_data:"get_data"}
});
var org_aswing_table_TableCell = function() { };
$hxClasses["org.aswing.table.TableCell"] = org_aswing_table_TableCell;
org_aswing_table_TableCell.__name__ = ["org","aswing","table","TableCell"];
org_aswing_table_TableCell.__interfaces__ = [org_aswing_Cell];
org_aswing_table_TableCell.prototype = {
	__class__: org_aswing_table_TableCell
};
var org_aswing_table_DefaultTextCell = function() {
	org_aswing_JLabel.call(this);
	this.setHorizontalAlignment(2);
	this.setOpaque(true);
};
$hxClasses["org.aswing.table.DefaultTextCell"] = org_aswing_table_DefaultTextCell;
org_aswing_table_DefaultTextCell.__name__ = ["org","aswing","table","DefaultTextCell"];
org_aswing_table_DefaultTextCell.__interfaces__ = [org_aswing_table_TableCell];
org_aswing_table_DefaultTextCell.__super__ = org_aswing_JLabel;
org_aswing_table_DefaultTextCell.prototype = $extend(org_aswing_JLabel.prototype,{
	setComBounds: function(b) {
		this.readyToPaint = true;
		if(!b.equals(this._bounds)) {
			if(b.width != this._bounds.width || b.height != this._bounds.height) this.repaint();
			this._bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,setCellValue: function(value) {
		this.value = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.value;
	}
	,setTableCellStatus: function(table,isSelected,row,column) {
		if(isSelected) {
			this.setBackground(table.getSelectionBackground());
			this.setForeground(table.getSelectionForeground());
		} else {
			this.setBackground(table.getBackground());
			this.setForeground(table.getForeground());
		}
		this.setFont(table.getFont());
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "TextCell[label:" + org_aswing_JLabel.prototype.toString.call(this) + "]\n";
	}
	,__class__: org_aswing_table_DefaultTextCell
});
var org_aswing_table_DefaultTextHeaderCell = function() {
	org_aswing_table_DefaultTextCell.call(this);
	org_aswing_table_DefaultTextCell.prototype.setHorizontalAlignment.call(this,0);
	org_aswing_table_DefaultTextCell.prototype.setBorder.call(this,org_aswing_UIManager.getBorder("TableHeader.cellBorder"));
	org_aswing_table_DefaultTextCell.prototype.setBackgroundDecorator.call(this,org_aswing_UIManager.getGroundDecorator("TableHeader.cellBackground"));
	org_aswing_table_DefaultTextCell.prototype.setOpaque.call(this,false);
	var f = [];
	f.push(new openfl_filters_DropShadowFilter(1,45,16777215,0.2,1,1,1,1));
	org_aswing_table_DefaultTextCell.prototype.setTextFilters.call(this,f);
};
$hxClasses["org.aswing.table.DefaultTextHeaderCell"] = org_aswing_table_DefaultTextHeaderCell;
org_aswing_table_DefaultTextHeaderCell.__name__ = ["org","aswing","table","DefaultTextHeaderCell"];
org_aswing_table_DefaultTextHeaderCell.__super__ = org_aswing_table_DefaultTextCell;
org_aswing_table_DefaultTextHeaderCell.prototype = $extend(org_aswing_table_DefaultTextCell.prototype,{
	setTableCellStatus: function(table,isSelected,row,column) {
		this.columnIndex = column;
		this.table = table;
		var header = table.getTableHeader();
		if(header != null) {
			org_aswing_table_DefaultTextCell.prototype.setBackground.call(this,header.getBackground());
			org_aswing_table_DefaultTextCell.prototype.setForeground.call(this,header.getForeground());
			org_aswing_table_DefaultTextCell.prototype.setFont.call(this,header.getFont());
		}
	}
	,__class__: org_aswing_table_DefaultTextHeaderCell
});
var org_aswing_table_TableCellFactory = function() { };
$hxClasses["org.aswing.table.TableCellFactory"] = org_aswing_table_TableCellFactory;
org_aswing_table_TableCellFactory.__name__ = ["org","aswing","table","TableCellFactory"];
org_aswing_table_TableCellFactory.prototype = {
	__class__: org_aswing_table_TableCellFactory
};
var org_aswing_table_GeneralTableCellFactory = function(cellClass) {
	this.cellClass = cellClass;
};
$hxClasses["org.aswing.table.GeneralTableCellFactory"] = org_aswing_table_GeneralTableCellFactory;
org_aswing_table_GeneralTableCellFactory.__name__ = ["org","aswing","table","GeneralTableCellFactory"];
org_aswing_table_GeneralTableCellFactory.__interfaces__ = [org_aswing_table_TableCellFactory];
org_aswing_table_GeneralTableCellFactory.prototype = {
	createNewCell: function(isHeader) {
		return org_aswing_AsWingUtils["as"](Type.createInstance(this.cellClass,[]),org_aswing_table_TableCell);
	}
	,toString: function() {
		return "GeneralTableCellFactory[cellClass:" + Std.string(this.cellClass) + "]";
	}
	,__class__: org_aswing_table_GeneralTableCellFactory
};
var org_aswing_table_GeneralTableCellFactoryUIResource = function(cellClass) {
	org_aswing_table_GeneralTableCellFactory.call(this,cellClass);
};
$hxClasses["org.aswing.table.GeneralTableCellFactoryUIResource"] = org_aswing_table_GeneralTableCellFactoryUIResource;
org_aswing_table_GeneralTableCellFactoryUIResource.__name__ = ["org","aswing","table","GeneralTableCellFactoryUIResource"];
org_aswing_table_GeneralTableCellFactoryUIResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_table_GeneralTableCellFactoryUIResource.__super__ = org_aswing_table_GeneralTableCellFactory;
org_aswing_table_GeneralTableCellFactoryUIResource.prototype = $extend(org_aswing_table_GeneralTableCellFactory.prototype,{
	__class__: org_aswing_table_GeneralTableCellFactoryUIResource
});
var org_aswing_table_JTableHeader = function(cm) {
	org_aswing_Container.call(this);
	this.setName("JTableHeader");
	this.setFocusable(false);
	if(cm == null) cm = this.createDefaultColumnModel();
	this.setColumnModel(cm);
	this.initializeLocalVars();
	this.updateUI();
};
$hxClasses["org.aswing.table.JTableHeader"] = org_aswing_table_JTableHeader;
org_aswing_table_JTableHeader.__name__ = ["org","aswing","table","JTableHeader"];
org_aswing_table_JTableHeader.__interfaces__ = [org_aswing_table_TableColumnModelListener];
org_aswing_table_JTableHeader.__super__ = org_aswing_Container;
org_aswing_table_JTableHeader.prototype = $extend(org_aswing_Container.prototype,{
	get_columnModel: function() {
		return this.getColumnModel();
	}
	,set_columnModel: function(v) {
		this.setColumnModel(v);
		return v;
	}
	,get_rowHeight: function() {
		return this.getRowHeight();
	}
	,set_rowHeight: function(v) {
		this.setRowHeight(v);
		return v;
	}
	,updateUI: function() {
		this.setUI(org_aswing_UIManager.getUI(this));
		this.resizeAndRepaint();
		this.invalidate();
	}
	,getDefaultBasicUIClass: function() {
		return org_aswing_plaf_basic_BasicTableHeaderUI;
	}
	,getUIClassID: function() {
		return org_aswing_table_JTableHeader.uiClassID;
	}
	,invalidate: function() {
		if(this.parent == this.getTable()) this.valid = false; else org_aswing_Container.prototype.invalidate.call(this);
	}
	,revalidate: function() {
		if(this.parent == this.getTable()) this.valid = false; else org_aswing_Container.prototype.revalidate.call(this);
	}
	,isValidateRoot: function() {
		return this.parent == this.getTable();
	}
	,repaint: function() {
		if(this.parent == this.getTable()) {
		} else org_aswing_Container.prototype.repaint.call(this);
	}
	,setTable: function(table) {
		this.table = table;
	}
	,getTable: function() {
		return this.table;
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight < 1) {
			haxe_Log.trace("Error : New row height less than 1",{ fileName : "JTableHeader.hx", lineNumber : 151, className : "org.aswing.table.JTableHeader", methodName : "setRowHeight"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("New row height less than 1"));
		}
		this._rowHeight = rowHeight;
		this.resizeAndRepaint();
	}
	,getRowHeight: function() {
		return this._rowHeight;
	}
	,setReorderingAllowed: function(reorderingAllowed) {
		this.reorderingAllowed = reorderingAllowed;
	}
	,getReorderingAllowed: function() {
		return this.reorderingAllowed;
	}
	,setResizingAllowed: function(resizingAllowed) {
		this.resizingAllowed = resizingAllowed;
	}
	,getResizingAllowed: function() {
		return this.resizingAllowed;
	}
	,getResizingColumn: function() {
		return this.resizingColumn;
	}
	,setDefaultRenderer: function(defaultRenderer) {
		this.defaultRenderer = defaultRenderer;
	}
	,getDefaultRenderer: function() {
		return this.defaultRenderer;
	}
	,columnAtPoint: function(point) {
		var x = point.x;
		return this.getColumnModel().getColumnIndexAtX(x);
	}
	,getHeaderRect: function(column) {
		var r = new org_aswing_geom_IntRectangle();
		var cm = this.getColumnModel();
		r.height = this.getHeight();
		if(column < 0) {
		} else if(column >= cm.getColumnCount()) r.x = this.getWidth(); else {
			var _g = 0;
			while(_g < column) {
				var i = _g++;
				r.x += cm.getColumn(i).getWidth();
			}
			r.width = cm.getColumn(column).getWidth();
		}
		return r;
	}
	,setColumnModel: function(columnModel) {
		if(columnModel == null) {
			haxe_Log.trace("Cannot set a null ColumnModel, Ignored",{ fileName : "JTableHeader.hx", lineNumber : 294, className : "org.aswing.table.JTableHeader", methodName : "setColumnModel"});
			return;
		}
		var old = this._columnModel;
		if(columnModel != old) {
			if(old != null) old.removeColumnModelListener(this);
			this._columnModel = columnModel;
			columnModel.addColumnModelListener(this);
			this.resizeAndRepaint();
		}
	}
	,getColumnModel: function() {
		return this._columnModel;
	}
	,columnAdded: function(e) {
		this.resizeAndRepaint();
	}
	,columnRemoved: function(e) {
		this.resizeAndRepaint();
	}
	,columnMoved: function(e) {
		this.repaint();
	}
	,columnMarginChanged: function(source) {
		this.resizeAndRepaint();
	}
	,columnSelectionChanged: function(source,firstIndex,lastIndex,programmatic) {
	}
	,createDefaultColumnModel: function() {
		return new org_aswing_table_DefaultTableColumnModel();
	}
	,createDefaultRenderer: function() {
		return new org_aswing_table_GeneralTableCellFactoryUIResource(org_aswing_table_DefaultTextHeaderCell);
	}
	,initializeLocalVars: function() {
		this.setOpaque(true);
		this.setRowHeight(24);
		this.table = null;
		this.reorderingAllowed = true;
		this.resizingAllowed = true;
		this.resizingColumn = null;
		this.setDefaultRenderer(this.createDefaultRenderer());
	}
	,resizeAndRepaint: function() {
		this.revalidate();
		this.repaint();
	}
	,setResizingColumn: function(aColumn) {
		this.resizingColumn = aColumn;
	}
	,__class__: org_aswing_table_JTableHeader
	,__properties__: $extend(org_aswing_Container.prototype.__properties__,{set_rowHeight:"set_rowHeight",get_rowHeight:"get_rowHeight",set_columnModel:"set_columnModel",get_columnModel:"get_columnModel"})
});
var org_aswing_table_PoorTextCell = function() {
	org_aswing_Component.call(this);
	this.setOpaque(true);
	this.textField = new openfl_text_TextField();
	this.textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	this.textField.set_selectable(false);
	this.textField.mouseEnabled = false;
	this.setFontValidated(false);
	this.addChild(this.textField);
};
$hxClasses["org.aswing.table.PoorTextCell"] = org_aswing_table_PoorTextCell;
org_aswing_table_PoorTextCell.__name__ = ["org","aswing","table","PoorTextCell"];
org_aswing_table_PoorTextCell.__interfaces__ = [org_aswing_table_TableCell];
org_aswing_table_PoorTextCell.__super__ = org_aswing_Component;
org_aswing_table_PoorTextCell.prototype = $extend(org_aswing_Component.prototype,{
	paint: function(b) {
		var t;
		if(this.text == null) t = ""; else t = this.text;
		if(this.textField.get_text() != t) this.textField.set_text(t);
		if(!this.isFontValidated()) {
			org_aswing_AsWingUtils.applyTextFont(this.textField,this.getFont());
			this.setFontValidated(true);
		}
		org_aswing_AsWingUtils.applyTextColor(this.textField,this.getForeground());
		this.textField.set_x(b.x + 10);
		this.textField.set_y(b.y + (b.height - this.textField.get_textHeight()) / 2);
		if(this.isOpaque()) {
			this.get_graphics().clear();
			var g = new org_aswing_graphics_Graphics2D(this.get_graphics());
			g.fillRectangle(new org_aswing_graphics_SolidBrush(this.getBackground()),b.x,b.y,b.width,b.height);
		}
	}
	,setComBounds: function(b) {
		this.readyToPaint = true;
		if(!b.equals(this._bounds)) {
			if(b.width != this._bounds.width || b.height != this._bounds.height) this.repaint();
			this._bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,setText: function(text) {
		if(text != this.text) {
			this.text = text;
			this.repaint();
		}
	}
	,getText: function() {
		return this.text;
	}
	,setTableCellStatus: function(table,isSelected,row,column) {
		if(isSelected) {
			this.setBackground(table.getSelectionBackground());
			this.setForeground(table.getSelectionForeground());
		} else {
			this.setBackground(table.getBackground());
			this.setForeground(table.getForeground());
		}
		this.setFont(table.getFont());
	}
	,setCellValue: function(value) {
		this.cellValue = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.cellValue;
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "PoorTextCell[component:" + org_aswing_Component.prototype.toString.call(this) + "]\n";
	}
	,__class__: org_aswing_table_PoorTextCell
});
var org_aswing_table_PropertyTableModel = function(listModel,names,properties,translators) {
	org_aswing_table_AbstractTableModel.call(this);
	this.setList(listModel);
	if(null != names) this._names = names.slice(); else this._names = [];
	if(null != properties) this._properties = properties.slice(); else this._properties = [];
	if(null != translators) this.translators = translators.slice(); else this.translators = [];
	this._columnsEditable = [];
};
$hxClasses["org.aswing.table.PropertyTableModel"] = org_aswing_table_PropertyTableModel;
org_aswing_table_PropertyTableModel.__name__ = ["org","aswing","table","PropertyTableModel"];
org_aswing_table_PropertyTableModel.__interfaces__ = [org_aswing_event_ListDataListener];
org_aswing_table_PropertyTableModel.__super__ = org_aswing_table_AbstractTableModel;
org_aswing_table_PropertyTableModel.prototype = $extend(org_aswing_table_AbstractTableModel.prototype,{
	get_list: function() {
		return this.getList();
	}
	,set_list: function(v) {
		this.setList(v);
		return v;
	}
	,get_names: function() {
		return this._names;
	}
	,set_names: function(v) {
		this._names = v;
		this.fireTableStructureChanged();
		return v;
	}
	,get_properties: function() {
		return this._properties;
	}
	,set_properties: function(v) {
		this._properties = v;
		this.fireTableStructureChanged();
		return v;
	}
	,get_columnsEditable: function() {
		return this._columnsEditable;
	}
	,set_columnsEditable: function(v) {
		this._columnsEditable = v;
		this.fireTableStructureChanged();
		return v;
	}
	,setList: function(listModel) {
		if(this._list != null) this._list.removeListDataListener(this);
		this._list = listModel;
		if(this._list != null) this._list.addListDataListener(this);
		this.fireTableDataChanged();
	}
	,getList: function() {
		return this._list;
	}
	,getProperties: function() {
		return this._properties.slice();
	}
	,getRowCount: function() {
		if(this._list != null) return this._list.getSize(); else return 0;
	}
	,getColumnCount: function() {
		return this._names.length;
	}
	,getValueAt: function(rowIndex,columnIndex) {
		var translator = this.translators[columnIndex];
		var info = this._list.getElementAt(rowIndex);
		var key = this._properties[columnIndex];
		if(translator != null) {
			if(Reflect.isFunction(translator)) return translator(info,key); else if(js_Boot.__instanceof(translator,org_aswing_table_PropertyTranslator)) return (js_Boot.__instanceof(translator,org_aswing_table_PropertyTranslator)?translator:null).translate(info,key); else throw new js__$Boot_HaxeError(new org_aswing_error_Error("Translator must be a PropertyTranslator or a Function : " + Std.string(translator)));
		} else {
			if(key == ".") return info;
			return Reflect.field(info,key);
		}
	}
	,getColumnName: function(column) {
		return this._names[column];
	}
	,isCellEditable: function(row,column) {
		if(this._columnsEditable[column] == null) return true; else return this._columnsEditable[column] == true;
	}
	,isColumnEditable: function(column) {
		return this.isCellEditable(0,column);
	}
	,setColumnEditable: function(column,editable) {
		this._columnsEditable[column] = editable;
	}
	,setAllCellEditable: function(editable) {
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var i = _g1++;
			this._columnsEditable[i] = editable;
		}
	}
	,setValueAt: function(aValue,rowIndex,columnIndex) {
		var info = this._list.getElementAt(rowIndex);
		var key = this._properties[columnIndex];
		info[key] = aValue;
		this.fireTableCellUpdated(rowIndex,columnIndex);
	}
	,intervalAdded: function(e) {
		this.fireTableRowsInserted(e.getIndex0(),e.getIndex1());
	}
	,intervalRemoved: function(e) {
		this.fireTableRowsDeleted(e.getIndex0(),e.getIndex1());
	}
	,contentsChanged: function(e) {
		this.fireTableRowsUpdated(e.getIndex0(),e.getIndex1());
	}
	,__class__: org_aswing_table_PropertyTableModel
	,__properties__: {set_columnsEditable:"set_columnsEditable",get_columnsEditable:"get_columnsEditable",set_properties:"set_properties",get_properties:"get_properties",set_names:"set_names",get_names:"get_names",set_list:"set_list",get_list:"get_list"}
});
var org_aswing_table_PropertyTranslator = function() { };
$hxClasses["org.aswing.table.PropertyTranslator"] = org_aswing_table_PropertyTranslator;
org_aswing_table_PropertyTranslator.__name__ = ["org","aswing","table","PropertyTranslator"];
org_aswing_table_PropertyTranslator.prototype = {
	__class__: org_aswing_table_PropertyTranslator
};
var org_aswing_table_Resizable2 = function() { };
$hxClasses["org.aswing.table.Resizable2"] = org_aswing_table_Resizable2;
org_aswing_table_Resizable2.__name__ = ["org","aswing","table","Resizable2"];
org_aswing_table_Resizable2.prototype = {
	__class__: org_aswing_table_Resizable2
};
var org_aswing_table_Resizable2Imp1 = function(r,flag) {
	this.r = r;
	this.flag = flag;
};
$hxClasses["org.aswing.table.Resizable2Imp1"] = org_aswing_table_Resizable2Imp1;
org_aswing_table_Resizable2Imp1.__name__ = ["org","aswing","table","Resizable2Imp1"];
org_aswing_table_Resizable2Imp1.__interfaces__ = [org_aswing_table_Resizable2];
org_aswing_table_Resizable2Imp1.prototype = {
	getElementCount: function() {
		return this.r.getElementCount();
	}
	,getLowerBoundAt: function(i) {
		if(this.flag) return this.r.getLowerBoundAt(i); else return this.r.getMidPointAt(i);
	}
	,getUpperBoundAt: function(i) {
		if(this.flag) return this.r.getMidPointAt(i); else return this.r.getUpperBoundAt(i);
	}
	,setSizeAt: function(newSize,i) {
		this.r.setSizeAt(newSize,i);
	}
	,__class__: org_aswing_table_Resizable2Imp1
};
var org_aswing_table_Resizable3 = function() { };
$hxClasses["org.aswing.table.Resizable3"] = org_aswing_table_Resizable3;
org_aswing_table_Resizable3.__name__ = ["org","aswing","table","Resizable3"];
org_aswing_table_Resizable3.__interfaces__ = [org_aswing_table_Resizable2];
org_aswing_table_Resizable3.prototype = {
	__class__: org_aswing_table_Resizable3
};
var org_aswing_table_Resizable3Imp1 = function(cm,inverse) {
	this.cm = cm;
	this.inverse = inverse;
};
$hxClasses["org.aswing.table.Resizable3Imp1"] = org_aswing_table_Resizable3Imp1;
org_aswing_table_Resizable3Imp1.__name__ = ["org","aswing","table","Resizable3Imp1"];
org_aswing_table_Resizable3Imp1.__interfaces__ = [org_aswing_table_Resizable3];
org_aswing_table_Resizable3Imp1.prototype = {
	getElementCount: function() {
		return this.cm.getColumnCount();
	}
	,getLowerBoundAt: function(i) {
		return this.cm.getColumn(i).getMinWidth();
	}
	,getUpperBoundAt: function(i) {
		return this.cm.getColumn(i).getMaxWidth();
	}
	,getMidPointAt: function(i) {
		if(this.inverse != true) return this.cm.getColumn(i).getPreferredWidth(); else return this.cm.getColumn(i).getWidth();
	}
	,setSizeAt: function(s,i) {
		if(this.inverse != true) this.cm.getColumn(i).setWidth(s); else this.cm.getColumn(i).setPreferredWidth(s);
	}
	,__class__: org_aswing_table_Resizable3Imp1
};
var org_aswing_table_Resizable3Imp2 = function(cm,start,end) {
	this.cm = cm;
	this.start = start;
	this.end = end;
};
$hxClasses["org.aswing.table.Resizable3Imp2"] = org_aswing_table_Resizable3Imp2;
org_aswing_table_Resizable3Imp2.__name__ = ["org","aswing","table","Resizable3Imp2"];
org_aswing_table_Resizable3Imp2.__interfaces__ = [org_aswing_table_Resizable3];
org_aswing_table_Resizable3Imp2.prototype = {
	getElementCount: function() {
		return this.end - this.start;
	}
	,getLowerBoundAt: function(i) {
		return this.cm.getColumn(i + this.start).getMinWidth();
	}
	,getUpperBoundAt: function(i) {
		return this.cm.getColumn(i + this.start).getMaxWidth();
	}
	,getMidPointAt: function(i) {
		return this.cm.getColumn(i + this.start).getWidth();
	}
	,setSizeAt: function(s,i) {
		this.cm.getColumn(i + this.start).setWidth(s);
	}
	,__class__: org_aswing_table_Resizable3Imp2
};
var org_aswing_table_TableColumn = function(modelIndex,width,cellRenderer,cellEditor) {
	if(width == null) width = 75;
	if(modelIndex == null) modelIndex = 0;
	this._modelIndex = modelIndex;
	this._width = width;
	this._preferredWidth = width;
	this.cellRenderer = cellRenderer;
	this.cellEditor = cellEditor;
	this._minWidth = 17;
	this._maxWidth = 100000;
	this._isResizable = true;
	this._headerValue = null;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.table.TableColumn"] = org_aswing_table_TableColumn;
org_aswing_table_TableColumn.__name__ = ["org","aswing","table","TableColumn"];
org_aswing_table_TableColumn.__super__ = openfl_events_EventDispatcher;
org_aswing_table_TableColumn.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_modelIndex: function() {
		return this.getModelIndex();
	}
	,set_modelIndex: function(v) {
		this.setModelIndex(v);
		return v;
	}
	,get_width: function() {
		return this.getWidth();
	}
	,set_width: function(v) {
		this.setWidth(v);
		return v;
	}
	,get_minWidth: function() {
		return this.getMinWidth();
	}
	,set_minWidth: function(v) {
		this.setMinWidth(v);
		return v;
	}
	,get_preferredWidth: function() {
		return this.getPreferredWidth();
	}
	,set_preferredWidth: function(v) {
		this.setPreferredWidth(v);
		return v;
	}
	,get_maxWidth: function() {
		return this.getMaxWidth();
	}
	,set_maxWidth: function(v) {
		this.setMaxWidth(v);
		return v;
	}
	,get_headerValue: function() {
		return this.getHeaderValue();
	}
	,set_headerValue: function(v) {
		this.setHeaderValue(v);
		return v;
	}
	,get_isResizable: function() {
		return this.getResizable();
	}
	,set_isResizable: function(v) {
		this.setResizable(v);
		return v;
	}
	,firePropertyChangeIfReallyChanged: function(propertyName,oldValue,newValue) {
		if(oldValue != newValue) this.dispatchEvent(new org_aswing_event_PropertyChangeEvent(propertyName,oldValue,newValue));
	}
	,setModelIndex: function(modelIndex) {
		var old = this._modelIndex;
		this._modelIndex = modelIndex;
		this.firePropertyChangeIfReallyChanged("modelIndex",old,modelIndex);
	}
	,getModelIndex: function() {
		return this._modelIndex;
	}
	,setIdentifier: function(identifier) {
		var old = this.identifier;
		this.identifier = identifier;
		this.firePropertyChangeIfReallyChanged("identifier",old,identifier);
	}
	,getIdentifier: function() {
		if(this.identifier != null) return this.identifier; else return this.getHeaderValue();
	}
	,setHeaderValue: function(headerValue) {
		var old = this._headerValue;
		this._headerValue = headerValue;
		this.firePropertyChangeIfReallyChanged("headerValue",old,headerValue);
	}
	,getHeaderValue: function() {
		return this._headerValue;
	}
	,setHeaderCellFactory: function(headerRenderer) {
		var old = this.headerRenderer;
		this.headerRenderer = headerRenderer;
		this.firePropertyChangeIfReallyChanged("headerRenderer",old,headerRenderer);
	}
	,getHeaderCellFactory: function() {
		return this.headerRenderer;
	}
	,setCellFactory: function(cellRenderer) {
		var old = this.cellRenderer;
		this.cellRenderer = cellRenderer;
		this.firePropertyChangeIfReallyChanged("cellRenderer",old,cellRenderer);
	}
	,getCellFactory: function() {
		return this.cellRenderer;
	}
	,setCellEditor: function(cellEditor) {
		var old = this.cellEditor;
		this.cellEditor = cellEditor;
		this.firePropertyChangeIfReallyChanged("cellEditor",old,cellEditor);
	}
	,getCellEditor: function() {
		return this.cellEditor;
	}
	,setWidth: function(width) {
		var old = this._width;
		this._width = Std["int"](Math.min(Math.max(width,this._minWidth),this._maxWidth));
		this.firePropertyChangeIfReallyChanged("width",old,this._width);
	}
	,getWidth: function() {
		return this._width;
	}
	,setPreferredWidth: function(preferredWidth) {
		var old = this._preferredWidth;
		this._preferredWidth = Std["int"](Math.min(Math.max(preferredWidth,this._minWidth),this._maxWidth));
		this.firePropertyChangeIfReallyChanged("preferredWidth",old,this._preferredWidth);
	}
	,getPreferredWidth: function() {
		return this._preferredWidth;
	}
	,setMinWidth: function(minWidth) {
		var old = this._minWidth;
		this._minWidth = Std["int"](Math.max(minWidth,0));
		if(this._width < minWidth) this.setWidth(minWidth);
		if(this._preferredWidth < minWidth) this.setPreferredWidth(minWidth);
		this.firePropertyChangeIfReallyChanged("minWidth",old,this._minWidth);
	}
	,getMinWidth: function() {
		return this._minWidth;
	}
	,setMaxWidth: function(maxWidth) {
		var old = this._maxWidth;
		this._maxWidth = Std["int"](Math.max(this._minWidth,maxWidth));
		if(this._width > maxWidth) this.setWidth(maxWidth);
		if(this._preferredWidth > maxWidth) this.setPreferredWidth(maxWidth);
		this.firePropertyChangeIfReallyChanged("maxWidth",old,this._maxWidth);
	}
	,getMaxWidth: function() {
		return this._maxWidth;
	}
	,setResizable: function(isResizable) {
		var old = this._isResizable;
		this._isResizable = isResizable;
		this.firePropertyChangeIfReallyChanged("isResizable",old,this._isResizable);
	}
	,getResizable: function() {
		return this._isResizable;
	}
	,sizeWidthToFit: function() {
		if(this.headerRenderer == null) return;
		var cell = this.headerRenderer.createNewCell(true);
		cell.setCellValue(this.getHeaderValue());
		var c = cell.getCellComponent();
		this.setMinWidth(c.getMinimumSize().width);
		this.setMaxWidth(c.getMaximumSize().width);
		this.setPreferredWidth(c.getPreferredSize().width);
		this.setWidth(this.getPreferredWidth());
	}
	,addPropertyChangeListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("propertyChange",listener,false,priority,useWeakReference);
	}
	,removePropertyChangeListener: function(listener) {
		this.removeEventListener("propertyChange",listener);
	}
	,createDefaultHeaderRenderer: function() {
		var factory = new org_aswing_table_GeneralTableCellFactoryUIResource(org_aswing_table_DefaultTextCell);
		return factory;
	}
	,__class__: org_aswing_table_TableColumn
	,__properties__: {set_isResizable:"set_isResizable",get_isResizable:"get_isResizable",set_headerValue:"set_headerValue",get_headerValue:"get_headerValue",set_maxWidth:"set_maxWidth",get_maxWidth:"get_maxWidth",set_preferredWidth:"set_preferredWidth",get_preferredWidth:"get_preferredWidth",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_width:"set_width",get_width:"get_width",set_modelIndex:"set_modelIndex",get_modelIndex:"get_modelIndex"}
});
var org_aswing_table_TableColumnModelEvent = function(source,from,_to) {
	org_aswing_event_ModelEvent.call(this,source);
	this.fromIndex = from;
	this.toIndex = _to;
};
$hxClasses["org.aswing.table.TableColumnModelEvent"] = org_aswing_table_TableColumnModelEvent;
org_aswing_table_TableColumnModelEvent.__name__ = ["org","aswing","table","TableColumnModelEvent"];
org_aswing_table_TableColumnModelEvent.__super__ = org_aswing_event_ModelEvent;
org_aswing_table_TableColumnModelEvent.prototype = $extend(org_aswing_event_ModelEvent.prototype,{
	getFromIndex: function() {
		return this.fromIndex;
	}
	,getToIndex: function() {
		return this.toIndex;
	}
	,__class__: org_aswing_table_TableColumnModelEvent
});
var org_aswing_table_sorter_Arrow = function(descending,size) {
	this.shape = new openfl_display_Shape();
	if(descending) this.arrow = Math.PI / 2; else this.arrow = -Math.PI / 2;
	this.width = size;
};
$hxClasses["org.aswing.table.sorter.Arrow"] = org_aswing_table_sorter_Arrow;
org_aswing_table_sorter_Arrow.__name__ = ["org","aswing","table","sorter","Arrow"];
org_aswing_table_sorter_Arrow.__interfaces__ = [org_aswing_Icon];
org_aswing_table_sorter_Arrow.prototype = {
	getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org_aswing_graphics_Graphics2D(this.shape.get_graphics());
		var center = new openfl_geom_Point(x,c.getHeight() / 2);
		var w = this.width;
		var ps1 = [];
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		if(js_Boot.__instanceof(c,org_aswing_AbstractButton)) {
			var b;
			b = js_Boot.__instanceof(c,org_aswing_AbstractButton)?c:null;
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var hue = cl.getHue();
			var offHue = hue + 0.21;
			if(offHue > 1) offHue = offHue - 1;
			if(offHue < 0) offHue = offHue + 1;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,-0.06,-0.03);
				adjuster = adjuster.sharpen(0.4);
				cl = cl.offsetHLS(0,-0.10,-0.10);
			} else if(isPressing) {
				adjuster = adjuster.sharpen(0.8);
				cl = cl.offsetHLS(offHue - hue,-0.06,0);
			} else if(model.isRollOver()) cl = cl.offsetHLS(offHue - hue,0.1,0.3);
		}
		style = new org_aswing_StyleResult(cl,adjuster);
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(w + 1,w + 1,0.333333333333333315 * Math.PI,x + w / 8 - 0.5,y + w / 8 - 0.5);
		var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.RADIAL,[style.clight.getRGB(),style.cdark.getRGB()],[style.clight.getAlpha(),style.cdark.getAlpha()],[0,255],matrix);
		g.fillPolygon(brush,ps1);
	}
	,nextPoint: function(p,dir,dis) {
		return new openfl_geom_Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org_aswing_table_sorter_Arrow
};
var org_aswing_table_sorter_Directive = function(column,direction) {
	this.column = column;
	this.direction = direction;
};
$hxClasses["org.aswing.table.sorter.Directive"] = org_aswing_table_sorter_Directive;
org_aswing_table_sorter_Directive.__name__ = ["org","aswing","table","sorter","Directive"];
org_aswing_table_sorter_Directive.prototype = {
	__class__: org_aswing_table_sorter_Directive
};
var org_aswing_table_sorter_Row = function(tableSorter,index) {
	this.tableSorter = tableSorter;
	this.modelIndex = index;
};
$hxClasses["org.aswing.table.sorter.Row"] = org_aswing_table_sorter_Row;
org_aswing_table_sorter_Row.__name__ = ["org","aswing","table","sorter","Row"];
org_aswing_table_sorter_Row.prototype = {
	compareTo: function(o) {
		var row1 = this.modelIndex;
		var row2;
		row2 = (js_Boot.__instanceof(o,org_aswing_table_sorter_Row)?o:null).modelIndex;
		var sortingColumns = this.tableSorter.getSortingColumns();
		var tableModel = this.tableSorter.getTableModel();
		var _g1 = 0;
		var _g = sortingColumns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var directive = org_aswing_AsWingUtils["as"](sortingColumns[i],org_aswing_table_sorter_Directive);
			var column = directive.column;
			var o1 = tableModel.getValueAt(row1,column);
			var o2 = tableModel.getValueAt(row2,column);
			var comparison = 0;
			if(o1 == null && o2 == null) comparison = 0; else if(o1 == null) comparison = -1; else if(o2 == null) comparison = 1; else {
				var comparator = this.tableSorter.getComparator(column);
				comparison = comparator(o1,o2);
			}
			if(comparison != 0) if(directive.direction == -1) return -comparison; else return comparison;
		}
		return 0;
	}
	,getModelIndex: function() {
		return this.modelIndex;
	}
	,__class__: org_aswing_table_sorter_Row
};
var org_aswing_table_sorter_SortableHeaderRenderer = function(originalRenderer,tableSorter) {
	this.originalRenderer = originalRenderer;
	this.tableSorter = tableSorter;
};
$hxClasses["org.aswing.table.sorter.SortableHeaderRenderer"] = org_aswing_table_sorter_SortableHeaderRenderer;
org_aswing_table_sorter_SortableHeaderRenderer.__name__ = ["org","aswing","table","sorter","SortableHeaderRenderer"];
org_aswing_table_sorter_SortableHeaderRenderer.__interfaces__ = [org_aswing_table_TableCellFactory];
org_aswing_table_sorter_SortableHeaderRenderer.prototype = {
	createNewCell: function(isHeader) {
		return new org_aswing_table_sorter_SortableTextHeaderCell(this.tableSorter);
	}
	,getTableCellFactory: function() {
		return null;
	}
	,__class__: org_aswing_table_sorter_SortableHeaderRenderer
};
var org_aswing_table_sorter_SortableTextHeaderCell = function(tableSorter) {
	org_aswing_table_DefaultTextHeaderCell.call(this);
	this.setBorder(org_aswing_UIManager.getBorder("TableHeader.sortableCellBorder"));
	this.setBackgroundDecorator(org_aswing_UIManager.getGroundDecorator("TableHeader.sortableCellBackground"));
	this.tableSorter = tableSorter;
	this.setHorizontalTextPosition(2);
	this.setIconTextGap(6);
	this.setMideground(null);
	this.setStyleTune(null);
};
$hxClasses["org.aswing.table.sorter.SortableTextHeaderCell"] = org_aswing_table_sorter_SortableTextHeaderCell;
org_aswing_table_sorter_SortableTextHeaderCell.__name__ = ["org","aswing","table","sorter","SortableTextHeaderCell"];
org_aswing_table_sorter_SortableTextHeaderCell.__super__ = org_aswing_table_DefaultTextHeaderCell;
org_aswing_table_sorter_SortableTextHeaderCell.prototype = $extend(org_aswing_table_DefaultTextHeaderCell.prototype,{
	setTableCellStatus: function(table,isSelected,row,column) {
		org_aswing_table_DefaultTextHeaderCell.prototype.setTableCellStatus.call(this,table,isSelected,row,column);
		var modelColumn = table.convertColumnIndexToModel(column);
		this.setIcon(this.tableSorter.getHeaderRendererIcon(modelColumn,this.getFont().getSize() - 2));
	}
	,__class__: org_aswing_table_sorter_SortableTextHeaderCell
});
var org_aswing_table_sorter_TableSorter = function(tableModel,tableHeader) {
	org_aswing_table_AbstractTableModel.call(this);
	this.initStatics();
	this.columnComparators = new haxe_ds_StringMap();
	this.sortingColumns = [];
	this._columnSortables = [];
	this.tableModelListener = this;
	this.setTableHeader(tableHeader);
	this.setTableModel(tableModel);
};
$hxClasses["org.aswing.table.sorter.TableSorter"] = org_aswing_table_sorter_TableSorter;
org_aswing_table_sorter_TableSorter.__name__ = ["org","aswing","table","sorter","TableSorter"];
org_aswing_table_sorter_TableSorter.__interfaces__ = [org_aswing_event_TableModelListener];
org_aswing_table_sorter_TableSorter.EMPTY_DIRECTIVE = null;
org_aswing_table_sorter_TableSorter.NUMBER_COMAPRATOR = null;
org_aswing_table_sorter_TableSorter.LEXICAL_COMPARATOR = null;
org_aswing_table_sorter_TableSorter.__super__ = org_aswing_table_AbstractTableModel;
org_aswing_table_sorter_TableSorter.prototype = $extend(org_aswing_table_AbstractTableModel.prototype,{
	get_tableModel: function() {
		return this.getTableModel();
	}
	,set_tableModel: function(v) {
		this.setTableModel(v);
		return v;
	}
	,get_columnSortables: function() {
		return this._columnSortables;
	}
	,set_columnSortables: function(v) {
		this._columnSortables = v;
		var _g1 = 0;
		var _g = this._columnSortables.length;
		while(_g1 < _g) {
			var column = _g1++;
			if(!this._columnSortables[column] && this.getSortingStatus(column) != 0) this.setSortingStatus(column,0);
		}
		this.fireTableStructureChanged();
		return v;
	}
	,get_tableHeader: function() {
		return this.getTableHeader();
	}
	,set_tableHeader: function(v) {
		this.setTableHeader(v);
		return v;
	}
	,initStatics: function() {
		if(org_aswing_table_sorter_TableSorter.inited != true) {
			org_aswing_table_sorter_TableSorter.EMPTY_DIRECTIVE = new org_aswing_table_sorter_Directive(-1,0);
			org_aswing_table_sorter_TableSorter.NUMBER_COMAPRATOR = function(o1,o2) {
				o1 = Std.parseFloat(o1);
				o2 = Std.parseFloat(o2);
				if(o1 == o2) return 0; else if(o1 > o2) return 1; else return -1;
			};
			org_aswing_table_sorter_TableSorter.LEXICAL_COMPARATOR = function(o11,o21) {
				o11 = o11.toString();
				o21 = o21.toString();
				if(o11 == o21) return 0; else if(o11 > o21) return 1; else return -1;
			};
			org_aswing_table_sorter_TableSorter.inited = true;
		}
	}
	,clearSortingState: function() {
		this.viewToModel = null;
		this.modelToView = null;
	}
	,getTableModel: function() {
		return this._tableModel;
	}
	,setTableModel: function(tableModel) {
		if(this._tableModel != null) this._tableModel.removeTableModelListener(this.tableModelListener);
		this._tableModel = tableModel;
		if(this._tableModel != null) this._tableModel.addTableModelListener(this.tableModelListener);
		this.clearSortingState();
		this.fireTableStructureChanged();
	}
	,getTableHeader: function() {
		return this._tableHeader;
	}
	,setTableHeader: function(tableHeader) {
		if(this._tableHeader != null) {
			this._tableHeader.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__mousePress));
			this._tableHeader.removeEventListener("release",$bind(this,this.__mouseRelease));
			var defaultRenderer = this._tableHeader.getDefaultRenderer();
			if(js_Boot.__instanceof(defaultRenderer,org_aswing_table_sorter_SortableHeaderRenderer)) this._tableHeader.setDefaultRenderer((js_Boot.__instanceof(defaultRenderer,org_aswing_table_sorter_SortableHeaderRenderer)?defaultRenderer:null).getTableCellFactory());
		}
		this._tableHeader = tableHeader;
		if(this._tableHeader != null) {
			this._tableHeader.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.__mousePress));
			this._tableHeader.addEventListener("release",$bind(this,this.__mouseRelease));
			new org_aswing_table_sorter_SortableHeaderRenderer(this._tableHeader.getDefaultRenderer(),this);
			this._tableHeader.setDefaultRenderer(new org_aswing_table_sorter_SortableHeaderRenderer(this._tableHeader.getDefaultRenderer(),this));
		}
	}
	,isSorting: function() {
		return this.sortingColumns.length != 0;
	}
	,getSortingColumns: function() {
		return this.sortingColumns;
	}
	,setColumnSortable: function(column,sortable) {
		if(this.isColumnSortable(column) != sortable) {
			this._columnSortables[column] = sortable;
			if(!sortable && this.getSortingStatus(column) != 0) this.setSortingStatus(column,0);
		}
	}
	,isColumnSortable: function(column) {
		return this._columnSortables[column] != false;
	}
	,getDirective: function(column) {
		var _g1 = 0;
		var _g = this.sortingColumns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var directive = org_aswing_AsWingUtils["as"](this.sortingColumns[i],org_aswing_table_sorter_Directive);
			if(directive.column == column) return directive;
		}
		return org_aswing_table_sorter_TableSorter.EMPTY_DIRECTIVE;
	}
	,getSortingStatus: function(column) {
		return Std["int"](this.getDirective(column).direction);
	}
	,sortingStatusChanged: function() {
		this.clearSortingState();
		this.fireTableDataChanged();
		if(this._tableHeader != null) this._tableHeader.repaint();
	}
	,setSortingStatus: function(column,status) {
		var directive = this.getDirective(column);
		if(directive != org_aswing_table_sorter_TableSorter.EMPTY_DIRECTIVE) org_aswing_util_ArrayUtils.removeFromArray(this.sortingColumns,directive);
		if(status != 0) this.sortingColumns.push(new org_aswing_table_sorter_Directive(column,status));
		this.sortingStatusChanged();
	}
	,getHeaderRendererIcon: function(column,size) {
		var directive = this.getDirective(column);
		if(directive == org_aswing_table_sorter_TableSorter.EMPTY_DIRECTIVE) return null;
		return new org_aswing_table_sorter_Arrow(directive.direction == -1,size);
	}
	,cancelSorting: function() {
		this.sortingColumns.splice(0,this.sortingColumns.length);
		this.sortingStatusChanged();
	}
	,setColumnComparator: function(columnClass,comparator) {
		if(comparator == null) this.columnComparators.remove(columnClass); else this.columnComparators.set(columnClass,comparator);
	}
	,getComparator: function(column) {
		var columnType = this._tableModel.getColumnClass(column);
		var comparator = this.columnComparators.get(columnType);
		if(comparator != null) return comparator;
		if(columnType == "Number") return org_aswing_table_sorter_TableSorter.NUMBER_COMAPRATOR; else return org_aswing_table_sorter_TableSorter.LEXICAL_COMPARATOR;
	}
	,getViewToModel: function() {
		if(this.viewToModel == null) {
			var tableModelRowCount = this._tableModel.getRowCount();
			this.viewToModel = [];
			var _g = 0;
			while(_g < tableModelRowCount) {
				var row = _g++;
				this.viewToModel[row] = new org_aswing_table_sorter_Row(this,row);
			}
			if(this.isSorting()) this.viewToModel.sort($bind(this,this.sortImp));
		}
		return this.viewToModel;
	}
	,sortImp: function(row1,row2) {
		return row1.compareTo(row2);
	}
	,modelIndex: function(viewIndex) {
		return this.getViewToModel()[viewIndex].getModelIndex();
	}
	,viewIndex: function(modelIndex) {
		return this.getModelToView()[modelIndex];
	}
	,getModelToView: function() {
		if(this.modelToView == null) {
			var n = this.getViewToModel().length;
			this.modelToView = [];
			var _g = 0;
			while(_g < n) {
				var i = _g++;
				this.modelToView[this.modelIndex(i)] = i;
			}
		}
		return this.modelToView;
	}
	,getRowCount: function() {
		if(this._tableModel == null) return 0; else return this._tableModel.getRowCount();
	}
	,getColumnCount: function() {
		if(this._tableModel == null) return 0; else return this._tableModel.getColumnCount();
	}
	,getColumnName: function(column) {
		return this._tableModel.getColumnName(column);
	}
	,getColumnClass: function(column) {
		return this._tableModel.getColumnClass(column);
	}
	,isCellEditable: function(row,column) {
		return this._tableModel.isCellEditable(this.modelIndex(row),column);
	}
	,getValueAt: function(row,column) {
		return this._tableModel.getValueAt(this.modelIndex(row),column);
	}
	,setValueAt: function(aValue,row,column) {
		this._tableModel.setValueAt(aValue,this.modelIndex(row),column);
	}
	,tableChanged: function(e) {
		if(!this.isSorting()) {
			this.clearSortingState();
			this.fireTableChanged(e);
			return;
		}
		if(e.getFirstRow() == -1) {
			this.cancelSorting();
			this.fireTableChanged(e);
			return;
		}
		var column = e.getColumn();
		if(e.getFirstRow() == e.getLastRow() && column != -1 && this.getSortingStatus(column) == 0 && this.modelToView != null) {
			var viewIndex = this.getModelToView()[e.getFirstRow()];
			this.fireTableChanged(new org_aswing_event_TableModelEvent(this,viewIndex,viewIndex,column,e.getType()));
			return;
		}
		this.clearSortingState();
		this.fireTableDataChanged();
		return;
	}
	,__mousePress: function(e) {
		var header = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_table_JTableHeader);
		this.pressedPoint = header.getMousePosition();
	}
	,__mouseRelease: function(e) {
		if(e.isReleasedOutSide()) return;
		var h = org_aswing_AsWingUtils["as"](e.currentTarget,org_aswing_table_JTableHeader);
		var point = h.getMousePosition();
		if(!point.equals(this.pressedPoint)) return;
		var columnModel = h.getColumnModel();
		var viewColumn = columnModel.getColumnIndexAtX(h.getMousePosition().x);
		if(viewColumn == -1) return;
		var column = columnModel.getColumn(viewColumn).getModelIndex();
		if(column != -1 && this.isColumnSortable(column)) {
			var status = this.getSortingStatus(column);
			if(e.ctrlKey != true) this.cancelSorting();
			status = this.nextSortingStatus(status,e.shiftKey);
			this.setSortingStatus(column,status);
		}
	}
	,nextSortingStatus: function(curStatus,shiftKey) {
		var status = curStatus;
		status = status + (shiftKey?-1:1);
		status = (status + 4) % 3 - 1;
		return status;
	}
	,__class__: org_aswing_table_sorter_TableSorter
	,__properties__: {set_tableHeader:"set_tableHeader",get_tableHeader:"get_tableHeader",set_columnSortables:"set_columnSortables",get_columnSortables:"get_columnSortables",set_tableModel:"set_tableModel",get_tableModel:"get_tableModel"}
});
var org_aswing_tree_RowMapper = function() { };
$hxClasses["org.aswing.tree.RowMapper"] = org_aswing_tree_RowMapper;
org_aswing_tree_RowMapper.__name__ = ["org","aswing","tree","RowMapper"];
org_aswing_tree_RowMapper.prototype = {
	__class__: org_aswing_tree_RowMapper
};
var org_aswing_tree_AbstractLayoutCache = function() {
};
$hxClasses["org.aswing.tree.AbstractLayoutCache"] = org_aswing_tree_AbstractLayoutCache;
org_aswing_tree_AbstractLayoutCache.__name__ = ["org","aswing","tree","AbstractLayoutCache"];
org_aswing_tree_AbstractLayoutCache.__interfaces__ = [org_aswing_tree_RowMapper];
org_aswing_tree_AbstractLayoutCache.prototype = {
	setNodeDimensions: function(nd) {
		this.nodeDimensions = nd;
	}
	,getNodeDimensions: function() {
		return this.nodeDimensions;
	}
	,setModel: function(newModel) {
		this.treeModel = newModel;
	}
	,getModel: function() {
		return this.treeModel;
	}
	,setRootVisible: function(rootVisible) {
		this.rootVisible = rootVisible;
	}
	,isRootVisible: function() {
		return this.rootVisible;
	}
	,setRowHeight: function(rowHeight) {
		this.rowHeight = rowHeight;
	}
	,getRowHeight: function() {
		return this.rowHeight;
	}
	,setSelectionModel: function(newLSM) {
		if(this.treeSelectionModel != null) this.treeSelectionModel.setRowMapper(null);
		this.treeSelectionModel = newLSM;
		if(this.treeSelectionModel != null) this.treeSelectionModel.setRowMapper(this);
	}
	,getSelectionModel: function() {
		return this.treeSelectionModel;
	}
	,getPreferredHeight: function() {
		var rowCount = this.getRowCount();
		if(rowCount > 0) {
			var bounds = this.getBounds(this.getPathForRow(rowCount - 1),null);
			if(bounds != null) return bounds.y + bounds.height;
		}
		return 0;
	}
	,getPreferredWidth: function(bounds) {
		var rowCount = this.getRowCount();
		if(rowCount > 0) {
			var firstPath;
			var endY;
			if(bounds == null) {
				firstPath = this.getPathForRow(0);
				endY = 2147483647;
			} else {
				firstPath = this.getPathClosestTo(bounds.x,bounds.y);
				endY = bounds.height + bounds.y;
			}
			var paths = this.getVisiblePathsFrom(firstPath,2147483647);
			var pn = paths.length;
			if(paths != null && pn > 0) {
				var pBounds = this.getBounds(org_aswing_AsWingUtils["as"](paths[0],org_aswing_tree_TreePath),null);
				var width;
				if(pBounds != null) {
					width = pBounds.x + pBounds.width;
					if(pBounds.y >= endY) return width;
				} else width = 0;
				var i = 1;
				while(pBounds != null && i < pn) {
					pBounds = this.getBounds(org_aswing_AsWingUtils["as"](paths[i],org_aswing_tree_TreePath),pBounds);
					if(pBounds != null && pBounds.y < endY) width = Std["int"](Math.max(width,pBounds.x + pBounds.width)); else pBounds = null;
					i++;
				}
				return width;
			}
		}
		return 0;
	}
	,isExpanded: function(path) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return false;
	}
	,getBounds: function(path,placeIn) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getPathForRow: function(row) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getRowForPath: function(path) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return 0;
	}
	,getRowContainingYLocation: function(location) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return 0;
	}
	,getPathClosestTo: function(x,y) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getVisiblePathsFrom: function(path,totalCount) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return null;
	}
	,getVisibleChildCount: function(path) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return 0;
	}
	,setExpandedState: function(path,isExpanded) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,getExpandedState: function(path) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return false;
	}
	,getRowCount: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
		return 0;
	}
	,invalidateSizes: function() {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,invalidatePathBounds: function(path) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,treeNodesChanged: function(e) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,treeNodesInserted: function(e) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,treeNodesRemoved: function(e) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,treeStructureChanged: function(e) {
		throw new js__$Boot_HaxeError(new org_aswing_error_ImpMissError());
	}
	,getRowsForPaths: function(paths) {
		if(paths == null) return null;
		var numPaths = paths.length;
		var rows = [];
		var _g = 0;
		while(_g < numPaths) {
			var counter = _g++;
			rows[counter] = this.getRowForPath(paths[counter]);
		}
		return rows;
	}
	,countNodeDimensions: function(value,row,depth,expanded,placeIn) {
		var nd = this.getNodeDimensions();
		if(nd != null) return nd.countNodeDimensions(value,row,depth,expanded,placeIn);
		return null;
	}
	,__class__: org_aswing_tree_AbstractLayoutCache
};
var org_aswing_tree_TreeNode = function() { };
$hxClasses["org.aswing.tree.TreeNode"] = org_aswing_tree_TreeNode;
org_aswing_tree_TreeNode.__name__ = ["org","aswing","tree","TreeNode"];
org_aswing_tree_TreeNode.prototype = {
	__class__: org_aswing_tree_TreeNode
};
var org_aswing_tree_MutableTreeNode = function() { };
$hxClasses["org.aswing.tree.MutableTreeNode"] = org_aswing_tree_MutableTreeNode;
org_aswing_tree_MutableTreeNode.__name__ = ["org","aswing","tree","MutableTreeNode"];
org_aswing_tree_MutableTreeNode.__interfaces__ = [org_aswing_tree_TreeNode];
org_aswing_tree_MutableTreeNode.prototype = {
	__class__: org_aswing_tree_MutableTreeNode
};
var org_aswing_tree_DefaultMutableTreeNode = function(userObject,allowsChildren) {
	if(allowsChildren == null) allowsChildren = true;
	org_aswing_tree_DefaultMutableTreeNode.AWML_INDEX++;
	this.awmlIndex = org_aswing_tree_DefaultMutableTreeNode.AWML_INDEX;
	this._parent = null;
	this.allowsChildren = allowsChildren;
	this.userObject = userObject;
};
$hxClasses["org.aswing.tree.DefaultMutableTreeNode"] = org_aswing_tree_DefaultMutableTreeNode;
org_aswing_tree_DefaultMutableTreeNode.__name__ = ["org","aswing","tree","DefaultMutableTreeNode"];
org_aswing_tree_DefaultMutableTreeNode.__interfaces__ = [org_aswing_tree_MutableTreeNode];
org_aswing_tree_DefaultMutableTreeNode.prototype = {
	get_parent: function() {
		return this.getParent();
	}
	,set_parent: function(v) {
		this.setParent(v);
		return v;
	}
	,get_content: function() {
		return this.getUserObject();
	}
	,set_content: function(v) {
		this.setUserObject(v);
		return v;
	}
	,getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,insert: function(newChild,childIndex) {
		if(this.allowsChildren == false) {
			haxe_Log.trace("Error : node does not allow children",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 111, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "insert"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("node does not allow children"));
		} else if(newChild == null) {
			haxe_Log.trace("Error : new child is null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 114, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "insert"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("new child is null"));
		} else if(this.isNodeAncestor(newChild)) {
			haxe_Log.trace("Error : new child is an ancestor",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 117, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "insert"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("new child is an ancestor"));
		}
		var oldParent = org_aswing_AsWingUtils["as"](newChild.getParent(),org_aswing_tree_MutableTreeNode);
		if(oldParent != null) oldParent.remove(newChild);
		newChild.setParent(this);
		if(this._children == null) this._children = new org_aswing_util_ArrayList();
		this._children.append(newChild,childIndex);
	}
	,removeAt: function(childIndex) {
		var child = org_aswing_AsWingUtils["as"](this.getChildAt(childIndex),org_aswing_tree_MutableTreeNode);
		if(child != null) {
			this._children.removeAt(childIndex);
			child.setParent(null);
		}
	}
	,setParent: function(newParent) {
		this._parent = newParent;
	}
	,getParent: function() {
		return this._parent;
	}
	,getChildAt: function(index) {
		if(this._children == null) {
			haxe_Log.trace("Error : node has no children",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 184, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getChildAt"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("node has no children"));
		}
		return org_aswing_AsWingUtils["as"](this._children.get(index),org_aswing_tree_TreeNode);
	}
	,getChildCount: function() {
		if(this._children == null) return 0; else return this._children.size();
	}
	,getIndex: function(aChild) {
		if(!this.isNodeChild(aChild)) return -1;
		return this.childrenIndexOf(aChild);
	}
	,childrenIndexOf: function(aChild) {
		var _g1 = 0;
		var _g = this._children.size();
		while(_g1 < _g) {
			var i = _g1++;
			if(this._children.get(i).getAwmlIndex() == aChild.getAwmlIndex()) return i;
		}
		return -1;
	}
	,children: function() {
		if(this._children == null) return []; else return this._children.toArray();
	}
	,setAllowsChildren: function(allows) {
		if(allows != this.allowsChildren) {
			this.allowsChildren = allows;
			if(this.allowsChildren != true) this.removeAllChildren();
		}
	}
	,getAllowsChildren: function() {
		return this.allowsChildren;
	}
	,setUserObject: function(userObject) {
		this.userObject = userObject;
	}
	,getUserObject: function() {
		return this.userObject;
	}
	,removeFromParent: function() {
		var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_MutableTreeNode);
		if(parent != null) parent.remove(this);
	}
	,remove: function(aChild) {
		if(!this.isNodeChild(aChild)) {
			haxe_Log.trace("argument is not a child",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 323, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "remove"});
			return;
		}
		this.removeAt(this.getIndex(aChild));
	}
	,removeAllChildren: function() {
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.removeAt(i);
		}
	}
	,append: function(newChild) {
		if(newChild != null && newChild.getParent() == this) this.insert(newChild,this.getChildCount() - 1); else this.insert(newChild,this.getChildCount());
	}
	,isNodeAncestor: function(anotherNode) {
		if(anotherNode == null) return false;
		var ancestor = this;
		do if(ancestor == anotherNode) return true; while((ancestor = ancestor.getParent()) != null);
		return false;
	}
	,isNodeDescendant: function(anotherNode) {
		if(anotherNode == null) return false;
		return anotherNode.isNodeAncestor(this);
	}
	,getSharedAncestor: function(aNode) {
		if(aNode == this) return this; else if(aNode == null) return null;
		var level1;
		var level2;
		var diff;
		var node1;
		var node2;
		level1 = this.getLevel();
		level2 = aNode.getLevel();
		if(level2 > level1) {
			diff = level2 - level1;
			node1 = aNode;
			node2 = this;
		} else {
			diff = level1 - level2;
			node1 = this;
			node2 = aNode;
		}
		while(diff > 0) {
			node1 = node1.getParent();
			diff--;
		}
		do {
			if(node1 == node2) return node1;
			node1 = node1.getParent();
			node2 = node2.getParent();
		} while(node1 != null);
		if(node1 != null || node2 != null) {
			haxe_Log.trace("Error : nodes should be null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 465, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getSharedAncestor"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("nodes should be null"));
		}
		return null;
	}
	,isNodeRelated: function(aNode) {
		return aNode != null && this.getRoot() == aNode.getRoot();
	}
	,getDepth: function() {
		var last = null;
		var enum_ = this.breadthFirstEnumeration();
		last = enum_[enum_.length - 1];
		if(last == null) {
			haxe_Log.trace("Error : nodes should be null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 504, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getDepth"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("nodes should be null"));
		}
		return (js_Boot.__instanceof(last,org_aswing_tree_DefaultMutableTreeNode)?last:null).getLevel() - this.getLevel();
	}
	,getLevel: function() {
		var ancestor;
		var levels = 0;
		ancestor = this;
		while((ancestor = ancestor.getParent()) != null) levels++;
		return levels;
	}
	,getPath: function() {
		return this.getPathToRoot(this,0);
	}
	,getPathToRoot: function(aNode,depth) {
		var retNodes;
		if(aNode == null) {
			if(depth == 0) return null; else retNodes = [];
		} else {
			depth++;
			retNodes = this.getPathToRoot(aNode.getParent(),depth);
			retNodes[retNodes.length - depth] = aNode;
		}
		return retNodes;
	}
	,getUserObjectPath: function() {
		var realPath = this.getPath();
		var retPath = [];
		var _g1 = 0;
		var _g = realPath.length;
		while(_g1 < _g) {
			var counter = _g1++;
			retPath[counter] = org_aswing_AsWingUtils["as"](realPath[counter],org_aswing_tree_DefaultMutableTreeNode).getUserObject();
		}
		return retPath;
	}
	,getRoot: function() {
		var ancestor = this;
		var previous;
		do {
			previous = ancestor;
			ancestor = ancestor.getParent();
		} while(ancestor != null);
		return previous;
	}
	,isRoot: function() {
		return this.getParent() == null;
	}
	,getNextNode: function() {
		if(this.getChildCount() == 0) {
			var nextSibling = this.getNextSibling();
			if(nextSibling == null) {
				var aNode = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
				do {
					if(aNode == null) return null;
					nextSibling = aNode.getNextSibling();
					if(nextSibling != null) return nextSibling;
					aNode = org_aswing_AsWingUtils["as"](aNode.getParent(),org_aswing_tree_DefaultMutableTreeNode);
				} while(true);
				return null;
			} else return nextSibling;
		} else return org_aswing_AsWingUtils["as"](this.getChildAt(0),org_aswing_tree_DefaultMutableTreeNode);
	}
	,getPreviousNode: function() {
		var previousSibling;
		var myParent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
		if(myParent == null) return null;
		previousSibling = this.getPreviousSibling();
		if(previousSibling != null) {
			if(previousSibling.getChildCount() == 0) return previousSibling; else return previousSibling.getLastLeaf();
		} else return myParent;
	}
	,preorderEnumeration: function() {
		var arr = [];
		this.fillPreorder(this,arr);
		return arr;
	}
	,fillPreorder: function(node,arr) {
		arr.push(node);
		var cd = node.children();
		if(cd != null && cd.length > 0) {
			var _g1 = 0;
			var _g = cd.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.fillPreorder(cd[i],arr);
			}
		}
	}
	,postorderEnumeration: function() {
		var arr = [];
		this.fillPostorder(this,arr);
		return arr;
	}
	,fillPostorder: function(node,arr) {
		var cd = node.children();
		if(cd != null && cd.length > 0) {
			var _g1 = 0;
			var _g = cd.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.fillPostorder(cd[i],arr);
			}
		} else arr.push(node);
	}
	,breadthFirstEnumeration: function() {
		var arr = [];
		var queue = [];
		queue.push(this);
		while(queue.length > 0) {
			var node = org_aswing_AsWingUtils["as"](queue.shift(),org_aswing_tree_TreeNode);
			arr.push(node);
			var cd = node.children();
			if(cd != null && cd.length > 0) {
				var _g1 = 0;
				var _g = cd.length;
				while(_g1 < _g) {
					var i = _g1++;
					queue.push(cd[i]);
				}
			}
		}
		return arr;
	}
	,depthFirstEnumeration: function() {
		return this.postorderEnumeration();
	}
	,pathFromAncestorEnumeration: function(ancestor) {
		var descendant = this;
		if(ancestor == null || descendant == null) {
			haxe_Log.trace("Error : argument is null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 815, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "pathFromAncestorEnumeration"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("argument is null"));
		}
		var current;
		var stack = [];
		stack.push(descendant);
		current = descendant;
		while(current != ancestor) {
			current = current.getParent();
			if(current == null && descendant != ancestor) {
				haxe_Log.trace("Error : " + "node " + Std.string(ancestor) + " is not an ancestor of " + Std.string(descendant),{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 828, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "pathFromAncestorEnumeration"});
				throw new js__$Boot_HaxeError(new org_aswing_error_Error("node " + Std.string(ancestor) + " is not an ancestor of " + Std.string(descendant)));
			}
			stack.push(current);
		}
		stack.reverse();
		return stack;
	}
	,isNodeChild: function(aNode) {
		var retval;
		if(aNode == null) retval = false; else if(this.getChildCount() == 0) retval = false; else retval = aNode.getParent() == this;
		return retval;
	}
	,getFirstChild: function() {
		if(this.getChildCount() == 0) return null;
		return this.getChildAt(0);
	}
	,getLastChild: function() {
		if(this.getChildCount() == 0) return null;
		return this.getChildAt(this.getChildCount() - 1);
	}
	,getChildAfter: function(aChild) {
		if(aChild == null) {
			haxe_Log.trace("Error : argument is null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 906, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getChildAfter"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("argument is null"));
		}
		var index = this.getIndex(aChild);
		if(index == -1) {
			haxe_Log.trace("Error : node is not a child",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 913, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getChildAfter"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("node is not a child"));
		}
		if(index < this.getChildCount() - 1) return this.getChildAt(index + 1); else return null;
	}
	,getChildBefore: function(aChild) {
		if(aChild == null) {
			haxe_Log.trace("Error : argument is null",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 939, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getChildBefore"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("argument is null"));
		}
		var index = this.getIndex(aChild);
		if(index == -1) {
			haxe_Log.trace("Error : node is not a child",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 946, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getChildBefore"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("node is not a child"));
		}
		if(index > 0) return this.getChildAt(index - 1); else return null;
	}
	,isNodeSibling: function(anotherNode) {
		var retval = false;
		if(anotherNode == null) retval = false; else if(anotherNode == this) retval = true; else {
			var myParent = this.getParent();
			retval = myParent != null && myParent == anotherNode.getParent();
			var mp = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
			if(retval && !mp.isNodeChild(anotherNode)) {
				haxe_Log.trace("Error : sibling has different parent",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 984, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "isNodeSibling"});
				throw new js__$Boot_HaxeError(new org_aswing_error_Error("sibling has different parent"));
			}
		}
		return retval;
	}
	,getSiblingCount: function() {
		var myParent = this.getParent();
		if(myParent == null) return 1; else return myParent.getChildCount();
	}
	,getNextSibling: function() {
		var retval;
		var myParent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
		if(myParent == null) retval = null; else retval = org_aswing_AsWingUtils["as"](myParent.getChildAfter(this),org_aswing_tree_DefaultMutableTreeNode);
		if(retval != null && !this.isNodeSibling(retval)) {
			haxe_Log.trace("Error : child of parent is not a sibling",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 1033, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getNextSibling"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("child of parent is not a sibling"));
		}
		return retval;
	}
	,getPreviousSibling: function() {
		var retval;
		var myParent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
		if(myParent == null) retval = null; else retval = org_aswing_AsWingUtils["as"](myParent.getChildBefore(this),org_aswing_tree_DefaultMutableTreeNode);
		if(retval != null && !this.isNodeSibling(retval)) {
			haxe_Log.trace("Error : child of parent is not a sibling",{ fileName : "DefaultMutableTreeNode.hx", lineNumber : 1061, className : "org.aswing.tree.DefaultMutableTreeNode", methodName : "getPreviousSibling"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("child of parent is not a sibling"));
		}
		return retval;
	}
	,isLeaf: function() {
		return this.getChildCount() == 0;
	}
	,getFirstLeaf: function() {
		var node = this;
		while(!node.isLeaf()) node = org_aswing_AsWingUtils["as"](node.getFirstChild(),org_aswing_tree_DefaultMutableTreeNode);
		return node;
	}
	,getLastLeaf: function() {
		var node = this;
		while(!node.isLeaf()) node = org_aswing_AsWingUtils["as"](node.getLastChild(),org_aswing_tree_DefaultMutableTreeNode);
		return node;
	}
	,getNextLeaf: function() {
		var nextSibling;
		var myParent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
		if(myParent == null) return null;
		nextSibling = this.getNextSibling();
		if(nextSibling != null) return nextSibling.getFirstLeaf();
		return myParent.getNextLeaf();
	}
	,getPreviousLeaf: function() {
		var previousSibling;
		var myParent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_DefaultMutableTreeNode);
		if(myParent == null) return null;
		previousSibling = this.getPreviousSibling();
		if(previousSibling != null) return previousSibling.getLastLeaf();
		return myParent.getPreviousLeaf();
	}
	,getLeafCount: function() {
		var count = 0;
		var node;
		var enum_ = this.breadthFirstEnumeration();
		var _g1 = 0;
		var _g = enum_.length;
		while(_g1 < _g) {
			var i = _g1++;
			node = org_aswing_AsWingUtils["as"](enum_[i],org_aswing_tree_TreeNode);
			if(node.isLeaf()) count++;
		}
		if(count < 1) throw new js__$Boot_HaxeError(new org_aswing_error_Error("tree has zero leaves"));
		return count;
	}
	,toString: function() {
		if(this.userObject == null) return null; else return this.userObject.toString();
	}
	,__class__: org_aswing_tree_DefaultMutableTreeNode
	,__properties__: {set_content:"set_content",get_content:"get_content",set_parent:"set_parent",get_parent:"get_parent"}
};
var org_aswing_tree_TreeCell = function() { };
$hxClasses["org.aswing.tree.TreeCell"] = org_aswing_tree_TreeCell;
org_aswing_tree_TreeCell.__name__ = ["org","aswing","tree","TreeCell"];
org_aswing_tree_TreeCell.__interfaces__ = [org_aswing_Cell];
org_aswing_tree_TreeCell.prototype = {
	__class__: org_aswing_tree_TreeCell
};
var org_aswing_tree_DefaultTreeCell = function() {
	org_aswing_JLabel.call(this);
	this.setHorizontalAlignment(2);
	this.setOpaque(true);
};
$hxClasses["org.aswing.tree.DefaultTreeCell"] = org_aswing_tree_DefaultTreeCell;
org_aswing_tree_DefaultTreeCell.__name__ = ["org","aswing","tree","DefaultTreeCell"];
org_aswing_tree_DefaultTreeCell.__interfaces__ = [org_aswing_tree_TreeCell];
org_aswing_tree_DefaultTreeCell.__super__ = org_aswing_JLabel;
org_aswing_tree_DefaultTreeCell.prototype = $extend(org_aswing_JLabel.prototype,{
	setComBounds: function(b) {
		if(!b.equals(this._bounds)) {
			this._bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.clearPreferSizeCaches();
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,repaint: function() {
	}
	,getExpandedFolderIcon: function() {
		return this.expanded_folder_icon;
	}
	,getCollapsedFolderIcon: function() {
		return this.collapsed_folder_icon;
	}
	,getLeafIcon: function() {
		return this.leaf_icon;
	}
	,createExpandedFolderIcon: function(tree) {
		return tree.getUI().getIcon("Tree.folderExpandedIcon");
	}
	,createCollapsedFolderIcon: function(tree) {
		return tree.getUI().getIcon("Tree.folderCollapsedIcon");
	}
	,createLeafIcon: function(tree) {
		return tree.getUI().getIcon("Tree.leafIcon");
	}
	,setCellValue: function(value) {
		this.readyToPaint = true;
		this.value = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.value;
	}
	,setTreeCellStatus: function(tree,selected,expanded,leaf,row) {
		if(this.expanded_folder_icon == null) {
			this.expanded_folder_icon = this.createExpandedFolderIcon(tree);
			this.getUI().putDefault("Tree.folderExpandedImage",tree.getUI().getDefault("Tree.folderExpandedImage"));
		}
		if(this.collapsed_folder_icon == null) {
			this.collapsed_folder_icon = this.createCollapsedFolderIcon(tree);
			this.getUI().putDefault("Tree.folderCollapsedImage",tree.getUI().getDefault("Tree.folderCollapsedImage"));
		}
		if(this.leaf_icon == null) {
			this.leaf_icon = this.createLeafIcon(tree);
			this.getUI().putDefault("Tree.leafImage",tree.getUI().getDefault("Tree.leafImage"));
		}
		if(selected) {
			this.setBackground(tree.getSelectionBackground());
			this.setForeground(tree.getSelectionForeground());
		} else {
			this.setBackground(tree.getBackground());
			this.setForeground(tree.getForeground());
		}
		this.setFont(tree.getFont());
		if(leaf) this.setIcon(this.getLeafIcon()); else if(expanded) this.setIcon(this.getExpandedFolderIcon()); else this.setIcon(this.getCollapsedFolderIcon());
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "TreeCell[label:" + org_aswing_JLabel.prototype.toString.call(this) + "]\n";
	}
	,__class__: org_aswing_tree_DefaultTreeCell
});
var org_aswing_tree_TreeModel = function() { };
$hxClasses["org.aswing.tree.TreeModel"] = org_aswing_tree_TreeModel;
org_aswing_tree_TreeModel.__name__ = ["org","aswing","tree","TreeModel"];
org_aswing_tree_TreeModel.prototype = {
	__class__: org_aswing_tree_TreeModel
};
var org_aswing_tree_DefaultTreeModel = function(root,asc) {
	if(asc == null) asc = false;
	this._root = root;
	this._asksAllowsChildren = asc;
	this.listenerList = [];
};
$hxClasses["org.aswing.tree.DefaultTreeModel"] = org_aswing_tree_DefaultTreeModel;
org_aswing_tree_DefaultTreeModel.__name__ = ["org","aswing","tree","DefaultTreeModel"];
org_aswing_tree_DefaultTreeModel.__interfaces__ = [org_aswing_tree_TreeModel];
org_aswing_tree_DefaultTreeModel.prototype = {
	get_root: function() {
		return this.getRoot();
	}
	,set_root: function(v) {
		this.setRoot(v);
		return v;
	}
	,setAsksAllowsChildren: function(newValue) {
		this._asksAllowsChildren = newValue;
	}
	,asksAllowsChildren: function() {
		return this._asksAllowsChildren;
	}
	,setRoot: function(root) {
		var oldRoot = this._root;
		this._root = root;
		if(root == null && oldRoot != null) this.fireTreeStructureChanged2(this,null); else this.nodeStructureChanged(root);
	}
	,getRoot: function() {
		return this._root;
	}
	,getIndexOfChild: function(parent,child) {
		if(parent == null || child == null) return -1;
		return (js_Boot.__instanceof(parent,org_aswing_tree_TreeNode)?parent:null).getIndex(js_Boot.__instanceof(child,org_aswing_tree_TreeNode)?child:null);
	}
	,getChild: function(parent,index) {
		return (js_Boot.__instanceof(parent,org_aswing_tree_TreeNode)?parent:null).getChildAt(index);
	}
	,getChildCount: function(parent) {
		return (js_Boot.__instanceof(parent,org_aswing_tree_TreeNode)?parent:null).getChildCount();
	}
	,isLeaf: function(node) {
		if(this.asksAllowsChildren()) return !(js_Boot.__instanceof(node,org_aswing_tree_TreeNode)?node:null).getAllowsChildren();
		return (js_Boot.__instanceof(node,org_aswing_tree_TreeNode)?node:null).isLeaf();
	}
	,valueForPathChanged: function(path,newValue) {
		var aNode = org_aswing_AsWingUtils["as"](path.getLastPathComponent(),org_aswing_tree_MutableTreeNode);
		aNode.setUserObject(newValue);
		this.nodeChanged(aNode);
	}
	,insertNodeInto: function(newChild,parent,index) {
		parent.insert(newChild,index);
		this.nodesWereInserted(parent,[index]);
	}
	,removeNodeFromParent: function(node) {
		var parent = org_aswing_AsWingUtils["as"](node.getParent(),org_aswing_tree_MutableTreeNode);
		if(parent == null) {
			haxe_Log.trace("Error : node does not have a parent.",{ fileName : "DefaultTreeModel.hx", lineNumber : 208, className : "org.aswing.tree.DefaultTreeModel", methodName : "removeNodeFromParent"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("node does not have a parent."));
		}
		var childIndex = [parent.getIndex(node)];
		parent.removeAt(childIndex[0]);
		var removedArray = [node];
		this.nodesWereRemoved(parent,childIndex,removedArray);
	}
	,nodeChanged: function(node) {
		if(this.listenerList != null && node != null) {
			var parent = node.getParent();
			if(parent != null) {
				var anIndex = parent.getIndex(node);
				if(anIndex != -1) this.nodesChanged(parent,[anIndex]);
			} else if(node == this.getRoot()) this.nodesChanged(node,null);
		}
	}
	,reload: function(node) {
		if(node == null) node = this._root;
		if(node != null) this.fireTreeStructureChanged(this,this.getPathToRoot(node),null,null);
	}
	,nodesWereInserted: function(node,childIndices) {
		if(this.listenerList != null && node != null && childIndices != null && childIndices.length > 0) {
			var cCount = childIndices.length;
			var newChildren = [];
			var _g = 0;
			while(_g < cCount) {
				var counter = _g++;
				newChildren[counter] = node.getChildAt(childIndices[counter]);
			}
			this.fireTreeNodesInserted(this,this.getPathToRoot(node),childIndices,newChildren);
		}
	}
	,nodesWereRemoved: function(node,childIndices,removedChildren) {
		if(node != null && childIndices != null) this.fireTreeNodesRemoved(this,this.getPathToRoot(node),childIndices,removedChildren);
	}
	,nodesChanged: function(node,childIndices) {
		if(node != null) {
			if(childIndices != null) {
				var cCount = childIndices.length;
				if(cCount > 0) {
					var cChildren = [];
					var _g = 0;
					while(_g < cCount) {
						var counter = _g++;
						cChildren[counter] = node.getChildAt(childIndices[counter]);
					}
					this.fireTreeNodesChanged(this,this.getPathToRoot(node),childIndices,cChildren);
				}
			} else if(node == this.getRoot()) this.fireTreeNodesChanged(this,this.getPathToRoot(node),null,null);
		}
	}
	,nodeStructureChanged: function(node) {
		if(node != null) this.fireTreeStructureChanged(this,this.getPathToRoot(node),null,null);
	}
	,getPathToRoot: function(aNode,depth) {
		if(depth == null) depth = 0;
		var retNodes;
		if(aNode == null) {
			if(depth == 0) return null; else retNodes = [];
		} else {
			depth++;
			if(aNode == this._root) retNodes = []; else retNodes = this.getPathToRoot(aNode.getParent(),depth);
			retNodes[retNodes.length - depth] = aNode;
		}
		return retNodes;
	}
	,addTreeModelListener: function(l) {
		this.listenerList.push(l);
	}
	,removeTreeModelListener: function(l) {
		org_aswing_util_ArrayUtils.removeFromArray(this.listenerList,l);
	}
	,fireTreeNodesChanged: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org_aswing_event_TreeModelEvent(source,new org_aswing_tree_TreePath(path),childIndices,children);
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_event_TreeModelListener);
			lis.treeNodesChanged(e);
		}
	}
	,fireTreeNodesInserted: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org_aswing_event_TreeModelEvent(source,new org_aswing_tree_TreePath(path),childIndices,children);
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_event_TreeModelListener);
			lis.treeNodesInserted(e);
		}
	}
	,fireTreeNodesRemoved: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org_aswing_event_TreeModelEvent(source,new org_aswing_tree_TreePath(path),childIndices,children);
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_event_TreeModelListener);
			lis.treeNodesRemoved(e);
		}
	}
	,fireTreeStructureChanged: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org_aswing_event_TreeModelEvent(source,new org_aswing_tree_TreePath(path),childIndices,children);
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_event_TreeModelListener);
			lis.treeStructureChanged(e);
		}
	}
	,fireTreeStructureChanged2: function(source,path) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org_aswing_event_TreeModelEvent(source,path);
			var lis = org_aswing_AsWingUtils["as"](listeners[i],org_aswing_event_TreeModelListener);
			lis.treeStructureChanged(e);
		}
	}
	,toString: function() {
		return "DefaultTreeModel[root:" + Std.string(this._root) + "]";
	}
	,__class__: org_aswing_tree_DefaultTreeModel
	,__properties__: {set_root:"set_root",get_root:"get_root"}
};
var org_aswing_tree_TreeSelectionModel = function() { };
$hxClasses["org.aswing.tree.TreeSelectionModel"] = org_aswing_tree_TreeSelectionModel;
org_aswing_tree_TreeSelectionModel.__name__ = ["org","aswing","tree","TreeSelectionModel"];
org_aswing_tree_TreeSelectionModel.prototype = {
	__class__: org_aswing_tree_TreeSelectionModel
};
var org_aswing_tree_DefaultTreeSelectionModel = function() {
	this.listSelectionModel = new org_aswing_DefaultListSelectionModel();
	this.selectionMode = 4;
	this.leadIndex = this.leadRow = -1;
	this.uniquePaths = new org_aswing_tree_TreePathMap();
	this.lastPaths = new org_aswing_tree_TreePathMap();
	this.tempPaths = [];
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["org.aswing.tree.DefaultTreeSelectionModel"] = org_aswing_tree_DefaultTreeSelectionModel;
org_aswing_tree_DefaultTreeSelectionModel.__name__ = ["org","aswing","tree","DefaultTreeSelectionModel"];
org_aswing_tree_DefaultTreeSelectionModel.__interfaces__ = [org_aswing_tree_TreeSelectionModel];
org_aswing_tree_DefaultTreeSelectionModel.__super__ = openfl_events_EventDispatcher;
org_aswing_tree_DefaultTreeSelectionModel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	setRowMapper: function(newMapper) {
		this.rowMapper = newMapper;
		this.resetRowSelection();
	}
	,getRowMapper: function() {
		return this.rowMapper;
	}
	,setSelectionMode: function(mode) {
		var oldMode = this.selectionMode;
		this.selectionMode = mode;
		if(this.selectionMode != 1 && this.selectionMode != 2 && this.selectionMode != 4) this.selectionMode = 4;
		if(oldMode != this.selectionMode) this.firePropertyChange("selectionMode",oldMode,this.selectionMode);
	}
	,firePropertyChange: function(name,oldValue,newValue) {
		this.dispatchEvent(new org_aswing_event_PropertyChangeEvent(name,oldValue,newValue));
	}
	,getSelectionMode: function() {
		return this.selectionMode;
	}
	,setSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path == null) this.setSelectionPaths(null,programmatic); else this.setSelectionPaths([path],programmatic);
	}
	,setSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
		var newCount;
		var newCounter;
		var oldCount;
		var oldCounter;
		var paths = pPaths;
		if(paths == null) newCount = 0; else newCount = paths.length;
		if(this.selection == null) oldCount = 0; else oldCount = this.selection.length;
		if(newCount + oldCount != 0) {
			if(this.selectionMode == 1) {
				if(newCount > 1) {
					paths = [pPaths[0]];
					newCount = 1;
				}
			} else if(this.selectionMode == 2) {
				if(newCount > 0 && !this.arePathsContiguous(paths)) {
					paths = [pPaths[0]];
					newCount = 1;
				}
			}
			var validCount = 0;
			var beginLeadPath = this.leadPath;
			var cPaths = new org_aswing_util_ArrayList();
			var path;
			this.lastPaths.clear();
			this.leadPath = null;
			var _g = 0;
			while(_g < newCount) {
				var newCounter1 = _g++;
				path = paths[newCounter1];
				if(path != null && this.lastPaths.get(path) == null) {
					validCount++;
					this.lastPaths.put(path,true);
					if(this.uniquePaths.get(path) == null) cPaths.append(new org_aswing_tree_PathPlaceHolder(path,true));
					this.leadPath = path;
				}
			}
			var newSelection;
			if(validCount == 0) newSelection = null; else if(validCount != newCount) {
				newSelection = [];
				validCount = 0;
				var $it0 = this.lastPaths.keys();
				while( $it0.hasNext() ) {
					var key = $it0.next();
					newSelection[validCount++] = key;
				}
			} else newSelection = paths.slice();
			var _g1 = 0;
			while(_g1 < oldCount) {
				var oldCounter1 = _g1++;
				path = this.selection[oldCounter1];
				if(path != null && this.lastPaths.get(path) == null) cPaths.append(new org_aswing_tree_PathPlaceHolder(path,false));
			}
			this.selection = newSelection;
			var tempHT = this.uniquePaths;
			this.uniquePaths = this.lastPaths;
			this.lastPaths = tempHT;
			this.lastPaths.clear();
			if(this.selection != null) this.insureUniqueness();
			this.updateLeadIndex();
			this.resetRowSelection();
			if(cPaths.size() > 0) this.notifyPathChange(cPaths,beginLeadPath,programmatic);
		}
	}
	,addSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path != null) this.addSelectionPaths([path],programmatic);
	}
	,addSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		var newPathLength;
		if(paths == null) newPathLength = 0; else newPathLength = paths.length;
		if(newPathLength <= 0) return;
		if(this.selectionMode == 1) this.setSelectionPaths(paths); else if(this.selectionMode == 2 && !this.canPathsBeAdded(paths)) {
			if(this.arePathsContiguous(paths)) this.setSelectionPaths(paths); else this.setSelectionPaths([paths[0]]);
		} else {
			var counter;
			var validCount;
			var oldCount;
			var beginLeadPath = this.leadPath;
			var cPaths = null;
			if(this.selection == null) oldCount = 0; else oldCount = this.selection.length;
			this.lastPaths.clear();
			counter = 0;
			validCount = 0;
			var _g = 0;
			while(_g < newPathLength) {
				var counter1 = _g++;
				var path = paths[counter1];
				if(path != null) {
					if(this.uniquePaths.get(path) == null) {
						validCount++;
						if(cPaths == null) cPaths = new org_aswing_util_ArrayList();
						cPaths.append(new org_aswing_tree_PathPlaceHolder(path,true));
						this.uniquePaths.put(path,true);
						this.lastPaths.put(path,true);
					}
					this.leadPath = path;
				}
			}
			if(this.leadPath == null) this.leadPath = beginLeadPath;
			if(validCount > 0) {
				var newSelection = [];
				if(oldCount > 0) newSelection = this.selection.slice();
				if(validCount != paths.length) {
					var $it0 = this.lastPaths.keys();
					while( $it0.hasNext() ) {
						var newPaths = $it0.next();
						newSelection.push(newPaths);
					}
				} else newSelection = newSelection.concat(paths);
				this.selection = newSelection;
				this.insureUniqueness();
				this.updateLeadIndex();
				this.resetRowSelection();
				this.notifyPathChange(cPaths,beginLeadPath,programmatic);
			} else this.leadPath = beginLeadPath;
			this.lastPaths.clear();
		}
	}
	,removeSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path != null) this.removeSelectionPaths([path],programmatic);
	}
	,removeSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		if(paths != null && this.selection != null && paths.length > 0) {
			if(!this.canPathsBeRemoved(paths)) this.clearSelection(); else {
				var pathsToRemove = null;
				var _g1 = 0;
				var _g = paths.length;
				while(_g1 < _g) {
					var removeCounter = _g1++;
					var path = paths[removeCounter];
					if(path != null) {
						if(this.uniquePaths.get(path) != null) {
							if(pathsToRemove == null) pathsToRemove = new org_aswing_util_ArrayList();
							this.uniquePaths.remove(path);
							pathsToRemove.append(new org_aswing_tree_PathPlaceHolder(path,false));
						}
					}
				}
				if(pathsToRemove != null) {
					var removeCount = pathsToRemove.size();
					var beginLeadPath = this.leadPath;
					if(removeCount == this.selection.length) this.selection = null; else {
						var validCount = 0;
						this.selection = [];
						var $it0 = this.uniquePaths.keys();
						while( $it0.hasNext() ) {
							var pEnum = $it0.next();
							this.selection[validCount++] = pEnum;
						}
					}
					if(this.leadPath != null && this.uniquePaths.get(this.leadPath) == null) {
						if(this.selection != null) this.leadPath = this.selection[this.selection.length - 1]; else this.leadPath = null;
					} else if(this.selection != null) this.leadPath = this.selection[this.selection.length - 1]; else this.leadPath = null;
					this.updateLeadIndex();
					this.resetRowSelection();
					this.notifyPathChange(pathsToRemove,beginLeadPath,programmatic);
				}
			}
		}
	}
	,getSelectionPath: function() {
		if(this.selection != null) return this.selection[0]; else return null;
	}
	,getSelectionPaths: function() {
		if(this.selection != null) return this.selection.slice();
		return null;
	}
	,getSelectionCount: function() {
		if(this.selection == null) return 0; else return this.selection.length;
	}
	,isPathSelected: function(path) {
		if(path != null) return this.uniquePaths.get(path) != null; else return false;
	}
	,isSelectionEmpty: function() {
		return this.selection == null;
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.selection != null) {
			var selSize = this.selection.length;
			var newness = [];
			var _g = 0;
			while(_g < selSize) {
				var counter = _g++;
				newness[counter] = false;
			}
			var event = new org_aswing_event_TreeSelectionEvent(this,programmatic,this.selection,newness,this.leadPath,null);
			this.leadPath = null;
			this.leadIndex = this.leadRow = -1;
			this.uniquePaths.clear();
			this.selection = null;
			this.resetRowSelection();
			this.fireValueChanged(event);
		}
	}
	,fireValueChanged: function(e) {
		this.dispatchEvent(e);
	}
	,getSelectionRows: function() {
		if(this.rowMapper != null && this.selection != null) {
			var counter;
			var rows = this.rowMapper.getRowsForPaths(this.selection);
			if(rows != null) {
				var invisCount = 0;
				var _g1 = 0;
				var _g = rows.length;
				while(_g1 < _g) {
					var counter1 = _g1++;
					if(rows[counter1] == -1) invisCount++;
				}
				if(invisCount > 0) {
					if(invisCount == rows.length) rows = null; else {
						var tempRows = [];
						counter = rows.length - 1;
						var visCounter = 0;
						while(counter >= 0) {
							if(rows[counter] != -1) tempRows[visCounter++] = rows[counter];
							counter--;
						}
						rows = tempRows;
					}
				}
			}
			return rows;
		}
		return null;
	}
	,getMinSelectionRow: function() {
		return this.listSelectionModel.getMinSelectionIndex();
	}
	,getMaxSelectionRow: function() {
		return this.listSelectionModel.getMaxSelectionIndex();
	}
	,isRowSelected: function(row) {
		return this.listSelectionModel.isSelectedIndex(row);
	}
	,resetRowSelection: function() {
		this.listSelectionModel.clearSelection();
		if(this.selection != null && this.rowMapper != null) {
			var aRow;
			var rows = this.rowMapper.getRowsForPaths(this.selection);
			var counter = 0;
			var maxCounter = this.selection.length;
			var _g = 0;
			while(_g < maxCounter) {
				var counter1 = _g++;
				aRow = rows[counter1];
				if(aRow != -1) this.listSelectionModel.addSelectionInterval(aRow,aRow);
			}
			if(this.leadIndex != -1 && rows != null) this.leadRow = rows[this.leadIndex]; else if(this.leadPath != null) {
				this.tempPaths[0] = this.leadPath;
				rows = this.rowMapper.getRowsForPaths(this.tempPaths);
				if(rows != null) this.leadRow = rows[0]; else this.leadRow = -1;
			} else this.leadRow = -1;
			this.insureRowContinuity();
		} else this.leadRow = -1;
	}
	,getLeadSelectionRow: function() {
		return this.leadRow;
	}
	,getLeadSelectionPath: function() {
		return this.leadPath;
	}
	,addPropertyChangeListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("propertyChange",listener,false,priority,useWeakReference);
	}
	,removePropertyChangeListener: function(listener) {
		this.removeEventListener("propertyChange",listener);
	}
	,addTreeSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("treeSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeTreeSelectionListener: function(listener) {
		this.removeEventListener("treeSelectionChanged",listener);
	}
	,insureRowContinuity: function() {
		if(this.selectionMode == 2 && this.selection != null && this.rowMapper != null) {
			var lModel = this.listSelectionModel;
			var min = lModel.getMinSelectionIndex();
			if(min != -1) {
				var counter = min;
				var maxCounter = lModel.getMaxSelectionIndex();
				while(counter <= maxCounter) {
					if(!lModel.isSelectedIndex(counter)) {
						if(counter == min) this.clearSelection(); else {
							var newSel = [];
							var selectionIndex = this.rowMapper.getRowsForPaths(this.selection);
							var _g1 = 0;
							var _g = selectionIndex.length;
							while(_g1 < _g) {
								var i = _g1++;
								if(selectionIndex[i] < counter) newSel[Std["int"](selectionIndex[i]) - min] = this.selection[i];
							}
							this.setSelectionPaths(newSel);
							break;
						}
					}
					counter++;
				}
			}
		} else if(this.selectionMode == 1 && this.selection != null && this.selection.length > 1) this.setSelectionPath(this.selection[0]);
	}
	,arePathsContiguous: function(paths) {
		if(this.rowMapper == null || paths.length < 2) return true; else {
			var bitSet = [];
			var anIndex;
			var counter;
			var min;
			var pathCount = paths.length;
			var validCount = 0;
			var tempPath = [paths[0]];
			min = this.rowMapper.getRowsForPaths(tempPath)[0];
			var _g = 0;
			while(_g < pathCount) {
				var counter1 = _g++;
				if(paths[counter1] != null) {
					tempPath[0] = paths[counter1];
					var rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows == null) return false;
					anIndex = rows[0];
					if(anIndex == -1 || anIndex < min - pathCount || anIndex > min + pathCount) return false;
					if(anIndex < min) min = anIndex;
					if(!(bitSet[anIndex] == true)) {
						bitSet[anIndex] = true;
						validCount++;
					}
				}
			}
			var maxCounter = validCount + min;
			var _g1 = min;
			while(_g1 < maxCounter) {
				var counter2 = _g1++;
				if(!(bitSet[counter2] == true)) return false;
			}
		}
		return true;
	}
	,canPathsBeAdded: function(paths) {
		if(paths == null || paths.length == 0 || this.rowMapper == null || this.selection == null || this.selectionMode == 4) return true; else {
			var bitSet = [];
			var lModel = this.listSelectionModel;
			var anIndex;
			var counter;
			var min = lModel.getMinSelectionIndex();
			var max = lModel.getMaxSelectionIndex();
			var tempPath = [];
			if(min != -1) {
				var _g1 = min;
				var _g = max + 1;
				while(_g1 < _g) {
					var counter1 = _g1++;
					if(lModel.isSelectedIndex(counter1)) bitSet[counter1] = true;
				}
			} else {
				tempPath[0] = paths[0];
				min = max = this.rowMapper.getRowsForPaths(tempPath)[0];
			}
			var _g11 = 0;
			var _g2 = paths.length;
			while(_g11 < _g2) {
				var counter2 = _g11++;
				if(paths[counter2] != null) {
					tempPath[0] = paths[counter2];
					var rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows == null) return false;
					anIndex = rows[0];
					min = Std["int"](Math.min(anIndex,min));
					max = Std["int"](Math.max(anIndex,max));
					if(anIndex == -1) return false;
					bitSet[anIndex] = true;
				}
			}
			var _g12 = min;
			var _g3 = max + 1;
			while(_g12 < _g3) {
				var counter3 = _g12++;
				if(!(bitSet[counter3] == true)) return false;
			}
		}
		return true;
	}
	,canPathsBeRemoved: function(paths) {
		if(this.rowMapper == null || this.selection == null || this.selectionMode == 4) return true; else {
			var bitSet = [];
			var counter;
			var pathCount = paths.length;
			var min = -1;
			var validCount = 0;
			var tempPath = [];
			var rows;
			this.lastPaths.clear();
			var _g = 0;
			while(_g < pathCount) {
				var counter1 = _g++;
				if(paths[counter1] != null) this.lastPaths.put(paths[counter1],true);
			}
			var _g1 = 0;
			var _g2 = this.selection.length;
			while(_g1 < _g2) {
				var counter2 = _g1++;
				if(this.lastPaths.get(this.selection[counter2]) == null) {
					tempPath[0] = this.selection[counter2];
					rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows != null && rows[0] != -1 && !(bitSet[rows[0]] == true)) {
						validCount++;
						if(min == -1) min = rows[0]; else min = Std["int"](Math.min(min,rows[0]));
						bitSet[rows[0]] = true;
					}
				}
			}
			this.lastPaths.clear();
			if(validCount > 1) {
				var _g11 = min;
				var _g3 = min + validCount;
				while(_g11 < _g3) {
					var counter3 = _g11++;
					if(!(bitSet[counter3] == true)) return false;
				}
			}
		}
		return true;
	}
	,notifyPathChange: function(changedPaths,oldLeadSelection,programmatic) {
		var cPathCount = changedPaths.size();
		var newness = [];
		var paths = [];
		var placeholder;
		var _g = 0;
		while(_g < cPathCount) {
			var counter = _g++;
			placeholder = org_aswing_AsWingUtils["as"](changedPaths.get(counter),org_aswing_tree_PathPlaceHolder);
			newness[counter] = placeholder.isNew;
			paths[counter] = placeholder.path;
		}
		var event = new org_aswing_event_TreeSelectionEvent(this,programmatic,paths,newness,oldLeadSelection,this.leadPath);
		this.fireValueChanged(event);
	}
	,updateLeadIndex: function() {
		if(this.leadPath != null) {
			if(this.selection == null) {
				this.leadPath = null;
				this.leadIndex = this.leadRow = -1;
			} else {
				this.leadRow = this.leadIndex = -1;
				var _g1 = 0;
				var _g = this.selection.length;
				while(_g1 < _g) {
					var counter = _g1++;
					if(this.selection[counter] == this.leadPath) {
						this.leadIndex = counter;
						break;
					}
				}
			}
		} else this.leadIndex = -1;
	}
	,insureUniqueness: function() {
	}
	,toString: function() {
		return "DefaultTreeSelectionModel[" + Std.string(this.getSelectionPaths()) + "]";
	}
	,__class__: org_aswing_tree_DefaultTreeSelectionModel
});
var org_aswing_tree_EmptySelectionModel = function() {
	org_aswing_tree_DefaultTreeSelectionModel.call(this);
};
$hxClasses["org.aswing.tree.EmptySelectionModel"] = org_aswing_tree_EmptySelectionModel;
org_aswing_tree_EmptySelectionModel.__name__ = ["org","aswing","tree","EmptySelectionModel"];
org_aswing_tree_EmptySelectionModel._sharedInstance = null;
org_aswing_tree_EmptySelectionModel.sharedInstance = function() {
	if(org_aswing_tree_EmptySelectionModel._sharedInstance == null) org_aswing_tree_EmptySelectionModel._sharedInstance = new org_aswing_tree_EmptySelectionModel();
	return org_aswing_tree_EmptySelectionModel._sharedInstance;
};
org_aswing_tree_EmptySelectionModel.__super__ = org_aswing_tree_DefaultTreeSelectionModel;
org_aswing_tree_EmptySelectionModel.prototype = $extend(org_aswing_tree_DefaultTreeSelectionModel.prototype,{
	setSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,addSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,removeSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,__class__: org_aswing_tree_EmptySelectionModel
});
var org_aswing_tree_EnumerationInfo = function() {
};
$hxClasses["org.aswing.tree.EnumerationInfo"] = org_aswing_tree_EnumerationInfo;
org_aswing_tree_EnumerationInfo.__name__ = ["org","aswing","tree","EnumerationInfo"];
org_aswing_tree_EnumerationInfo.prototype = {
	__class__: org_aswing_tree_EnumerationInfo
};
var org_aswing_tree_FHTreeStateNode = function(layoutCache,userObject,childIndex,row) {
	org_aswing_tree_DefaultMutableTreeNode.call(this,userObject);
	this.childIndex = childIndex;
	this.row = row;
	this.layoutCache = layoutCache;
	this.childCount = 0;
	this.expanded = false;
};
$hxClasses["org.aswing.tree.FHTreeStateNode"] = org_aswing_tree_FHTreeStateNode;
org_aswing_tree_FHTreeStateNode.__name__ = ["org","aswing","tree","FHTreeStateNode"];
org_aswing_tree_FHTreeStateNode.__super__ = org_aswing_tree_DefaultMutableTreeNode;
org_aswing_tree_FHTreeStateNode.prototype = $extend(org_aswing_tree_DefaultMutableTreeNode.prototype,{
	setPath: function(p) {
		this.path = p;
	}
	,setRow: function(r) {
		this.row = r;
	}
	,setParent: function(parent) {
		org_aswing_tree_DefaultMutableTreeNode.prototype.setParent.call(this,parent);
		if(parent != null) {
			this.path = (js_Boot.__instanceof(parent,org_aswing_tree_FHTreeStateNode)?parent:null).getTreePath().pathByAddingChild(this.getUserObject());
			this.layoutCache.addMapping(this);
		}
	}
	,removeAt: function(childIndex) {
		var node = org_aswing_AsWingUtils["as"](this.getChildAt(childIndex),org_aswing_tree_FHTreeStateNode);
		node.removeFromMapping();
		org_aswing_tree_DefaultMutableTreeNode.prototype.removeAt.call(this,childIndex);
	}
	,setUserObject: function(o) {
		org_aswing_tree_DefaultMutableTreeNode.prototype.setUserObject.call(this,o);
		if(this.path != null) {
			var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
			if(parent != null) this.resetChildrenPaths(parent.getTreePath()); else this.resetChildrenPaths(null);
		}
	}
	,getChildIndex: function() {
		return this.childIndex;
	}
	,getTreePath: function() {
		return this.path;
	}
	,getChildAtModelIndex: function(index) {
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var counter = _g1++;
			if(org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).childIndex == index) return org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
		}
		return null;
	}
	,isVisible: function() {
		var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
		if(parent == null) return true;
		return parent.isExpanded() && parent.isVisible();
	}
	,getRow: function() {
		return this.row;
	}
	,getRowToModelIndex: function(index) {
		var child;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			child = org_aswing_AsWingUtils["as"](this.getChildAt(counter1),org_aswing_tree_FHTreeStateNode);
			if(child.childIndex >= index) {
				if(child.childIndex == index) return child.row;
				if(counter1 == 0) return this.getRow() + 1 + index;
				return child.row - (child.childIndex - index);
			}
		}
		return this.getRow() + 1 + this.getTotalChildCount() - (this.childCount - index);
	}
	,getTotalChildCount: function() {
		if(this.isExpanded()) {
			var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
			var pIndex;
			if(parent != null && (pIndex = parent.getIndex(this)) + 1 < parent.getChildCount()) {
				var nextSibling = org_aswing_AsWingUtils["as"](parent.getChildAt(pIndex + 1),org_aswing_tree_FHTreeStateNode);
				return nextSibling.row - this.row - (nextSibling.childIndex - this.childIndex) | 0;
			} else {
				var retCount = this.childCount;
				var _g1 = 0;
				var _g = this.getChildCount();
				while(_g1 < _g) {
					var counter = _g1++;
					retCount += org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).getTotalChildCount();
				}
				return retCount;
			}
		}
		return 0;
	}
	,isExpanded: function() {
		return this.expanded;
	}
	,getVisibleLevel: function() {
		if(this.layoutCache.isRootVisible()) return this.getLevel(); else return this.getLevel() - 1;
	}
	,resetChildrenPaths: function(parentPath) {
		this.layoutCache.removeMapping(this);
		if(parentPath == null) this.path = new org_aswing_tree_TreePath([this.getUserObject()]); else this.path = parentPath.pathByAddingChild(this.getUserObject());
		this.layoutCache.addMapping(this);
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var counter = _g1++;
			org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).resetChildrenPaths(this.path);
		}
	}
	,removeFromMapping: function() {
		if(this.path != null) {
			this.layoutCache.removeMapping(this);
			var _g1 = 0;
			var _g = this.getChildCount();
			while(_g1 < _g) {
				var counter = _g1++;
				org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).removeFromMapping();
			}
		}
	}
	,createChildFor: function(userObject) {
		var newChildIndex = this.layoutCache.getModel().getIndexOfChild(this.getUserObject(),userObject);
		if(newChildIndex < 0) return null;
		var aNode;
		var child = this.layoutCache.createNodeForValue(userObject,newChildIndex);
		var childRow;
		if(this.isVisible()) childRow = this.getRowToModelIndex(newChildIndex); else childRow = -1;
		child.row = childRow;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			aNode = org_aswing_AsWingUtils["as"](this.getChildAt(counter1),org_aswing_tree_FHTreeStateNode);
			if(aNode.childIndex > newChildIndex) {
				this.insert(child,counter1);
				return child;
			}
		}
		this.append(child);
		return child;
	}
	,adjustRowBy: function(amount,startIndex) {
		if(startIndex == null) startIndex = -2;
		var counter;
		if(startIndex == -2) {
			this.row += amount;
			if(this.expanded) {
				var _g1 = 0;
				var _g = this.getChildCount();
				while(_g1 < _g) {
					var counter1 = _g1++;
					org_aswing_AsWingUtils["as"](this.getChildAt(counter1),org_aswing_tree_FHTreeStateNode).adjustRowBy(amount);
				}
			}
		} else {
			if(this.expanded) {
				var _g11 = startIndex;
				var _g2 = this.getChildCount();
				while(_g11 < _g2) {
					var counter2 = _g11++;
					org_aswing_AsWingUtils["as"](this.getChildAt(counter2),org_aswing_tree_FHTreeStateNode).adjustRowBy(amount);
				}
			}
			var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
			if(parent != null) parent.adjustRowBy(amount,parent.getIndex(this) + 1);
		}
	}
	,didExpand: function() {
		var nextRow = this.setRowAndChildren(this.row);
		var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
		var childRowCount = nextRow - this.row - 1;
		if(parent != null) parent.adjustRowBy(childRowCount,parent.getIndex(this) + 1);
		this.layoutCache.adjustRowCountBy(childRowCount);
	}
	,setRowAndChildren: function(nextRow) {
		this.row = nextRow;
		if(!this.isExpanded()) return this.row + 1;
		var lastRow = this.row + 1;
		var lastModelIndex = 0;
		var child;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter = _g++;
			child = org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
			lastRow += child.childIndex - lastModelIndex;
			lastModelIndex = child.childIndex + 1;
			if(child.expanded) lastRow = child.setRowAndChildren(lastRow); else child.row = lastRow++;
		}
		return lastRow + this.childCount - lastModelIndex;
	}
	,resetChildrenRowsFrom: function(newRow,childIndex,modelIndex) {
		var lastRow = newRow;
		var lastModelIndex = modelIndex;
		var node;
		var maxCounter = this.getChildCount();
		var _g = childIndex;
		while(_g < maxCounter) {
			var counter = _g++;
			node = org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
			lastRow += node.childIndex - lastModelIndex;
			lastModelIndex = node.childIndex + 1;
			if(!node.expanded) lastRow = node.setRowAndChildren(lastRow); else node.row = lastRow++;
		}
		lastRow += this.childCount - lastModelIndex;
		node = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
		if(node != null) node.resetChildrenRowsFrom(lastRow,node.getIndex(this) + 1,this.childIndex + 1); else this.layoutCache.setRowCount(lastRow);
	}
	,makeVisible: function() {
		var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
		if(parent != null) parent.expandParentAndReceiver();
	}
	,expandParentAndReceiver: function() {
		var parent = org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode);
		if(parent != null) parent.expandParentAndReceiver();
		this.expand();
	}
	,expand: function() {
		if(!this.expanded && !this.isLeaf()) {
			var visible = this.isVisible();
			this.expanded = true;
			this.childCount = this.layoutCache.getModel().getChildCount(this.getUserObject());
			if(visible) this.didExpand();
			if(visible && this.layoutCache.getSelectionModel() != null) this.layoutCache.getSelectionModel().resetRowSelection();
		}
	}
	,collapse: function(adjustRows) {
		if(this.expanded) {
			if(this.isVisible() && adjustRows) {
				var childCount = this.getTotalChildCount();
				this.expanded = false;
				this.layoutCache.adjustRowCountBy(-childCount);
				this.adjustRowBy(-childCount,0);
			} else this.expanded = false;
			if(adjustRows && this.isVisible() && this.layoutCache.getSelectionModel() != null) this.layoutCache.getSelectionModel().resetRowSelection();
		}
	}
	,isLeaf: function() {
		var model = this.layoutCache.getModel();
		if(model != null) return model.isLeaf(this.getUserObject()); else return true;
	}
	,removeChildAtModelIndex: function(modelIndex,isChildVisible) {
		var childNode = this.getChildAtModelIndex(modelIndex);
		if(childNode != null) {
			var row = childNode.getRow();
			var index = this.getIndex(childNode);
			childNode.collapse(false);
			this.removeAt(index);
			this.adjustChildIndexs(index,-1);
			this.childCount--;
			if(!isChildVisible) this.resetChildrenRowsFrom(row,index,modelIndex);
		} else {
			var maxCounter = this.getChildCount();
			var aChild;
			var counter = 0;
			while(counter < maxCounter) {
				aChild = org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
				if(aChild.childIndex >= modelIndex) {
					if(isChildVisible) {
						this.adjustRowBy(-1,counter);
						this.layoutCache.adjustRowCountBy(-1);
					}
					while(counter < maxCounter) {
						org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).childIndex--;
						counter++;
					}
					this.childCount--;
					return;
				}
			}
			if(isChildVisible) {
				this.adjustRowBy(-1,maxCounter);
				this.layoutCache.adjustRowCountBy(-1);
			}
			this.childCount--;
		}
	}
	,adjustChildIndexs: function(index,amount) {
		var counter = index;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			org_aswing_AsWingUtils["as"](this.getChildAt(counter1),org_aswing_tree_FHTreeStateNode).childIndex += amount;
		}
	}
	,childInsertedAtModelIndex: function(index,isExpandedAndVisible) {
		var aChild;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter = _g++;
			aChild = org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
			if(aChild.childIndex >= index) {
				if(isExpandedAndVisible) {
					this.adjustRowBy(1,counter);
					this.layoutCache.adjustRowCountBy(1);
				}
				while(counter < maxCounter) org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode).childIndex--;
				this.childCount++;
				return;
			}
		}
		if(isExpandedAndVisible) {
			this.adjustRowBy(1,maxCounter);
			this.layoutCache.adjustRowCountBy(1);
		}
		this.childCount++;
	}
	,getPathForRow: function(row,nextRow,info) {
		if(this.row == row) {
			info.node = this;
			info.isNodeParentNode = false;
			info.childIndex = this.childIndex;
			return true;
		}
		var child;
		var lastChild = null;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var lastChildEndRow;
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			child = org_aswing_AsWingUtils["as"](this.getChildAt(counter1),org_aswing_tree_FHTreeStateNode);
			if(child.row > row) {
				if(counter1 == 0) {
					info.node = this;
					info.isNodeParentNode = true;
					info.childIndex = row - this.row - 1;
					return true;
				} else {
					lastChildEndRow = 1 + child.row - (child.childIndex - lastChild.childIndex);
					if(row < lastChildEndRow) return lastChild.getPathForRow(row,lastChildEndRow,info);
					info.node = this;
					info.isNodeParentNode = true;
					info.childIndex = row - lastChildEndRow + lastChild.childIndex + 1;
					return true;
				}
			}
			lastChild = child;
		}
		if(lastChild != null) {
			lastChildEndRow = nextRow - (this.childCount - lastChild.childIndex) + 1;
			if(row < lastChildEndRow) return lastChild.getPathForRow(row,lastChildEndRow,info);
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = row - lastChildEndRow + lastChild.childIndex + 1;
			return true;
		} else {
			var retChildIndex = row - this.row - 1;
			if(retChildIndex >= this.childCount) return false;
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = retChildIndex;
			return true;
		}
	}
	,getCountTo: function(stopIndex) {
		var aChild;
		var retCount = stopIndex + 1;
		var counter = 0;
		var maxCounter = this.getChildCount();
		counter = 0;
		while(counter < maxCounter) {
			aChild = org_aswing_AsWingUtils["as"](this.getChildAt(counter),org_aswing_tree_FHTreeStateNode);
			if(aChild.childIndex >= stopIndex) counter = maxCounter; else retCount += aChild.getTotalChildCount();
		}
		if(this._parent != null) return retCount + org_aswing_AsWingUtils["as"](this.getParent(),org_aswing_tree_FHTreeStateNode).getCountTo(this.childIndex);
		if(!this.layoutCache.isRootVisible()) return retCount - 1;
		return retCount;
	}
	,__class__: org_aswing_tree_FHTreeStateNode
});
var org_aswing_tree_FixedHeightLayoutCache = function() {
	org_aswing_tree_AbstractLayoutCache.call(this);
	this.rowCount = 0;
	this.rootVisible = false;
	this.tempStacks = new org_aswing_util_Stack();
	this.boundsBuffer = new org_aswing_geom_IntRectangle();
	this.treePathMapping = new org_aswing_tree_TreePathMap();
	this.info = new org_aswing_tree_SearchInfo(this);
	this.setRowHeight(16);
};
$hxClasses["org.aswing.tree.FixedHeightLayoutCache"] = org_aswing_tree_FixedHeightLayoutCache;
org_aswing_tree_FixedHeightLayoutCache.__name__ = ["org","aswing","tree","FixedHeightLayoutCache"];
org_aswing_tree_FixedHeightLayoutCache.__super__ = org_aswing_tree_AbstractLayoutCache;
org_aswing_tree_FixedHeightLayoutCache.prototype = $extend(org_aswing_tree_AbstractLayoutCache.prototype,{
	setModel: function(newModel) {
		org_aswing_tree_AbstractLayoutCache.prototype.setModel.call(this,newModel);
		this.rebuild(false);
	}
	,setRootVisible: function(rootVisible) {
		if(this.isRootVisible() != rootVisible) {
			org_aswing_tree_AbstractLayoutCache.prototype.setRootVisible.call(this,rootVisible);
			if(this.root != null) {
				if(rootVisible) {
					this.rowCount++;
					this.root.adjustRowBy(1);
				} else {
					this.rowCount--;
					this.root.adjustRowBy(-1);
				}
				this.visibleNodesChanged();
			}
		}
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight <= 0) {
			haxe_Log.trace("Error : FixedHeightLayoutCache only supports row heights greater than 0",{ fileName : "FixedHeightLayoutCache.hx", lineNumber : 101, className : "org.aswing.tree.FixedHeightLayoutCache", methodName : "setRowHeight"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("FixedHeightLayoutCache only supports row heights greater than 0"));
		}
		if(this.getRowHeight() != rowHeight) {
			org_aswing_tree_AbstractLayoutCache.prototype.setRowHeight.call(this,rowHeight);
			this.visibleNodesChanged();
		}
	}
	,setRowCount: function(rc) {
		this.rowCount = rc;
	}
	,getRowCount: function() {
		return this.rowCount;
	}
	,invalidatePathBounds: function(path) {
	}
	,invalidateSizes: function() {
		this.visibleNodesChanged();
	}
	,isExpanded: function(path) {
		if(path != null) {
			var lastNode = this.getNodeForPath(path,true,false);
			return lastNode != null && lastNode.isExpanded();
		}
		return false;
	}
	,getBounds: function(path,placeIn) {
		if(path == null) return null;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return this.getBounds2(node,-1,placeIn);
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null) {
			var childIndex = this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent());
			if(childIndex != -1) return this.getBounds2(node,childIndex,placeIn);
		}
		return null;
	}
	,getPathForRow: function(row) {
		if(row >= 0 && row < this.getRowCount()) {
			if(this.root.getPathForRow(row,this.getRowCount(),this.info)) return this.info.getPath();
		}
		return null;
	}
	,getRowForPath: function(path) {
		if(path == null || this.root == null) return -1;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return node.getRow();
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null && node.isExpanded()) return node.getRowToModelIndex(this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent()));
		return -1;
	}
	,getPathClosestTo: function(x,y) {
		if(this.getRowCount() == 0) return null;
		var row = this.getRowContainingYLocation(y);
		return this.getPathForRow(row);
	}
	,getVisibleChildCount: function(path) {
		var node = this.getNodeForPath(path,true,false);
		if(node == null) return 0;
		return node.getTotalChildCount();
	}
	,getVisiblePathsFrom: function(path,totalCount) {
		if(path == null) return null;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return this.getVisibleFHTreeStateNodes(node,-1,totalCount);
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null && node.isExpanded()) return this.getVisibleFHTreeStateNodes(node,this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent()),totalCount);
		return null;
	}
	,nextVisibleFHTreeStateNode: function(info) {
		var nextIndex = info.nextIndex | 0;
		var parent = info.parent;
		var retObject;
		if(nextIndex == -1) retObject = parent.getTreePath(); else {
			var node = parent.getChildAtModelIndex(nextIndex);
			if(node == null) retObject = parent.getTreePath().pathByAddingChild(this.treeModel.getChild(parent.getUserObject(),nextIndex)); else retObject = node.getTreePath();
		}
		this.updateNextObject(info);
		info.enumCount--;
		return retObject;
	}
	,hasMoreVisibleFHTreeStateNode: function(info) {
		return info.enumCount > 0 && info.parent != null;
	}
	,updateNextObject: function(info) {
		if(!this.updateNextIndex(info)) this.findNextValidParent(info);
	}
	,updateNextIndex: function(info) {
		if(info.nextIndex == -1 && !info.parent.isExpanded()) return false;
		if(info.childCount == 0) return false;
		info.nextIndex++;
		if(info.nextIndex >= info.childCount) return false;
		var child = info.parent.getChildAtModelIndex(info.nextIndex | 0);
		if(child != null && child.isExpanded()) {
			info.parent = child;
			info.nextIndex = -1;
			info.childCount = this.treeModel.getChildCount(child.getUserObject());
		}
		return true;
	}
	,findNextValidParent: function(info) {
		if(info.parent == this.root) {
			info.parent = null;
			return false;
		}
		while(info.parent != null) {
			var newParent = org_aswing_AsWingUtils["as"](info.parent.getParent(),org_aswing_tree_FHTreeStateNode);
			if(newParent != null) {
				info.nextIndex = info.parent.getChildIndex();
				info.parent = newParent;
				info.childCount = this.treeModel.getChildCount(info.parent.getUserObject());
				if(this.updateNextIndex(info)) return true;
			} else info.parent = null;
		}
		return false;
	}
	,getVisibleFHTreeStateNodes: function(parent,startIndex,totalCount) {
		var nodes = [];
		var info = new org_aswing_tree_EnumerationInfo();
		info.parent = parent;
		info.nextIndex = startIndex;
		info.childCount = this.treeModel.getChildCount(parent.getUserObject());
		info.enumCount = totalCount;
		while(this.hasMoreVisibleFHTreeStateNode(info)) nodes.push(this.nextVisibleFHTreeStateNode(info));
		return nodes;
	}
	,setExpandedState: function(path,isExpanded) {
		if(isExpanded) this.ensurePathIsExpanded(path,true); else if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) {
				var parentNode = this.getNodeForPath(parentPath,false,true);
				if(parentNode != null) parentNode.makeVisible();
			}
			var childNode = this.getNodeForPath(path,true,false);
			if(childNode != null) childNode.collapse(true);
		}
	}
	,getExpandedState: function(path) {
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return node.isVisible() && node.isExpanded(); else return false;
	}
	,treeNodesChanged: function(e) {
		if(e != null) {
			var changedIndexs;
			var changedParent = this.getNodeForPath(e.getTreePath(),false,false);
			var maxCounter;
			changedIndexs = e.getChildIndices();
			if(changedParent != null) {
				if(changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
					var parentValue = changedParent.getUserObject();
					var _g = 0;
					while(_g < maxCounter) {
						var counter = _g++;
						var child = changedParent.getChildAtModelIndex(changedIndexs[counter]);
						if(child != null) child.setUserObject(this.treeModel.getChild(parentValue,changedIndexs[counter]));
					}
					if(changedParent.isVisible() && changedParent.isExpanded()) this.visibleNodesChanged();
				} else if(changedParent == this.root && changedParent.isVisible() && changedParent.isExpanded()) this.visibleNodesChanged();
			}
		}
	}
	,treeNodesInserted: function(e) {
		if(e != null) {
			var changedIndexs;
			var changedParent = this.getNodeForPath(e.getTreePath(),false,false);
			var maxCounter;
			changedIndexs = e.getChildIndices();
			if(changedParent != null && changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
				var isVisible = changedParent.isVisible() && changedParent.isExpanded();
				var _g = 0;
				while(_g < maxCounter) {
					var counter = _g++;
					changedParent.childInsertedAtModelIndex(changedIndexs[counter],isVisible);
				}
				if(isVisible && this.treeSelectionModel != null) this.treeSelectionModel.resetRowSelection();
				if(changedParent.isVisible()) this.visibleNodesChanged();
			}
		}
	}
	,treeNodesRemoved: function(e) {
		if(e != null) {
			var changedIndexs;
			var maxCounter;
			var parentPath = e.getTreePath();
			var changedParentNode = this.getNodeForPath(parentPath,false,false);
			changedIndexs = e.getChildIndices();
			if(changedParentNode != null && changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
				var isVisible = changedParentNode.isVisible() && changedParentNode.isExpanded();
				var _g = 0;
				while(_g < maxCounter) {
					var counter = _g++;
					changedParentNode.removeChildAtModelIndex(changedIndexs[counter],isVisible);
				}
				if(isVisible) {
					if(this.treeSelectionModel != null) this.treeSelectionModel.resetRowSelection();
					if(this.treeModel.getChildCount(changedParentNode.getUserObject()) == 0 && changedParentNode.isLeaf()) changedParentNode.collapse(false);
					this.visibleNodesChanged();
				} else if(changedParentNode.isVisible()) this.visibleNodesChanged();
			}
		}
	}
	,treeStructureChanged: function(e) {
		if(e != null) {
			var changedPath = e.getTreePath();
			var changedNode = this.getNodeForPath(changedPath,false,false);
			if(changedNode == this.root || changedNode == null && (changedPath == null && this.treeModel != null && this.treeModel.getRoot() == null || changedPath != null && changedPath.getPathCount() <= 1)) this.rebuild(true); else if(changedNode != null) {
				var wasExpanded;
				var wasVisible;
				var parent = org_aswing_AsWingUtils["as"](changedNode.getParent(),org_aswing_tree_FHTreeStateNode);
				wasExpanded = changedNode.isExpanded();
				wasVisible = changedNode.isVisible();
				var index = parent.getIndex(changedNode);
				changedNode.collapse(false);
				parent.removeAt(index);
				if(wasVisible && wasExpanded) {
					var row = changedNode.getRow();
					parent.resetChildrenRowsFrom(row,index,changedNode.getChildIndex());
					changedNode = this.getNodeForPath(changedPath,false,true);
					changedNode.expand();
				}
				if(this.treeSelectionModel != null && wasVisible && wasExpanded) this.treeSelectionModel.resetRowSelection();
				if(wasVisible) this.visibleNodesChanged();
			}
		}
	}
	,visibleNodesChanged: function() {
	}
	,getBounds2: function(parent,childIndex,placeIn) {
		var expanded;
		var level;
		var row;
		var value;
		if(childIndex == -1) {
			row = parent.getRow();
			value = parent.getUserObject();
			expanded = parent.isExpanded();
			level = parent.getLevel();
		} else {
			row = parent.getRowToModelIndex(childIndex);
			value = this.treeModel.getChild(parent.getUserObject(),childIndex);
			expanded = false;
			level = parent.getLevel() + 1;
		}
		var bounds = this.countNodeDimensions(value,row,level,expanded,this.boundsBuffer);
		if(bounds == null) return null;
		if(placeIn == null) placeIn = new org_aswing_geom_IntRectangle();
		placeIn.x = bounds.x;
		placeIn.height = this.getRowHeight();
		placeIn.y = row * placeIn.height;
		placeIn.width = bounds.width;
		return placeIn;
	}
	,adjustRowCountBy: function(changeAmount) {
		this.rowCount += changeAmount;
	}
	,addMapping: function(node) {
		this.treePathMapping.put(node.getTreePath(),node);
	}
	,removeMapping: function(node) {
		this.treePathMapping.remove(node.getTreePath());
	}
	,getMapping: function(path) {
		return org_aswing_AsWingUtils["as"](this.treePathMapping.get(path),org_aswing_tree_FHTreeStateNode);
	}
	,rebuild: function(clearSelection) {
		var rootUO = null;
		this.treePathMapping.clear();
		if(this.treeModel != null) rootUO = this.treeModel.getRoot();
		if(this.treeModel != null && rootUO != null) {
			this.root = this.createNodeForValue(rootUO,0);
			this.root.setPath(new org_aswing_tree_TreePath([rootUO]));
			this.addMapping(this.root);
			if(this.isRootVisible()) {
				this.rowCount = 1;
				this.root.setRow(0);
			} else {
				this.rowCount = 0;
				this.root.setRow(-1);
			}
			this.root.expand();
		} else {
			this.root = null;
			this.rowCount = 0;
		}
		if(clearSelection && this.treeSelectionModel != null) this.treeSelectionModel.clearSelection();
		this.visibleNodesChanged();
	}
	,getRowContainingYLocation: function(location) {
		if(this.getRowCount() == 0) return -1;
		return Math.floor(Math.max(0,Math.min(this.getRowCount() - 1,location / this.getRowHeight())));
	}
	,ensurePathIsExpanded: function(aPath,expandLast) {
		if(aPath != null) {
			if(this.treeModel.isLeaf(aPath.getLastPathComponent())) {
				aPath = aPath.getParentPath();
				expandLast = true;
			}
			if(aPath != null) {
				var lastNode = this.getNodeForPath(aPath,false,true);
				if(lastNode != null) {
					lastNode.makeVisible();
					if(expandLast) lastNode.expand();
					return true;
				}
			}
		}
		return false;
	}
	,createNodeForValue: function(value,childIndex) {
		return new org_aswing_tree_FHTreeStateNode(this,value,childIndex,-1);
	}
	,getNodeForPath: function(path,onlyIfVisible,shouldCreate) {
		if(path != null) {
			var node;
			node = this.getMapping(path);
			if(node != null) {
				if(onlyIfVisible && !node.isVisible()) return null;
				return node;
			}
			if(onlyIfVisible) return null;
			var paths;
			if(this.tempStacks.size() == 0) paths = new org_aswing_util_Stack(); else paths = org_aswing_AsWingUtils["as"](this.tempStacks.pop(),org_aswing_util_Stack);
			try {
				paths.push(path);
				path = path.getParentPath();
				node = null;
				while(path != null) {
					node = this.getMapping(path);
					if(node != null) {
						while(node != null && paths.size() > 0) {
							path = org_aswing_AsWingUtils["as"](paths.pop(),org_aswing_tree_TreePath);
							node = node.createChildFor(path.getLastPathComponent());
						}
						return node;
					}
					paths.push(path);
					path = path.getParentPath();
				}
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,org_aswing_error_Error) ) {
					paths.clear();
					this.tempStacks.push(paths);
				} else throw(e);
			}
			return null;
		}
		return null;
	}
	,__class__: org_aswing_tree_FixedHeightLayoutCache
});
var org_aswing_tree_TreeCellFactory = function() { };
$hxClasses["org.aswing.tree.TreeCellFactory"] = org_aswing_tree_TreeCellFactory;
org_aswing_tree_TreeCellFactory.__name__ = ["org","aswing","tree","TreeCellFactory"];
org_aswing_tree_TreeCellFactory.prototype = {
	__class__: org_aswing_tree_TreeCellFactory
};
var org_aswing_tree_GeneralTreeCellFactory = function(cellClass) {
	this.cellClass = cellClass;
};
$hxClasses["org.aswing.tree.GeneralTreeCellFactory"] = org_aswing_tree_GeneralTreeCellFactory;
org_aswing_tree_GeneralTreeCellFactory.__name__ = ["org","aswing","tree","GeneralTreeCellFactory"];
org_aswing_tree_GeneralTreeCellFactory.__interfaces__ = [org_aswing_tree_TreeCellFactory];
org_aswing_tree_GeneralTreeCellFactory.prototype = {
	createNewCell: function() {
		return org_aswing_AsWingUtils["as"](Type.createInstance(this.cellClass,[]),org_aswing_tree_TreeCell);
	}
	,toString: function() {
		return "GeneralTreeCellFactory[cellClass:" + Std.string(this.cellClass) + "]";
	}
	,__class__: org_aswing_tree_GeneralTreeCellFactory
};
var org_aswing_tree_GeneralTreeCellFactoryUIResource = function(cellClass) {
	org_aswing_tree_GeneralTreeCellFactory.call(this,cellClass);
};
$hxClasses["org.aswing.tree.GeneralTreeCellFactoryUIResource"] = org_aswing_tree_GeneralTreeCellFactoryUIResource;
org_aswing_tree_GeneralTreeCellFactoryUIResource.__name__ = ["org","aswing","tree","GeneralTreeCellFactoryUIResource"];
org_aswing_tree_GeneralTreeCellFactoryUIResource.__interfaces__ = [org_aswing_plaf_UIResource];
org_aswing_tree_GeneralTreeCellFactoryUIResource.__super__ = org_aswing_tree_GeneralTreeCellFactory;
org_aswing_tree_GeneralTreeCellFactoryUIResource.prototype = $extend(org_aswing_tree_GeneralTreeCellFactory.prototype,{
	__class__: org_aswing_tree_GeneralTreeCellFactoryUIResource
});
var org_aswing_tree_PathPlaceHolder = function(path,isNew) {
	this.path = path;
	this.isNew = isNew;
};
$hxClasses["org.aswing.tree.PathPlaceHolder"] = org_aswing_tree_PathPlaceHolder;
org_aswing_tree_PathPlaceHolder.__name__ = ["org","aswing","tree","PathPlaceHolder"];
org_aswing_tree_PathPlaceHolder.prototype = {
	__class__: org_aswing_tree_PathPlaceHolder
};
var org_aswing_tree_SearchInfo = function(layoutCatch) {
	this.layoutCatch = layoutCatch;
};
$hxClasses["org.aswing.tree.SearchInfo"] = org_aswing_tree_SearchInfo;
org_aswing_tree_SearchInfo.__name__ = ["org","aswing","tree","SearchInfo"];
org_aswing_tree_SearchInfo.prototype = {
	getPath: function() {
		if(this.node == null) return null;
		if(this.isNodeParentNode) return this.node.getTreePath().pathByAddingChild(this.layoutCatch.getModel().getChild(this.node.getUserObject(),this.childIndex | 0));
		return this.node.getTreePath();
	}
	,__class__: org_aswing_tree_SearchInfo
};
var org_aswing_tree_TreeFolderIcon = function() {
};
$hxClasses["org.aswing.tree.TreeFolderIcon"] = org_aswing_tree_TreeFolderIcon;
org_aswing_tree_TreeFolderIcon.__name__ = ["org","aswing","tree","TreeFolderIcon"];
org_aswing_tree_TreeFolderIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_tree_TreeFolderIcon.prototype = {
	getIconWidth: function(c) {
		return 16;
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,updateIcon: function(com,g,x,y) {
		var borderColor = new org_aswing_ASColor(5592405);
		var b = new org_aswing_geom_IntRectangle(0,0,16,16);
		b.grow(0,-1);
		b.height -= 1;
		b.move(x,y);
		var flapSize = 5;
		var backPoints = [];
		backPoints.push(new openfl_geom_Point(b.x,b.y));
		backPoints.push(new openfl_geom_Point(b.x + flapSize,b.y));
		backPoints.push(new openfl_geom_Point(b.x + flapSize + 1,b.y + 1));
		backPoints.push(new openfl_geom_Point(b.width - 3,b.y + 1));
		backPoints.push(new openfl_geom_Point(b.width - 3,b.height));
		backPoints.push(new openfl_geom_Point(b.x,b.height));
		var colors = [15133166,9344189];
		var alphas = [0.392156862745098034,0.392156862745098034];
		var ratios = [0,255];
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(b.width,b.height,0,b.x,b.y);
		var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		g.fillPolygon(brush,backPoints);
		g.drawPolygon(new org_aswing_graphics_Pen(borderColor,0.5),backPoints);
		alphas = [0.901960784313725505,0.901960784313725505];
		brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		var frontPoints = [];
		frontPoints.push(new openfl_geom_Point(b.x,b.height));
		frontPoints.push(new openfl_geom_Point(b.x + 3,b.y + 3));
		frontPoints.push(new openfl_geom_Point(b.width,b.y + 3));
		frontPoints.push(new openfl_geom_Point(b.width - 3,b.height));
		g.fillPolygon(brush,frontPoints);
		g.drawPolygon(new org_aswing_graphics_Pen(borderColor,0.25),frontPoints);
	}
	,getDisplay: function(c) {
		return null;
	}
	,destroy: function() {
	}
	,__class__: org_aswing_tree_TreeFolderIcon
};
var org_aswing_tree_TreeLeafIcon = function() {
};
$hxClasses["org.aswing.tree.TreeLeafIcon"] = org_aswing_tree_TreeLeafIcon;
org_aswing_tree_TreeLeafIcon.__name__ = ["org","aswing","tree","TreeLeafIcon"];
org_aswing_tree_TreeLeafIcon.__interfaces__ = [org_aswing_plaf_UIResource,org_aswing_Icon];
org_aswing_tree_TreeLeafIcon.prototype = {
	getIconWidth: function(c) {
		return 16;
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,updateIcon: function(com,g,x,y) {
		var b = new org_aswing_geom_IntRectangle(0,0,16,16);
		b.grow(-2,-1);
		b.move(x,y);
		var foldSize = 4;
		var points = [];
		points.push(new openfl_geom_Point(b.x,b.y));
		points.push(new openfl_geom_Point(b.width - foldSize,b.y));
		points.push(new openfl_geom_Point(b.width,b.y + foldSize));
		points.push(new openfl_geom_Point(b.width,b.height));
		points.push(new openfl_geom_Point(b.x,b.height));
		var colors = [15133166,9344189];
		var alphas = [0.392156862745098034,0.392156862745098034];
		var ratios = [0,255];
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(b.width,b.height,0,b.x,b.y);
		var brush = new org_aswing_graphics_GradientBrush(org_aswing_graphics_GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		g.fillPolygon(brush,points);
		g.drawPolygon(new org_aswing_graphics_Pen(org_aswing_ASColor.BLACK,0.5),points);
		var foldPoints = [];
		foldPoints.push(new openfl_geom_Point(b.width - foldSize,b.y));
		foldPoints.push(new openfl_geom_Point(b.width - foldSize,b.y + foldSize));
		foldPoints.push(new openfl_geom_Point(b.width,b.y + foldSize));
		g.drawPolyline(new org_aswing_graphics_Pen(org_aswing_ASColor.BLACK,0.5),foldPoints);
	}
	,getDisplay: function(c) {
		return null;
	}
	,destroy: function() {
	}
	,__class__: org_aswing_tree_TreeLeafIcon
};
var org_aswing_tree_TreePath = function(path) {
	if(path == null || path.length == 0) {
		haxe_Log.trace("Error : path in TreePath must be non null and not empty.",{ fileName : "TreePath.hx", lineNumber : 40, className : "org.aswing.tree.TreePath", methodName : "new"});
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("path in TreePath must be non null and not empty."));
	}
	this.lastPathComponent = path[path.length - 1];
	if(path.length > 1) {
		var pp = path.slice();
		pp.pop();
		this.parentPath = new org_aswing_tree_TreePath(pp);
	}
};
$hxClasses["org.aswing.tree.TreePath"] = org_aswing_tree_TreePath;
org_aswing_tree_TreePath.__name__ = ["org","aswing","tree","TreePath"];
org_aswing_tree_TreePath.createTreePath = function(parent,lastElement) {
	if(lastElement == null) {
		haxe_Log.trace("path in TreePath must be non null.",{ fileName : "TreePath.hx", lineNumber : 59, className : "org.aswing.tree.TreePath", methodName : "createTreePath"});
		throw new js__$Boot_HaxeError(new org_aswing_error_Error("path in TreePath must be non null."));
	}
	var tp = new org_aswing_tree_TreePath([null]);
	tp.parentPath = parent;
	tp.lastPathComponent = lastElement;
	return tp;
};
org_aswing_tree_TreePath.prototype = {
	getPath: function() {
		var i = this.getPathCount();
		var result = [];
		i--;
		var path = this;
		while(path != null) {
			result[i] = path.lastPathComponent;
			i--;
			path = path.parentPath;
		}
		return result;
	}
	,getLastPathComponent: function() {
		return this.lastPathComponent;
	}
	,getPathCount: function() {
		var result = 0;
		var path = this;
		while(path != null) {
			result++;
			path = path.parentPath;
		}
		return result;
	}
	,getPathComponent: function(element) {
		var pathLength = this.getPathCount();
		if(element < 0 || element >= pathLength) return null;
		var path = this;
		var _g = element;
		while(_g < pathLength) {
			var i = _g++;
			path = path.parentPath;
		}
		return path.lastPathComponent;
	}
	,equals: function(o) {
		if(o == this) return true;
		if(js_Boot.__instanceof(o,org_aswing_tree_TreePath)) {
			var oTreePath;
			oTreePath = js_Boot.__instanceof(o,org_aswing_tree_TreePath)?o:null;
			if(this.getPathCount() != oTreePath.getPathCount()) return false;
			var path = this;
			while(path != null) {
				if(path.lastPathComponent != oTreePath.lastPathComponent) return false;
				oTreePath = oTreePath.parentPath;
				path = path.parentPath;
			}
			return true;
		}
		return false;
	}
	,isDescendant: function(aTreePath) {
		if(aTreePath == this) return true;
		if(aTreePath != null) {
			var pathLength = this.getPathCount();
			var oPathLength = aTreePath.getPathCount();
			if(oPathLength < pathLength) return false;
			while(oPathLength > pathLength) {
				aTreePath = aTreePath.getParentPath();
				oPathLength--;
			}
			return this.equals(aTreePath);
		}
		return false;
	}
	,pathByAddingChild: function(child) {
		if(child == null) {
			haxe_Log.trace("Null child not allowed",{ fileName : "TreePath.hx", lineNumber : 215, className : "org.aswing.tree.TreePath", methodName : "pathByAddingChild"});
			throw new js__$Boot_HaxeError(new org_aswing_error_Error("Null child not allowed"));
		}
		return org_aswing_tree_TreePath.createTreePath(this,child);
	}
	,getParentPath: function() {
		return this.parentPath;
	}
	,toString: function() {
		return "TreePath[" + Std.string(this.getPath()) + "]";
	}
	,__class__: org_aswing_tree_TreePath
};
var org_aswing_tree_TreePathMap = function() {
	this.keyMap = new haxe_ds_IntMap();
	this.map = new haxe_ds_IntMap();
};
$hxClasses["org.aswing.tree.TreePathMap"] = org_aswing_tree_TreePathMap;
org_aswing_tree_TreePathMap.__name__ = ["org","aswing","tree","TreePathMap"];
org_aswing_tree_TreePathMap.prototype = {
	size: function() {
		var len = 0;
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			len++;
		}
		return len;
	}
	,isEmpty: function() {
		var len = 0;
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			len++;
		}
		return len == 0;
	}
	,keys: function() {
		return this.keyMap.iterator();
	}
	,values: function() {
		return this.map.iterator();
	}
	,containsValue: function(value) {
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(this.map.h[i] == value) return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.keyMap.get(key.getLastPathComponent().getAwmlIndex()) != null;
	}
	,get: function(key) {
		return this.map.get(key.getLastPathComponent().getAwmlIndex());
	}
	,getValue: function(key) {
		return this.map.get(key.getLastPathComponent().getAwmlIndex());
	}
	,put: function(key,value) {
		this.keyMap.set(key.getLastPathComponent().getAwmlIndex(),key);
		this.map.set(key.getLastPathComponent().getAwmlIndex(),value);
		return;
	}
	,remove: function(key) {
		this.keyMap.remove(key.getLastPathComponent().getAwmlIndex());
		return this.map.remove(key.getLastPathComponent().getAwmlIndex());
	}
	,clear: function() {
		this.keyMap = new haxe_ds_IntMap();
		this.map = new haxe_ds_IntMap();
	}
	,clone: function() {
		var temp = new org_aswing_tree_TreePathMap();
		temp.map = new haxe_ds_IntMap();
		temp.keyMap = new haxe_ds_IntMap();
		var $it0 = this.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			temp.keyMap.set(key.getLastPathComponent().getAwmlIndex(),key);
			temp.map.set(key.getLastPathComponent().getAwmlIndex(),this.map.get(key.getLastPathComponent().getAwmlIndex()));
		}
		return temp;
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: org_aswing_tree_TreePathMap
};
var org_aswing_util_ArrayList = function() {
	this._elements = [];
};
$hxClasses["org.aswing.util.ArrayList"] = org_aswing_util_ArrayList;
org_aswing_util_ArrayList.__name__ = ["org","aswing","util","ArrayList"];
org_aswing_util_ArrayList.__interfaces__ = [org_aswing_util_List];
org_aswing_util_ArrayList.prototype = {
	each: function(operation) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			operation(this._elements[i]);
		}
	}
	,eachWithout: function(obj,operation) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] != obj) operation(this._elements[i]);
		}
	}
	,get: function(i) {
		return this._elements[i];
	}
	,elementAt: function(i) {
		return this.get(i);
	}
	,append: function(obj,index) {
		if(index == null) index = -1;
		if(index == -1) this._elements.push(obj); else {
			var x = obj;
			this._elements.splice(index,0,x);
		}
	}
	,appendAll: function(arr,index) {
		if(index == null) index = -1;
		if(arr == null || arr.length <= 0) return;
		if(index == -1 || index == this._elements.length) this._elements = this._elements.concat(arr); else if(index == 0) this._elements = arr.concat(this._elements); else {
			var right = this._elements.splice(index,this._elements.length - index);
			this._elements = this._elements.concat(arr);
			this._elements = this._elements.concat(right);
		}
	}
	,replaceAt: function(index,obj) {
		if(index < 0 || index >= this.size()) return null; else {
			var oldObj = this._elements[index];
			this._elements[index] = obj;
			return oldObj;
		}
	}
	,removeAt: function(index) {
		if(index < 0 || index >= this.size()) return null; else {
			var obj = this._elements[index];
			this._elements.splice(index,1);
			return obj;
		}
	}
	,remove: function(obj) {
		if((function($this) {
			var $r;
			var x = obj;
			$r = HxOverrides.remove($this._elements,x);
			return $r;
		}(this))) return obj; else return null;
	}
	,removeRange: function(fromIndex,toIndex) {
		fromIndex = Std["int"](Math.max(0,fromIndex));
		toIndex = Std["int"](Math.min(toIndex,this._elements.length - 1));
		if(fromIndex > toIndex) return []; else return this._elements.splice(fromIndex,toIndex - fromIndex + 1);
	}
	,indexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,appendList: function(list,index) {
		if(index == null) index = -1;
		this.appendAll(list.toArray(),index);
	}
	,pop: function() {
		if(this.size() > 0) return this._elements.pop(); else return null;
	}
	,shift: function() {
		if(this.size() > 0) return this._elements.shift(); else return null;
	}
	,lastIndexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(obj) {
		return this.indexOf(obj) >= 0;
	}
	,first: function() {
		return this._elements[0];
	}
	,last: function() {
		return this._elements[this._elements.length - 1];
	}
	,size: function() {
		return this._elements.length;
	}
	,setElementAt: function(index,element) {
		this.replaceAt(index,element);
	}
	,getSize: function() {
		return this.size();
	}
	,clear: function() {
		if(!this.isEmpty()) {
			this._elements.splice(0,this._elements.length);
			this._elements = [];
		}
	}
	,clone: function() {
		var cloned = new org_aswing_util_ArrayList();
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			cloned.append(this._elements[i]);
		}
		return cloned;
	}
	,isEmpty: function() {
		if(this._elements.length > 0) return false; else return true;
	}
	,toArray: function() {
		return this._elements.slice();
	}
	,subArray: function(startIndex,length) {
		return this._elements.slice(startIndex,Std["int"](Math.min(startIndex + length,this.size())));
	}
	,sort: function(compare,options) {
		this._elements.sort(compare);
		return this._elements;
	}
	,sortOn: function(compare,options) {
		this._elements.sort(compare);
		return this._elements;
	}
	,toString: function() {
		return "ArrayList : " + this._elements.toString();
	}
	,__class__: org_aswing_util_ArrayList
};
var org_aswing_util_ArrayUtils = function() { };
$hxClasses["org.aswing.util.ArrayUtils"] = org_aswing_util_ArrayUtils;
org_aswing_util_ArrayUtils.__name__ = ["org","aswing","util","ArrayUtils"];
org_aswing_util_ArrayUtils.each = function(arr,operation) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		operation(arr[i]);
	}
};
org_aswing_util_ArrayUtils.setSize = function(arr,size) {
	if(size < 0) size = 0;
	if(size == arr.length) return;
	if(size > arr.length) arr[size - 1] = null; else arr.splice(size,1);
};
org_aswing_util_ArrayUtils.removeFromArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) {
			arr.splice(i,1);
			return i;
		}
	}
	return -1;
};
org_aswing_util_ArrayUtils.removeAllFromArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) arr.splice(i,1);
	}
};
org_aswing_util_ArrayUtils.removeAllBehindSomeIndex = function(array,index) {
	if(index <= 0) {
		array.splice(0,array.length);
		return;
	}
	var arrLen = array.length;
	var _g = index + 1;
	while(_g < arrLen) {
		var i = _g++;
		array.pop();
	}
};
org_aswing_util_ArrayUtils.indexInArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) return i;
	}
	return -1;
};
org_aswing_util_ArrayUtils.cloneArray = function(arr) {
	return arr.slice();
};
org_aswing_util_ArrayUtils.reverse = function(x) {
	var t = "";
	var i = x.length;
	while(i-- >= 0) t += x.charAt(i);
	return t;
};
var org_aswing_util_DepthManager = function() { };
$hxClasses["org.aswing.util.DepthManager"] = org_aswing_util_DepthManager;
org_aswing_util_DepthManager.__name__ = ["org","aswing","util","DepthManager"];
org_aswing_util_DepthManager.bringToBottom = function(mc) {
	var parent = mc.parent;
	if(parent == null) return;
	if(parent.getChildIndex(mc) != 0) parent.setChildIndex(mc,0);
};
org_aswing_util_DepthManager.bringToTop = function(mc) {
	if(null == mc || null == mc.parent) return;
	var parent = mc.parent;
	var maxIndex = parent.get_numChildren() - 1;
	if(parent.getChildIndex(mc) != maxIndex) parent.setChildIndex(mc,maxIndex);
};
org_aswing_util_DepthManager.isTop = function(mc) {
	var parent = mc.parent;
	if(parent == null) return true;
	return parent.get_numChildren() - 1 == parent.getChildIndex(mc);
};
org_aswing_util_DepthManager.isBottom = function(mc) {
	var parent = mc.parent;
	if(parent == null) return true;
	var depth = parent.getChildIndex(mc);
	if(depth == 0) return true;
	return false;
};
org_aswing_util_DepthManager.isJustBelow = function(mc,aboveMC) {
	var parent = mc.parent;
	if(parent == null) return false;
	if(aboveMC.parent != parent) return false;
	return parent.getChildIndex(mc) == parent.getChildIndex(aboveMC) - 1;
};
org_aswing_util_DepthManager.isJustAbove = function(mc,belowMC) {
	return org_aswing_util_DepthManager.isJustBelow(belowMC,mc);
};
var org_aswing_util_HashSet = function() {
	this.length = 0;
	this.container = [];
};
$hxClasses["org.aswing.util.HashSet"] = org_aswing_util_HashSet;
org_aswing_util_HashSet.__name__ = ["org","aswing","util","HashSet"];
org_aswing_util_HashSet.prototype = {
	getKeyIndex: function(key) {
		var _g1 = 0;
		var _g = this.container.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.container[i] == key) return i;
		}
		return -1;
	}
	,size: function() {
		return this.length;
	}
	,add: function(o) {
		if(!this.contains(o)) this.length++;
		this.container.push(o);
	}
	,contains: function(o) {
		return this.getKeyIndex(o) > -1;
	}
	,isEmpty: function() {
		return this.length == 0;
	}
	,remove: function(o) {
		if(this.contains(o)) {
			this.container.splice(this.getKeyIndex(o),1);
			this.length--;
			return true;
		} else return false;
	}
	,clear: function() {
		this.container = [];
		this.length = 0;
	}
	,addAll: function(arr) {
		var _g = 0;
		while(_g < arr.length) {
			var i = arr[_g];
			++_g;
			this.add(i);
		}
	}
	,removeAll: function(arr) {
		var _g = 0;
		while(_g < arr.length) {
			var i = arr[_g];
			++_g;
			this.remove(i);
		}
	}
	,containsAll: function(arr) {
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.contains(arr[i])) return false;
		}
		return true;
	}
	,each: function(func) {
		var itr = HxOverrides.iter(this.container);
		while( itr.hasNext() ) {
			var i = itr.next();
			func(i);
		}
	}
	,toArray: function() {
		return this.container.slice();
	}
	,__class__: org_aswing_util_HashSet
};
var org_aswing_util_Reflection = function() { };
$hxClasses["org.aswing.util.Reflection"] = org_aswing_util_Reflection;
org_aswing_util_Reflection.__name__ = ["org","aswing","util","Reflection"];
org_aswing_util_Reflection.createDisplayObjectInstance = function(fullClassName,applicationDomain) {
	return org_aswing_AsWingUtils["as"](org_aswing_util_Reflection.createInstance(fullClassName,applicationDomain),openfl_display_DisplayObject);
};
org_aswing_util_Reflection.createInstance = function(fullClassName,applicationDomain) {
	var assetClass = Type.resolveClass(fullClassName);
	if(assetClass != null) return Type.createInstance(assetClass,[]);
	return null;
};
org_aswing_util_Reflection.getClass = function(fullClassName,applicationDomain) {
	if(applicationDomain == null) {
	}
	var assetClass = null;
	return assetClass;
};
org_aswing_util_Reflection.getFullClassName = function(o) {
	return Type.getClassName(o);
};
org_aswing_util_Reflection.getClassName = function(x) {
	if(js_Boot.__instanceof(x,Class)) {
		var s = Type.getClassName(x);
		var pos = s.lastIndexOf(".") + 1;
		return HxOverrides.substr(s,pos,null);
	} else if(Type.getClass(x) != null) return org_aswing_util_Reflection.getClassName(Type.getClass(x)); else return "";
};
org_aswing_util_Reflection.getPackageName = function(x) {
	if(typeof(x) == "string") {
		var s = x;
		var i = s.lastIndexOf(".");
		if(i != -1) return HxOverrides.substr(s,0,i); else return "";
	} else if(js_Boot.__instanceof(x,Class)) {
		var s1 = Type.getClassName(x);
		var i1 = s1.lastIndexOf(".");
		if(i1 != -1) return HxOverrides.substr(s1,0,i1); else return "";
	} else if(Type.getClass(x) != null) return org_aswing_util_Reflection.getPackageName(Type.getClass(x)); else throw new js__$Boot_HaxeError("invalid argument");
};
var org_aswing_util_Stack = function() {
	org_aswing_util_ArrayList.call(this);
};
$hxClasses["org.aswing.util.Stack"] = org_aswing_util_Stack;
org_aswing_util_Stack.__name__ = ["org","aswing","util","Stack"];
org_aswing_util_Stack.__super__ = org_aswing_util_ArrayList;
org_aswing_util_Stack.prototype = $extend(org_aswing_util_ArrayList.prototype,{
	empty: function() {
		return this._elements.length == 0;
	}
	,peek: function() {
		return this._elements[this._elements.length - 1];
	}
	,pop: function() {
		return this._elements.pop();
	}
	,push: function(item) {
		this._elements.push(item);
		return item;
	}
	,search: function(o) {
		var i = this.lastIndexOf(o);
		if(i >= 0) return this.size() - i;
		return -1;
	}
	,__class__: org_aswing_util_Stack
});
var org_aswing_util_StringUtils = function() { };
$hxClasses["org.aswing.util.StringUtils"] = org_aswing_util_StringUtils;
org_aswing_util_StringUtils.__name__ = ["org","aswing","util","StringUtils"];
org_aswing_util_StringUtils.isString = function(value) {
	return typeof(value) == "string";
};
org_aswing_util_StringUtils.castString = function(str) {
	return typeof(str) == "string"?str:null;
};
org_aswing_util_StringUtils.replace = function(targetString,oldString,newString) {
	return targetString.split(oldString).join(newString);
};
org_aswing_util_StringUtils.trim = function(targetString) {
	return org_aswing_util_StringUtils.trimLeft(org_aswing_util_StringUtils.trimRight(targetString));
};
org_aswing_util_StringUtils.trimLeft = function(targetString) {
	var tempIndex = 0;
	var tempChar = "";
	var _g1 = 0;
	var _g = targetString.length;
	while(_g1 < _g) {
		var i = _g1++;
		tempChar = targetString.charAt(i);
		if(tempChar != " ") {
			tempIndex = i;
			break;
		}
	}
	return HxOverrides.substr(targetString,tempIndex,null);
};
org_aswing_util_StringUtils.trimRight = function(targetString) {
	var tempIndex = targetString.length - 1;
	var tempChar = "";
	var _g1 = 0;
	var _g = targetString.length;
	while(_g1 < _g) {
		var i = _g1++;
		tempChar = targetString.charAt(i);
		if(tempChar != " ") {
			tempIndex = i;
			break;
		}
	}
	return HxOverrides.substr(targetString,0,tempIndex + 1);
};
org_aswing_util_StringUtils.getCharsArray = function(targetString,hasBlankSpace) {
	var tempString = targetString;
	if(hasBlankSpace == false) tempString = org_aswing_util_StringUtils.trim(targetString);
	return tempString.split("");
};
org_aswing_util_StringUtils.startsWith = function(targetString,subString) {
	return targetString.indexOf(subString) == 0;
};
org_aswing_util_StringUtils.endsWith = function(targetString,subString) {
	return targetString.lastIndexOf(subString) == targetString.length - subString.length;
};
org_aswing_util_StringUtils.isLetter = function(chars) {
	if(chars == null || chars == "") return false;
	var _g1 = 0;
	var _g = chars.length;
	while(_g1 < _g) {
		var i = _g1++;
		var code = HxOverrides.cca(chars,i);
		if(code < 65 || code > 122 || code > 90 && code < 97) return false;
	}
	return true;
};
var org_aswing_util_WeakReference = function() {
};
$hxClasses["org.aswing.util.WeakReference"] = org_aswing_util_WeakReference;
org_aswing_util_WeakReference.__name__ = ["org","aswing","util","WeakReference"];
org_aswing_util_WeakReference.prototype = {
	set_value: function(v) {
		if(v == null) this.weakDic = null; else this.weakDic = v;
		return v;
	}
	,get_value: function() {
		if(this.weakDic != null) return this.weakDic;
		return null;
	}
	,clear: function() {
		this.weakDic = null;
	}
	,__class__: org_aswing_util_WeakReference
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
org_aswing_ASColor.WHITE = new org_aswing_ASColor(16777215);
org_aswing_ASColor.LIGHT_GRAY = new org_aswing_ASColor(12632256);
org_aswing_ASColor.GRAY = new org_aswing_ASColor(8421504);
org_aswing_ASColor.DARK_GRAY = new org_aswing_ASColor(4210752);
org_aswing_ASColor.BLACK = new org_aswing_ASColor(0);
org_aswing_ASColor.RED = new org_aswing_ASColor(16711680);
org_aswing_ASColor.PINK = new org_aswing_ASColor(16756655);
org_aswing_ASColor.ORANGE = new org_aswing_ASColor(16762880);
org_aswing_ASColor.HALO_ORANGE = new org_aswing_ASColor(16761344);
org_aswing_ASColor.YELLOW = new org_aswing_ASColor(16776960);
org_aswing_ASColor.GREEN = new org_aswing_ASColor(65280);
org_aswing_ASColor.HALO_GREEN = new org_aswing_ASColor(8453965);
org_aswing_ASColor.MAGENTA = new org_aswing_ASColor(16711935);
org_aswing_ASColor.CYAN = new org_aswing_ASColor(65535);
org_aswing_ASColor.BLUE = new org_aswing_ASColor(255);
org_aswing_ASColor.HALO_BLUE = new org_aswing_ASColor(2881013);
org_aswing_Component.__meta__ = { fields : { visibility : { bindable : null}}};
org_aswing_Component.MAX_CLICK_INTERVAL = 400;
org_aswing_Component.AWML_INDEX = 0;
org_aswing_Component.bg_trigger_brush = new org_aswing_graphics_SolidBrush(new org_aswing_ASColor(0,0));
MainView.__meta__ = { fields : { dataContext : { bindable : null}}};
MainViewModel.__meta__ = { fields : { menuSelectedIndex : { bindable : null}, chartData : { bindable : null}, selectedChartData : { bindable : null}, chartTitle : { bindable : null}}};
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
jive_chart_ChartPeriodSelector.__meta__ = { fields : { selectedData : { bindable : null}}};
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
jive_events_GestureEvent.GESTURE_TWO_FINGER_TAP = "GESTURE_TWO_FINGER_TAP";
jive_events_TransformGestureEvent.GESTURE_PAN = "GESTURE_PAN";
jive_events_TransformGestureEvent.GESTURE_ROTATE = "GESTURE_ROTATE";
jive_events_TransformGestureEvent.GESTURE_SWIPE = "GESTURE_SWIPE";
jive_events_TransformGestureEvent.GESTURE_ZOOM = "GESTURE_ZOOM";
org_aswing_plaf_basic_BasicButtonUI.viewRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicButtonUI.textRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicButtonUI.iconRect = new org_aswing_geom_IntRectangle();
org_aswing_AbstractListCell.AWML_INDEX = 0;
org_aswing_plaf_basic_BasicMenuItemUI.MAX_TEXT_WIDTH = "maxTextWidth";
org_aswing_plaf_basic_BasicMenuItemUI.MAX_ACC_WIDTH = "maxAccWidth";
org_aswing_plaf_basic_BasicMenuItemUI.zeroRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.iconRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.textRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.acceleratorRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.checkIconRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.arrowIconRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.viewRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicMenuItemUI.r = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicScrollBarUI.scrollSpeedThrottle = 60;
org_aswing_plaf_basic_BasicScrollBarUI.initialScrollSpeedThrottle = 500;
org_aswing_plaf_basic_BasicSliderUI.scrollSpeedThrottle = 60;
org_aswing_plaf_basic_BasicSliderUI.initialScrollSpeedThrottle = 500;
org_aswing_AbstractButton.__meta__ = { fields : { selected : { bindable : null}}};
org_aswing_AbstractButton.CENTER = 0;
org_aswing_AbstractButton.TOP = 1;
org_aswing_AbstractButton.LEFT = 2;
org_aswing_AbstractButton.BOTTOM = 3;
org_aswing_AbstractButton.RIGHT = 4;
org_aswing_AbstractButton.HORIZONTAL = 0;
org_aswing_AbstractButton.VERTICAL = 1;
jive_plaf_flat_background_FlatButtonBackground.luminanceFactor = 0.1;
jive_plaf_flat_tabbedpane_FlatTabBackground.luminanceFactor = 0.1;
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.initialized = false;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_System.__moduleNames = null;
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_utils_ByteArray.lime_bytes_from_data_pointer = lime_system_System.load("lime","lime_bytes_from_data_pointer",2);
lime_utils_ByteArray.lime_bytes_get_data_pointer = lime_system_System.load("lime","lime_bytes_get_data_pointer",1);
lime_utils_ByteArray.lime_bytes_read_file = lime_system_System.load("lime","lime_bytes_read_file",1);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_TextFieldGraphics.bitmapData = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.glyphs = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.tilesheets = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.tileIDs = new haxe_ds_ObjectMap();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code = 10;
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code = 10;
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl_display_BitmapDataChannel.ALPHA = 8;
openfl_display_BitmapDataChannel.BLUE = 4;
openfl_display_BitmapDataChannel.GREEN = 2;
openfl_display_BitmapDataChannel.RED = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_GraphicsPathCommand.LINE_TO = 2;
openfl_display_GraphicsPathCommand.MOVE_TO = 1;
openfl_display_GraphicsPathCommand.CURVE_TO = 3;
openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl_display_GraphicsPathCommand.NO_OP = 0;
openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_filters_BitmapFilterType.FULL = "full";
openfl_filters_BitmapFilterType.INNER = "inner";
openfl_filters_BitmapFilterType.OUTER = "outer";
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.cpuArchitecture = "";
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = false;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = false;
openfl_system_Capabilities.isDebugger = false;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = true;
openfl_system_Capabilities.manufacturer = "OpenFL Contributors";
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "OpenFL";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = openfl_system_TouchscreenType.FINGER;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_text_Font.__registeredFonts = [];
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
org_aswing_AWKeyboard.A = 65;
org_aswing_AWKeyboard.B = 66;
org_aswing_AWKeyboard.C = 67;
org_aswing_AWKeyboard.D = 68;
org_aswing_AWKeyboard.E = 69;
org_aswing_AWKeyboard.F = 70;
org_aswing_AWKeyboard.G = 71;
org_aswing_AWKeyboard.H = 72;
org_aswing_AWKeyboard.I = 73;
org_aswing_AWKeyboard.J = 74;
org_aswing_AWKeyboard.K = 75;
org_aswing_AWKeyboard.L = 76;
org_aswing_AWKeyboard.M = 77;
org_aswing_AWKeyboard.N = 78;
org_aswing_AWKeyboard.O = 79;
org_aswing_AWKeyboard.P = 80;
org_aswing_AWKeyboard.Q = 81;
org_aswing_AWKeyboard.R = 82;
org_aswing_AWKeyboard.S = 83;
org_aswing_AWKeyboard.T = 84;
org_aswing_AWKeyboard.U = 85;
org_aswing_AWKeyboard.V = 86;
org_aswing_AWKeyboard.W = 87;
org_aswing_AWKeyboard.X = 88;
org_aswing_AWKeyboard.Y = 89;
org_aswing_AWKeyboard.Z = 90;
org_aswing_AWKeyboard.ALTERNATE = 18;
org_aswing_AWKeyboard.BACKQUOTE = 192;
org_aswing_AWKeyboard.BACKSLASH = 220;
org_aswing_AWKeyboard.BACKSPACE = 8;
org_aswing_AWKeyboard.CAPS_LOCK = 20;
org_aswing_AWKeyboard.COMMA = 188;
org_aswing_AWKeyboard.COMMAND = 15;
org_aswing_AWKeyboard.CONTROL = 17;
org_aswing_AWKeyboard.DELETE = 46;
org_aswing_AWKeyboard.DOWN = 40;
org_aswing_AWKeyboard.END = 35;
org_aswing_AWKeyboard.ENTER = 13;
org_aswing_AWKeyboard.EQUAL = 187;
org_aswing_AWKeyboard.ESCAPE = 27;
org_aswing_AWKeyboard.F1 = 112;
org_aswing_AWKeyboard.F2 = 113;
org_aswing_AWKeyboard.F3 = 114;
org_aswing_AWKeyboard.F4 = 115;
org_aswing_AWKeyboard.F5 = 116;
org_aswing_AWKeyboard.F6 = 117;
org_aswing_AWKeyboard.F7 = 118;
org_aswing_AWKeyboard.F8 = 119;
org_aswing_AWKeyboard.F9 = 120;
org_aswing_AWKeyboard.F10 = 121;
org_aswing_AWKeyboard.F11 = 122;
org_aswing_AWKeyboard.F12 = 123;
org_aswing_AWKeyboard.F13 = 124;
org_aswing_AWKeyboard.F14 = 125;
org_aswing_AWKeyboard.F15 = 126;
org_aswing_AWKeyboard.HOME = 36;
org_aswing_AWKeyboard.INSERT = 45;
org_aswing_AWKeyboard.LEFT = 37;
org_aswing_AWKeyboard.LEFTBRACKET = 219;
org_aswing_AWKeyboard.MINUS = 189;
org_aswing_AWKeyboard.NUMBER_0 = 48;
org_aswing_AWKeyboard.NUMBER_1 = 49;
org_aswing_AWKeyboard.NUMBER_2 = 50;
org_aswing_AWKeyboard.NUMBER_3 = 51;
org_aswing_AWKeyboard.NUMBER_4 = 52;
org_aswing_AWKeyboard.NUMBER_5 = 53;
org_aswing_AWKeyboard.NUMBER_6 = 54;
org_aswing_AWKeyboard.NUMBER_7 = 55;
org_aswing_AWKeyboard.NUMBER_8 = 56;
org_aswing_AWKeyboard.NUMBER_9 = 57;
org_aswing_AWKeyboard.NUMPAD = 21;
org_aswing_AWKeyboard.NUMPAD_0 = 96;
org_aswing_AWKeyboard.NUMPAD_1 = 97;
org_aswing_AWKeyboard.NUMPAD_2 = 98;
org_aswing_AWKeyboard.NUMPAD_3 = 99;
org_aswing_AWKeyboard.NUMPAD_4 = 100;
org_aswing_AWKeyboard.NUMPAD_5 = 101;
org_aswing_AWKeyboard.NUMPAD_6 = 102;
org_aswing_AWKeyboard.NUMPAD_7 = 103;
org_aswing_AWKeyboard.NUMPAD_8 = 104;
org_aswing_AWKeyboard.NUMPAD_9 = 105;
org_aswing_AWKeyboard.NUMPAD_ADD = 107;
org_aswing_AWKeyboard.NUMPAD_DECIMAL = 110;
org_aswing_AWKeyboard.NUMPAD_DIVIDE = 111;
org_aswing_AWKeyboard.NUMPAD_ENTER = 108;
org_aswing_AWKeyboard.NUMPAD_MULTIPLY = 106;
org_aswing_AWKeyboard.NUMPAD_SUBTRACT = 109;
org_aswing_AWKeyboard.PAGE_DOWN = 34;
org_aswing_AWKeyboard.PAGE_UP = 33;
org_aswing_AWKeyboard.PERIOD = 190;
org_aswing_AWKeyboard.QUOTE = 222;
org_aswing_AWKeyboard.RIGHT = 39;
org_aswing_AWKeyboard.RIGHTBRACKET = 221;
org_aswing_AWKeyboard.SEMICOLON = 186;
org_aswing_AWKeyboard.SHIFT = 16;
org_aswing_AWKeyboard.SLASH = 191;
org_aswing_AWKeyboard.SPACE = 32;
org_aswing_AWKeyboard.TAB = 9;
org_aswing_AWKeyboard.UP = 38;
org_aswing_AbstractTabbedPane.__meta__ = { fields : { selectedIndex : { bindable : null}}};
org_aswing_AbstractTabbedPane.CENTER = 0;
org_aswing_AbstractTabbedPane.TOP = 1;
org_aswing_AbstractTabbedPane.LEFT = 2;
org_aswing_AbstractTabbedPane.BOTTOM = 3;
org_aswing_AbstractTabbedPane.RIGHT = 4;
org_aswing_AbstractTabbedPane.HORIZONTAL = 0;
org_aswing_AbstractTabbedPane.VERTICAL = 1;
org_aswing_AsWingConstants.MAX_VALUE = 2147483647;
org_aswing_AsWingConstants.MIN_VALUE = -2147483648;
org_aswing_AsWingConstants.NONE = -1;
org_aswing_AsWingConstants.CENTER = 0;
org_aswing_AsWingConstants.TOP = 1;
org_aswing_AsWingConstants.LEFT = 2;
org_aswing_AsWingConstants.BOTTOM = 3;
org_aswing_AsWingConstants.RIGHT = 4;
org_aswing_AsWingConstants.NORTH = 1;
org_aswing_AsWingConstants.NORTH_EAST = 2;
org_aswing_AsWingConstants.EAST = 3;
org_aswing_AsWingConstants.SOUTH_EAST = 4;
org_aswing_AsWingConstants.SOUTH = 5;
org_aswing_AsWingConstants.SOUTH_WEST = 6;
org_aswing_AsWingConstants.WEST = 7;
org_aswing_AsWingConstants.NORTH_WEST = 8;
org_aswing_AsWingConstants.HORIZONTAL = 0;
org_aswing_AsWingConstants.VERTICAL = 1;
org_aswing_AsWingManager.stage = null;
org_aswing_AsWingManager.nextFrameCalls = [];
org_aswing_AsWingManager.preventNullFocus = true;
org_aswing_AsWingUtils.CENTER = 0;
org_aswing_AsWingUtils.TOP = 1;
org_aswing_AsWingUtils.LEFT = 2;
org_aswing_AsWingUtils.BOTTOM = 3;
org_aswing_AsWingUtils.RIGHT = 4;
org_aswing_AsWingUtils.HORIZONTAL = 0;
org_aswing_AsWingUtils.VERTICAL = 1;
org_aswing_AsWingUtils.TEXT_FIELD = new openfl_text_TextField();
org_aswing_AsWingUtils.TEXT_FIELD_MULTILINE = null;
org_aswing_AsWingUtils.TEXT_FONT = null;
org_aswing_AsWingUtils.TEXT_FIELD_INTERNAL = null;
org_aswing_AsWingUtils.TEXT_FIELD_EXT = null;
org_aswing_BorderLayout.NORTH = "North";
org_aswing_BorderLayout.SOUTH = "South";
org_aswing_BorderLayout.EAST = "East";
org_aswing_BorderLayout.WEST = "West";
org_aswing_BorderLayout.CENTER = "Center";
org_aswing_BorderLayout.BEFORE_FIRST_LINE = "First";
org_aswing_BorderLayout.AFTER_LAST_LINE = "Last";
org_aswing_BorderLayout.BEFORE_LINE_BEGINS = "Before";
org_aswing_BorderLayout.AFTER_LINE_ENDS = "After";
org_aswing_BorderLayout.PAGE_START = "First";
org_aswing_BorderLayout.PAGE_END = "Last";
org_aswing_BorderLayout.LINE_START = "Before";
org_aswing_BorderLayout.LINE_END = "After";
org_aswing_BoxLayout.X_AXIS = 0;
org_aswing_BoxLayout.Y_AXIS = 1;
org_aswing_Cursor.H_RESIZE_CURSOR = "System.hResizeCursor";
org_aswing_Cursor.V_RESIZE_CURSOR = "System.vResizeCursor";
org_aswing_Cursor.H_MOVE_CURSOR = "System.hMoveCursor";
org_aswing_Cursor.V_MOVE_CURSOR = "System.vMoveCursor";
org_aswing_Cursor.HV_RESIZE_CURSOR = "System.hvResizeCursor";
org_aswing_Cursor.HV_MOVE_CURSOR = "System.hvMoveCursor";
org_aswing_util_WeakMap.nextObjectID = 0;
org_aswing_CursorManager.managers = new org_aswing_util_WeakMap();
org_aswing_DefaultListSelectionModel.SINGLE_SELECTION = 0;
org_aswing_DefaultListSelectionModel.MULTIPLE_SELECTION = 1;
org_aswing_DefaultListSelectionModel.MIN = -1;
org_aswing_DefaultListSelectionModel.MAX = 2147483647;
org_aswing_FlowLayout.LEFT = 2;
org_aswing_FlowLayout.CENTER = 0;
org_aswing_FlowLayout.RIGHT = 4;
org_aswing_FlowLayout.TOP = 1;
org_aswing_FlowLayout.BOTTOM = 3;
org_aswing_FocusManager.managers = new org_aswing_util_WeakMap();
org_aswing_FocusManager.defaultTraversalEnabled = true;
org_aswing_JAdjuster.__meta__ = { fields : { value : { bindable : null}}};
org_aswing_JAdjuster.HORIZONTAL = 0;
org_aswing_JAdjuster.VERTICAL = 1;
org_aswing_JComboBox.__meta__ = { fields : { selectedItem : { bindable : null}, selectedIndex : { bindable : null}}};
org_aswing_JFrame.NORMAL = 0;
org_aswing_JFrame.ICONIFIED = 2;
org_aswing_JFrame.MAXIMIZED_HORIZ = 4;
org_aswing_JFrame.MAXIMIZED_VERT = 8;
org_aswing_JFrame.MAXIMIZED = 12;
org_aswing_JFrame.DO_NOTHING_ON_CLOSE = 0;
org_aswing_JFrame.HIDE_ON_CLOSE = 1;
org_aswing_JFrame.DISPOSE_ON_CLOSE = 2;
org_aswing_JFrame.PROPERTY_TITLE_BAR = "titleBar";
org_aswing_JLabel.CENTER = 0;
org_aswing_JLabel.TOP = 1;
org_aswing_JLabel.LEFT = 2;
org_aswing_JLabel.BOTTOM = 3;
org_aswing_JLabel.RIGHT = 4;
org_aswing_JLabel.HORIZONTAL = 0;
org_aswing_JLabel.VERTICAL = 1;
org_aswing_JList.__meta__ = { fields : { selectedIndex : { bindable : null}}};
org_aswing_JList.AUTO_INCREMENT = -2147483648;
org_aswing_JList.SINGLE_SELECTION = 0;
org_aswing_JList.MULTIPLE_SELECTION = 1;
org_aswing_JList.DND_NONE = 0;
org_aswing_JList.DND_MOVE = 1;
org_aswing_JList.DND_COPY = 2;
org_aswing_JPopupMenu.popupMenuMouseDownListening = false;
org_aswing_JPopupMenu.showingMenuPopups = [];
org_aswing_JProgressBar.__meta__ = { fields : { model : { bindable : null}, value : { bindable : null}}};
org_aswing_JProgressBar.HORIZONTAL = 0;
org_aswing_JProgressBar.VERTICAL = 1;
org_aswing_JRadioButton.groups = new haxe_ds_StringMap();
org_aswing_JScrollBar.__meta__ = { fields : { value : { bindable : null}}};
org_aswing_JScrollBar.HORIZONTAL = 0;
org_aswing_JScrollBar.VERTICAL = 1;
org_aswing_JScrollPane.SCROLLBAR_AS_NEEDED = 0;
org_aswing_JScrollPane.SCROLLBAR_NEVER = 1;
org_aswing_JScrollPane.SCROLLBAR_ALWAYS = 2;
org_aswing_JToolTip.WAIT_TIME = 600;
org_aswing_JToolTip.FAST_OCCUR_TIME = 50;
org_aswing_JToolTip.last_tip_dropped_time = 0;
org_aswing_JSlider.__meta__ = { fields : { value : { bindable : null}}};
org_aswing_JSlider.HORIZONTAL = 0;
org_aswing_JSlider.VERTICAL = 1;
org_aswing_JTabbedPane.TOP = 1;
org_aswing_JTabbedPane.LEFT = 2;
org_aswing_JTabbedPane.BOTTOM = 3;
org_aswing_JTabbedPane.RIGHT = 4;
org_aswing_JTable.__meta__ = { fields : { selectedItem : { bindable : null}}};
org_aswing_JTable.AUTO_INCREMENT = -2147483647;
org_aswing_JTable.AUTO_RESIZE_OFF = 0;
org_aswing_JTable.AUTO_RESIZE_NEXT_COLUMN = 1;
org_aswing_JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS = 2;
org_aswing_JTable.AUTO_RESIZE_LAST_COLUMN = 3;
org_aswing_JTable.AUTO_RESIZE_ALL_COLUMNS = 4;
org_aswing_JTable.SINGLE_SELECTION = 0;
org_aswing_JTable.MULTIPLE_SELECTION = 1;
org_aswing_JTextComponent.__meta__ = { fields : { text : { bindable : null}}};
org_aswing_JTextArea.AUTO_INCREMENT = -2147483648;
org_aswing_JTextArea.defaultMaxChars = 0;
org_aswing_JTextField.__meta__ = { fields : { columns : { bindable : null}}};
org_aswing_JTextField.defaultMaxChars = 0;
org_aswing_JTree.SINGLE_TREE_SELECTION = 1;
org_aswing_JTree.CONTIGUOUS_TREE_SELECTION = 2;
org_aswing_JTree.DISCONTIGUOUS_TREE_SELECTION = 4;
org_aswing_JTree.AUTO_INCREMENT = -2147483648;
org_aswing_JTree.TEMP_STACK_SIZE = 11;
org_aswing_JTree.CELL_FACTORY_PROPERTY = "cellFactory";
org_aswing_JTree.TREE_MODEL_PROPERTY = "model";
org_aswing_JTree.ROOT_VISIBLE_PROPERTY = "rootVisible";
org_aswing_JTree.ROW_HEIGHT_PROPERTY = "rowHeight";
org_aswing_JTree.CELL_EDITOR_PROPERTY = "cellEditor";
org_aswing_JTree.EDITABLE_PROPERTY = "editable";
org_aswing_JTree.SELECTION_MODEL_PROPERTY = "selectionModel";
org_aswing_JTree.VISIBLE_ROW_COUNT_PROPERTY = "visibleRowCount";
org_aswing_JTree.INVOKES_STOP_CELL_EDITING_PROPERTY = "invokesStopCellEditing";
org_aswing_JTree.SCROLLS_ON_EXPAND_PROPERTY = "scrollsOnExpand";
org_aswing_JTree.TOGGLE_CLICK_COUNT_PROPERTY = "toggleClickCount";
org_aswing_JTree.LEAD_SELECTION_PATH_PROPERTY = "leadSelectionPath";
org_aswing_JTree.ANCHOR_SELECTION_PATH_PROPERTY = "anchorSelectionPath";
org_aswing_JTree.EXPANDS_SELECTED_PATHS_PROPERTY = "expandsSelectedPaths";
org_aswing_JTree.FONT_PROPERTY = "font";
org_aswing_JViewport.AUTO_INCREMENT = -2147483648;
org_aswing_JViewport.CENTER = 0;
org_aswing_JViewport.TOP = 1;
org_aswing_JViewport.LEFT = 2;
org_aswing_JViewport.BOTTOM = 3;
org_aswing_JViewport.RIGHT = 4;
org_aswing_KeyboardManager.defaultMnemonicModifier = [org_aswing_AWKeyboard.CONTROL,org_aswing_AWKeyboard.SHIFT];
org_aswing_ScrollPaneLayout.TOP_LEFT = 3;
org_aswing_ScrollPaneLayout.TOP_RIGHT = 2;
org_aswing_ScrollPaneLayout.BOTTOM_LEFT = 1;
org_aswing_ScrollPaneLayout.BOTTOM_RIGHT = 0;
org_aswing_SimpleButtonIcon.eabledFilters = [];
org_aswing_SimpleButtonIconToggle.eabledFilters = [];
org_aswing_SoftBoxLayout.X_AXIS = 0;
org_aswing_SoftBoxLayout.Y_AXIS = 1;
org_aswing_SoftBoxLayout.LEFT = 2;
org_aswing_SoftBoxLayout.CENTER = 0;
org_aswing_SoftBoxLayout.RIGHT = 4;
org_aswing_SoftBoxLayout.TOP = 1;
org_aswing_SoftBoxLayout.BOTTOM = 3;
org_aswing_VectorListModel.CASEINSENSITIVE = 1;
org_aswing_VectorListModel.DESCENDING = 2;
org_aswing_VectorListModel.UNIQUESORT = 4;
org_aswing_VectorListModel.RETURNINDEXEDARRAY = 8;
org_aswing_VectorListModel.NUMERIC = 16;
org_aswing_WindowLayout.TITLE = "Title";
org_aswing_WindowLayout.CONTENT = "Content";
org_aswing_border_BevelBorder.RAISED = 0;
org_aswing_border_BevelBorder.LOWERED = 1;
org_aswing_border_TitledBorder.DEFAULT_LINE_THICKNESS = 1;
org_aswing_border_TitledBorder.TOP = 1;
org_aswing_border_TitledBorder.BOTTOM = 3;
org_aswing_border_TitledBorder.CENTER = 0;
org_aswing_border_TitledBorder.LEFT = 2;
org_aswing_border_TitledBorder.RIGHT = 4;
org_aswing_border_TitledBorder.GAP = 1;
org_aswing_dnd_DragManager.TYPE_NONE = 0;
org_aswing_dnd_DragManager.TYPE_MOVE = 1;
org_aswing_dnd_DragManager.TYPE_COPY = 2;
org_aswing_dnd_DragManager.DEFAULT_DROP_MOTION = new org_aswing_dnd_DirectlyRemoveMotion();
org_aswing_dnd_DragManager.DEFAULT_REJECT_DROP_MOTION = new org_aswing_dnd_RejectedMotion();
org_aswing_dnd_DragManager.s_isDragging = false;
org_aswing_dnd_DragManager.root = null;
org_aswing_dnd_DragManager.listeners = [];
org_aswing_event_AWEvent.ACT = "act";
org_aswing_event_AWEvent.ACT_COMPLETE = "act_complete";
org_aswing_event_AWEvent.SHOWN = "shown";
org_aswing_event_AWEvent.HIDDEN = "hidden";
org_aswing_event_AWEvent.PAINT = "paint";
org_aswing_event_AWEvent.FOCUS_GAINED = "focusGained";
org_aswing_event_AWEvent.FOCUS_LOST = "focusLost";
org_aswing_event_ClickCountEvent.CLICK_COUNT = "clickCount";
org_aswing_event_ContainerEvent.COM_ADDED = "comAdded";
org_aswing_event_ContainerEvent.COM_REMOVED = "comRemoved";
org_aswing_event_DragAndDropEvent.DRAG_RECOGNIZED = "dragRecognized";
org_aswing_event_DragAndDropEvent.DRAG_START = "dragStart";
org_aswing_event_DragAndDropEvent.DRAG_ENTER = "dragEnter";
org_aswing_event_DragAndDropEvent.DRAG_OVERRING = "dragOverring";
org_aswing_event_DragAndDropEvent.DRAG_EXIT = "dragExit";
org_aswing_event_DragAndDropEvent.DRAG_DROP = "dragDrop";
org_aswing_event_FocusKeyEvent.FOCUS_KEY_DOWN = "focusKeyDown";
org_aswing_event_FocusKeyEvent.FOCUS_KEY_UP = "focusKeyUp";
org_aswing_event_InteractiveEvent.STATE_CHANGED = "stateChanged";
org_aswing_event_InteractiveEvent.SELECTION_CHANGED = "selectionChanged";
org_aswing_event_InteractiveEvent.SCROLL_CHANGED = "scrollChanged";
org_aswing_event_InteractiveEvent.TEXT_CHANGED = "textChanged";
org_aswing_event_FrameEvent.FRAME_ICONIFIED = "frameIconified";
org_aswing_event_FrameEvent.FRAME_RESTORED = "frameRestored";
org_aswing_event_FrameEvent.FRAME_MAXIMIZED = "frameMaximized";
org_aswing_event_FrameEvent.FRAME_ABILITY_CHANGED = "frameAbilityChanged";
org_aswing_event_FrameEvent.FRAME_CLOSING = "frameClosing";
org_aswing_event_ListItemEvent.ITEM_CLICK = "itemClick";
org_aswing_event_ListItemEvent.ITEM_DOUBLE_CLICK = "itemDoubleClick";
org_aswing_event_ListItemEvent.ITEM_MOUSE_DOWN = "itemMouseDown";
org_aswing_event_ListItemEvent.ITEM_ROLL_OVER = "itemRollOver";
org_aswing_event_ListItemEvent.ITEM_ROLL_OUT = "itemRollOut";
org_aswing_event_ListItemEvent.ITEM_RELEASE_OUT_SIDE = "itemReleaseOutSide";
org_aswing_event_MovedEvent.MOVED = "moved";
org_aswing_event_PopupEvent.POPUP_OPENED = "popupOpened";
org_aswing_event_PopupEvent.POPUP_CLOSED = "popupClosed";
org_aswing_event_PropertyChangeEvent.PROPERTY_CHANGE = "propertyChange";
org_aswing_event_ReleaseEvent.RELEASE = "release";
org_aswing_event_ReleaseEvent.RELEASE_OUT_SIDE = "releaseOutSide";
org_aswing_event_ResizedEvent.RESIZED = "resized";
org_aswing_event_ScrollPaneEvent.SCROLLBAR_STATE_CHANGED = "scrollbarStateChanged";
org_aswing_event_ScrollPaneEvent.VIEWPORT_CHANGED = "viewportChanged";
org_aswing_event_SelectionEvent.LIST_SELECTION_CHANGED = "listSelectionChanged";
org_aswing_event_SelectionEvent.ROW_SELECTION_CHANGED = "rowSelectionChanged";
org_aswing_event_SelectionEvent.COLUMN_SELECTION_CHANGED = "columnSelectionChanged";
org_aswing_event_TableCellEditEvent.EDITING_STARTED = "tableCellEditingStarted";
org_aswing_event_TableCellEditEvent.EDITING_CANCELED = "tableCellEditingCanceled";
org_aswing_event_TableCellEditEvent.EDITING_STOPPED = "tableCellEditingStopped";
org_aswing_event_TableModelEvent.INSERT = "insert";
org_aswing_event_TableModelEvent.UPDATE = "update";
org_aswing_event_TableModelEvent.DELETE = "delete";
org_aswing_event_TableModelEvent.HEADER_ROW = -1;
org_aswing_event_TableModelEvent.ALL_COLUMNS = -1;
org_aswing_event_ToolTipEvent.TIP_TEXT_CHANGED = "tipTextChanged";
org_aswing_event_ToolTipEvent.TIP_SHOWING = "tipShowing";
org_aswing_event_TreeCellEditEvent.EDITING_STARTED = "treeCellEditingStarted";
org_aswing_event_TreeCellEditEvent.EDITING_CANCELED = "treeCellEditingCanceled";
org_aswing_event_TreeCellEditEvent.EDITING_STOPPED = "treeCellEditingStopped";
org_aswing_event_TreeEvent.TREE_EXPANDED = "treeExpanded";
org_aswing_event_TreeEvent.TREE_COLLAPSED = "treeCollapsed";
org_aswing_event_TreeEvent.TREE_WILL_EXPAND = "treeWillExpand";
org_aswing_event_TreeEvent.TREE_WILL_COLLAPSE = "treeWillCollapse";
org_aswing_event_TreeSelectionEvent.TREE_SELECTION_CHANGED = "treeSelectionChanged";
org_aswing_event_WindowEvent.WINDOW_ACTIVATED = "windowActived";
org_aswing_event_WindowEvent.WINDOW_DEACTIVATED = "windowDeactived";
org_aswing_graphics_GradientBrush.LINEAR = openfl_display_GradientType.LINEAR;
org_aswing_graphics_GradientBrush.RADIAL = openfl_display_GradientType.RADIAL;
org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE = new org_aswing_plaf_DefaultEmptyDecoraterResource();
org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_BACKGROUND_COLOR = new org_aswing_plaf_ASColorUIResource(0);
org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_FOREGROUND_COLOR = new org_aswing_plaf_ASColorUIResource(16777215);
org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_MIDEGROUND_COLOR = new org_aswing_plaf_ASColorUIResource(1673215);
org_aswing_plaf_DefaultEmptyDecoraterResource.DEFAULT_STYLE_TUNE = new org_aswing_plaf_UIStyleTune();
org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_COLOR = new org_aswing_ASColor(0);
org_aswing_plaf_DefaultEmptyDecoraterResource.NULL_STYLE_TUNE = new org_aswing_StyleTune(0,0,0);
org_aswing_plaf_EmptyUIResources.BORDER = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
org_aswing_plaf_EmptyUIResources.ICON = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
org_aswing_plaf_EmptyUIResources.DECORATOR = org_aswing_plaf_DefaultEmptyDecoraterResource.INSTANCE;
org_aswing_plaf_EmptyUIResources.INSETS = new org_aswing_plaf_InsetsUIResource();
org_aswing_plaf_EmptyUIResources.COLOR = new org_aswing_plaf_ASColorUIResource();
org_aswing_plaf_EmptyUIResources.STYLE_TUNE = new org_aswing_plaf_UIStyleTune();
org_aswing_plaf_basic_BasicAccordionUI.MOTION_SPEED = 50;
org_aswing_plaf_basic_BasicGraphicsUtils.gradientRatio = [0,255];
org_aswing_plaf_basic_BasicGraphicsUtils.roundRectBtmFix = 0.5;
org_aswing_plaf_basic_BasicGraphicsUtils.sharedMatrix = new openfl_geom_Matrix();
org_aswing_plaf_basic_BasicLabelUI.viewRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicLabelUI.textRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_BasicLabelUI.iconRect = new org_aswing_geom_IntRectangle();
org_aswing_plaf_basic_DefaultMenuLayout.X_AXIS = 0;
org_aswing_plaf_basic_DefaultMenuLayout.Y_AXIS = 1;
org_aswing_plaf_basic_icon_TitleIcon.WIDTH = 16;
org_aswing_plaf_basic_icon_TitleIcon.HEIGHT = 12;
org_aswing_resizer_DefaultResizer.RESIZE_MC_WIDTH = 4;
org_aswing_table_JTableHeader.uiClassID = "TableHeaderUI";
org_aswing_table_TableColumn.COLUMN_WIDTH_PROPERTY = "columWidth";
org_aswing_table_TableColumn.HEADER_VALUE_PROPERTY = "headerValue";
org_aswing_table_TableColumn.HEADER_RENDERER_PROPERTY = "headerRenderer";
org_aswing_table_TableColumn.CELL_RENDERER_PROPERTY = "cellRenderer";
org_aswing_table_sorter_TableSorter.DESCENDING = -1;
org_aswing_table_sorter_TableSorter.NOT_SORTED = 0;
org_aswing_table_sorter_TableSorter.ASCENDING = 1;
org_aswing_table_sorter_TableSorter.inited = false;
org_aswing_tree_DefaultMutableTreeNode.AWML_INDEX = 0;
org_aswing_tree_DefaultTreeSelectionModel.SINGLE_TREE_SELECTION = 1;
org_aswing_tree_DefaultTreeSelectionModel.CONTIGUOUS_TREE_SELECTION = 2;
org_aswing_tree_DefaultTreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION = 4;
org_aswing_tree_DefaultTreeSelectionModel.SELECTION_MODE_PROPERTY = "selectionMode";
org_aswing_tree_DefaultTreeSelectionModel.ON_PROPERTY_CHANGED = "onPropertyChanged";
org_aswing_tree_DefaultTreeSelectionModel.ON_SELECTION_CHANGED = "onSelectionChanged";
org_aswing_util_ArrayList.CASEINSENSITIVE = 1;
org_aswing_util_ArrayList.DESCENDING = 2;
org_aswing_util_ArrayList.UNIQUESORT = 4;
org_aswing_util_ArrayList.RETURNINDEXEDARRAY = 8;
org_aswing_util_ArrayList.NUMERIC = 16;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
